{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"代码","path":"code","rule":"//图标函数\n$.exports.getIcon = function(content) {\n    let {\n        getHzm\n    } = $.require(\"hiker://page/code\")\n    let root = \"hiker://images/icon_folder3\";\n    if (content.isdir == 1) {\n        img = root\n    } else {\n        let files = 'mp4|mkv|avi|mov|rmvb|webm|flv|m4v|m3u8|ts|vob|wmv|m2ts|3gp|3g2'.split('|');  // 视频文件\n        let files1 = 'jpg|png|jpeg|gif|svg|raw|bmp|tiff|webp|ico|heic|psd'.split('|');          // 图片文件\n        let files2 = 'mp3|flac|ogg|m4a|wav|opus|aac|wma|alac|ape|dsf|dff'.split('|');           // 音频文件\n        let files3 = 'zip|rar|7z|tar|gz|bz2|xz|tar.gz|tar.bz2|tar.xz|pkg|deb|rpm'.split('|');   // 压缩包文件\n        let files4 = 'doc|docx|xls|xlsx|ppt|pptx|pdf|txt|md|rtf|odt|ods|odp|epub|mobi|azw|azw3|fb2|djvu|chm|log|csv|json|xml|yaml'.split('|');  // 文档文件\n        let fileName = content.server_filename\n        let hzm = getHzm(fileName); //log(hzm)\n        if (files.includes(hzm)) {\n            img = 'hiker://images/icon_video2'\n        } else if (files1.includes(hzm)) {\n            img = 'hiker://images/icon_pic3'\n        } else if (files2.includes(hzm)) {\n            img = 'hiker://images/icon_music3'\n        } else if (files3.includes(hzm)) {\n            img = 'hiker://images/icon_zip2'\n        } else if (files4.includes(hzm)) {\n            img = 'hiker://images/icon_txt2'\n        } else if (hzm.includes('apk')) {\n            img = 'hiker://images/icon_app3'\n        } else {\n            img = 'hiker://images/icon_unknown'\n        }\n    }\n    return img\n}\n//取文件后缀\n$.exports.getHzm = function(fileName) {\n    return fileName.substr(fileName.lastIndexOf(\".\") + 1)\n}\n//链接函数\n$.exports.getLink = function(ext, id, path, sc) {\n    return $().lazyRule((ext, id, path, sc) => {\n        if (getItem(\"BDUSS\", \"0\") == \"0\") {\n            if (getItem(\"jk\", \"0\") == \"1\") {\n                //joe佬的接口，已废弃\n                var res = JSON.parse(request(buildUrl(\"https://pan.baidu.com/api/filemetas\", {\n                    \"access_token\": getItem(\"access_token\"),\n                    \"dlink\": \"1\",\n                    \"web\": \"5\",\n                    \"origin\": \"dlna\",\n                    \"target\": `[\\\"${path}\\\"]`\n                }))).info[0].dlink\n            } else {\n                //joe佬的接口，已废弃\n                var res = JSON.parse(request(buildUrl(\"https://pan.baidu.com/rest/2.0/xpan/multimedia\", {\n                    \"access_token\": getItem(\"access_token\"),\n                    \"method\": \"filemetas\",\n                    \"fsids\": `[${id}]`,\n                    \"dlink\": \"1\"\n                }), {\n                    headers: {\n                        \"User-Agent\": \"pan.baidu.com\"\n                    }\n                })).list[0].dlink + \"&access_token=\" + getItem(\"access_token\")\n            }\n            if (ext == \"movie\") {\n                return JSON.stringify({\n                    urls: [res + \"#isVideo=true#\"],\n                    headers: {\n                        \"User-Agent\": \"pan.baidu.com\"\n                    }\n                })\n            } else if (ext == \"audio\") {\n                return JSON.stringify({\n                    urls: [res + \"#isMusic=true#\"],\n                    headers: {\n                        \"User-Agent\": \"pan.baidu.com\"\n                    }\n                })\n            } else if (ext == \"img\") {\n                return res + `#.jpg;{User-Agent@pan.baidu.com}`\n            } else {\n                return \"download://\" + res + `;{User-Agent@pan.baidu.com}`\n            }\n        } else {\n            if (ext == \"movie\") {\n                //播放接口来自百度网盘TV\n                var bdtvm = request('https://pan.baidu.com/api/mediainfo?type=M3U8_FLV_264_480&path='+encodeURIComponent(path)+'&clienttype=80&origin=dlna',{\n                    headers: {\n                        'Cookie': getItem(\"BDUSS\"), \n                        'User-Agent': 'netdisk;1.4.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;'\n                    },\n                    method: 'GET'\n                }); //log(bdtvm)\n                var restvm = JSON.parse(bdtvm).info.dlink; //log(restvm)\n                }\n                else {\n                    //下载接口来自百度网盘APP\n                var bdtvi = request('https://d.pcs.baidu.com/rest/2.0/pcs/file?app_id=250528&method=locatedownload&path='+encodeURIComponent(path)+'&clienttype=17&version=2.2.91.136&use=1',{\n                    headers: {\n                        'Cookie': getItem(\"BDUSS\"), \n                        'User-Agent': 'netdisk;P2SP;2.2.91.136;netdisk;11.30.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;'\n                    },\n                    method: 'GET'\n                }); //log(bdtvi)\n                var restvi = JSON.parse(bdtvi).urls[0].url; //log(restvi)\n            }\n            if (ext == \"movie\") {\n                let url2 = request(restvm,{\n                    headers: {\n                        \"User-Agent\": \"netdisk;1.4.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;\",\n                        \"Range\": \"bytes=0-0\"\n                    },\n                    method: 'GET',\n                    onlyHeaders:true\n                }); //log(url2)\n                let url = JSON.parse(url2).url\n                let u = startProxyServer($.toString(() => {\n                    let url = base64Decode(MY_PARAMS.url);\n                    //log(\"我在代理\" + url);\n                    return JSON.stringify({\n                        statusCode: 302,\n                        headers: {\n                            \"Location\": url\n                        }\n                    });\n                }));\n                if (sc.includes('删除')) {\n                const { shanchu } = $.require(\"hiker://page/code\")\n                shanchu(path)\n                }\n                return JSON.stringify({\n                    urls: [u + \"?url=\" + base64Encode(url) + \"#isVideo=true##fastPlayMode##threads=10#\"],\n                    headers: [{\"User-Agent\": \"netdisk;1.4.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;\"}]\n                });\n            } else if (ext == \"audio\") {\n                return JSON.stringify({\n                    urls: [restvi + \"#isMusic=true#\"]\n                })\n            } else if (ext == \"img\") {\n                return restvi + `#.jpg`\n            } else {\n                var fpath = (path.match(/\\//g) || []).length <= 1 ? \"软件\" : path.match(/\\/(.*)\\//)[1]\n                var restvi = (path.match(/\\//g) || []).length <= 1 ? restvi.replace('mt_scene','fpath='+fpath+'&mt_scene') : restvi; log(restvi)\n                return \"download://\" + restvi\n            }\n        }\n    }, ext, id, path, sc)\n}\n//by LoyDgIk 佬\n$.exports.bytesToSize = function(size) {\n    if (!size) {\n        return '0';\n    }\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    let i = 0;\n    while (size >= 1024) {\n        size /= 1024;\n        i++;\n    }\n    size = i ? Number(size.toFixed(2)) : size;\n    return `${size} ${units[i]}`;\n}\n//预览下载APK函数\n$.exports.ylxz = function(path, restvi) {\n    var bdtvi = request('https://d.pcs.baidu.com/rest/2.0/pcs/file?app_id=250528&method=locatedownload&path=' + encodeURIComponent(path) + '&clienttype=17&version=2.2.91.136&use=1', {\n        headers: {\n            'Cookie': getItem(\"BDUSS\"),\n            'User-Agent': 'netdisk;P2SP;2.2.91.136;netdisk;11.30.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;'\n        },\n        method: 'GET'\n    }); //log(bdtvi)\n    var restvi = JSON.parse(bdtvi).urls[0].url; //log(restvi)\n    var fpath = (path.match(/\\//g) || []).length <= 1 ? \"软件\" : path.match(/\\/(.*)\\//)[1]\n    var restvi = (path.match(/\\//g) || []).length <= 1 ? restvi.replace('mt_scene', 'fpath=' + fpath + '&mt_scene') : restvi;\n    log(restvi)\n    return $(restvi, \"下载地址\").input(() => {\n        var BaiduMultiThreadedDownloader = GM.defineModule(\"BaiduMultiThreadedDownloader\");\n        return BaiduMultiThreadedDownloader.downloadFile(input, \"/storage/emulated/0/Android/data/com.example.hikerview/files/Documents/download/\", null, {\n            headers: {\n                \"User-Agent\": \"netdisk;P2SP;2.2.91.136;netdisk;11.30.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;\",\n                \"Range\": \"0-1\"\n            },\n            threadCount: 6\n        }) ? \"toast://下载完成\" : \"toast://请等待下载结束\";\n    })\n}\n//文件转存函数\n$.exports.zhuancun = function(uk, shareid, fs_id, randsk) {\n    var html = request('https://pan.baidu.com/share/transfer', {\n        headers: {\n            'User-Agent': 'Android',\n            'Referer': 'https://pan.baidu.com',\n            'Cookie': getItem('BDUSS') + '; ' + 'BDCLND=' + randsk,\n        },\n        body: 'from='+uk+'&shareid='+shareid+'&ondup=newcopy&path=/我的资源/&fsidlist=['+fs_id+']',\n        method: 'POST'\n    }); //log(html)\n    var html1 = JSON.parse(html)\n    if (html1.errno == '0') {\n        toast('已转存')\n    } else {\n        toast(html1.show_msg)\n    }\n}\n//文件删除函数\n$.exports.shanchu = function(path) {\n    var html = request('https://pan.baidu.com/api/filemanager?opera=delete&clienttype=1', {\n        headers: {\n            'User-Agent': 'Android',\n            'Cookie': getItem('BDUSS')+'; '+getItem('STOKEN'),\n        },\n        body: 'filelist=[\"'+encodeURIComponent(path)+'\"]',\n        method: 'POST',\n        rejectCoding: true\n    }); //log(html)\n    var html1 = JSON.parse(html)\n    if (html1.errno == '0') {\n        toast('已删除')\n    } else {\n        toast('删除失败')\n    }\n}\n//文件重命名函数\n$.exports.chongmingming = function(path) {\n    return $(\"\", \"文件名加文件后缀\").input((path) => {\n        var taskid = JSON.parse(request('https://pan.baidu.com/api/filemanager?opera=rename&clienttype=1', {\n            headers: {\n                'User-Agent': 'Android',\n                'Cookie': getItem('BDUSS') + '; ' + getItem('STOKEN'),\n            },\n            body: 'filelist=[{\"path\":\"' + encodeURIComponent(path) + '\",\"newname\":\"' + input + '\"}]&async=2',\n            method: 'POST',\n            rejectCoding: true\n        })).taskid; //log(taskid)\n        var html = request('https://pan.baidu.com/api/taskquery?taskid=' + taskid + '&clienttype=1', {\n            headers: {\n                'User-Agent': 'Android',\n                'Cookie': getItem('BDUSS') + '; ' + getItem('STOKEN'),\n            },\n            method: 'POST'\n        }); //log(html)\n        var html1 = JSON.parse(html)\n        if (html1.errno == '0') {\n            toast('已重命名')\n        } else {\n            toast('重命名失败')\n        }\n    }, path)\n}\n//提取码函数\n$.exports.tqm = function() {\n    \n}"},{"col_type":"movie_3","name":"分享链接函数","path":"hanshu","rule":"js:\n//狗浩大佬提供\n//分享链接转码播放，接口来自百度网盘网页版pc ua\nfunction lazy(url, uk, shareid, fs_id, jsToken, randsk) {\n    return $().lazyRule((url, uk, shareid, fs_id, jsToken, randsk) => {\n        var surl = url.replace(/\\?pwd=.*/, '').match(/\\/s\\/(.*)/)[1]; //log(surl)\n        var header = {\n            'Cookie': getItem('BDUSS') + '; ' + getItem('STOKEN') + '; ' + 'BDCLND=' + randsk,\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'\n        }\n        var url31 = 'https://pan.baidu.com/share/tplconfig?surl=' + surl + '&fields=cfrom_id,Espace_info,card_info,sign,timestamp'\n        var html31 = request(url31, {\n            headers: header,\n            method: 'GET'\n        }); //log(html31)\n        var html32 = JSON.parse(html31).data\n        var timestamp = html32.timestamp; //log(timestamp)\n        var sign = html32.sign; //log(sign)\n        var play480 = 'https://pan.baidu.com/share/streaming?uk=' + uk + '&fid=' + fs_id + '&sign=' + sign + '&timestamp=' + timestamp + '&shareid=' + shareid + '&type=M3U8_AUTO_480&jsToken=' + jsToken; log(play480)\n        var play720 = 'https://pan.baidu.com/share/streaming?uk=' + uk + '&fid=' + fs_id + '&sign=' + sign + '&timestamp=' + timestamp + '&shareid=' + shareid + '&type=M3U8_AUTO_720&jsToken=' + jsToken; //log(play720)\n        var play1080 = 'https://pan.baidu.com/share/streaming?uk=' + uk + '&fid=' + fs_id + '&sign=' + sign + '&timestamp=' + timestamp + '&shareid=' + shareid + '&type=M3U8_AUTO_1080&jsToken=' + jsToken; //log(play1080)\n        var play2K = 'https://pan.baidu.com/share/streaming?uk=' + uk + '&fid=' + fs_id + '&sign=' + sign + '&timestamp=' + timestamp + '&shareid=' + shareid + '&type=M3U8_AUTO_2K&jsToken=' + jsToken; //log(play2K)\n        var play4K = 'https://pan.baidu.com/share/streaming?uk=' + uk + '&fid=' + fs_id + '&sign=' + sign + '&timestamp=' + timestamp + '&shareid=' + shareid + '&type=M3U8_AUTO_4K&jsToken=' + jsToken; //log(play4K)\n\n        return JSON.stringify({\n            urls: [play1080, play4K, play2K, play720, play480 + '#isVideo=true#'],\n            names: ['1080P', '4K', '2K', '720P', '480P'],\n            headers: [header, header, header, header, header]\n        })\n    }, url, uk, shareid, fs_id, jsToken, randsk)\n}\n\n//查看分享链接文件\nfunction fxlj(url, uk, shareid, fs_id, jsToken, randsk, path) {\n    try {\n        var d = []\n        var url1 = url\n        const {\n            getIcon,\n            getHzm,\n            getLink,\n            bytesToSize,\n            zhuancun\n        } = $.require(\"hiker://page/code\")\n        let paths = storage0.getMyVar(\"pathss\", [{\n            path: path,\n            name: \"家\"\n        }])\n        paths.forEach((item, i) => {\n            d.push({\n                title: item.name,\n                url: $(\"#noLoading#\").lazyRule((paths, i) => {\n                    storage0.putMyVar(\"pathss\", paths.slice(0, i + 1))\n                    refreshPage()\n                    return \"hiker://empty\"\n                }, paths, i),\n                col_type: \"scroll_button\"\n            })\n        })\n        let res = JSON.parse(request('https://pan.baidu.com/share/list?uk=' + uk + '&shareid=' + shareid + '&dir=' + encodeURIComponent(paths[paths.length - 1].path), {\n            headers: {\n                'Cookie': 'BDCLND=' + randsk,\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'\n            }\n        })); //log(res)\n        res.list.forEach(item => {\n            var title = item.server_filename\n            var fs_id = item.fs_id; //log(fs_id)\n            if (item.isdir == 1) {\n                var url = $().lazyRule((item, paths) => {\n                    paths.push({\n                        path: item.path,\n                        name: item.server_filename\n                    })\n                    storage0.putMyVar(\"pathss\", paths)\n                    refreshPage()\n                    return \"hiker://empty\"\n                }, item, paths)\n            } else if ([\"mp4\", \"mkv\", \"avi\", \"mov\", \"rmvb\", \"webm\", \"flv\", \"m4v\", \"m3u8\", \"ts\", \"vob\", \"wmv\", \"m2ts\", \"3gp\", \"3g2\"].includes(getHzm(item.server_filename))) {\n                var url = $.require('hanshu?rule=百度网盘').lazy(url1, uk, shareid, fs_id, jsToken, randsk)\n            } else {\n                var url = '' //getLink(\"\", fs_id, item.path)\n            }\n            d.push({\n                title: title,\n                desc: item.size != 0 ? bytesToSize(item.size) : \"\",\n                img: getIcon(item),\n                url: url,\n                col_type: \"avatar\",\n                extra: {\n                    longClick: [{\n                        title: '转存播放',\n                        js: $.toString((uk, shareid, fs_id, randsk, title) => {\n                            const {\n                                getLink,\n                                zhuancun\n                            } = $.require(\"hiker://page/code\")\n                            zhuancun(uk, shareid, fs_id, randsk)\n                            return getLink(\"movie\", fs_id, '/我的资源/' + title, '删除')\n                        }, uk, shareid, fs_id, randsk, title)\n                    }, {\n                        title: '转存',\n                        js: $.toString((uk, shareid, fs_id, randsk) => {\n                            const {\n                                zhuancun\n                            } = $.require(\"hiker://page/code\")\n                            zhuancun(uk, shareid, fs_id, randsk)\n                        }, uk, shareid, fs_id, randsk)\n                    }]\n                }\n            })\n        })\n        setResult(d)\n    } catch (e) {\n        log(e.message)\n        toast(\"出现错误，请查看日志\")\n    }\n}\n\n//获取查看分享链接文件所需要的参数\nfunction bdwp() {\n    try {\n        if (getMyVar(\"bdwpfxlj\").includes('baidu')) {\n            var url = getMyVar(\"bdwpfxlj\"); log(url)\n            var html11 = request(url, {\n                headers: {\n                    Cookie: '#noCookie#'\n                },\n                method: 'HEAD',\n                onlyHeaders: true\n            }); //log(html11)\n            var url11 = JSON.parse(html11).url; //log(url11)\n            var html21 = request('https://pan.baidu.com/share/verify?surl=' + url11.split('?surl=')[1].split('&pwd=')[0], {\n                headers: {\n                    Referer: url11\n                },\n                body: 'pwd=' + url11.split('&pwd=')[1] + '&vcode=&vcode_str=',\n                method: 'POST'\n            }); //log(html21)\n            var randsk = JSON.parse(html21).randsk; //log(randsk)\n            var html31 = request(url, {\n                headers: {\n                    'Cookie': getItem('BDUSS') + '; ' + getItem('STOKEN') + '; ' + 'BDCLND=' + randsk,\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'\n                },\n                method: 'GET',\n                redirect: false\n            }); //log(html31)\n            var html32 = html31.match(/locals\\.mset\\((.*)\\)/)[1]; //log(html32)\n            var html33 = JSON.parse(html32);\n            var file_list = html33.file_list; //log(file_list)\n            var isdir = file_list[0].isdir; //log(isdir)\n            var uk = html33.share_uk; //log(uk)\n            var shareid = html33.shareid; //log(shareid)\n            var fs_id = file_list[0].fs_id; //log(fs_id)\n            var path = file_list[0].path; //log(path)\n            var jsToken = html31.split(\"jsToken%20%3D%20a%7D%3Bfn%28%22\")[1].split(\"%22%29'))\")[0]; //log(jsToken)\n            var bdstoken = html33.bdstoken; //log(bdstoken)\n            if (isdir == 1) {\n                file_list.forEach(item => {\n                    var fs_id = item.fs_id; //log(fs_id)\n                    var path = item.path; //log(path)\n                    d.push({\n                        title: item.server_filename,\n                        img: \"hiker://images/icon_folder3\",\n                        url: $().rule((url, uk, shareid, fs_id, jsToken, randsk, path) => {\n                            $.require('hanshu?rule=百度网盘').fxlj(url, uk, shareid, fs_id, jsToken, randsk, path)\n                        }, url, uk, shareid, fs_id, jsToken, randsk, path),\n                        col_type: 'avatar',\n                        extra: {\n                            pageTitle: file_list[0].server_filename\n                        }\n                    })\n                })\n            } else {\n                file_list.forEach(item => {\n                    var title = item.server_filename\n                    var fs_id = item.fs_id; //log(fs_id)\n                    d.push({\n                        title: title,\n                        img: 'https://pannss.bdstatic.com/m-static/base/static/images/favicon.ico',\n                        url: $(fs_id).lazyRule((url, uk, shareid, jsToken, randsk) => {\n                            var fs_id = input\n                            return $.require('hanshu?rule=百度网盘').lazy(url, uk, shareid, fs_id, jsToken, randsk)\n                        }, url, uk, shareid, jsToken, randsk),\n                        col_type: 'avatar',\n                        extra: {\n                            longClick: [{\n                                title: '转存播放',\n                                js: $.toString((uk, shareid, fs_id, randsk, title) => {\n                                    const {\n                                        getLink,\n                                        zhuancun\n                                    } = $.require(\"hiker://page/code\")\n                                    zhuancun(uk, shareid, fs_id, randsk)\n                                    return getLink(\"movie\", fs_id, '/我的资源/' + title, '删除')\n                                }, uk, shareid, fs_id, randsk, title)\n                            }, {\n                                title: '转存',\n                                js: $.toString((uk, shareid, fs_id, randsk) => {\n                                    const {\n                                        zhuancun\n                                    } = $.require(\"hiker://page/code\")\n                                    zhuancun(uk, shareid, fs_id, randsk)\n                                }, uk, shareid, fs_id, randsk)\n                            }]\n                        }\n                    })\n                })\n            }\n        }\n    } catch (e) {\n        log(e.message)\n        //用于出现报错后随便发送一个请求以刷新缓存页面\n        request('file:///android_asset/home/index.html')\n        clearMyVar(\"bdwpfxlj\")\n        clearMyVar('pathss')\n    }\n}\n\n$.exports = {\n    lazy,\n    fxlj,\n    bdwp\n}"},{"col_type":"movie_3","name":"账号","path":"account","rule":"//by LoyDgIk 佬\n$.exports = $([\"网页登录\", \"扫码登录\", \"Cookie登录\", \"复制Cookie\", \"清除Cookie\"]).select((isr) => {\n    if (input === \"网页登录\") {\n        return \"hiker://page/wydl#noRecordHistory##noHistory#\";\n    }\n    if (input === \"Cookie登录\") {\n    return $(\"\", \"填写获取到的Cookie\").input(() => {\n        if (!input.includes(\"AAAA\")) {\n            return \"toast://Cookie错误\"\n        } else {\n            if (input.includes(\"BDUSS=\")) {\n                var BDUSS = input.match(/(BDUSS=.*?);/)[1]; log(BDUSS)\n                setItem(\"BDUSS\", BDUSS)\n                toast(\"BDUSS设置成功\")\n            }\n            if(input.includes(\"STOKEN=\")) {\n                var STOKEN = input.match(/STOKEN=\\w*/)[0]; log(STOKEN)\n                setItem(\"STOKEN\", STOKEN)\n                toast(\"STOKEN设置成功\")\n            }\n            back()\n        }\n    })\n    }\n    if (input === \"复制Cookie\") {\n        copy(getItem('BDUSS')+'; '+getItem('STOKEN'))\n    }\n    if (input === \"清除Cookie\") {\n        writeFile('hiker://files/cache/bdwp_cookie.txt', '')\n        clearItem(\"BDUSS\")\n        clearItem(\"STOKEN\")\n        clearItem(\"PTOKEN\")\n        back()\n        return \"toast://Cookie已清除\"\n    }\n    //道长群嗷呜大佬提供\n    function generateRandomUUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0,\n                v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n    if (input === \"扫码登录\") {\n        return $(\"hiker://empty\").rule((generateRandomUUID) => {\n            try {\n                \n                function getjson(data) {\n                    let start_idx = data.indexOf('(') + 1;\n                    let end_idx = data.lastIndexOf(')');\n                    if (start_idx > 0 && end_idx > 0) {\n                        let json_str = data.substring(start_idx, end_idx);                 \n                        json_str = json_str.replaceAll('&quot;','\"').replaceAll(\"'\", '\"')                               \n                        let json_obj = JSON.parse(json_str)\n                        return json_obj\n                    }\n                }\n                let ljurl = 'https://passport.baidu.com/v2/api/getqrcode'\n                let usurl = 'https://passport.baidu.com/channel/unicast'\n                let sturl = 'https://passport.baidu.com/v3/login/main/qrbdusslogin'\n                let sturl1 = 'https://passport.baidu.com/v3/login/api/auth/?return_type=5&tpl=netdisk&u=https://pan.baidu.com/disk/home'\n                let request_id = generateRandomUUID();\n                let t3 = new Date().getTime().toString()\n                let t1 = Math.floor(new Date().getTime() / 1000).toString()\n                let headers = {\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.6478.61 Chrome/126.0.6478.61 Not/A)Brand/8  Safari/537.36',\n                    'sec-ch-ua-platform': '\"Windows\"',\n                    'sec-ch-ua': '\"Not/A)Brand\";v=\"8\", \"Chromium\";v=\"126\", \"Google Chrome\";v=\"126\"',\n                    'DNT': '1',\n                    'sec-ch-ua-mobile': '?0',\n                    'Sec-Fetch-Site': 'same-site',\n                    'Sec-Fetch-Mode': 'no-cors',\n                    'Sec-Fetch-Dest': 'script',\n                    'Referer': 'https://pan.baidu.com/',\n                    'Accept-Language': 'zh-CN,zh;q=0.9',\n                }\n                // 获取二维码链接\n                let guidt = t3\n                let ljparams = {\n                    'lp': 'pc',\n                    'qrloginfrom': 'pc',\n                    'gid': request_id,\n                    'callback': `tangram_guid_${t3}`,\n                    'apiver': 'v3',\n                    'tt': t3,\n                    'tpl': 'netdisk',\n                    'logPage': `traceId:pc_loginv5_${t1},logPage:loginv5`,\n                    '_': t3\n                }\n                let qrdata = getjson(fetch(buildUrl(ljurl, ljparams), {\n                    headers: headers\n                }))\n                let qrurl = qrdata.imgurl\n                let channel_id = qrdata.sign\n                let q = []\n                q.push({\n                    url: $(`https://${qrurl}#.jpg`, headers).image(),\n                    col_type: \"pic_1_full\",\n                    pic_url:$(`https://${qrurl}`, headers).image(),\n                });\n                setResult(q);\n                // createQRCode(`https://${qrurl}`, false);\n                // 获取bduss\n                let bduss = \"\";\n                for (let i = 0, ec = 0; i < 30; i++) {\n                    java.lang.Thread.sleep(2000);\n                    try {\n                        let usparams = {\n                            'channel_id': channel_id,\n                            'gid': request_id,\n                            'tpl': 'netdisk',\n                            '_sdkFrom': '1',\n                            'callback': `tangram_guid_${guidt}`,\n                            'apiver': 'v3',\n                            'tt': t3,\n                            '_': t3,\n                        }\n                        let usdata = getjson(fetch(buildUrl(usurl, usparams), {\n                            headers: headers\n                        }))\n                        if (usdata.channel_v) {\n                            let bddata = JSON.parse(usdata.channel_v);\n                            if (bddata.v) {                                \n                                bduss = bddata.v                                \n                                break;\n                            }\n                            continue\n                        }\n                    } catch (e) {\n                        ec++;\n                        if (ec >= 5) {\n                            return \"toast://查询二维码出错\";\n                        }\n                    }\n                }\n                let stparams = {\n                    'v': t3,\n                    'bduss': bduss,\n                    'u': 'https://pan.baidu.com/disk/main%23/index?category%3Dall',\n                    'loginVersion': 'v5',\n                    'qrcode': '1',\n                    'tpl': 'netdisk',\n                    'maskId': '',\n                    'fileId': '',\n                    'apiver': 'v3',\n                    'tt': t3,\n                    'traceid': '',\n                    'time': t1,\n                    'alg': 'v3',\n                    'elapsed': '1',\n                    'callback': 'bd__cbs__tro4ll'\n                }\n                // 获取cookie\n                let stdata = getjson(fetch(buildUrl(sturl, stparams), {\n                    headers: headers\n                }))\n                if (stdata.data && stdata.data.session) {\n                    let cdata = stdata.data.session;                    \n                    let bduss = cdata.bduss\n                    log('获取bduss:'+bduss)\n                    setItem(\"BDUSS\", \"BDUSS=\"+cdata.bduss);\n                    let stoken = cdata.stoken\n                    let ptoken = cdata.ptoken\n                    let ubi = encodeURIComponent(cdata.ubi)\n                    let cookies = {\n                        'newlogin': '1',\n                        'UBI': ubi,\n                        'STOKEN': stoken,\n                        'BDUSS': bduss,\n                        'PTOKEN': ptoken,\n                        'BDUSS_BFESS': bduss,\n                        'STOKEN_BFESS': stoken,\n                        'PTOKEN_BFESS': ptoken,\n                        'UBI_BFESS': ubi,\n                    }\n                    function buildk(params) {\n                        return Object.keys(params)\n                          .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n                          .join(';');\n                      }\n                    headers.Cookie=buildk(cookies)\n                    let data=fetch(sturl1,{headers:headers,onlyHeaders:true,redirect:false})\n                    let lur=JSON.parse(data).headers.location[0]\n                    let ldata=fetch(lur,{headers:headers,onlyHeaders:true,redirect:false})\n                    let ck=JSON.parse(ldata).headers['set-cookie']\n                    let stokenCookie = ck.find(c => c.toLowerCase().includes('stoken'))\n                    stokenCookie=stokenCookie.split(';')[0].split('=')[1]\n                    log('获取stoken:'+stokenCookie)\n                    setItem(\"STOKEN\", \"STOKEN=\"+stokenCookie);\n                }\n                back();\n            } catch (e) {\n                toast(\"登录失败：\" + e.toString());\n                back(false);\n            }\n        }, generateRandomUUID);\n    }\n}, $.importParam);"},{"col_type":"movie_3","name":"网页登录","path":"wydl","rule":"js:\n\nlet d = [];\nsetPageTitle(\"登录账号\");\nd.push({\n    title: \"““确认登录””\",\n    url: $(\"#noLoading#\").lazyRule(() => {\n        var bdwp_cookie = request(\"hiker://files/cache/bdwp_cookie.txt\") || \"\"; //log(bdwp_cookie)\n        var header = {\n                \"User-Agent\": \"Android\",\n                \"Referer\": \"https://pan.baidu.com/\",\n                \"Cookie\": bdwp_cookie,\n            }\n        var html = request(\"https://wappass.baidu.com/v3/login/api/auth?notjump=1&return_type=5&tpl=netdisk&u=https://pan.baidu.com/buy/ad/home?useCanvas=1&pathname=/share_wap\", {\n            headers: header,\n            method: \"GET\",\n            redirect:false,\n            onlyHeaders:true\n        }); //log(html)\n        var url = JSON.parse(html).headers.location[0]; //log(url)\n        var html = request(url, {\n            headers: header,\n            method: \"GET\",\n            redirect:false,\n            onlyHeaders:true\n        }); //log(html)\n        var setcookie = JSON.parse(html).headers[\"set-cookie\"].toString(); //log(setcookie)\n        if (bdwp_cookie.includes(\"BDUSS=\")) {\n            if (bdwp_cookie.includes(\"BDUSS=\")) {\n                var BDUSS = bdwp_cookie.match(/(BDUSS=.*?);/)[1]; log(BDUSS)\n                setItem(\"BDUSS\", BDUSS)\n                //log(\"BDUSS设置成功\")\n            }\n            if (setcookie.includes(\"STOKEN=\")) {\n                var STOKEN = setcookie.match(/STOKEN=\\w*/)[0]; log(STOKEN)\n                setItem(\"STOKEN\", STOKEN)\n                //log(\"STOKEN设置成功\")\n            }\n        }\n        back();\n        toast(\"登录成功\")\n        return \"hiker://empty\";\n    }),\n    desc: \"““””<small>点击头像可以退出账号重新登录</small>\",\n    col_type: \"text_center_1\"\n});\nd.push({\n    col_type: \"line_blank\"\n});\nlet url = 'https://wappass.baidu.com/passport?login&authsite=1&tpl=netdisk&overseas=1&regdomestic=1&smsLoginLink=1&display=mobile&u=https://pan.baidu.com/wap/home?loginform=pass&realName=1&wapBehaviorLog=wap_click_welcome_login&branchType=SMSlogin#/one_key_h5_new'\nd.push({\n    col_type: 'x5_webview_single',\n    url: url,\n    desc: 'list&&screen-150',\n    extra: {\n        ua: 'Android',\n        js: $.toString((url) => {\n            function check() {\n                var co = fba.getCookie(url); console.log(co)\n                if (co.includes('STOKEN=')) {\n                    fba.parseLazyRule($$$().lazyRule((co) => {\n                        writeFile('hiker://files/cache/bdwp_cookie.txt', co);\n                        toast('Cookie获取成功，请确认登陆')\n                    }, co));\n                } else {\n                    setTimeout(check, 500);\n                }\n            }\n            check();\n        }, url)\n    }\n})\n\nsetResult(d)"},{"col_type":"movie_3","name":"百度下载器","path":"BaiduMultiThreadedDownloader","rule":"//by LoyDgIk 佬\nconst Files = java.nio.file.Files;\nconst Paths = java.nio.file.Paths;\nconst BufferedInputStream = java.io.BufferedInputStream\nconst BufferedOutputStream = java.io.BufferedOutputStream\nconst FileOutputStream = java.io.FileOutputStream;\n//const java.util.ArrayList;\n//const java.util.List;\nconst ExecutorService = java.util.concurrent.ExecutorService;\nconst Executors = java.util.concurrent.Executors;\nconst TimeUnit = java.util.concurrent.TimeUnit\nconst Runnable = java.lang.Runnable;\nconst AtomicBoolean = java.util.concurrent.atomic.AtomicBoolean;\nconst URL = java.net.URL;\nconst Long = java.lang.Long;\n\nconst OkGo = com.lzy.okgo.OkGo;\nconst HttpsUtils = com.lzy.okgo.https.HttpsUtils;\nconst Arrays = java.util.Arrays;\nconst Comparator = java.util.Comparator;\nconst BUFFER_SIZE = 4096;\nconst File = java.io.File;\nconst Thread = java.lang.Thread;\nconst RandomAccessFile = java.io.RandomAccessFile;\nconst OkHttpClient = Packages.okhttp3.OkHttpClient;\nconst FileInputStream=java.io.FileInputStream;\n/**\n * 使用多线程分块下载文件，支持自定义 Headers，并将分块先写入临时文件，再合并。\n *\n * @param url         文件下载地址\n * @param outputPath  文件最终保存路径\n * @param chunkSize   每个线程下载的分块大小（单位：字节）\n * @param threadCount 下载使用的线程数\n * @param retryCount  每个分块下载失败的最大重试次数\n * @param headers     需要添加到请求中的自定义请求头（可为 null 表示不需要）\n */\nfunction downloadFile(\n    url,\n    outputPath,\n    filename,\n    config\n) {\n    let {\n        chunkSize,\n        threadCount,\n        retryCount,\n        headers\n    } = config || {};\n    let head = headers || {};\n    chunkSize = chunkSize || 2 * 1024 * 1024;\n    threadCount = threadCount || 4;\n    retryCount = retryCount || 3;\n    headers = new java.util.concurrent.ConcurrentHashMap();\n    for (let k in head) {\n        headers.put(k, head[k]);\n    }\n    let executorService = Executors.newFixedThreadPool(threadCount);\n    \n    let futures = []\n    \n    let downloadFailed = new AtomicBoolean(false);\n\n    \n    let fileSize;\n    try {\n        let fileinfo = getFileInfo(url, head);\n        fileSize = fileinfo.size;\n        filename = filename || fileinfo.name || md5(url);\n        if (!fileSize || Number.isNaN(fileSize)) {\n            throw Error(\"文件大小获取失败\");\n        }\n    } catch (e) {\n        log(\"获取文件大小失败: \" + e.toString());\n        executorService.shutdownNow();\n        return;\n    }\n    if (fileSize <= 0) {\n        log(\"无法获取文件大小或文件大小为0，下载终止。\");\n        executorService.shutdownNow();\n        return;\n    }\n    outputPath = outputPath + \"/\" + filename;\n\n    let tempDir = new File(outputPath + \".tmp\");\n    if (!tempDir.exists()) {\n        tempDir.mkdir();\n    }\n\n    let chunkCount = Math.ceil(fileSize / chunkSize);\n    let offset = 0;\n    for (let i = 0; i < chunkCount; i++) {\n        // 起始位置\n        let start = offset;\n        // 结束位置（最后一个线程可能到 fileSize - 1 ）\n        let end = (i == chunkCount - 1) ? (fileSize - 1) : (offset + chunkSize - 1);\n        offset = end + 1;\n\n        \n        let tempFile = new File(tempDir, \"chunk_\" + start + \"_\" + end + \".tmp\");\n\n        \n        let finalStart = start;\n        let finalEnd = end;\n        let finalTempFile = tempFile;\n\n        let future = executorService.submit(new Runnable(() => {\n            let attempts = 0;\n            let success = false;\n\n            while (!downloadFailed.get() && attempts < retryCount && !success) {\n                try {\n                    downloadChunk(url, finalStart, finalEnd, finalTempFile, headers);\n                    success = true;\n                } catch (e) {\n                    attempts++;\n                    log(\"线程 \" + Thread.currentThread().getName() +\n                        \" 下载分块 [\" + finalStart + \" - \" + finalEnd + \"] 失败，重试 \" +\n                        attempts + \"/\" + retryCount + \"，原因：\" + e.toString());\n                    if (attempts >= retryCount) {\n                        // 标记整个下载过程失败\n                        downloadFailed.set(true);\n                        // 抛出异常，终止当前任务\n                        throw new Error(\"线程 \" + Thread.currentThread().getName() +\n                            \" 超出最大重试次数，下载失败。Error:\" + e.toString());\n                    }\n                }\n            }\n            return null;\n        }));\n        futures.push(future);\n    }\n\n    \n    try {\n        for (let f of futures) {\n            f.get(); // 如果有异常，会在这里抛出\n        }\n    } catch (e) {\n        log(\"执行下载任务时出现异常: \" + e.toString());\n        downloadFailed.set(true);\n    } finally {\n        // 关闭线程池\n        executorService.shutdownNow();\n    }\n\n    // 合并分块文件\n    if (!downloadFailed.get()) {\n        mergeChunks(tempDir, outputPath);\n        // 删除临时文件夹及其中的文件\n        deleteTempFiles(tempDir);\n        log(\"文件下载并合并完成，保存路径：\" + outputPath);\n    } else {\n        // 如果下载失败，清空临时目录\n        deleteTempFiles(tempDir);\n        log(\"下载失败，临时文件已删除。\");\n    }\n}\n\nfunction getFileInfo(url, headers) {\n    let head = JSON.parse(fetch(url, {\n        headers: Object.assign({}, headers),\n        onlyHeaders: true,\n        method: \"HEAD\"\n    })).headers;\n    Object.keys(head).forEach(v => {\n        head[v] = head[v][0];\n    });\n    let fileinfo = {\n        md5: head[\"content-md5\"],\n        size: Number(head[\"x-bs-file-size\"] || head[\"content-length\"]),\n        name: /filename=\"(.*?)\"/.test(head[\"content-disposition\"]) ? RegExp.$1 : \"\"\n    };\n    return fileinfo;\n}\n\nfunction mergeChunks(tempDir, outputPath) {\n    let outputFile = new File(outputPath);\n    let raf = null;\n    try {\n        let raf = new RandomAccessFile(outputFile, \"rw\");\n\n        let chunkFiles = tempDir.listFiles(new java.io.FilenameFilter((dir, name) => name.endsWith(\".tmp\")));\n        if (chunkFiles == null) {\n            throw new Error(\"无法获取临时文件夹中的分块文件。\");\n        }\n\n        Arrays.sort(chunkFiles, Comparator.comparingLong(file => {\n            let name = file.getName();\n            let start = Long.parseLong(name.split(\"_\")[1]);\n            return start;\n        }));\n\n\n        for (let chunkFile of chunkFiles) {\n            let fis, bis;\n            try {\n                let fis = new FileInputStream(chunkFile);\n                let bis = new BufferedInputStream(fis);\n\n                let buffer = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, BUFFER_SIZE);\n                let len;\n                while ((len = bis.read(buffer)) != -1) {\n                    raf.write(buffer, 0, len);\n                }\n            } finally {\n                fis && fis.close();\n                bis && bis.close();\n            }\n        }\n    } catch (e) {\n        log(\"合并分块文件时出错：\" + e.toString());\n    } finally {\n        raf && raf.close();\n    }\n}\nconst downloadClient = new OkHttpClient.Builder()\n    .connectTimeout(30, TimeUnit.SECONDS)\n    .readTimeout(50, TimeUnit.SECONDS)\n    .writeTimeout(40, TimeUnit.SECONDS)\n    .sslSocketFactory(HttpsUtils.getSslSocketFactory().sSLSocketFactory, HttpsUtils.UnSafeTrustManager)\n    .hostnameVerifier(HttpsUtils.UnSafeHostnameVerifier)\n    .build();\n\nfunction downloadChunk(\n    url,\n    start,\n    end,\n    tempFile,\n    headers\n) {\n\n    let request = OkGo.get(url);\n    // 如果有自定义 Headers，则添加\n    if (headers != null) {\n        for (let entry of headers.entrySet()) {\n            request.headers(entry.getKey(), entry.getValue());\n        }\n    }\n    //log(Object.keys(request))\n    request.headers(\"Range\", \"bytes=\" + start + \"-\" + end);\n    request.client(downloadClient);\n    // 执行同步请求，获取响应\n    let response = request.execute();\n    if (response == null || ~~(response.code() / 100) != 2) {\n        log(~~(response.code() / 100))\n        throw new Error(\"服务器返回异常，HTTP code = \" +\n            (response == null ? \"null\" : response.code()));\n    }\n\n    // 将响应体写入临时文件\n    let is = null,\n        bis = null,\n        fos = null;\n    try {\n        is = response.body();\n        bis = new BufferedInputStream(is.byteStream());\n        fos = new FileOutputStream(tempFile);\n\n        let buffer = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, BUFFER_SIZE);\n        let len;\n        while ((len = bis.read(buffer)) != -1) {\n            fos.write(buffer, 0, len);\n        }\n    } finally {\n        is && is.close();\n        bis && bis.close();\n        fos && fos.close();\n    }\n}\n\nfunction deleteTempFiles(tempDir) {\n    if (tempDir.exists() && tempDir.isDirectory()) {\n        for (let file of tempDir.listFiles() || []) {\n            file.delete();\n        }\n        tempDir.delete();\n    }\n}\nlet isDownload = false;\n$.exports.downloadFile = function(url,\n    outputPath,\n    filename,\n    config) {\n    if (isDownload) return false;\n    isDownload=true;\n    downloadFile(url,\n        outputPath,\n        filename,\n        config);\n    isDownload=false;\n    return true;\n}\n"},{"col_type":"movie_3","name":"分享链接","path":"login","rule":"js:\nvar d = [];\n/*\nd.push({\n    title: \"token说明：输入token后才能查看到自己网盘的文件\",\n    col_type: \"rich_text\"\n})\nd.push({\n    title: \"获取token\",\n    url: \"https://wappass.baidu.com/passport?login&authsite=1&tpl=netdisk&overseas=1&regdomestic=1&smsLoginLink=1&display=mobile&u=https://pan.baidu.com/wap/home?loginform=pass&realName=1&wapBehaviorLog=wap_click_welcome_login&branchType=SMSlogin#/insert_account\",\n    col_type: \"text_2\"\n})\nd.push({\n    title: \"输入token\",\n    url: $(\"\", \"填写获取到的token\").input(() => {\n        let res = JSON.parse(request(buildUrl(\"https://openapi.baidu.com/oauth/2.0/token\", {\n            \"grant_type\": \"refresh_token\",\n            \"refresh_token\": input,\n            \"client_id\": \"iYCeC9g08h5vuP9UqvPHKKSVrKFXGa1v\",\n            \"client_secret\": \"jXiFMOPVPCWlO2M5CwWQzffpNPaGTRBG\"\n        })))\n        if (!res.access_token) {\n            log(res)\n            return \"toast://错误！！！\"\n        } else {\n            setItem(\"access_token\", res.access_token)\n            setItem(\"refresh_token\", res.refresh_token)\n            back()\n        }\n    }),\n    col_type: \"text_2\"\n})\nd.push({\n    col_type: \"line\"\n})\nd.push({\n    title: \"选择接口：\" + (getItem(\"jk\", \"0\") == \"0\" ? \"官方接口：不是vip会限速，稳定\" : \"第三方接口：不限速，不稳定\"),\n    url: $().lazyRule(() => {\n        setItem(\"jk\", getItem(\"jk\", \"0\") == \"0\" ? \"1\" : \"0\")\n        refreshPage()\n        return \"hiker://empty\"\n    }),\n    col_type: \"text_center_1\"\n})\n*/\nd.push({\n    title: \"帮助文档\",\n    url: $().rule(() => {\n        var d = []\n        setPageTitle(\"帮助文档\");\n        d.push({\n            title: JSON.parse(request('hiker://page/helpDoc')).rule,\n            col_type: 'rich_text'\n        });\n        setResult(d)\n    }),\n    col_type: \"text_center_1\"\n})\nd.push({\n    title: \"百度网盘分享链接说明：输入百度网盘分享链接（不支持自己盘内的分享链接）后可直接转码播放视频文件，原画播放可长按视频文件选择转存播放\",\n    url: \"hiker://empty\",\n    col_type: \"text_center_1\"\n})\nd.push({\n    col_type: \"line\"\n})\nd.push({\n    title: \"输入百度网盘分享链接\",\n    url: $(\"\", \"输入百度网盘分享链接\").input(() => {\n        clearMyVar(\"bdwpfxlj\")\n        clearMyVar(\"pathss\")\n        if (input.includes(\"baidu\")) {\n            if (input.includes(\"surl=\")) {\n                putMyVar(\"bdwpfxlj\", \"https://pan.baidu.com/s/1\" + input.match(/surl=(.*?pwd=\\w{4})/)[1])\n            } else if (input.includes(\"pwd=\")) {\n                putMyVar(\"bdwpfxlj\", input.match(/http.*?pwd=\\w{4}/)[0])\n            } else if (input.includes(\"提取码\")) {\n                putMyVar(\"bdwpfxlj\", input.match(/http.*\\w/)[0] + '?pwd=' + input.match(/提取码.*(\\w{4})/)[1])\n            } else {\n                putMyVar(\"bdwpfxlj\", input.match(/http.*\\w/)[0])\n            }\n            refreshPage()\n        } else {\n            refreshPage()\n        }\n    }),\n    col_type: \"text_center_1\"\n})\nif (getParam(\"realurl\", \"\") != \"\") {\n    clearMyVar(\"pathss\")\n    var dyurl = decodeURIComponent(getParam(\"realurl\")); //log(dyurl)\n    if (dyurl.includes(\"baidu\")) {\n        if (dyurl.includes(\"surl=\")) {\n            putMyVar(\"bdwpfxlj\", \"https://pan.baidu.com/s/1\" + dyurl.match(/surl=(.*?pwd=\\w{4})/)[1])\n        } else if (dyurl.includes(\"pwd=\")) {\n            putMyVar(\"bdwpfxlj\", dyurl.match(/http.*?pwd=\\w{4}/)[0])\n        } else {\n            d.push({\n                title: \"输入提取码\",\n                url: $(\"\", \"提取码\").input((dyurl)=>{                    \n                    putMyVar(\"bdwpfxlj\", dyurl.match(/http.*\\w/)[0] + '?pwd=' + input)\n                    refreshPage()\n                },dyurl),\n                col_type: \"text_center_1\"\n            })\n        }\n    }\n}\n$.require('hanshu?rule=百度网盘').bdwp()\nsetResult(d);"},{"col_type":"movie_3","name":"帮助文档","path":"helpDoc","rule":"<h5 style=\"text-align: center;\">帮助文档</h5>\n<div>\n<strong>特别感谢：</strong><br/>\nJoe，你们可以叫我狗浩啊，LoyDgIk，道长群嗷呜\n<p>\n<strong>网盘内文件：</strong><br/>\n默认：原画播放视频文件，播放音频文件，查看图片文件，下载50M以下的其他类型文件（50M以上的其他类型文件可尝试长按文件选择预览下载APK下载）。<br/>\n长按文件：可选择删除，重命名，预览下载APK。<br/>\n预览下载APK：50M以上的其他类型文件可尝试长按文件选择预览下载APK下载（该功能不支持在共存版海阔上使用）。<br/>\n<a href=\"https://img.vinua.cn/image/IMG-20250201-165014.PzdN7\"><img src=\"https://img.vinua.cn/images/PzdN7.jpg\" alt=\"IMG 20250201 165014\" border=\"0\"></a>\n</p>\n<p>\n<p>\n<strong>分享链接文件：</strong><br/>\n默认：转码播放视频文件。<br/>\n长按文件：可选择转存播放，转存。<br/>\n<a href=\"https://img.vinua.cn/image/IMG-20250201-165123.Pz8BU\"><img src=\"https://img.vinua.cn/images/Pz8BU.jpg\" alt=\"IMG 20250201 165123\" border=\"0\"></a>\n<a href=\"https://img.vinua.cn/image/IMG-20250201-165043.Pzt0D\"><img src=\"https://img.vinua.cn/images/Pzt0D.jpg\" alt=\"IMG 20250201 165043\" border=\"0\"></a>\n</p>\n</div>"},{"col_type":"movie_3","name":"GA&GM","path":"GA&GM.js","rule":"//by LoyDgIk 佬\nconst JavaMap = java.util.HashMap;\nconst globalMapSymbol = Symbol(\"globalMap\");\nconst mapSymbol = Symbol(\"myJavaMap\");\nconst selfSymbol = Symbol(\"selfKey\");\n\nfunction getTypeName(obj) {\n    return Object.prototype.toString.call(obj);\n}\n\nconst protoDic = new Map([\n    [\"[object Array]\", Array],\n    [\"[object Date]\", Date],\n    [\"[object Object]\", Object],\n    [\"[object Promise]\", Promise],\n    [\"[object Map]\", Map],\n    [\"[object Symbol]\", Symbol],\n    [\"[object Array]\", Array],\n    [\"[object Function]\", Function],\n    [\"Error\", Error],\n    [\"TypeError\", TypeError],\n    [\"EvalError\", EvalError],\n    [\"SyntaxError\", SyntaxError],\n    [\"ReferenceError\", ReferenceError],\n    [\"RangeError\", RangeError]\n]);\n\nfunction dealWithVal(val) {\n    let typeName = getTypeName(val);\n    let errorName;\n    if (val instanceof java.lang.String) {\n        return String(val);\n    } else if (val instanceof java.lang.Double) {\n        return Number(val);\n    } else if (val instanceof java.lang.Boolean) {\n        if (String(val) === \"true\") {\n            val = true;\n        } else {\n            val = false;\n        }\n        return val;\n    } else if (typeName === \"[object Error]\" && protoDic.has((errorName = val.toString()))) {\n        val.__proto__ = val.__proto__ && Object.assign(Object.create(protoDic.get(typeName).prototype), val.__proto__);\n        return val;\n    } else if (typeName !== \"[object javaObject]\" && protoDic.has(typeName)) {\n        val.__proto__ = val.__proto__ && Object.assign(Object.create(protoDic.get(typeName).prototype), val.__proto__);\n        return val;\n    }\n    return val;\n}\n\nfunction isString(str) {\n    return typeof(str) === \"string\" || str instanceof java.lang.String;\n}\n\nfunction GlobalVar(javaMap, selfKey) {\n    this[globalMapSymbol] = javaMap;\n    this[selfSymbol] = selfKey;\n    this.raw = false;\n}\nObject.assign(GlobalVar.prototype, {\n    getHashMap(symbol) {\n        if (symbol !== mapSymbol) return null;\n        if (this[mapSymbol]) return this[mapSymbol];\n        let selfKey = this[selfSymbol];\n        if (!selfKey) {\n            throw Error(\"当前没有全局环境，请使用setSelfKey指定规则名\");\n        }\n        this[mapSymbol] = this[globalMapSymbol];\n        return this[mapSymbol];\n    },\n    setSelfKey(key) {\n        //if (!this[selfSymbol]) this[selfSymbol] = key;\n        this[selfSymbol] = key;\n    },\n    getSelfKey(){\n        return this[selfSymbol];\n    },\n    getMapKey(key) {\n        return String(this[selfSymbol] + key);\n    },\n    get(key, def) {\n        key = this.getMapKey(key);\n        let hashMap = this.getHashMap(mapSymbol);\n        if (!hashMap.containsKey(key)) return def;\n        let val = hashMap.get(key);\n        if (this.raw) {\n            return val;\n        } else {\n            return dealWithVal(val);\n        }\n    },\n    getRaw(key, def) {\n        key = this.getMapKey(key);\n        let hashMap = this.getHashMap(mapSymbol);\n        if (!hashMap.containsKey(key)) return def;\n        return hashMap.get(key);\n    },\n    useRaw(noUseRaw) {\n        this.raw = !noUseRaw;\n        return this;\n    },\n    put(key, val) {\n        if (val === void 0) return;\n        let hashMap = this.getHashMap(mapSymbol);\n        hashMap.put(this.getMapKey(key), val);\n        return val;\n    },\n    clearAll() {\n        let self = this[selfSymbol];\n        let hashMap = this.getHashMap(mapSymbol);\n        this.getHashMap(mapSymbol).forEach((key, value) => {\n            if (isString(key) && String(key).startsWith(self)) {\n                hashMap.remove(key);\n            }\n        });\n    },\n    clear(key, call) {\n        if (this.hasButNoCall(key)) {\n            let hashMap = this.getHashMap(mapSymbol);\n            if (typeof call === \"function\") {\n                call(this.get(key));\n            }\n            hashMap.remove(this.getMapKey(key));\n        }\n    },\n    has(key, call) {\n        let mapKey = this.getMapKey(key);\n        let hashMap = this.getHashMap(mapSymbol);\n        let res = !!hashMap.containsKey(mapKey);\n        if (res && typeof call === \"function\") {\n            call(this.get(key));\n        }\n        return res;\n    },\n    hasButNoCall(key) {\n        let mapKey = this.getMapKey(key);\n        let hashMap = this.getHashMap(mapSymbol);\n        return !!hashMap.containsKey(mapKey);\n    },\n    define(key, val) {\n        if (this.hasButNoCall(key)) {\n            return this.get(key);\n        }\n        return this.put(key, val);\n    },\n    defineLazy(key, lazy) {\n        if (this.hasButNoCall(key)) {\n            return this.get(key);\n        }\n        return this.put(key, lazy());\n    },\n    defineModule(key, path, isNew) {\n        if(path===undefined){\n            path=key;\n        }\n        if (isNew) return this.put(key, $.require(path, key));\n        return this.defineLazy(key, () => $.require(path, key));\n    },\n    listKeys() {\n        let entrySet = this.getHashMap(mapSymbol).entrySet();\n        let selfKey = this[selfSymbol];\n        let keys = [];\n\n        for (let entry of entrySet) {\n            let key = entry.getKey();\n            if (isString(key) && key.startsWith(selfKey)) {\n                keys.push(String(key).replace(selfKey, \"\"));\n            }\n        }\n        return keys;\n    },\n    toJSON() {\n        let object = {};\n        let hashMap = this.getHashMap(mapSymbol);\n        let selfKey = this[selfSymbol];\n        hashMap.forEach((key, value) => {\n            if (!isString(key)) {\n                return;\n            }\n            let keyString = String(key);\n            if (keyString.startsWith(selfKey)) {\n                object[keyString.replace(selfKey, \"\")] = hashMap.get(key);\n            }\n        });\n        return object;\n    }\n});\nGlobalVar.prototype[Symbol.iterator] = function() {\n    let hashMap = this.getHashMap(mapSymbol);\n    let selfKey = this[selfSymbol];\n    let iterator = hashMap.entrySet().iterator();\n    return (function*() {\n        while (iterator.hasNext()) {\n            let me = iterator.next();\n            let key = me.getKey();\n            if (!isString(key)) {\n                continue;\n            }\n            key = String(key);\n            if (key.startsWith(selfKey)) {\n                yield [key.replace(selfKey, \"\"), dealWithVal(me.getValue())];\n            }\n        }\n    })();\n}\n\nconst GlobalMap = _globalMap;\n//_globalMap = void 0;\nlet RuleGlobalMapKey = (typeof MY_RULE !== \"undefined\"&&MY_RULE) ? MY_RULE.title : \"\";\nlet AppGlobalMapKey = \"AppGlobalMap\";\nif (RuleGlobalMapKey === AppGlobalMapKey) {\n    let randomKey = \"\";\n    if (GlobalMap.containsKey(0)) {\n        randomKey = String(GlobalMap.get(0));\n    } else {\n        randomKey = String(Date.now());\n        GlobalMap.put(0, randomKey);\n    }\n    RuleGlobalMapKey = RuleGlobalMapKey + randomKey;\n}\n$.exports = {\n    GA: new GlobalVar(GlobalMap, AppGlobalMapKey),\n    GM: new GlobalVar(GlobalMap, RuleGlobalMapKey)\n}"}],"title":"百度网盘","author":"zhao","version":1,"type":"video","url":"hiker://empty","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\n//仅供学习，请于导入24小时内删除\nif (getItem(\"first\") == MY_RULE.version) {\n    var d = [];\n    d.push({\n        title: \"分享链接\",\n        pic_url: \"hiker://images/icon_search6\",\n        url: \"hiker://page/login?#noHistory##cacheOnly#\",\n        col_type: \"icon_2_round\",\n        extra: {\n            pageTitle: \"百度网盘分享链接\"\n        }\n    })\n    d.push({\n        title: \"账号设置\",\n        url: $.require(\"account\", true),\n        pic_url: \"hiker://images/icon_setting6\",\n        col_type: \"icon_2_round\"\n    })\n    if (getItem(\"BDUSS\", \"\") != \"\") {\n        try {\n            const {\n                getIcon,\n                getHzm,\n                getLink,\n                bytesToSize\n            } = $.require(\"hiker://page/code\")\n            let paths = storage0.getMyVar(\"paths\", [{\n                path: \"/\",\n                name: \"家\"\n            }])\n            paths.forEach((item, i) => {\n                d.push({\n                    title: item.name,\n                    url: $(\"#noLoading#\").lazyRule((paths, i) => {\n                        storage0.putMyVar(\"paths\", paths.slice(0, i + 1))\n                        refreshPage()\n                        return \"hiker://empty\"\n                    }, paths, i),\n                    col_type: \"scroll_button\"\n                })\n            })\n            let res = JSON.parse(request(\"https://pan.baidu.com/api/list?dir=\" + encodeURIComponent(paths[paths.length - 1].path), {\n                headers: {\n                    \"User-Agent\": \"Android\",\n                    \"Cookie\": getItem(\"BDUSS\")\n                },\n                method: \"GET\"\n            }))\n            res.list.forEach(item => {\n                if (item.isdir == 1) {\n                    var url = $().lazyRule((item, paths) => {\n                        paths.push({\n                            path: item.path,\n                            name: item.server_filename\n                        })\n                        storage0.putMyVar(\"paths\", paths)\n                        refreshPage()\n                        return \"hiker://empty\"\n                    }, item, paths)\n                } else if ($.movie.includes(getHzm(item.server_filename))) {\n                    var url = getLink(\"movie\", item.fs_id, item.path, \"\")\n                } else if ($.audio.includes(getHzm(item.server_filename))) {\n                    var url = getLink(\"audio\", item.fs_id, item.path)\n                } else if ($.img.includes(getHzm(item.server_filename))) {\n                    var url = getLink(\"img\", item.fs_id, item.path)\n                } else {\n                    var url = getLink(\"\", item.fs_id, item.path)\n                }\n                d.push({\n                    title: item.server_filename,\n                    desc: item.size != 0 ? bytesToSize(item.size) : \"\",\n                    img: getIcon(item),\n                    url: url,\n                    col_type: \"avatar\",\n                    extra: {\n                        longClick: [{\n                            title: '删除',\n                            js: $.toString((item) => {\n                                return $.require(\"hiker://page/code\").shanchu(item.path)\n                            }, item)\n                        }, {\n                            title: '重命名',\n                            js: $.toString((item) => {\n                                return $.require(\"hiker://page/code\").chongmingming(item.path)\n                            }, item)\n                        }, {\n                            title: '预览下载APK',\n                            js: $.toString((item) => {\n                                return $.require(\"hiker://page/code\").ylxz(item.path)\n                            }, item)\n                        }]\n                    }\n                })\n            })\n        } catch (e) {\n            log(e.message)\n            toast(\"出现错误，请查看日志\")\n        }\n    } else {\n        d.push({\n            title: JSON.parse(request('hiker://page/helpDoc')).rule,\n            col_type: 'rich_text'\n        });\n    }\n    setResult(d);\n} else if (MY_PAGE === 1) {\n    let d = []\n    let time = getItem(\"first\", \"\") ? 3 : 6;\n    let id = Date.now();\n    d.push({\n        title: \"““””<strong>使用前须知</strong>\".big(),\n        col_type: \"text_center_1\",\n        url: \"hiker://empty\",\n        extra: {\n            lineVisible: false\n        }\n    });\n    d.push({\n        title: \"<b>0. 在登陆账号后使用本小程序造成的任何账号问题均由使用者本人自行承担。</b><br>1. 本小程序所有代码全部开源，且本规则为学习目的，请于导入24小时内删除！！！<br>2. 本小程序<b>完全免费</b>，如果你是付费购买的恭喜你被骗了。<br><br><b>开始使用本规则即代表遵守规则条例</b><br>当前版本：\" + MY_RULE.version,\n        \"col_type\": \"rich_text\"\n    }, {\n        col_type: \"line\"\n    }, {\n        title: time + \"秒后继续\",\n        url: \"toast://请认真阅读以上内容\",\n        col_type: \"text_center_1\",\n        extra: {\n            id: id + \"timer\"\n        }\n    });\n    setResult(d);\n    while (time != 0) {\n        java.lang.Thread.sleep(1000);\n        time -= 1;\n        updateItem(id + \"timer\", {\n            title: time + \"秒后继续\"\n        });\n    }\n    updateItem(id + \"timer\", {\n        title: \"““我同意以上要求””\",\n        url: $(\"#noLoading#\").lazyRule((v) => {\n            setItem(\"first\", String(v));\n            refreshPage();\n            return \"toast://感谢您的理解\";\n        }, MY_RULE.version),\n        col_type: \"text_center_1\"\n    });\n}","searchFind":"","search_url":"","group":"④网盘","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"/*<$>\n@include start\nhiker://page/GA&GM.js\n@include end\n<$>*/\n$.extend({\n    audio: [\n        \"mp3\", \"flac\", \"ogg\", \"m4a\", \"wav\", \"opus\", \"aac\", \"wma\", \"alac\", \"ape\", \"dsf\", \"dff\"\n    ],\n    movie: [\n        \"mp4\", \"mkv\", \"avi\", \"mov\", \"rmvb\", \"webm\", \"flv\", \"m4v\", \"m3u8\", \"ts\", \"vob\", \"wmv\", \"m2ts\", \"3gp\", \"3g2\"\n    ],\n    img: [\n        \"jpg\", \"png\", \"jpeg\", \"gif\", \"svg\", \"raw\", \"bmp\", \"tiff\", \"webp\", \"ico\", \"heic\", \"psd\"\n    ],\n    zip: [\n        \"zip\", \"rar\", \"7z\", \"tar\", \"gz\", \"bz2\", \"xz\", \"tar.gz\", \"tar.bz2\", \"tar.xz\", \"pkg\", \"deb\", \"rpm\"\n    ],\n    document: [\n        \"doc\", \"docx\", \"xls\", \"xlsx\", \"ppt\", \"pptx\", \"pdf\", \"txt\", \"md\", \"rtf\", \"odt\", \"ods\", \"odp\", \n        \"epub\", \"mobi\", \"azw\", \"azw3\", \"fb2\", \"djvu\", \"chm\", \"log\", \"csv\", \"json\", \"xml\", \"yaml\"\n    ]\n})","pages":"[{\"col_type\":\"movie_3\",\"name\":\"代码\",\"path\":\"code\",\"rule\":\"//图标函数\\n$.exports.getIcon = function(content) {\\n    let {\\n        getHzm\\n    } = $.require(\\\"hiker://page/code\\\")\\n    let root = \\\"hiker://images/icon_folder3\\\";\\n    if (content.isdir == 1) {\\n        img = root\\n    } else {\\n        let files = 'mp4|mkv|avi|mov|rmvb|webm|flv|m4v|m3u8|ts|vob|wmv|m2ts|3gp|3g2'.split('|');  // 视频文件\\n        let files1 = 'jpg|png|jpeg|gif|svg|raw|bmp|tiff|webp|ico|heic|psd'.split('|');          // 图片文件\\n        let files2 = 'mp3|flac|ogg|m4a|wav|opus|aac|wma|alac|ape|dsf|dff'.split('|');           // 音频文件\\n        let files3 = 'zip|rar|7z|tar|gz|bz2|xz|tar.gz|tar.bz2|tar.xz|pkg|deb|rpm'.split('|');   // 压缩包文件\\n        let files4 = 'doc|docx|xls|xlsx|ppt|pptx|pdf|txt|md|rtf|odt|ods|odp|epub|mobi|azw|azw3|fb2|djvu|chm|log|csv|json|xml|yaml'.split('|');  // 文档文件\\n        let fileName = content.server_filename\\n        let hzm = getHzm(fileName); //log(hzm)\\n        if (files.includes(hzm)) {\\n            img = 'hiker://images/icon_video2'\\n        } else if (files1.includes(hzm)) {\\n            img = 'hiker://images/icon_pic3'\\n        } else if (files2.includes(hzm)) {\\n            img = 'hiker://images/icon_music3'\\n        } else if (files3.includes(hzm)) {\\n            img = 'hiker://images/icon_zip2'\\n        } else if (files4.includes(hzm)) {\\n            img = 'hiker://images/icon_txt2'\\n        } else if (hzm.includes('apk')) {\\n            img = 'hiker://images/icon_app3'\\n        } else {\\n            img = 'hiker://images/icon_unknown'\\n        }\\n    }\\n    return img\\n}\\n//取文件后缀\\n$.exports.getHzm = function(fileName) {\\n    return fileName.substr(fileName.lastIndexOf(\\\".\\\") + 1)\\n}\\n//链接函数\\n$.exports.getLink = function(ext, id, path, sc) {\\n    return $().lazyRule((ext, id, path, sc) => {\\n        if (getItem(\\\"BDUSS\\\", \\\"0\\\") == \\\"0\\\") {\\n            if (getItem(\\\"jk\\\", \\\"0\\\") == \\\"1\\\") {\\n                //joe佬的接口，已废弃\\n                var res = JSON.parse(request(buildUrl(\\\"https://pan.baidu.com/api/filemetas\\\", {\\n                    \\\"access_token\\\": getItem(\\\"access_token\\\"),\\n                    \\\"dlink\\\": \\\"1\\\",\\n                    \\\"web\\\": \\\"5\\\",\\n                    \\\"origin\\\": \\\"dlna\\\",\\n                    \\\"target\\\": `[\\\\\\\"${path}\\\\\\\"]`\\n                }))).info[0].dlink\\n            } else {\\n                //joe佬的接口，已废弃\\n                var res = JSON.parse(request(buildUrl(\\\"https://pan.baidu.com/rest/2.0/xpan/multimedia\\\", {\\n                    \\\"access_token\\\": getItem(\\\"access_token\\\"),\\n                    \\\"method\\\": \\\"filemetas\\\",\\n                    \\\"fsids\\\": `[${id}]`,\\n                    \\\"dlink\\\": \\\"1\\\"\\n                }), {\\n                    headers: {\\n                        \\\"User-Agent\\\": \\\"pan.baidu.com\\\"\\n                    }\\n                })).list[0].dlink + \\\"&access_token=\\\" + getItem(\\\"access_token\\\")\\n            }\\n            if (ext == \\\"movie\\\") {\\n                return JSON.stringify({\\n                    urls: [res + \\\"#isVideo=true#\\\"],\\n                    headers: {\\n                        \\\"User-Agent\\\": \\\"pan.baidu.com\\\"\\n                    }\\n                })\\n            } else if (ext == \\\"audio\\\") {\\n                return JSON.stringify({\\n                    urls: [res + \\\"#isMusic=true#\\\"],\\n                    headers: {\\n                        \\\"User-Agent\\\": \\\"pan.baidu.com\\\"\\n                    }\\n                })\\n            } else if (ext == \\\"img\\\") {\\n                return res + `#.jpg;{User-Agent@pan.baidu.com}`\\n            } else {\\n                return \\\"download://\\\" + res + `;{User-Agent@pan.baidu.com}`\\n            }\\n        } else {\\n            if (ext == \\\"movie\\\") {\\n                //播放接口来自百度网盘TV\\n                var bdtvm = request('https://pan.baidu.com/api/mediainfo?type=M3U8_FLV_264_480&path='+encodeURIComponent(path)+'&clienttype=80&origin=dlna',{\\n                    headers: {\\n                        'Cookie': getItem(\\\"BDUSS\\\"), \\n                        'User-Agent': 'netdisk;1.4.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;'\\n                    },\\n                    method: 'GET'\\n                }); //log(bdtvm)\\n                var restvm = JSON.parse(bdtvm).info.dlink; //log(restvm)\\n                }\\n                else {\\n                    //下载接口来自百度网盘APP\\n                var bdtvi = request('https://d.pcs.baidu.com/rest/2.0/pcs/file?app_id=250528&method=locatedownload&path='+encodeURIComponent(path)+'&clienttype=17&version=2.2.91.136&use=1',{\\n                    headers: {\\n                        'Cookie': getItem(\\\"BDUSS\\\"), \\n                        'User-Agent': 'netdisk;P2SP;2.2.91.136;netdisk;11.30.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;'\\n                    },\\n                    method: 'GET'\\n                }); //log(bdtvi)\\n                var restvi = JSON.parse(bdtvi).urls[0].url; //log(restvi)\\n            }\\n            if (ext == \\\"movie\\\") {\\n                let url2 = request(restvm,{\\n                    headers: {\\n                        \\\"User-Agent\\\": \\\"netdisk;1.4.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;\\\",\\n                        \\\"Range\\\": \\\"bytes=0-0\\\"\\n                    },\\n                    method: 'GET',\\n                    onlyHeaders:true\\n                }); //log(url2)\\n                let url = JSON.parse(url2).url\\n                let u = startProxyServer($.toString(() => {\\n                    let url = base64Decode(MY_PARAMS.url);\\n                    //log(\\\"我在代理\\\" + url);\\n                    return JSON.stringify({\\n                        statusCode: 302,\\n                        headers: {\\n                            \\\"Location\\\": url\\n                        }\\n                    });\\n                }));\\n                if (sc.includes('删除')) {\\n                const { shanchu } = $.require(\\\"hiker://page/code\\\")\\n                shanchu(path)\\n                }\\n                return JSON.stringify({\\n                    urls: [u + \\\"?url=\\\" + base64Encode(url) + \\\"#isVideo=true##fastPlayMode##threads=10#\\\"],\\n                    headers: [{\\\"User-Agent\\\": \\\"netdisk;1.4.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;\\\"}]\\n                });\\n            } else if (ext == \\\"audio\\\") {\\n                return JSON.stringify({\\n                    urls: [restvi + \\\"#isMusic=true#\\\"]\\n                })\\n            } else if (ext == \\\"img\\\") {\\n                return restvi + `#.jpg`\\n            } else {\\n                var fpath = (path.match(/\\\\//g) || []).length <= 1 ? \\\"软件\\\" : path.match(/\\\\/(.*)\\\\//)[1]\\n                var restvi = (path.match(/\\\\//g) || []).length <= 1 ? restvi.replace('mt_scene','fpath='+fpath+'&mt_scene') : restvi; log(restvi)\\n                return \\\"download://\\\" + restvi\\n            }\\n        }\\n    }, ext, id, path, sc)\\n}\\n//by LoyDgIk 佬\\n$.exports.bytesToSize = function(size) {\\n    if (!size) {\\n        return '0';\\n    }\\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\\n    let i = 0;\\n    while (size >= 1024) {\\n        size /= 1024;\\n        i++;\\n    }\\n    size = i ? Number(size.toFixed(2)) : size;\\n    return `${size} ${units[i]}`;\\n}\\n//预览下载APK函数\\n$.exports.ylxz = function(path, restvi) {\\n    var bdtvi = request('https://d.pcs.baidu.com/rest/2.0/pcs/file?app_id=250528&method=locatedownload&path=' + encodeURIComponent(path) + '&clienttype=17&version=2.2.91.136&use=1', {\\n        headers: {\\n            'Cookie': getItem(\\\"BDUSS\\\"),\\n            'User-Agent': 'netdisk;P2SP;2.2.91.136;netdisk;11.30.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;'\\n        },\\n        method: 'GET'\\n    }); //log(bdtvi)\\n    var restvi = JSON.parse(bdtvi).urls[0].url; //log(restvi)\\n    var fpath = (path.match(/\\\\//g) || []).length <= 1 ? \\\"软件\\\" : path.match(/\\\\/(.*)\\\\//)[1]\\n    var restvi = (path.match(/\\\\//g) || []).length <= 1 ? restvi.replace('mt_scene', 'fpath=' + fpath + '&mt_scene') : restvi;\\n    log(restvi)\\n    return $(restvi, \\\"下载地址\\\").input(() => {\\n        var BaiduMultiThreadedDownloader = GM.defineModule(\\\"BaiduMultiThreadedDownloader\\\");\\n        return BaiduMultiThreadedDownloader.downloadFile(input, \\\"/storage/emulated/0/Android/data/com.example.hikerview/files/Documents/download/\\\", null, {\\n            headers: {\\n                \\\"User-Agent\\\": \\\"netdisk;P2SP;2.2.91.136;netdisk;11.30.2;22021211RC;android-android;12;JSbridge4.4.0;jointBridge;1.1.0;\\\",\\n                \\\"Range\\\": \\\"0-1\\\"\\n            },\\n            threadCount: 6\\n        }) ? \\\"toast://下载完成\\\" : \\\"toast://请等待下载结束\\\";\\n    })\\n}\\n//文件转存函数\\n$.exports.zhuancun = function(uk, shareid, fs_id, randsk) {\\n    var html = request('https://pan.baidu.com/share/transfer', {\\n        headers: {\\n            'User-Agent': 'Android',\\n            'Referer': 'https://pan.baidu.com',\\n            'Cookie': getItem('BDUSS') + '; ' + 'BDCLND=' + randsk,\\n        },\\n        body: 'from='+uk+'&shareid='+shareid+'&ondup=newcopy&path=/我的资源/&fsidlist=['+fs_id+']',\\n        method: 'POST'\\n    }); //log(html)\\n    var html1 = JSON.parse(html)\\n    if (html1.errno == '0') {\\n        toast('已转存')\\n    } else {\\n        toast(html1.show_msg)\\n    }\\n}\\n//文件删除函数\\n$.exports.shanchu = function(path) {\\n    var html = request('https://pan.baidu.com/api/filemanager?opera=delete&clienttype=1', {\\n        headers: {\\n            'User-Agent': 'Android',\\n            'Cookie': getItem('BDUSS')+'; '+getItem('STOKEN'),\\n        },\\n        body: 'filelist=[\\\"'+encodeURIComponent(path)+'\\\"]',\\n        method: 'POST',\\n        rejectCoding: true\\n    }); //log(html)\\n    var html1 = JSON.parse(html)\\n    if (html1.errno == '0') {\\n        toast('已删除')\\n    } else {\\n        toast('删除失败')\\n    }\\n}\\n//文件重命名函数\\n$.exports.chongmingming = function(path) {\\n    return $(\\\"\\\", \\\"文件名加文件后缀\\\").input((path) => {\\n        var taskid = JSON.parse(request('https://pan.baidu.com/api/filemanager?opera=rename&clienttype=1', {\\n            headers: {\\n                'User-Agent': 'Android',\\n                'Cookie': getItem('BDUSS') + '; ' + getItem('STOKEN'),\\n            },\\n            body: 'filelist=[{\\\"path\\\":\\\"' + encodeURIComponent(path) + '\\\",\\\"newname\\\":\\\"' + input + '\\\"}]&async=2',\\n            method: 'POST',\\n            rejectCoding: true\\n        })).taskid; //log(taskid)\\n        var html = request('https://pan.baidu.com/api/taskquery?taskid=' + taskid + '&clienttype=1', {\\n            headers: {\\n                'User-Agent': 'Android',\\n                'Cookie': getItem('BDUSS') + '; ' + getItem('STOKEN'),\\n            },\\n            method: 'POST'\\n        }); //log(html)\\n        var html1 = JSON.parse(html)\\n        if (html1.errno == '0') {\\n            toast('已重命名')\\n        } else {\\n            toast('重命名失败')\\n        }\\n    }, path)\\n}\\n//提取码函数\\n$.exports.tqm = function() {\\n    \\n}\"},{\"col_type\":\"movie_3\",\"name\":\"分享链接函数\",\"path\":\"hanshu\",\"rule\":\"js:\\n//狗浩大佬提供\\n//分享链接转码播放，接口来自百度网盘网页版pc ua\\nfunction lazy(url, uk, shareid, fs_id, jsToken, randsk) {\\n    return $().lazyRule((url, uk, shareid, fs_id, jsToken, randsk) => {\\n        var surl = url.replace(/\\\\?pwd=.*/, '').match(/\\\\/s\\\\/(.*)/)[1]; //log(surl)\\n        var header = {\\n            'Cookie': getItem('BDUSS') + '; ' + getItem('STOKEN') + '; ' + 'BDCLND=' + randsk,\\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'\\n        }\\n        var url31 = 'https://pan.baidu.com/share/tplconfig?surl=' + surl + '&fields=cfrom_id,Espace_info,card_info,sign,timestamp'\\n        var html31 = request(url31, {\\n            headers: header,\\n            method: 'GET'\\n        }); //log(html31)\\n        var html32 = JSON.parse(html31).data\\n        var timestamp = html32.timestamp; //log(timestamp)\\n        var sign = html32.sign; //log(sign)\\n        var play480 = 'https://pan.baidu.com/share/streaming?uk=' + uk + '&fid=' + fs_id + '&sign=' + sign + '&timestamp=' + timestamp + '&shareid=' + shareid + '&type=M3U8_AUTO_480&jsToken=' + jsToken; log(play480)\\n        var play720 = 'https://pan.baidu.com/share/streaming?uk=' + uk + '&fid=' + fs_id + '&sign=' + sign + '&timestamp=' + timestamp + '&shareid=' + shareid + '&type=M3U8_AUTO_720&jsToken=' + jsToken; //log(play720)\\n        var play1080 = 'https://pan.baidu.com/share/streaming?uk=' + uk + '&fid=' + fs_id + '&sign=' + sign + '&timestamp=' + timestamp + '&shareid=' + shareid + '&type=M3U8_AUTO_1080&jsToken=' + jsToken; //log(play1080)\\n        var play2K = 'https://pan.baidu.com/share/streaming?uk=' + uk + '&fid=' + fs_id + '&sign=' + sign + '&timestamp=' + timestamp + '&shareid=' + shareid + '&type=M3U8_AUTO_2K&jsToken=' + jsToken; //log(play2K)\\n        var play4K = 'https://pan.baidu.com/share/streaming?uk=' + uk + '&fid=' + fs_id + '&sign=' + sign + '&timestamp=' + timestamp + '&shareid=' + shareid + '&type=M3U8_AUTO_4K&jsToken=' + jsToken; //log(play4K)\\n\\n        return JSON.stringify({\\n            urls: [play1080, play4K, play2K, play720, play480 + '#isVideo=true#'],\\n            names: ['1080P', '4K', '2K', '720P', '480P'],\\n            headers: [header, header, header, header, header]\\n        })\\n    }, url, uk, shareid, fs_id, jsToken, randsk)\\n}\\n\\n//查看分享链接文件\\nfunction fxlj(url, uk, shareid, fs_id, jsToken, randsk, path) {\\n    try {\\n        var d = []\\n        var url1 = url\\n        const {\\n            getIcon,\\n            getHzm,\\n            getLink,\\n            bytesToSize,\\n            zhuancun\\n        } = $.require(\\\"hiker://page/code\\\")\\n        let paths = storage0.getMyVar(\\\"pathss\\\", [{\\n            path: path,\\n            name: \\\"家\\\"\\n        }])\\n        paths.forEach((item, i) => {\\n            d.push({\\n                title: item.name,\\n                url: $(\\\"#noLoading#\\\").lazyRule((paths, i) => {\\n                    storage0.putMyVar(\\\"pathss\\\", paths.slice(0, i + 1))\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, paths, i),\\n                col_type: \\\"scroll_button\\\"\\n            })\\n        })\\n        let res = JSON.parse(request('https://pan.baidu.com/share/list?uk=' + uk + '&shareid=' + shareid + '&dir=' + encodeURIComponent(paths[paths.length - 1].path), {\\n            headers: {\\n                'Cookie': 'BDCLND=' + randsk,\\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'\\n            }\\n        })); //log(res)\\n        res.list.forEach(item => {\\n            var title = item.server_filename\\n            var fs_id = item.fs_id; //log(fs_id)\\n            if (item.isdir == 1) {\\n                var url = $().lazyRule((item, paths) => {\\n                    paths.push({\\n                        path: item.path,\\n                        name: item.server_filename\\n                    })\\n                    storage0.putMyVar(\\\"pathss\\\", paths)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, item, paths)\\n            } else if ([\\\"mp4\\\", \\\"mkv\\\", \\\"avi\\\", \\\"mov\\\", \\\"rmvb\\\", \\\"webm\\\", \\\"flv\\\", \\\"m4v\\\", \\\"m3u8\\\", \\\"ts\\\", \\\"vob\\\", \\\"wmv\\\", \\\"m2ts\\\", \\\"3gp\\\", \\\"3g2\\\"].includes(getHzm(item.server_filename))) {\\n                var url = $.require('hanshu?rule=百度网盘').lazy(url1, uk, shareid, fs_id, jsToken, randsk)\\n            } else {\\n                var url = '' //getLink(\\\"\\\", fs_id, item.path)\\n            }\\n            d.push({\\n                title: title,\\n                desc: item.size != 0 ? bytesToSize(item.size) : \\\"\\\",\\n                img: getIcon(item),\\n                url: url,\\n                col_type: \\\"avatar\\\",\\n                extra: {\\n                    longClick: [{\\n                        title: '转存播放',\\n                        js: $.toString((uk, shareid, fs_id, randsk, title) => {\\n                            const {\\n                                getLink,\\n                                zhuancun\\n                            } = $.require(\\\"hiker://page/code\\\")\\n                            zhuancun(uk, shareid, fs_id, randsk)\\n                            return getLink(\\\"movie\\\", fs_id, '/我的资源/' + title, '删除')\\n                        }, uk, shareid, fs_id, randsk, title)\\n                    }, {\\n                        title: '转存',\\n                        js: $.toString((uk, shareid, fs_id, randsk) => {\\n                            const {\\n                                zhuancun\\n                            } = $.require(\\\"hiker://page/code\\\")\\n                            zhuancun(uk, shareid, fs_id, randsk)\\n                        }, uk, shareid, fs_id, randsk)\\n                    }]\\n                }\\n            })\\n        })\\n        setResult(d)\\n    } catch (e) {\\n        log(e.message)\\n        toast(\\\"出现错误，请查看日志\\\")\\n    }\\n}\\n\\n//获取查看分享链接文件所需要的参数\\nfunction bdwp() {\\n    try {\\n        if (getMyVar(\\\"bdwpfxlj\\\").includes('baidu')) {\\n            var url = getMyVar(\\\"bdwpfxlj\\\"); log(url)\\n            var html11 = request(url, {\\n                headers: {\\n                    Cookie: '#noCookie#'\\n                },\\n                method: 'HEAD',\\n                onlyHeaders: true\\n            }); //log(html11)\\n            var url11 = JSON.parse(html11).url; //log(url11)\\n            var html21 = request('https://pan.baidu.com/share/verify?surl=' + url11.split('?surl=')[1].split('&pwd=')[0], {\\n                headers: {\\n                    Referer: url11\\n                },\\n                body: 'pwd=' + url11.split('&pwd=')[1] + '&vcode=&vcode_str=',\\n                method: 'POST'\\n            }); //log(html21)\\n            var randsk = JSON.parse(html21).randsk; //log(randsk)\\n            var html31 = request(url, {\\n                headers: {\\n                    'Cookie': getItem('BDUSS') + '; ' + getItem('STOKEN') + '; ' + 'BDCLND=' + randsk,\\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'\\n                },\\n                method: 'GET',\\n                redirect: false\\n            }); //log(html31)\\n            var html32 = html31.match(/locals\\\\.mset\\\\((.*)\\\\)/)[1]; //log(html32)\\n            var html33 = JSON.parse(html32);\\n            var file_list = html33.file_list; //log(file_list)\\n            var isdir = file_list[0].isdir; //log(isdir)\\n            var uk = html33.share_uk; //log(uk)\\n            var shareid = html33.shareid; //log(shareid)\\n            var fs_id = file_list[0].fs_id; //log(fs_id)\\n            var path = file_list[0].path; //log(path)\\n            var jsToken = html31.split(\\\"jsToken%20%3D%20a%7D%3Bfn%28%22\\\")[1].split(\\\"%22%29'))\\\")[0]; //log(jsToken)\\n            var bdstoken = html33.bdstoken; //log(bdstoken)\\n            if (isdir == 1) {\\n                file_list.forEach(item => {\\n                    var fs_id = item.fs_id; //log(fs_id)\\n                    var path = item.path; //log(path)\\n                    d.push({\\n                        title: item.server_filename,\\n                        img: \\\"hiker://images/icon_folder3\\\",\\n                        url: $().rule((url, uk, shareid, fs_id, jsToken, randsk, path) => {\\n                            $.require('hanshu?rule=百度网盘').fxlj(url, uk, shareid, fs_id, jsToken, randsk, path)\\n                        }, url, uk, shareid, fs_id, jsToken, randsk, path),\\n                        col_type: 'avatar',\\n                        extra: {\\n                            pageTitle: file_list[0].server_filename\\n                        }\\n                    })\\n                })\\n            } else {\\n                file_list.forEach(item => {\\n                    var title = item.server_filename\\n                    var fs_id = item.fs_id; //log(fs_id)\\n                    d.push({\\n                        title: title,\\n                        img: 'https://pannss.bdstatic.com/m-static/base/static/images/favicon.ico',\\n                        url: $(fs_id).lazyRule((url, uk, shareid, jsToken, randsk) => {\\n                            var fs_id = input\\n                            return $.require('hanshu?rule=百度网盘').lazy(url, uk, shareid, fs_id, jsToken, randsk)\\n                        }, url, uk, shareid, jsToken, randsk),\\n                        col_type: 'avatar',\\n                        extra: {\\n                            longClick: [{\\n                                title: '转存播放',\\n                                js: $.toString((uk, shareid, fs_id, randsk, title) => {\\n                                    const {\\n                                        getLink,\\n                                        zhuancun\\n                                    } = $.require(\\\"hiker://page/code\\\")\\n                                    zhuancun(uk, shareid, fs_id, randsk)\\n                                    return getLink(\\\"movie\\\", fs_id, '/我的资源/' + title, '删除')\\n                                }, uk, shareid, fs_id, randsk, title)\\n                            }, {\\n                                title: '转存',\\n                                js: $.toString((uk, shareid, fs_id, randsk) => {\\n                                    const {\\n                                        zhuancun\\n                                    } = $.require(\\\"hiker://page/code\\\")\\n                                    zhuancun(uk, shareid, fs_id, randsk)\\n                                }, uk, shareid, fs_id, randsk)\\n                            }]\\n                        }\\n                    })\\n                })\\n            }\\n        }\\n    } catch (e) {\\n        log(e.message)\\n        //用于出现报错后随便发送一个请求以刷新缓存页面\\n        request('file:///android_asset/home/index.html')\\n        clearMyVar(\\\"bdwpfxlj\\\")\\n        clearMyVar('pathss')\\n    }\\n}\\n\\n$.exports = {\\n    lazy,\\n    fxlj,\\n    bdwp\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"账号\",\"path\":\"account\",\"rule\":\"//by LoyDgIk 佬\\n$.exports = $([\\\"网页登录\\\", \\\"扫码登录\\\", \\\"Cookie登录\\\", \\\"复制Cookie\\\", \\\"清除Cookie\\\"]).select((isr) => {\\n    if (input === \\\"网页登录\\\") {\\n        return \\\"hiker://page/wydl#noRecordHistory##noHistory#\\\";\\n    }\\n    if (input === \\\"Cookie登录\\\") {\\n    return $(\\\"\\\", \\\"填写获取到的Cookie\\\").input(() => {\\n        if (!input.includes(\\\"AAAA\\\")) {\\n            return \\\"toast://Cookie错误\\\"\\n        } else {\\n            if (input.includes(\\\"BDUSS=\\\")) {\\n                var BDUSS = input.match(/(BDUSS=.*?);/)[1]; log(BDUSS)\\n                setItem(\\\"BDUSS\\\", BDUSS)\\n                toast(\\\"BDUSS设置成功\\\")\\n            }\\n            if(input.includes(\\\"STOKEN=\\\")) {\\n                var STOKEN = input.match(/STOKEN=\\\\w*/)[0]; log(STOKEN)\\n                setItem(\\\"STOKEN\\\", STOKEN)\\n                toast(\\\"STOKEN设置成功\\\")\\n            }\\n            back()\\n        }\\n    })\\n    }\\n    if (input === \\\"复制Cookie\\\") {\\n        copy(getItem('BDUSS')+'; '+getItem('STOKEN'))\\n    }\\n    if (input === \\\"清除Cookie\\\") {\\n        writeFile('hiker://files/cache/bdwp_cookie.txt', '')\\n        clearItem(\\\"BDUSS\\\")\\n        clearItem(\\\"STOKEN\\\")\\n        clearItem(\\\"PTOKEN\\\")\\n        back()\\n        return \\\"toast://Cookie已清除\\\"\\n    }\\n    //道长群嗷呜大佬提供\\n    function generateRandomUUID() {\\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\\n            var r = Math.random() * 16 | 0,\\n                v = c === 'x' ? r : (r & 0x3 | 0x8);\\n            return v.toString(16);\\n        });\\n    }\\n    if (input === \\\"扫码登录\\\") {\\n        return $(\\\"hiker://empty\\\").rule((generateRandomUUID) => {\\n            try {\\n                \\n                function getjson(data) {\\n                    let start_idx = data.indexOf('(') + 1;\\n                    let end_idx = data.lastIndexOf(')');\\n                    if (start_idx > 0 && end_idx > 0) {\\n                        let json_str = data.substring(start_idx, end_idx);                 \\n                        json_str = json_str.replaceAll('&quot;','\\\"').replaceAll(\\\"'\\\", '\\\"')                               \\n                        let json_obj = JSON.parse(json_str)\\n                        return json_obj\\n                    }\\n                }\\n                let ljurl = 'https://passport.baidu.com/v2/api/getqrcode'\\n                let usurl = 'https://passport.baidu.com/channel/unicast'\\n                let sturl = 'https://passport.baidu.com/v3/login/main/qrbdusslogin'\\n                let sturl1 = 'https://passport.baidu.com/v3/login/api/auth/?return_type=5&tpl=netdisk&u=https://pan.baidu.com/disk/home'\\n                let request_id = generateRandomUUID();\\n                let t3 = new Date().getTime().toString()\\n                let t1 = Math.floor(new Date().getTime() / 1000).toString()\\n                let headers = {\\n                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.6478.61 Chrome/126.0.6478.61 Not/A)Brand/8  Safari/537.36',\\n                    'sec-ch-ua-platform': '\\\"Windows\\\"',\\n                    'sec-ch-ua': '\\\"Not/A)Brand\\\";v=\\\"8\\\", \\\"Chromium\\\";v=\\\"126\\\", \\\"Google Chrome\\\";v=\\\"126\\\"',\\n                    'DNT': '1',\\n                    'sec-ch-ua-mobile': '?0',\\n                    'Sec-Fetch-Site': 'same-site',\\n                    'Sec-Fetch-Mode': 'no-cors',\\n                    'Sec-Fetch-Dest': 'script',\\n                    'Referer': 'https://pan.baidu.com/',\\n                    'Accept-Language': 'zh-CN,zh;q=0.9',\\n                }\\n                // 获取二维码链接\\n                let guidt = t3\\n                let ljparams = {\\n                    'lp': 'pc',\\n                    'qrloginfrom': 'pc',\\n                    'gid': request_id,\\n                    'callback': `tangram_guid_${t3}`,\\n                    'apiver': 'v3',\\n                    'tt': t3,\\n                    'tpl': 'netdisk',\\n                    'logPage': `traceId:pc_loginv5_${t1},logPage:loginv5`,\\n                    '_': t3\\n                }\\n                let qrdata = getjson(fetch(buildUrl(ljurl, ljparams), {\\n                    headers: headers\\n                }))\\n                let qrurl = qrdata.imgurl\\n                let channel_id = qrdata.sign\\n                let q = []\\n                q.push({\\n                    url: $(`https://${qrurl}#.jpg`, headers).image(),\\n                    col_type: \\\"pic_1_full\\\",\\n                    pic_url:$(`https://${qrurl}`, headers).image(),\\n                });\\n                setResult(q);\\n                // createQRCode(`https://${qrurl}`, false);\\n                // 获取bduss\\n                let bduss = \\\"\\\";\\n                for (let i = 0, ec = 0; i < 30; i++) {\\n                    java.lang.Thread.sleep(2000);\\n                    try {\\n                        let usparams = {\\n                            'channel_id': channel_id,\\n                            'gid': request_id,\\n                            'tpl': 'netdisk',\\n                            '_sdkFrom': '1',\\n                            'callback': `tangram_guid_${guidt}`,\\n                            'apiver': 'v3',\\n                            'tt': t3,\\n                            '_': t3,\\n                        }\\n                        let usdata = getjson(fetch(buildUrl(usurl, usparams), {\\n                            headers: headers\\n                        }))\\n                        if (usdata.channel_v) {\\n                            let bddata = JSON.parse(usdata.channel_v);\\n                            if (bddata.v) {                                \\n                                bduss = bddata.v                                \\n                                break;\\n                            }\\n                            continue\\n                        }\\n                    } catch (e) {\\n                        ec++;\\n                        if (ec >= 5) {\\n                            return \\\"toast://查询二维码出错\\\";\\n                        }\\n                    }\\n                }\\n                let stparams = {\\n                    'v': t3,\\n                    'bduss': bduss,\\n                    'u': 'https://pan.baidu.com/disk/main%23/index?category%3Dall',\\n                    'loginVersion': 'v5',\\n                    'qrcode': '1',\\n                    'tpl': 'netdisk',\\n                    'maskId': '',\\n                    'fileId': '',\\n                    'apiver': 'v3',\\n                    'tt': t3,\\n                    'traceid': '',\\n                    'time': t1,\\n                    'alg': 'v3',\\n                    'elapsed': '1',\\n                    'callback': 'bd__cbs__tro4ll'\\n                }\\n                // 获取cookie\\n                let stdata = getjson(fetch(buildUrl(sturl, stparams), {\\n                    headers: headers\\n                }))\\n                if (stdata.data && stdata.data.session) {\\n                    let cdata = stdata.data.session;                    \\n                    let bduss = cdata.bduss\\n                    log('获取bduss:'+bduss)\\n                    setItem(\\\"BDUSS\\\", \\\"BDUSS=\\\"+cdata.bduss);\\n                    let stoken = cdata.stoken\\n                    let ptoken = cdata.ptoken\\n                    let ubi = encodeURIComponent(cdata.ubi)\\n                    let cookies = {\\n                        'newlogin': '1',\\n                        'UBI': ubi,\\n                        'STOKEN': stoken,\\n                        'BDUSS': bduss,\\n                        'PTOKEN': ptoken,\\n                        'BDUSS_BFESS': bduss,\\n                        'STOKEN_BFESS': stoken,\\n                        'PTOKEN_BFESS': ptoken,\\n                        'UBI_BFESS': ubi,\\n                    }\\n                    function buildk(params) {\\n                        return Object.keys(params)\\n                          .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\\n                          .join(';');\\n                      }\\n                    headers.Cookie=buildk(cookies)\\n                    let data=fetch(sturl1,{headers:headers,onlyHeaders:true,redirect:false})\\n                    let lur=JSON.parse(data).headers.location[0]\\n                    let ldata=fetch(lur,{headers:headers,onlyHeaders:true,redirect:false})\\n                    let ck=JSON.parse(ldata).headers['set-cookie']\\n                    let stokenCookie = ck.find(c => c.toLowerCase().includes('stoken'))\\n                    stokenCookie=stokenCookie.split(';')[0].split('=')[1]\\n                    log('获取stoken:'+stokenCookie)\\n                    setItem(\\\"STOKEN\\\", \\\"STOKEN=\\\"+stokenCookie);\\n                }\\n                back();\\n            } catch (e) {\\n                toast(\\\"登录失败：\\\" + e.toString());\\n                back(false);\\n            }\\n        }, generateRandomUUID);\\n    }\\n}, $.importParam);\"},{\"col_type\":\"movie_3\",\"name\":\"网页登录\",\"path\":\"wydl\",\"rule\":\"js:\\n\\nlet d = [];\\nsetPageTitle(\\\"登录账号\\\");\\nd.push({\\n    title: \\\"““确认登录””\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        var bdwp_cookie = request(\\\"hiker://files/cache/bdwp_cookie.txt\\\") || \\\"\\\"; //log(bdwp_cookie)\\n        var header = {\\n                \\\"User-Agent\\\": \\\"Android\\\",\\n                \\\"Referer\\\": \\\"https://pan.baidu.com/\\\",\\n                \\\"Cookie\\\": bdwp_cookie,\\n            }\\n        var html = request(\\\"https://wappass.baidu.com/v3/login/api/auth?notjump=1&return_type=5&tpl=netdisk&u=https://pan.baidu.com/buy/ad/home?useCanvas=1&pathname=/share_wap\\\", {\\n            headers: header,\\n            method: \\\"GET\\\",\\n            redirect:false,\\n            onlyHeaders:true\\n        }); //log(html)\\n        var url = JSON.parse(html).headers.location[0]; //log(url)\\n        var html = request(url, {\\n            headers: header,\\n            method: \\\"GET\\\",\\n            redirect:false,\\n            onlyHeaders:true\\n        }); //log(html)\\n        var setcookie = JSON.parse(html).headers[\\\"set-cookie\\\"].toString(); //log(setcookie)\\n        if (bdwp_cookie.includes(\\\"BDUSS=\\\")) {\\n            if (bdwp_cookie.includes(\\\"BDUSS=\\\")) {\\n                var BDUSS = bdwp_cookie.match(/(BDUSS=.*?);/)[1]; log(BDUSS)\\n                setItem(\\\"BDUSS\\\", BDUSS)\\n                //log(\\\"BDUSS设置成功\\\")\\n            }\\n            if (setcookie.includes(\\\"STOKEN=\\\")) {\\n                var STOKEN = setcookie.match(/STOKEN=\\\\w*/)[0]; log(STOKEN)\\n                setItem(\\\"STOKEN\\\", STOKEN)\\n                //log(\\\"STOKEN设置成功\\\")\\n            }\\n        }\\n        back();\\n        toast(\\\"登录成功\\\")\\n        return \\\"hiker://empty\\\";\\n    }),\\n    desc: \\\"““””<small>点击头像可以退出账号重新登录</small>\\\",\\n    col_type: \\\"text_center_1\\\"\\n});\\nd.push({\\n    col_type: \\\"line_blank\\\"\\n});\\nlet url = 'https://wappass.baidu.com/passport?login&authsite=1&tpl=netdisk&overseas=1&regdomestic=1&smsLoginLink=1&display=mobile&u=https://pan.baidu.com/wap/home?loginform=pass&realName=1&wapBehaviorLog=wap_click_welcome_login&branchType=SMSlogin#/one_key_h5_new'\\nd.push({\\n    col_type: 'x5_webview_single',\\n    url: url,\\n    desc: 'list&&screen-150',\\n    extra: {\\n        ua: 'Android',\\n        js: $.toString((url) => {\\n            function check() {\\n                var co = fba.getCookie(url); console.log(co)\\n                if (co.includes('STOKEN=')) {\\n                    fba.parseLazyRule($$$().lazyRule((co) => {\\n                        writeFile('hiker://files/cache/bdwp_cookie.txt', co);\\n                        toast('Cookie获取成功，请确认登陆')\\n                    }, co));\\n                } else {\\n                    setTimeout(check, 500);\\n                }\\n            }\\n            check();\\n        }, url)\\n    }\\n})\\n\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"百度下载器\",\"path\":\"BaiduMultiThreadedDownloader\",\"rule\":\"//by LoyDgIk 佬\\nconst Files = java.nio.file.Files;\\nconst Paths = java.nio.file.Paths;\\nconst BufferedInputStream = java.io.BufferedInputStream\\nconst BufferedOutputStream = java.io.BufferedOutputStream\\nconst FileOutputStream = java.io.FileOutputStream;\\n//const java.util.ArrayList;\\n//const java.util.List;\\nconst ExecutorService = java.util.concurrent.ExecutorService;\\nconst Executors = java.util.concurrent.Executors;\\nconst TimeUnit = java.util.concurrent.TimeUnit\\nconst Runnable = java.lang.Runnable;\\nconst AtomicBoolean = java.util.concurrent.atomic.AtomicBoolean;\\nconst URL = java.net.URL;\\nconst Long = java.lang.Long;\\n\\nconst OkGo = com.lzy.okgo.OkGo;\\nconst HttpsUtils = com.lzy.okgo.https.HttpsUtils;\\nconst Arrays = java.util.Arrays;\\nconst Comparator = java.util.Comparator;\\nconst BUFFER_SIZE = 4096;\\nconst File = java.io.File;\\nconst Thread = java.lang.Thread;\\nconst RandomAccessFile = java.io.RandomAccessFile;\\nconst OkHttpClient = Packages.okhttp3.OkHttpClient;\\nconst FileInputStream=java.io.FileInputStream;\\n/**\\n * 使用多线程分块下载文件，支持自定义 Headers，并将分块先写入临时文件，再合并。\\n *\\n * @param url         文件下载地址\\n * @param outputPath  文件最终保存路径\\n * @param chunkSize   每个线程下载的分块大小（单位：字节）\\n * @param threadCount 下载使用的线程数\\n * @param retryCount  每个分块下载失败的最大重试次数\\n * @param headers     需要添加到请求中的自定义请求头（可为 null 表示不需要）\\n */\\nfunction downloadFile(\\n    url,\\n    outputPath,\\n    filename,\\n    config\\n) {\\n    let {\\n        chunkSize,\\n        threadCount,\\n        retryCount,\\n        headers\\n    } = config || {};\\n    let head = headers || {};\\n    chunkSize = chunkSize || 2 * 1024 * 1024;\\n    threadCount = threadCount || 4;\\n    retryCount = retryCount || 3;\\n    headers = new java.util.concurrent.ConcurrentHashMap();\\n    for (let k in head) {\\n        headers.put(k, head[k]);\\n    }\\n    let executorService = Executors.newFixedThreadPool(threadCount);\\n    \\n    let futures = []\\n    \\n    let downloadFailed = new AtomicBoolean(false);\\n\\n    \\n    let fileSize;\\n    try {\\n        let fileinfo = getFileInfo(url, head);\\n        fileSize = fileinfo.size;\\n        filename = filename || fileinfo.name || md5(url);\\n        if (!fileSize || Number.isNaN(fileSize)) {\\n            throw Error(\\\"文件大小获取失败\\\");\\n        }\\n    } catch (e) {\\n        log(\\\"获取文件大小失败: \\\" + e.toString());\\n        executorService.shutdownNow();\\n        return;\\n    }\\n    if (fileSize <= 0) {\\n        log(\\\"无法获取文件大小或文件大小为0，下载终止。\\\");\\n        executorService.shutdownNow();\\n        return;\\n    }\\n    outputPath = outputPath + \\\"/\\\" + filename;\\n\\n    let tempDir = new File(outputPath + \\\".tmp\\\");\\n    if (!tempDir.exists()) {\\n        tempDir.mkdir();\\n    }\\n\\n    let chunkCount = Math.ceil(fileSize / chunkSize);\\n    let offset = 0;\\n    for (let i = 0; i < chunkCount; i++) {\\n        // 起始位置\\n        let start = offset;\\n        // 结束位置（最后一个线程可能到 fileSize - 1 ）\\n        let end = (i == chunkCount - 1) ? (fileSize - 1) : (offset + chunkSize - 1);\\n        offset = end + 1;\\n\\n        \\n        let tempFile = new File(tempDir, \\\"chunk_\\\" + start + \\\"_\\\" + end + \\\".tmp\\\");\\n\\n        \\n        let finalStart = start;\\n        let finalEnd = end;\\n        let finalTempFile = tempFile;\\n\\n        let future = executorService.submit(new Runnable(() => {\\n            let attempts = 0;\\n            let success = false;\\n\\n            while (!downloadFailed.get() && attempts < retryCount && !success) {\\n                try {\\n                    downloadChunk(url, finalStart, finalEnd, finalTempFile, headers);\\n                    success = true;\\n                } catch (e) {\\n                    attempts++;\\n                    log(\\\"线程 \\\" + Thread.currentThread().getName() +\\n                        \\\" 下载分块 [\\\" + finalStart + \\\" - \\\" + finalEnd + \\\"] 失败，重试 \\\" +\\n                        attempts + \\\"/\\\" + retryCount + \\\"，原因：\\\" + e.toString());\\n                    if (attempts >= retryCount) {\\n                        // 标记整个下载过程失败\\n                        downloadFailed.set(true);\\n                        // 抛出异常，终止当前任务\\n                        throw new Error(\\\"线程 \\\" + Thread.currentThread().getName() +\\n                            \\\" 超出最大重试次数，下载失败。Error:\\\" + e.toString());\\n                    }\\n                }\\n            }\\n            return null;\\n        }));\\n        futures.push(future);\\n    }\\n\\n    \\n    try {\\n        for (let f of futures) {\\n            f.get(); // 如果有异常，会在这里抛出\\n        }\\n    } catch (e) {\\n        log(\\\"执行下载任务时出现异常: \\\" + e.toString());\\n        downloadFailed.set(true);\\n    } finally {\\n        // 关闭线程池\\n        executorService.shutdownNow();\\n    }\\n\\n    // 合并分块文件\\n    if (!downloadFailed.get()) {\\n        mergeChunks(tempDir, outputPath);\\n        // 删除临时文件夹及其中的文件\\n        deleteTempFiles(tempDir);\\n        log(\\\"文件下载并合并完成，保存路径：\\\" + outputPath);\\n    } else {\\n        // 如果下载失败，清空临时目录\\n        deleteTempFiles(tempDir);\\n        log(\\\"下载失败，临时文件已删除。\\\");\\n    }\\n}\\n\\nfunction getFileInfo(url, headers) {\\n    let head = JSON.parse(fetch(url, {\\n        headers: Object.assign({}, headers),\\n        onlyHeaders: true,\\n        method: \\\"HEAD\\\"\\n    })).headers;\\n    Object.keys(head).forEach(v => {\\n        head[v] = head[v][0];\\n    });\\n    let fileinfo = {\\n        md5: head[\\\"content-md5\\\"],\\n        size: Number(head[\\\"x-bs-file-size\\\"] || head[\\\"content-length\\\"]),\\n        name: /filename=\\\"(.*?)\\\"/.test(head[\\\"content-disposition\\\"]) ? RegExp.$1 : \\\"\\\"\\n    };\\n    return fileinfo;\\n}\\n\\nfunction mergeChunks(tempDir, outputPath) {\\n    let outputFile = new File(outputPath);\\n    let raf = null;\\n    try {\\n        let raf = new RandomAccessFile(outputFile, \\\"rw\\\");\\n\\n        let chunkFiles = tempDir.listFiles(new java.io.FilenameFilter((dir, name) => name.endsWith(\\\".tmp\\\")));\\n        if (chunkFiles == null) {\\n            throw new Error(\\\"无法获取临时文件夹中的分块文件。\\\");\\n        }\\n\\n        Arrays.sort(chunkFiles, Comparator.comparingLong(file => {\\n            let name = file.getName();\\n            let start = Long.parseLong(name.split(\\\"_\\\")[1]);\\n            return start;\\n        }));\\n\\n\\n        for (let chunkFile of chunkFiles) {\\n            let fis, bis;\\n            try {\\n                let fis = new FileInputStream(chunkFile);\\n                let bis = new BufferedInputStream(fis);\\n\\n                let buffer = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, BUFFER_SIZE);\\n                let len;\\n                while ((len = bis.read(buffer)) != -1) {\\n                    raf.write(buffer, 0, len);\\n                }\\n            } finally {\\n                fis && fis.close();\\n                bis && bis.close();\\n            }\\n        }\\n    } catch (e) {\\n        log(\\\"合并分块文件时出错：\\\" + e.toString());\\n    } finally {\\n        raf && raf.close();\\n    }\\n}\\nconst downloadClient = new OkHttpClient.Builder()\\n    .connectTimeout(30, TimeUnit.SECONDS)\\n    .readTimeout(50, TimeUnit.SECONDS)\\n    .writeTimeout(40, TimeUnit.SECONDS)\\n    .sslSocketFactory(HttpsUtils.getSslSocketFactory().sSLSocketFactory, HttpsUtils.UnSafeTrustManager)\\n    .hostnameVerifier(HttpsUtils.UnSafeHostnameVerifier)\\n    .build();\\n\\nfunction downloadChunk(\\n    url,\\n    start,\\n    end,\\n    tempFile,\\n    headers\\n) {\\n\\n    let request = OkGo.get(url);\\n    // 如果有自定义 Headers，则添加\\n    if (headers != null) {\\n        for (let entry of headers.entrySet()) {\\n            request.headers(entry.getKey(), entry.getValue());\\n        }\\n    }\\n    //log(Object.keys(request))\\n    request.headers(\\\"Range\\\", \\\"bytes=\\\" + start + \\\"-\\\" + end);\\n    request.client(downloadClient);\\n    // 执行同步请求，获取响应\\n    let response = request.execute();\\n    if (response == null || ~~(response.code() / 100) != 2) {\\n        log(~~(response.code() / 100))\\n        throw new Error(\\\"服务器返回异常，HTTP code = \\\" +\\n            (response == null ? \\\"null\\\" : response.code()));\\n    }\\n\\n    // 将响应体写入临时文件\\n    let is = null,\\n        bis = null,\\n        fos = null;\\n    try {\\n        is = response.body();\\n        bis = new BufferedInputStream(is.byteStream());\\n        fos = new FileOutputStream(tempFile);\\n\\n        let buffer = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, BUFFER_SIZE);\\n        let len;\\n        while ((len = bis.read(buffer)) != -1) {\\n            fos.write(buffer, 0, len);\\n        }\\n    } finally {\\n        is && is.close();\\n        bis && bis.close();\\n        fos && fos.close();\\n    }\\n}\\n\\nfunction deleteTempFiles(tempDir) {\\n    if (tempDir.exists() && tempDir.isDirectory()) {\\n        for (let file of tempDir.listFiles() || []) {\\n            file.delete();\\n        }\\n        tempDir.delete();\\n    }\\n}\\nlet isDownload = false;\\n$.exports.downloadFile = function(url,\\n    outputPath,\\n    filename,\\n    config) {\\n    if (isDownload) return false;\\n    isDownload=true;\\n    downloadFile(url,\\n        outputPath,\\n        filename,\\n        config);\\n    isDownload=false;\\n    return true;\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"分享链接\",\"path\":\"login\",\"rule\":\"js:\\nvar d = [];\\n/*\\nd.push({\\n    title: \\\"token说明：输入token后才能查看到自己网盘的文件\\\",\\n    col_type: \\\"rich_text\\\"\\n})\\nd.push({\\n    title: \\\"获取token\\\",\\n    url: \\\"https://wappass.baidu.com/passport?login&authsite=1&tpl=netdisk&overseas=1&regdomestic=1&smsLoginLink=1&display=mobile&u=https://pan.baidu.com/wap/home?loginform=pass&realName=1&wapBehaviorLog=wap_click_welcome_login&branchType=SMSlogin#/insert_account\\\",\\n    col_type: \\\"text_2\\\"\\n})\\nd.push({\\n    title: \\\"输入token\\\",\\n    url: $(\\\"\\\", \\\"填写获取到的token\\\").input(() => {\\n        let res = JSON.parse(request(buildUrl(\\\"https://openapi.baidu.com/oauth/2.0/token\\\", {\\n            \\\"grant_type\\\": \\\"refresh_token\\\",\\n            \\\"refresh_token\\\": input,\\n            \\\"client_id\\\": \\\"iYCeC9g08h5vuP9UqvPHKKSVrKFXGa1v\\\",\\n            \\\"client_secret\\\": \\\"jXiFMOPVPCWlO2M5CwWQzffpNPaGTRBG\\\"\\n        })))\\n        if (!res.access_token) {\\n            log(res)\\n            return \\\"toast://错误！！！\\\"\\n        } else {\\n            setItem(\\\"access_token\\\", res.access_token)\\n            setItem(\\\"refresh_token\\\", res.refresh_token)\\n            back()\\n        }\\n    }),\\n    col_type: \\\"text_2\\\"\\n})\\nd.push({\\n    col_type: \\\"line\\\"\\n})\\nd.push({\\n    title: \\\"选择接口：\\\" + (getItem(\\\"jk\\\", \\\"0\\\") == \\\"0\\\" ? \\\"官方接口：不是vip会限速，稳定\\\" : \\\"第三方接口：不限速，不稳定\\\"),\\n    url: $().lazyRule(() => {\\n        setItem(\\\"jk\\\", getItem(\\\"jk\\\", \\\"0\\\") == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\")\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"text_center_1\\\"\\n})\\n*/\\nd.push({\\n    title: \\\"帮助文档\\\",\\n    url: $().rule(() => {\\n        var d = []\\n        setPageTitle(\\\"帮助文档\\\");\\n        d.push({\\n            title: JSON.parse(request('hiker://page/helpDoc')).rule,\\n            col_type: 'rich_text'\\n        });\\n        setResult(d)\\n    }),\\n    col_type: \\\"text_center_1\\\"\\n})\\nd.push({\\n    title: \\\"百度网盘分享链接说明：输入百度网盘分享链接（不支持自己盘内的分享链接）后可直接转码播放视频文件，原画播放可长按视频文件选择转存播放\\\",\\n    url: \\\"hiker://empty\\\",\\n    col_type: \\\"text_center_1\\\"\\n})\\nd.push({\\n    col_type: \\\"line\\\"\\n})\\nd.push({\\n    title: \\\"输入百度网盘分享链接\\\",\\n    url: $(\\\"\\\", \\\"输入百度网盘分享链接\\\").input(() => {\\n        clearMyVar(\\\"bdwpfxlj\\\")\\n        clearMyVar(\\\"pathss\\\")\\n        if (input.includes(\\\"baidu\\\")) {\\n            if (input.includes(\\\"surl=\\\")) {\\n                putMyVar(\\\"bdwpfxlj\\\", \\\"https://pan.baidu.com/s/1\\\" + input.match(/surl=(.*?pwd=\\\\w{4})/)[1])\\n            } else if (input.includes(\\\"pwd=\\\")) {\\n                putMyVar(\\\"bdwpfxlj\\\", input.match(/http.*?pwd=\\\\w{4}/)[0])\\n            } else if (input.includes(\\\"提取码\\\")) {\\n                putMyVar(\\\"bdwpfxlj\\\", input.match(/http.*\\\\w/)[0] + '?pwd=' + input.match(/提取码.*(\\\\w{4})/)[1])\\n            } else {\\n                putMyVar(\\\"bdwpfxlj\\\", input.match(/http.*\\\\w/)[0])\\n            }\\n            refreshPage()\\n        } else {\\n            refreshPage()\\n        }\\n    }),\\n    col_type: \\\"text_center_1\\\"\\n})\\nif (getParam(\\\"realurl\\\", \\\"\\\") != \\\"\\\") {\\n    clearMyVar(\\\"pathss\\\")\\n    var dyurl = decodeURIComponent(getParam(\\\"realurl\\\")); //log(dyurl)\\n    if (dyurl.includes(\\\"baidu\\\")) {\\n        if (dyurl.includes(\\\"surl=\\\")) {\\n            putMyVar(\\\"bdwpfxlj\\\", \\\"https://pan.baidu.com/s/1\\\" + dyurl.match(/surl=(.*?pwd=\\\\w{4})/)[1])\\n        } else if (dyurl.includes(\\\"pwd=\\\")) {\\n            putMyVar(\\\"bdwpfxlj\\\", dyurl.match(/http.*?pwd=\\\\w{4}/)[0])\\n        } else {\\n            d.push({\\n                title: \\\"输入提取码\\\",\\n                url: $(\\\"\\\", \\\"提取码\\\").input((dyurl)=>{                    \\n                    putMyVar(\\\"bdwpfxlj\\\", dyurl.match(/http.*\\\\w/)[0] + '?pwd=' + input)\\n                    refreshPage()\\n                },dyurl),\\n                col_type: \\\"text_center_1\\\"\\n            })\\n        }\\n    }\\n}\\n$.require('hanshu?rule=百度网盘').bdwp()\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"帮助文档\",\"path\":\"helpDoc\",\"rule\":\"<h5 style=\\\"text-align: center;\\\">帮助文档</h5>\\n<div>\\n<strong>特别感谢：</strong><br/>\\nJoe，你们可以叫我狗浩啊，LoyDgIk，道长群嗷呜\\n<p>\\n<strong>网盘内文件：</strong><br/>\\n默认：原画播放视频文件，播放音频文件，查看图片文件，下载50M以下的其他类型文件（50M以上的其他类型文件可尝试长按文件选择预览下载APK下载）。<br/>\\n长按文件：可选择删除，重命名，预览下载APK。<br/>\\n预览下载APK：50M以上的其他类型文件可尝试长按文件选择预览下载APK下载（该功能不支持在共存版海阔上使用）。<br/>\\n<a href=\\\"https://img.vinua.cn/image/IMG-20250201-165014.PzdN7\\\"><img src=\\\"https://img.vinua.cn/images/PzdN7.jpg\\\" alt=\\\"IMG 20250201 165014\\\" border=\\\"0\\\"></a>\\n</p>\\n<p>\\n<p>\\n<strong>分享链接文件：</strong><br/>\\n默认：转码播放视频文件。<br/>\\n长按文件：可选择转存播放，转存。<br/>\\n<a href=\\\"https://img.vinua.cn/image/IMG-20250201-165123.Pz8BU\\\"><img src=\\\"https://img.vinua.cn/images/Pz8BU.jpg\\\" alt=\\\"IMG 20250201 165123\\\" border=\\\"0\\\"></a>\\n<a href=\\\"https://img.vinua.cn/image/IMG-20250201-165043.Pzt0D\\\"><img src=\\\"https://img.vinua.cn/images/Pzt0D.jpg\\\" alt=\\\"IMG 20250201 165043\\\" border=\\\"0\\\"></a>\\n</p>\\n</div>\"},{\"col_type\":\"movie_3\",\"name\":\"GA&GM\",\"path\":\"GA&GM.js\",\"rule\":\"//by LoyDgIk 佬\\nconst JavaMap = java.util.HashMap;\\nconst globalMapSymbol = Symbol(\\\"globalMap\\\");\\nconst mapSymbol = Symbol(\\\"myJavaMap\\\");\\nconst selfSymbol = Symbol(\\\"selfKey\\\");\\n\\nfunction getTypeName(obj) {\\n    return Object.prototype.toString.call(obj);\\n}\\n\\nconst protoDic = new Map([\\n    [\\\"[object Array]\\\", Array],\\n    [\\\"[object Date]\\\", Date],\\n    [\\\"[object Object]\\\", Object],\\n    [\\\"[object Promise]\\\", Promise],\\n    [\\\"[object Map]\\\", Map],\\n    [\\\"[object Symbol]\\\", Symbol],\\n    [\\\"[object Array]\\\", Array],\\n    [\\\"[object Function]\\\", Function],\\n    [\\\"Error\\\", Error],\\n    [\\\"TypeError\\\", TypeError],\\n    [\\\"EvalError\\\", EvalError],\\n    [\\\"SyntaxError\\\", SyntaxError],\\n    [\\\"ReferenceError\\\", ReferenceError],\\n    [\\\"RangeError\\\", RangeError]\\n]);\\n\\nfunction dealWithVal(val) {\\n    let typeName = getTypeName(val);\\n    let errorName;\\n    if (val instanceof java.lang.String) {\\n        return String(val);\\n    } else if (val instanceof java.lang.Double) {\\n        return Number(val);\\n    } else if (val instanceof java.lang.Boolean) {\\n        if (String(val) === \\\"true\\\") {\\n            val = true;\\n        } else {\\n            val = false;\\n        }\\n        return val;\\n    } else if (typeName === \\\"[object Error]\\\" && protoDic.has((errorName = val.toString()))) {\\n        val.__proto__ = val.__proto__ && Object.assign(Object.create(protoDic.get(typeName).prototype), val.__proto__);\\n        return val;\\n    } else if (typeName !== \\\"[object javaObject]\\\" && protoDic.has(typeName)) {\\n        val.__proto__ = val.__proto__ && Object.assign(Object.create(protoDic.get(typeName).prototype), val.__proto__);\\n        return val;\\n    }\\n    return val;\\n}\\n\\nfunction isString(str) {\\n    return typeof(str) === \\\"string\\\" || str instanceof java.lang.String;\\n}\\n\\nfunction GlobalVar(javaMap, selfKey) {\\n    this[globalMapSymbol] = javaMap;\\n    this[selfSymbol] = selfKey;\\n    this.raw = false;\\n}\\nObject.assign(GlobalVar.prototype, {\\n    getHashMap(symbol) {\\n        if (symbol !== mapSymbol) return null;\\n        if (this[mapSymbol]) return this[mapSymbol];\\n        let selfKey = this[selfSymbol];\\n        if (!selfKey) {\\n            throw Error(\\\"当前没有全局环境，请使用setSelfKey指定规则名\\\");\\n        }\\n        this[mapSymbol] = this[globalMapSymbol];\\n        return this[mapSymbol];\\n    },\\n    setSelfKey(key) {\\n        //if (!this[selfSymbol]) this[selfSymbol] = key;\\n        this[selfSymbol] = key;\\n    },\\n    getSelfKey(){\\n        return this[selfSymbol];\\n    },\\n    getMapKey(key) {\\n        return String(this[selfSymbol] + key);\\n    },\\n    get(key, def) {\\n        key = this.getMapKey(key);\\n        let hashMap = this.getHashMap(mapSymbol);\\n        if (!hashMap.containsKey(key)) return def;\\n        let val = hashMap.get(key);\\n        if (this.raw) {\\n            return val;\\n        } else {\\n            return dealWithVal(val);\\n        }\\n    },\\n    getRaw(key, def) {\\n        key = this.getMapKey(key);\\n        let hashMap = this.getHashMap(mapSymbol);\\n        if (!hashMap.containsKey(key)) return def;\\n        return hashMap.get(key);\\n    },\\n    useRaw(noUseRaw) {\\n        this.raw = !noUseRaw;\\n        return this;\\n    },\\n    put(key, val) {\\n        if (val === void 0) return;\\n        let hashMap = this.getHashMap(mapSymbol);\\n        hashMap.put(this.getMapKey(key), val);\\n        return val;\\n    },\\n    clearAll() {\\n        let self = this[selfSymbol];\\n        let hashMap = this.getHashMap(mapSymbol);\\n        this.getHashMap(mapSymbol).forEach((key, value) => {\\n            if (isString(key) && String(key).startsWith(self)) {\\n                hashMap.remove(key);\\n            }\\n        });\\n    },\\n    clear(key, call) {\\n        if (this.hasButNoCall(key)) {\\n            let hashMap = this.getHashMap(mapSymbol);\\n            if (typeof call === \\\"function\\\") {\\n                call(this.get(key));\\n            }\\n            hashMap.remove(this.getMapKey(key));\\n        }\\n    },\\n    has(key, call) {\\n        let mapKey = this.getMapKey(key);\\n        let hashMap = this.getHashMap(mapSymbol);\\n        let res = !!hashMap.containsKey(mapKey);\\n        if (res && typeof call === \\\"function\\\") {\\n            call(this.get(key));\\n        }\\n        return res;\\n    },\\n    hasButNoCall(key) {\\n        let mapKey = this.getMapKey(key);\\n        let hashMap = this.getHashMap(mapSymbol);\\n        return !!hashMap.containsKey(mapKey);\\n    },\\n    define(key, val) {\\n        if (this.hasButNoCall(key)) {\\n            return this.get(key);\\n        }\\n        return this.put(key, val);\\n    },\\n    defineLazy(key, lazy) {\\n        if (this.hasButNoCall(key)) {\\n            return this.get(key);\\n        }\\n        return this.put(key, lazy());\\n    },\\n    defineModule(key, path, isNew) {\\n        if(path===undefined){\\n            path=key;\\n        }\\n        if (isNew) return this.put(key, $.require(path, key));\\n        return this.defineLazy(key, () => $.require(path, key));\\n    },\\n    listKeys() {\\n        let entrySet = this.getHashMap(mapSymbol).entrySet();\\n        let selfKey = this[selfSymbol];\\n        let keys = [];\\n\\n        for (let entry of entrySet) {\\n            let key = entry.getKey();\\n            if (isString(key) && key.startsWith(selfKey)) {\\n                keys.push(String(key).replace(selfKey, \\\"\\\"));\\n            }\\n        }\\n        return keys;\\n    },\\n    toJSON() {\\n        let object = {};\\n        let hashMap = this.getHashMap(mapSymbol);\\n        let selfKey = this[selfSymbol];\\n        hashMap.forEach((key, value) => {\\n            if (!isString(key)) {\\n                return;\\n            }\\n            let keyString = String(key);\\n            if (keyString.startsWith(selfKey)) {\\n                object[keyString.replace(selfKey, \\\"\\\")] = hashMap.get(key);\\n            }\\n        });\\n        return object;\\n    }\\n});\\nGlobalVar.prototype[Symbol.iterator] = function() {\\n    let hashMap = this.getHashMap(mapSymbol);\\n    let selfKey = this[selfSymbol];\\n    let iterator = hashMap.entrySet().iterator();\\n    return (function*() {\\n        while (iterator.hasNext()) {\\n            let me = iterator.next();\\n            let key = me.getKey();\\n            if (!isString(key)) {\\n                continue;\\n            }\\n            key = String(key);\\n            if (key.startsWith(selfKey)) {\\n                yield [key.replace(selfKey, \\\"\\\"), dealWithVal(me.getValue())];\\n            }\\n        }\\n    })();\\n}\\n\\nconst GlobalMap = _globalMap;\\n//_globalMap = void 0;\\nlet RuleGlobalMapKey = (typeof MY_RULE !== \\\"undefined\\\"&&MY_RULE) ? MY_RULE.title : \\\"\\\";\\nlet AppGlobalMapKey = \\\"AppGlobalMap\\\";\\nif (RuleGlobalMapKey === AppGlobalMapKey) {\\n    let randomKey = \\\"\\\";\\n    if (GlobalMap.containsKey(0)) {\\n        randomKey = String(GlobalMap.get(0));\\n    } else {\\n        randomKey = String(Date.now());\\n        GlobalMap.put(0, randomKey);\\n    }\\n    RuleGlobalMapKey = RuleGlobalMapKey + randomKey;\\n}\\n$.exports = {\\n    GA: new GlobalVar(GlobalMap, AppGlobalMapKey),\\n    GM: new GlobalVar(GlobalMap, RuleGlobalMapKey)\\n}\"}]","proxy":"","icon":"https://pannss.bdstatic.com/m-static/base/static/images/favicon.ico"}