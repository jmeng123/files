{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"主页","path":"homeIndex","rule":"js:\nlet d=[];\nconst {color,small} = $.require(\"hiker://page/utiliy?rule=道长仓库Pro\");\nlet ver=MY_RULE.version;\nlet tver=ver?',版本:'+color(ver,\"#ff7000\"):'';\nd.push({\n    title:'小程序批量修改工具by道长'+tver,\n    col_type:'text_1',\n    desc:'输入小程序名称进行模糊搜索\\n点击可来个栗子,比如.dr',\n    url:$(\"#noLoading\").lazyRule(()=>{\n        putMyVar('searchName','.dr');\n        refreshPage(false);\n        return 'toast://栗子已经给你了,请点击搜索吧'\n    }),\n    extra:{\n        lineVisible:false\n    }\n});\nlet tips=\"道长出品,核心逻辑基于任务仓库。刷新按钮会重置已选并刷新规则列表。导入按钮等同于视界原生本地导入,千万记得导入要选择保留原规则。\";\nd.push({\n    title:\"🍱菜单\",\n    col_type:\"scroll_button\",\n    url:$(tips).confirm(()=>{})\n});\nd.push({\n    title:\"🔄刷新\",\n    col_type:\"scroll_button\",\n    url:$(\"#noLoading\").lazyRule(()=>{\n        initConfig({});\n        refreshPage(false);\n        return \"toast://已重新获取小程序，响应您的实时改动\"\n    })\n});\nd.push({\n    title:\"♻清除\",\n    col_type:\"scroll_button\",\n    url:$(\"#noLoading\").lazyRule(()=>{\n        clearItem(\"searchName\");\n        clearMyVar('searchName');\n        refreshPage(false);\n        return \"toast://已清除搜索记录\"\n    })\n});\nd.push({\n    title:\"📝修改\",\n    col_type:\"scroll_button\",\n    url:$().lazyRule(()=>{\n        let sel = storage0.getMyVar('rule_selected', []);\n        if(sel.length < 1){\n            return 'toast://啥都没选，修改个鸡毛~'\n        }\n        let rule = sel[0];\n        let allAttr = Object.keys(rule).filter((v) => (typeof(rule[v]) == 'string'));\n        if(!allAttr.includes('type')){\n            allAttr.unshift('type');\n        }\n        const {attrMap} = $.require(\"hiker://page/attr\");\n        allAttr=allAttr.filter(it=>!['firstHeader','pages','url','title'].includes(it));\n        allAttr=allAttr.map(it=>attrMap[it]||it);\n        return $(allAttr,2,'请选择要修改的属性').select(()=>{\n            const {attrMap2} = $.require(\"hiker://page/attr\");\n            let sel = storage0.getMyVar('rule_selected', []);\n            let rule = sel[0];\n            return $(rule[attrMap2[input]||input]||'','将已选小程序的属性【'+input+'】修改为(支持function):').input((attr)=>{\n                let sel = storage0.getMyVar('rule_selected', []);\n                let sel_titles = sel.map(it=>it.title);\n                let rules = config.rules;\n                if(/^function/.test(input.trim())){\n                    let js='var ff='+input.trim();\n                    //log(js);\n                    eval(js);// 定义功能 function(u){return u.replace('','')}\n                }\n                rules = rules.map((it)=>{\n                    if(sel_titles.includes(it.title)){//被选择了\n                        log(it.title+'属性'+attr+':'+it[attr]);\n                        if(typeof(ff)=='function'){\n                            it[attr]=ff(it[attr]);\n                        }else{\n                            it[attr]=input\n                        }\n                        return it\n                    }else{\n                        return it\n                    }\n                });\n                initConfig({\n                    rules:rules\n                });\n                refreshPage(false);\n                return 'toast://已将选中项目属性【'+attr+'】值修改为:'+input\n            },attrMap2[input])\n        })\n    })\n});\nd.push({\n    title:'📥导入',\n    col_type:\"scroll_button\",\n    url:$('#noLoading#').lazyRule(()=>{\n        let sel = storage0.getMyVar('rule_selected', []);\n        let sel_titles = sel.map(it=>it.title);\n        let rules = config.rules.filter(it=>sel_titles.includes(it.title));\n        if(rules.length<1){\n            return 'toast://没有已选择项目，无法导入'\n        }\n        let ruleHead = '海阔视界首页频道规则【道长仓库Pro】￥home_rule_url￥';\n        let rules_text = JSON.stringify(rules);\n        let url = 'hiker://files/rules/dzHouse/json/批处理.json';\n        writeFile(url,rules_text);\n        return 'rule://'+base64Encode(ruleHead+url)\n    })\n});\n/*\nd.push({\n    title:\"📥识别口令\",\n    col_type:\"scroll_button\",\n    url:$(\"{{clipboard}}\",\"自动识别剪切板内容或手动输入口令\").input(()=>{\n        let importUrl = 'rule://' + base64Encode(input);\n        return importUrl\n        //return \"toast://你输入的口令为\"+input\n    })\n});\n */\nd.push({\n    title: '搜索',\n    desc: \"小程序模糊名称,不区分大小写,或 首页链接|搜索链接|一级|搜索一级|二级|搜索二级|预处理,区分大小写\",\n    extra: {\n        onChange: \"putMyVar('searchName',input)\",\n        titleVisible: true,\n        type: \"textarea\",\n        height:2,\n        defaultValue:getItem('searchName','')||getMyVar('searchName')\n    },\n    url:$.toString(() => {\n        // 定义字符串替换全部函数\n        if(!getMyVar('searchName'))\n        {\n            return \"toast://你还没有输入名称呢\\n要想清空搜索记录请点击上方清除按钮\"\n        }\n        setItem(\"searchName\",getMyVar('searchName'));\n        clearMyVar(\"gp\");\n        refreshPage(false);\n        return \"hiker://empty\"\n    }),\n    col_type: \"input\",\n});\nfunction unique2(array){\n    return Array.from(new Set(array));\n}\nfunction strDeal(str){\n    str = str.split('');\n    str = str.filter(e => (e >= 0 && e <= 9) || (e >= 'a' && e <= 'z') || (e >= 'A' && e <= 'Z') || (e >= '\\u4e00' && e <= '\\u9fa5'));\n    str = str.join('');\n    return str\n}\n\nlet dl=[]; // 定义一个空数据列表用来装后面的数据\n// 由于涉及批量修改，需要本地有完整的小程序缓存，只留标题是不行的,要不然批量修改的时候要一堆fetch hiker://home@小程序名称\nlet rules=config.rules||JSON.parse(fetch(\"hiker://home\"));//获取海阔视界所有小程序\nif(!config.rules){//最好还是缓存一下,要不然每次请求太耗时了;\n    initConfig({\n        rules:rules\n    })\n}\nlet filterName=getItem('searchName','');// 搜索筛选名称\nlet groups=rules.map(it=>it.group||\"无分组\");\ngroups.unshift('全部');//把全部分组加上\ngroups=unique2(groups);//获取所有规则的分组列表自动去重\nlet nowGp = getMyVar(\"gp\",\"全部\");//获取当前分组\nlet groupbtn=groups.map((it)=>{//渲染分组筛选按钮\n    return {\n        title:it===nowGp?color(it,\"#5FB878\"):it,\n        col_type:\"scroll_button\",\n        url:$('#noLoading#').lazyRule((it)=>{\n            putMyVar(\"gp\",it);\n            refreshPage(false);\n            return \"hiker://empty\"\n        },it)\n    }\n});\nvar rule_filter = function (it){\n    let has_title = it.title.toLowerCase().includes(filterName.toLowerCase());\n    if(has_title){\n        return true\n    }\n    for(let k of ['url','search_url','find_rule','searchFind','detail_find_rule','sdetail_find_rule','preRule']){\n        if(it[k]&&it[k].includes(filterName)){\n            return true\n        }\n    }\n    return false\n}\nif(filterName){ // 搜索名称筛选\n    rules=rules.filter(rule_filter);\n}\n// 分组筛选\nif(nowGp===\"无分组\"){\n    rules=rules.filter(it=>!it.group);\n} else if(nowGp!==\"全部\"){\n    rules=rules.filter(it=>it.group===nowGp);\n}\n// 是否选中筛选\nlet data = storage0.getMyVar('rule_selected')||[];//获取已选择的规则\nlet data_title = data.map(it=>it.title); // 获取已选择规则的名称\nlet dx_filter = getItem('dx_filter','全部');\n// 筛选过滤\nif(dx_filter === '已选'){\n    rules = rules.filter(it=>data_title.includes(it.title));\n}else if(dx_filter=== '未选'){\n    rules = rules.filter(it=>!data_title.includes(it.title));\n}\nstorage0.putMyVar('rules_tmp_text',rules);//设置缓存变量\ndl=rules.map((it)=>{\n    // let text = JSON.stringify(it);\n    // text=base64Encode(text);\n    storage0.putMyVar(it.title,it);//设置缓存变量\n    return {\n         title:(Array.isArray(data_title)&&data_title.includes(it.title))?color(it.title,'#12b668'):it.title,\n       // title:(Array.isArray(data_title)&&data_title.includes(it.title))?'🟢'+it.title:it.title,\n        // url:'toast://功能开发中',\n        url:$('#noLoading#').lazyRule((title,color,dx_filter)=>{\n            // let it = JSON.parse(base64Decode(text));\n            let it = storage0.getMyVar(title);\n            let data = storage0.getMyVar('rule_selected')||[];//获取已选择的规则\n            let data_title = data.map(it=>it.title); // 获取已选择规则的名称\n            let sel = false;\n            let id = it.title; // 动态元素id\n            let selCnt = 0;\n            if(Array.isArray(data_title)){\n                if(data_title.includes(id)){\n                    // log('包含:'+id);\n                    data.splice(data_title.indexOf(id),1);\n                }else{\n                    data.push(it);\n                    sel = true;\n                }\n                selCnt = data.length;\n                storage0.putMyVar('rule_selected', data)\n            }else{\n                sel = true;\n                selCnt = 1;\n                storage0.putMyVar('rule_selected', [it])\n            }\n            let newTitle = sel?color(id,'#12b668'):id;\n            //let newTitle = sel?'🟢'+id:id;\n            updateItem(id,{\n                title:newTitle\n            });\n            updateItem('checked',{title: (dx_filter==='已选'?color('已选','#12b668'):'已选')+color(selCnt,'#ff7000')});\n            return 'hiker://empty'\n        },it.title,color,dx_filter),\n        group:it.group,\n        col_type:\"icon_4\",\n        desc:\"作者:\"+it.author+\",版本:\"+it.version,\n        pic_url:it.icon||\"https://cf-ipfs.com/ipfs/QmXxgDVAZLWhFxikrAFVPRZQuJ2uFae7syXhFubPwMwUiU\",\n        extra:{\n            id:it.title\n        }\n    }\n});\nlet op=[]; // 操作|筛选数组\nop.push({\n    title:'全选',\n    url:$('#noLoading#').lazyRule((color,dx_filter)=>{\n        let rules = storage0.getMyVar('rules_tmp_text');\n        storage0.putMyVar('rule_selected', rules);\n        rules.forEach(it=>{\n            let id = it.title;\n            updateItem({title: color(id,'#12b668'), extra: {id: id}});\n            //updateItem({title: '🟢'+it.title, extra: {id: id}});\n        });\n        updateItem('checked',{title: (dx_filter==='已选'?color('已选','#12b668'):'已选')+color(rules.length,'#ff7000')});\n        return 'hiker://empty'\n    },color,dx_filter),\n    col_type:'scroll_button'\n});\nop.push({\n    title:'全不选',\n    url:$('#noLoading#').lazyRule((color,dx_filter)=>{\n        // let rules = JSON.parse(getMyVar('rules_tmp_text'));\n        let rules = storage0.getMyVar('rules_tmp_text');\n        storage0.putMyVar('rule_selected', []);\n        rules.forEach(it=>{\n            let id = it.title;\n            updateItem({title: id, extra: {id: id}});\n        });\n        updateItem('checked',{title: (dx_filter==='已选'?color('已选','#12b668'):'已选')+color(0,'#ff7000')});\n        return 'hiker://empty'\n    },color,dx_filter),\n    col_type:'scroll_button'\n});\nop.push({\n    title:'反选',\n    url:$('#noLoading#').lazyRule((color,dx_filter)=>{\n        let rules = storage0.getMyVar('rules_tmp_text');\n        let oldSel = storage0.getMyVar('rule_selected', []);\n        function getDifferentData(arrA, arrB) {\n            return arrA.concat(arrB).filter(function (v, i, arr) {\n                let arr_titles = arr.map(it=>it.title);\n                // return arr.indexOf(v) === arr.lastIndexOf(v);\n                return arr_titles.indexOf(v.title) === arr_titles.lastIndexOf(v.title);\n            });\n        }\n        let newSel = getDifferentData(rules,oldSel);\n        storage0.putMyVar('rule_selected', newSel);\n        oldSel.forEach(it=>{\n            let id = it.title;\n            updateItem({title: id, extra: {id: id}});\n        });\n        newSel.forEach(it=>{\n            let id = it.title;\n            updateItem({title: color(id,'#12b668'), extra: {id: id}});\n            //updateItem({title: '🟢'+it.title, extra: {id: id}});\n        });\n        updateItem('checked',{title: (dx_filter==='已选'?color('已选','#12b668'):'已选')+color(newSel.length,'#ff7000')});\n        return 'hiker://empty'\n    },color,dx_filter),\n    col_type:'scroll_button'\n});\nop.push({\n    title:'🗑️删除',\n    url:$('#noLoading#').lazyRule(()=>{\n        let sel = storage0.getMyVar('rule_selected', []);\n        if(sel.length < 1){\n            return 'toast://啥都没选，删除个鸡毛~'\n        }\n        return $('确认删除已选择的:'+sel[0].title+'等'+sel.length+'条规则?').confirm(()=>{\n            let sel = storage0.getMyVar('rule_selected', []);\n            let rules=config.rules||JSON.parse(fetch(\"hiker://home\"));//获取海阔视界所有小程序\n            let sel_title = sel.map(it=>it.title); // 获取已选规则的标题\n            // 执行删除逻辑\n            rules = rules.filter(it=>!sel_title.includes(it.title)); // 筛选没有被删除的规则\n            // 保存规则\n            storage0.putMyVar('rule_selected', []);//删除完了清空选中项目\n            refreshPage(false);\n            return \"toast://已将〖\" + sel[0].title + \"〗等\"+sel.length+\"条规则删除\\n骗你的,视界没提供删除接口，删不了!\";\n        })\n    }),\n    col_type:'scroll_button'\n});\nop.push({\n    title:'📲分享',\n    url:$('#noLoading#').lazyRule(()=>{\n        let sel = storage0.getMyVar('rule_selected', []);\n        if(sel.length < 1){\n            return 'toast://啥都没选，分享个鸡毛~'\n        }\n        return $('确认分享已选择的:'+sel[0].title+'等'+sel.length+'条规则?').confirm(()=>{\n            let sel = storage0.getMyVar('rule_selected', []);\n            let rules=config.rules||JSON.parse(fetch(\"hiker://home\"));//获取海阔视界所有小程序\n            let sel_title = sel.map(it=>it.title); // 获取已选规则的标题\n            // 执行分享逻辑\n            rules = rules.filter(it=>sel_title.includes(it.title)); // 筛选选中的规则\n            // 保存规则\n            // storage0.putMyVar('rule_selected', []);//分享完了清空选中项目，先不清空，留着吧\n            let name = \"〖\"+sel_title[0]+'〗等'+sel_title.length+'个小程序';\n            let import_code=\"海阔视界规则分享，当前分享的是：小程序，无根树，花正清，不断荤腥不戒淫￥home_rule_v2￥base64://@\"+name+\"@\"+base64Encode(JSON.stringify(rules));\n            let pastes = getPastes();\n            let url = sharePaste(import_code,pastes.slice(-1)[0]);\n            let import_rule= url+\"\\n\\n小程序合集：\"+name;\n            copy(import_rule);\n            refreshPage(false);\n            writeFile('hiker://files/rules/dzHouse/ruleCache/批处理.json',JSON.stringify(rules));\n            return \"toast://已将\"+name+\"分享到剪切板口令!\\n并在道德经订阅目录生成了批处理.json文件\";\n        })\n    }),\n    col_type:'scroll_button'\n});\nop.push({\n    title:'筛选 '+color(rules.length,'#ff7000'),\n    url:'toast://前面按钮是操作，后面按钮是筛选',\n    col_type:'text_4'\n});\nop.push({\n    title:dx_filter==='全部'?color('全部','#12b668'):'全部',\n    url:$('#noLoading#').lazyRule(()=>{\n        setItem('dx_filter','全部');\n        refreshPage(false);\n        return 'hiker://empty'\n    }),\n    col_type:'text_4'\n});\nop.push({\n    title:(dx_filter==='已选'?color('已选','#12b668'):'已选')+color(data_title.length,'#ff7000'),\n    url:$('#noLoading#').lazyRule(()=>{\n        setItem('dx_filter','已选');\n        refreshPage(false);\n        return 'hiker://empty'\n    }),\n    col_type:'text_4',\n    extra:{\n        id:'checked'\n    }\n});\nop.push({\n    title:dx_filter==='未选'?color('未选','#12b668'):'未选',\n    url:$('#noLoading#').lazyRule(()=>{\n        setItem('dx_filter','未选');\n        refreshPage(false);\n        return 'hiker://empty'\n    }),\n    col_type:'text_4'\n});\nop.push({\n    col_type:\"blank_block\",\n});\nop = op.concat(groupbtn); // 连接分组滚动按钮\ndl=op.concat(dl); // 操作筛选+ 分组筛选 + 元素点击按钮\nd = d.concat(dl); // 连接上部分搜索等按钮\nsetResult(d);"},{"col_type":"movie_3","name":"属性字典","path":"attr","rule":"js:\nvar attrMap={\nfirstHeader:'',\nlast_chapter_rule:'最新章节解析',\ntitle:'小程序名称',\nauthor:'作者',\ntype:'小程序类别',\nurl:'小程序链接',\ncol_type:'显示样式',\nclass_name:'分类名称',\nclass_url:'分类替换词',\narea_name:'地区名称',\narea_url:'地区替换词',\nsort_name:'排序名称',\nsort_url:'排序替换词',\nyear_name:'年代名称',\nyear_url:'年代替换词',\nfind_rule:'解析规则',\nsearchFind:'搜索解析规则',\nsearch_url:'搜索链接',\ngroup:'小程序分组',\ndetail_col_type:'二级列表显示样式',\ndetail_find_rule:'二级列表解析规则',\nsdetail_col_type:'搜索二级列表显示样式',\nsdetail_find_rule:'搜索二级列表解析规则',\nua:'全局UA设备标志',\npreRule:'JS预处理',\npages:'子页面',\nicon:'图标'\n};\n//键值对反转\nfunction objReverse(obj){\n    var keys = Object.keys(obj);\n    var res = {};\n    keys.forEach((val) => {\n            res[obj[val]] = val;\n    });\n    return res\n}\n$.exports.attrMap=attrMap;\n$.exports.attrMap2=objReverse(attrMap);"}],"title":"批处理","author":"道长","version":11,"type":"tool","url":"hiker://empty","col_type":"movie_3_marquee","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"工具","year_url":"","find_rule":"js:\neval(JSON.parse(fetch('hiker://page/homeIndex')).rule);","searchFind":"","search_url":"","group":"⑧工具","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"主页\",\"path\":\"homeIndex\",\"rule\":\"js:\\nlet d=[];\\nconst {color,small} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\nlet ver=MY_RULE.version;\\nlet tver=ver?',版本:'+color(ver,\\\"#ff7000\\\"):'';\\nd.push({\\n    title:'小程序批量修改工具by道长'+tver,\\n    col_type:'text_1',\\n    desc:'输入小程序名称进行模糊搜索\\\\n点击可来个栗子,比如.dr',\\n    url:$(\\\"#noLoading\\\").lazyRule(()=>{\\n        putMyVar('searchName','.dr');\\n        refreshPage(false);\\n        return 'toast://栗子已经给你了,请点击搜索吧'\\n    }),\\n    extra:{\\n        lineVisible:false\\n    }\\n});\\nlet tips=\\\"道长出品,核心逻辑基于任务仓库。刷新按钮会重置已选并刷新规则列表。导入按钮等同于视界原生本地导入,千万记得导入要选择保留原规则。\\\";\\nd.push({\\n    title:\\\"🍱菜单\\\",\\n    col_type:\\\"scroll_button\\\",\\n    url:$(tips).confirm(()=>{})\\n});\\nd.push({\\n    title:\\\"🔄刷新\\\",\\n    col_type:\\\"scroll_button\\\",\\n    url:$(\\\"#noLoading\\\").lazyRule(()=>{\\n        initConfig({});\\n        refreshPage(false);\\n        return \\\"toast://已重新获取小程序，响应您的实时改动\\\"\\n    })\\n});\\nd.push({\\n    title:\\\"♻清除\\\",\\n    col_type:\\\"scroll_button\\\",\\n    url:$(\\\"#noLoading\\\").lazyRule(()=>{\\n        clearItem(\\\"searchName\\\");\\n        clearMyVar('searchName');\\n        refreshPage(false);\\n        return \\\"toast://已清除搜索记录\\\"\\n    })\\n});\\nd.push({\\n    title:\\\"📝修改\\\",\\n    col_type:\\\"scroll_button\\\",\\n    url:$().lazyRule(()=>{\\n        let sel = storage0.getMyVar('rule_selected', []);\\n        if(sel.length < 1){\\n            return 'toast://啥都没选，修改个鸡毛~'\\n        }\\n        let rule = sel[0];\\n        let allAttr = Object.keys(rule).filter((v) => (typeof(rule[v]) == 'string'));\\n        if(!allAttr.includes('type')){\\n            allAttr.unshift('type');\\n        }\\n        const {attrMap} = $.require(\\\"hiker://page/attr\\\");\\n        allAttr=allAttr.filter(it=>!['firstHeader','pages','url','title'].includes(it));\\n        allAttr=allAttr.map(it=>attrMap[it]||it);\\n        return $(allAttr,2,'请选择要修改的属性').select(()=>{\\n            const {attrMap2} = $.require(\\\"hiker://page/attr\\\");\\n            let sel = storage0.getMyVar('rule_selected', []);\\n            let rule = sel[0];\\n            return $(rule[attrMap2[input]||input]||'','将已选小程序的属性【'+input+'】修改为(支持function):').input((attr)=>{\\n                let sel = storage0.getMyVar('rule_selected', []);\\n                let sel_titles = sel.map(it=>it.title);\\n                let rules = config.rules;\\n                if(/^function/.test(input.trim())){\\n                    let js='var ff='+input.trim();\\n                    //log(js);\\n                    eval(js);// 定义功能 function(u){return u.replace('','')}\\n                }\\n                rules = rules.map((it)=>{\\n                    if(sel_titles.includes(it.title)){//被选择了\\n                        log(it.title+'属性'+attr+':'+it[attr]);\\n                        if(typeof(ff)=='function'){\\n                            it[attr]=ff(it[attr]);\\n                        }else{\\n                            it[attr]=input\\n                        }\\n                        return it\\n                    }else{\\n                        return it\\n                    }\\n                });\\n                initConfig({\\n                    rules:rules\\n                });\\n                refreshPage(false);\\n                return 'toast://已将选中项目属性【'+attr+'】值修改为:'+input\\n            },attrMap2[input])\\n        })\\n    })\\n});\\nd.push({\\n    title:'📥导入',\\n    col_type:\\\"scroll_button\\\",\\n    url:$('#noLoading#').lazyRule(()=>{\\n        let sel = storage0.getMyVar('rule_selected', []);\\n        let sel_titles = sel.map(it=>it.title);\\n        let rules = config.rules.filter(it=>sel_titles.includes(it.title));\\n        if(rules.length<1){\\n            return 'toast://没有已选择项目，无法导入'\\n        }\\n        let ruleHead = '海阔视界首页频道规则【道长仓库Pro】￥home_rule_url￥';\\n        let rules_text = JSON.stringify(rules);\\n        let url = 'hiker://files/rules/dzHouse/json/批处理.json';\\n        writeFile(url,rules_text);\\n        return 'rule://'+base64Encode(ruleHead+url)\\n    })\\n});\\n/*\\nd.push({\\n    title:\\\"📥识别口令\\\",\\n    col_type:\\\"scroll_button\\\",\\n    url:$(\\\"{{clipboard}}\\\",\\\"自动识别剪切板内容或手动输入口令\\\").input(()=>{\\n        let importUrl = 'rule://' + base64Encode(input);\\n        return importUrl\\n        //return \\\"toast://你输入的口令为\\\"+input\\n    })\\n});\\n */\\nd.push({\\n    title: '搜索',\\n    desc: \\\"小程序模糊名称,不区分大小写,或 首页链接|搜索链接|一级|搜索一级|二级|搜索二级|预处理,区分大小写\\\",\\n    extra: {\\n        onChange: \\\"putMyVar('searchName',input)\\\",\\n        titleVisible: true,\\n        type: \\\"textarea\\\",\\n        height:2,\\n        defaultValue:getItem('searchName','')||getMyVar('searchName')\\n    },\\n    url:$.toString(() => {\\n        // 定义字符串替换全部函数\\n        if(!getMyVar('searchName'))\\n        {\\n            return \\\"toast://你还没有输入名称呢\\\\n要想清空搜索记录请点击上方清除按钮\\\"\\n        }\\n        setItem(\\\"searchName\\\",getMyVar('searchName'));\\n        clearMyVar(\\\"gp\\\");\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"input\\\",\\n});\\nfunction unique2(array){\\n    return Array.from(new Set(array));\\n}\\nfunction strDeal(str){\\n    str = str.split('');\\n    str = str.filter(e => (e >= 0 && e <= 9) || (e >= 'a' && e <= 'z') || (e >= 'A' && e <= 'Z') || (e >= '\\\\u4e00' && e <= '\\\\u9fa5'));\\n    str = str.join('');\\n    return str\\n}\\n\\nlet dl=[]; // 定义一个空数据列表用来装后面的数据\\n// 由于涉及批量修改，需要本地有完整的小程序缓存，只留标题是不行的,要不然批量修改的时候要一堆fetch hiker://home@小程序名称\\nlet rules=config.rules||JSON.parse(fetch(\\\"hiker://home\\\"));//获取海阔视界所有小程序\\nif(!config.rules){//最好还是缓存一下,要不然每次请求太耗时了;\\n    initConfig({\\n        rules:rules\\n    })\\n}\\nlet filterName=getItem('searchName','');// 搜索筛选名称\\nlet groups=rules.map(it=>it.group||\\\"无分组\\\");\\ngroups.unshift('全部');//把全部分组加上\\ngroups=unique2(groups);//获取所有规则的分组列表自动去重\\nlet nowGp = getMyVar(\\\"gp\\\",\\\"全部\\\");//获取当前分组\\nlet groupbtn=groups.map((it)=>{//渲染分组筛选按钮\\n    return {\\n        title:it===nowGp?color(it,\\\"#5FB878\\\"):it,\\n        col_type:\\\"scroll_button\\\",\\n        url:$('#noLoading#').lazyRule((it)=>{\\n            putMyVar(\\\"gp\\\",it);\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\"\\n        },it)\\n    }\\n});\\nvar rule_filter = function (it){\\n    let has_title = it.title.toLowerCase().includes(filterName.toLowerCase());\\n    if(has_title){\\n        return true\\n    }\\n    for(let k of ['url','search_url','find_rule','searchFind','detail_find_rule','sdetail_find_rule','preRule']){\\n        if(it[k]&&it[k].includes(filterName)){\\n            return true\\n        }\\n    }\\n    return false\\n}\\nif(filterName){ // 搜索名称筛选\\n    rules=rules.filter(rule_filter);\\n}\\n// 分组筛选\\nif(nowGp===\\\"无分组\\\"){\\n    rules=rules.filter(it=>!it.group);\\n} else if(nowGp!==\\\"全部\\\"){\\n    rules=rules.filter(it=>it.group===nowGp);\\n}\\n// 是否选中筛选\\nlet data = storage0.getMyVar('rule_selected')||[];//获取已选择的规则\\nlet data_title = data.map(it=>it.title); // 获取已选择规则的名称\\nlet dx_filter = getItem('dx_filter','全部');\\n// 筛选过滤\\nif(dx_filter === '已选'){\\n    rules = rules.filter(it=>data_title.includes(it.title));\\n}else if(dx_filter=== '未选'){\\n    rules = rules.filter(it=>!data_title.includes(it.title));\\n}\\nstorage0.putMyVar('rules_tmp_text',rules);//设置缓存变量\\ndl=rules.map((it)=>{\\n    // let text = JSON.stringify(it);\\n    // text=base64Encode(text);\\n    storage0.putMyVar(it.title,it);//设置缓存变量\\n    return {\\n         title:(Array.isArray(data_title)&&data_title.includes(it.title))?color(it.title,'#12b668'):it.title,\\n       // title:(Array.isArray(data_title)&&data_title.includes(it.title))?'🟢'+it.title:it.title,\\n        // url:'toast://功能开发中',\\n        url:$('#noLoading#').lazyRule((title,color,dx_filter)=>{\\n            // let it = JSON.parse(base64Decode(text));\\n            let it = storage0.getMyVar(title);\\n            let data = storage0.getMyVar('rule_selected')||[];//获取已选择的规则\\n            let data_title = data.map(it=>it.title); // 获取已选择规则的名称\\n            let sel = false;\\n            let id = it.title; // 动态元素id\\n            let selCnt = 0;\\n            if(Array.isArray(data_title)){\\n                if(data_title.includes(id)){\\n                    // log('包含:'+id);\\n                    data.splice(data_title.indexOf(id),1);\\n                }else{\\n                    data.push(it);\\n                    sel = true;\\n                }\\n                selCnt = data.length;\\n                storage0.putMyVar('rule_selected', data)\\n            }else{\\n                sel = true;\\n                selCnt = 1;\\n                storage0.putMyVar('rule_selected', [it])\\n            }\\n            let newTitle = sel?color(id,'#12b668'):id;\\n            //let newTitle = sel?'🟢'+id:id;\\n            updateItem(id,{\\n                title:newTitle\\n            });\\n            updateItem('checked',{title: (dx_filter==='已选'?color('已选','#12b668'):'已选')+color(selCnt,'#ff7000')});\\n            return 'hiker://empty'\\n        },it.title,color,dx_filter),\\n        group:it.group,\\n        col_type:\\\"icon_4\\\",\\n        desc:\\\"作者:\\\"+it.author+\\\",版本:\\\"+it.version,\\n        pic_url:it.icon||\\\"https://cf-ipfs.com/ipfs/QmXxgDVAZLWhFxikrAFVPRZQuJ2uFae7syXhFubPwMwUiU\\\",\\n        extra:{\\n            id:it.title\\n        }\\n    }\\n});\\nlet op=[]; // 操作|筛选数组\\nop.push({\\n    title:'全选',\\n    url:$('#noLoading#').lazyRule((color,dx_filter)=>{\\n        let rules = storage0.getMyVar('rules_tmp_text');\\n        storage0.putMyVar('rule_selected', rules);\\n        rules.forEach(it=>{\\n            let id = it.title;\\n            updateItem({title: color(id,'#12b668'), extra: {id: id}});\\n            //updateItem({title: '🟢'+it.title, extra: {id: id}});\\n        });\\n        updateItem('checked',{title: (dx_filter==='已选'?color('已选','#12b668'):'已选')+color(rules.length,'#ff7000')});\\n        return 'hiker://empty'\\n    },color,dx_filter),\\n    col_type:'scroll_button'\\n});\\nop.push({\\n    title:'全不选',\\n    url:$('#noLoading#').lazyRule((color,dx_filter)=>{\\n        // let rules = JSON.parse(getMyVar('rules_tmp_text'));\\n        let rules = storage0.getMyVar('rules_tmp_text');\\n        storage0.putMyVar('rule_selected', []);\\n        rules.forEach(it=>{\\n            let id = it.title;\\n            updateItem({title: id, extra: {id: id}});\\n        });\\n        updateItem('checked',{title: (dx_filter==='已选'?color('已选','#12b668'):'已选')+color(0,'#ff7000')});\\n        return 'hiker://empty'\\n    },color,dx_filter),\\n    col_type:'scroll_button'\\n});\\nop.push({\\n    title:'反选',\\n    url:$('#noLoading#').lazyRule((color,dx_filter)=>{\\n        let rules = storage0.getMyVar('rules_tmp_text');\\n        let oldSel = storage0.getMyVar('rule_selected', []);\\n        function getDifferentData(arrA, arrB) {\\n            return arrA.concat(arrB).filter(function (v, i, arr) {\\n                let arr_titles = arr.map(it=>it.title);\\n                // return arr.indexOf(v) === arr.lastIndexOf(v);\\n                return arr_titles.indexOf(v.title) === arr_titles.lastIndexOf(v.title);\\n            });\\n        }\\n        let newSel = getDifferentData(rules,oldSel);\\n        storage0.putMyVar('rule_selected', newSel);\\n        oldSel.forEach(it=>{\\n            let id = it.title;\\n            updateItem({title: id, extra: {id: id}});\\n        });\\n        newSel.forEach(it=>{\\n            let id = it.title;\\n            updateItem({title: color(id,'#12b668'), extra: {id: id}});\\n            //updateItem({title: '🟢'+it.title, extra: {id: id}});\\n        });\\n        updateItem('checked',{title: (dx_filter==='已选'?color('已选','#12b668'):'已选')+color(newSel.length,'#ff7000')});\\n        return 'hiker://empty'\\n    },color,dx_filter),\\n    col_type:'scroll_button'\\n});\\nop.push({\\n    title:'🗑️删除',\\n    url:$('#noLoading#').lazyRule(()=>{\\n        let sel = storage0.getMyVar('rule_selected', []);\\n        if(sel.length < 1){\\n            return 'toast://啥都没选，删除个鸡毛~'\\n        }\\n        return $('确认删除已选择的:'+sel[0].title+'等'+sel.length+'条规则?').confirm(()=>{\\n            let sel = storage0.getMyVar('rule_selected', []);\\n            let rules=config.rules||JSON.parse(fetch(\\\"hiker://home\\\"));//获取海阔视界所有小程序\\n            let sel_title = sel.map(it=>it.title); // 获取已选规则的标题\\n            // 执行删除逻辑\\n            rules = rules.filter(it=>!sel_title.includes(it.title)); // 筛选没有被删除的规则\\n            // 保存规则\\n            storage0.putMyVar('rule_selected', []);//删除完了清空选中项目\\n            refreshPage(false);\\n            return \\\"toast://已将〖\\\" + sel[0].title + \\\"〗等\\\"+sel.length+\\\"条规则删除\\\\n骗你的,视界没提供删除接口，删不了!\\\";\\n        })\\n    }),\\n    col_type:'scroll_button'\\n});\\nop.push({\\n    title:'📲分享',\\n    url:$('#noLoading#').lazyRule(()=>{\\n        let sel = storage0.getMyVar('rule_selected', []);\\n        if(sel.length < 1){\\n            return 'toast://啥都没选，分享个鸡毛~'\\n        }\\n        return $('确认分享已选择的:'+sel[0].title+'等'+sel.length+'条规则?').confirm(()=>{\\n            let sel = storage0.getMyVar('rule_selected', []);\\n            let rules=config.rules||JSON.parse(fetch(\\\"hiker://home\\\"));//获取海阔视界所有小程序\\n            let sel_title = sel.map(it=>it.title); // 获取已选规则的标题\\n            // 执行分享逻辑\\n            rules = rules.filter(it=>sel_title.includes(it.title)); // 筛选选中的规则\\n            // 保存规则\\n            // storage0.putMyVar('rule_selected', []);//分享完了清空选中项目，先不清空，留着吧\\n            let name = \\\"〖\\\"+sel_title[0]+'〗等'+sel_title.length+'个小程序';\\n            let import_code=\\\"海阔视界规则分享，当前分享的是：小程序，无根树，花正清，不断荤腥不戒淫￥home_rule_v2￥base64://@\\\"+name+\\\"@\\\"+base64Encode(JSON.stringify(rules));\\n            let pastes = getPastes();\\n            let url = sharePaste(import_code,pastes.slice(-1)[0]);\\n            let import_rule= url+\\\"\\\\n\\\\n小程序合集：\\\"+name;\\n            copy(import_rule);\\n            refreshPage(false);\\n            writeFile('hiker://files/rules/dzHouse/ruleCache/批处理.json',JSON.stringify(rules));\\n            return \\\"toast://已将\\\"+name+\\\"分享到剪切板口令!\\\\n并在道德经订阅目录生成了批处理.json文件\\\";\\n        })\\n    }),\\n    col_type:'scroll_button'\\n});\\nop.push({\\n    title:'筛选 '+color(rules.length,'#ff7000'),\\n    url:'toast://前面按钮是操作，后面按钮是筛选',\\n    col_type:'text_4'\\n});\\nop.push({\\n    title:dx_filter==='全部'?color('全部','#12b668'):'全部',\\n    url:$('#noLoading#').lazyRule(()=>{\\n        setItem('dx_filter','全部');\\n        refreshPage(false);\\n        return 'hiker://empty'\\n    }),\\n    col_type:'text_4'\\n});\\nop.push({\\n    title:(dx_filter==='已选'?color('已选','#12b668'):'已选')+color(data_title.length,'#ff7000'),\\n    url:$('#noLoading#').lazyRule(()=>{\\n        setItem('dx_filter','已选');\\n        refreshPage(false);\\n        return 'hiker://empty'\\n    }),\\n    col_type:'text_4',\\n    extra:{\\n        id:'checked'\\n    }\\n});\\nop.push({\\n    title:dx_filter==='未选'?color('未选','#12b668'):'未选',\\n    url:$('#noLoading#').lazyRule(()=>{\\n        setItem('dx_filter','未选');\\n        refreshPage(false);\\n        return 'hiker://empty'\\n    }),\\n    col_type:'text_4'\\n});\\nop.push({\\n    col_type:\\\"blank_block\\\",\\n});\\nop = op.concat(groupbtn); // 连接分组滚动按钮\\ndl=op.concat(dl); // 操作筛选+ 分组筛选 + 元素点击按钮\\nd = d.concat(dl); // 连接上部分搜索等按钮\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"属性字典\",\"path\":\"attr\",\"rule\":\"js:\\nvar attrMap={\\nfirstHeader:'',\\nlast_chapter_rule:'最新章节解析',\\ntitle:'小程序名称',\\nauthor:'作者',\\ntype:'小程序类别',\\nurl:'小程序链接',\\ncol_type:'显示样式',\\nclass_name:'分类名称',\\nclass_url:'分类替换词',\\narea_name:'地区名称',\\narea_url:'地区替换词',\\nsort_name:'排序名称',\\nsort_url:'排序替换词',\\nyear_name:'年代名称',\\nyear_url:'年代替换词',\\nfind_rule:'解析规则',\\nsearchFind:'搜索解析规则',\\nsearch_url:'搜索链接',\\ngroup:'小程序分组',\\ndetail_col_type:'二级列表显示样式',\\ndetail_find_rule:'二级列表解析规则',\\nsdetail_col_type:'搜索二级列表显示样式',\\nsdetail_find_rule:'搜索二级列表解析规则',\\nua:'全局UA设备标志',\\npreRule:'JS预处理',\\npages:'子页面',\\nicon:'图标'\\n};\\n//键值对反转\\nfunction objReverse(obj){\\n    var keys = Object.keys(obj);\\n    var res = {};\\n    keys.forEach((val) => {\\n            res[obj[val]] = val;\\n    });\\n    return res\\n}\\n$.exports.attrMap=attrMap;\\n$.exports.attrMap2=objReverse(attrMap);\"}]","proxy":"","icon":"https://lanmeiguojiang.com/tubiao/more/157.png"}