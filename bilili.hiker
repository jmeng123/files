{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"分类片库","path":"vault","rule":"顶部大类 = ['国创', '电视', '纪录片', '综艺', '番剧', '电影']\nif (page == 1) {\n    // 折叠开关\n    d.push({\n        title: getMyVar('折叠', '关') == '关' ? '““””<b><span style=\"color: #FF0000\">∨</span></b>' : '““””<b><span style=\"color: #1aad19\">∧</span></b>',\n        url: $('#noLoading#').lazyRule(() => {\n            if (getMyVar('折叠', '关') == '开') {\n                putMyVar('折叠', '关');\n            } else {\n                putMyVar('折叠', '开');\n            }\n            refreshPage(true);\n            return \"hiker://empty\";\n        }),\n        col_type: 'scroll_button',\n    })\n    顶部大类.forEach(li => {\n        d.push({\n            title: li == getMyVar('大类', '国创') ? '““””<b><font color=#1aad19>' + li + '</font></b>' : li,\n            url: $('#noLoading#').lazyRule((li) => {\n                putMyVar('大类', li);\n                refreshPage(true);\n                return \"hiker://empty\";\n            }, li),\n            col_type: 'scroll_button',\n        })\n    });\n    d.push({\n        col_type: 'blank_block'\n    })\n}\n// 顶部分类参数映射\nswitch (getMyVar('大类', '国创')) {\n    case '国创':\n        seasonType = 4;\n        if (getMyVar('折叠', '关') == '开') {\n            if (page == 1) {\n                html = fetch('https://www.bilibili.com/guochuang/index');\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\n                分类列表.forEach(ul => {\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\n                    子分类列表 = pdfa(ul, 'ul&&li');\n                    子分类列表.forEach(li => {\n                        if (pdfh(li, 'li&&Text') == '其他') {\n                            return;\n                        }\n                        d.push({\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\n                                refreshPage(true);\n                                return \"hiker://empty\";\n                            }, li, 筛选条件),\n                            col_type: 'scroll_button'\n                        })\n                    });\n                    d.push({\n                        col_type: 'blank_block'\n                    })\n                });\n            }\n        }\n        break;\n    case '电视':\n        seasonType = 5;\n        if (getMyVar('折叠', '关') == '开') {\n            if (page == 1) {\n                html = fetch('https://www.bilibili.com/tv/index');\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\n                分类列表.forEach(ul => {\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\n                    子分类列表 = pdfa(ul, 'ul&&li');\n                    子分类列表.forEach(li => {\n                        if (pdfh(li, 'li&&Text') == '其他') {\n                            return;\n                        }\n                        d.push({\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\n                                refreshPage(true);\n                                return \"hiker://empty\";\n                            }, li, 筛选条件),\n                            col_type: 'scroll_button'\n                        })\n                    });\n                    d.push({\n                        col_type: 'blank_block'\n                    })\n                });\n            }\n        }\n        break;\n    case '纪录片':\n        seasonType = 3;\n        if (getMyVar('折叠', '关') == '开') {\n            if (page == 1) {\n                html = fetch('https://www.bilibili.com/documentary/index/');\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\n                分类列表.forEach(ul => {\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\n                    子分类列表 = pdfa(ul, 'ul&&li');\n                    子分类列表.forEach(li => {\n                        if (pdfh(li, 'li&&Text') == '其他') {\n                            return;\n                        }\n                        d.push({\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\n                                refreshPage(true);\n                                return \"hiker://empty\";\n                            }, li, 筛选条件),\n                            col_type: 'scroll_button'\n                        })\n                    });\n                    d.push({\n                        col_type: 'blank_block'\n                    })\n                });\n            }\n        }\n        break;\n    case '综艺':\n        seasonType = 7;\n        if (getMyVar('折叠', '关') == '开') {\n            if (page == 1) {\n                html = fetch('https://www.bilibili.com/variety/index');\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\n                分类列表.forEach(ul => {\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\n                    子分类列表 = pdfa(ul, 'ul&&li');\n                    子分类列表.forEach(li => {\n                        if (pdfh(li, 'li&&Text') == '其他') {\n                            return;\n                        }\n                        d.push({\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\n                                refreshPage(true);\n                                return \"hiker://empty\";\n                            }, li, 筛选条件),\n                            col_type: 'scroll_button'\n                        })\n                    });\n                    d.push({\n                        col_type: 'blank_block'\n                    })\n                });\n            }\n        }\n        break;\n    case '番剧':\n        seasonType = 1;\n        if (getMyVar('折叠', '关') == '开') {\n            if (page == 1) {\n                html = fetch('https://www.bilibili.com/anime/index');\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\n                分类列表.forEach(ul => {\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\n                    子分类列表 = pdfa(ul, 'ul&&li');\n                    子分类列表.forEach(li => {\n                        if (pdfh(li, 'li&&Text') == '其他') {\n                            return;\n                        }\n                        d.push({\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\n                                refreshPage(true);\n                                return \"hiker://empty\";\n                            }, li, 筛选条件),\n                            col_type: 'scroll_button'\n                        })\n                    });\n                    d.push({\n                        col_type: 'blank_block'\n                    })\n                });\n            }\n        }\n        break;\n    case '电影':\n        seasonType = 2;\n        if (getMyVar('折叠', '关') == '开') {\n            if (page == 1) {\n                html = fetch('https://www.bilibili.com/movie/index');\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\n                分类列表.forEach(ul => {\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\n                    子分类列表 = pdfa(ul, 'ul&&li');\n                    子分类列表.forEach(li => {\n                        if (pdfh(li, 'li&&Text') == '其他') {\n                            return;\n                        }\n                        d.push({\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\n                                refreshPage(true);\n                                return \"hiker://empty\";\n                            }, li, 筛选条件),\n                            col_type: 'scroll_button'\n                        })\n                    });\n                    d.push({\n                        col_type: 'blank_block'\n                    })\n                });\n            }\n        }\n        break;\n    default:\n        seasonType = 4;\n        if (getMyVar('折叠', '关') == '开') {\n            if (page == 1) {\n                html = fetch('https://www.bilibili.com/anime/index');\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\n                分类列表.forEach(ul => {\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\n                    子分类列表 = pdfa(ul, 'ul&&li');\n                    子分类列表.forEach(li => {\n                        if (pdfh(li, 'li&&Text') == '其他') {\n                            return;\n                        }\n                        d.push({\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\n                                refreshPage(true);\n                                return \"hiker://empty\";\n                            }, li, 筛选条件),\n                            col_type: 'scroll_button'\n                        })\n                    });\n                    d.push({\n                        col_type: 'blank_block'\n                    })\n                });\n            }\n        }\n        break;\n}\n// 子分类参数映射\nswitch (getMyVar('类型', '全部')) {\n    case '正片':\n        season_version = 1;\n        break;\n    case '电影':\n        season_version = 2;\n        break;\n    case '其他':\n        season_version = 3;\n        break;\n    default:\n        season_version = -1;\n        break;\n}\nswitch (getMyVar('配音', '全部')) {\n    case '原声':\n        spoken_language_type = 1;\n        break;\n    case '中文配音':\n        spoken_language_type = 2;\n        break;\n    default:\n        spoken_language_type = -1;\n        break;\n}\nswitch (getMyVar('地区', '全部')) {\n    case '中国大陆':\n        area = 1;\n        break;\n    case '日本':\n        area = 2;\n        break;\n    case '美国':\n        area = 3;\n        break;\n    case '英国':\n        area = 4;\n        break;\n    case '中国港台':\n        area = [6, 7];\n        break;\n    case '韩国':\n        area = 8;\n        break;\n    case '法国':\n        area = 9;\n        break;\n    case '泰国':\n        area = 10;\n        break;\n    case '西班牙':\n        area = 13;\n        break;\n    case '德国':\n        area = 15;\n        break;\n    case '意大利':\n        area = 35;\n        break;\n    case '其他':\n        // 只是番剧的情况_共55，要减去出现的——算了，直接在动态分类的时候去掉了\n        area = [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55];\n        break;\n    default:\n        area = -1;\n        break;\n}\nswitch (getMyVar('状态', '全部')) {\n    case '完结':\n        is_finish = 1;\n        break;\n    case '连载':\n        is_finish = 0;\n        break;\n    default:\n        is_finish = -1;\n        break;\n}\nswitch (getMyVar('出品', '全部')) {\n    case '央视':\n        producer_id = 4;\n        break;\n    case 'BBC':\n        producer_id = 1;\n        break;\n    case '探索频道':\n        producer_id = 7;\n        break;\n    case '国家地理':\n        producer_id = 14;\n        break;\n    case 'NHK':\n        producer_id = 2;\n        break;\n    case '历史频道':\n        producer_id = 6;\n        break;\n    case '卫视':\n        producer_id = 8;\n        break;\n    case '自制':\n        producer_id = 9;\n        break;\n    case 'ITV':\n        producer_id = 5;\n        break;\n    case 'SKY':\n        producer_id = 3;\n        break;\n    case 'ZDF':\n        producer_id = 10;\n        break;\n    case '合作机构':\n        producer_id = 11;\n        break;\n    case '国内其他':\n        producer_id = 12;\n        break;\n    case '国外其它':\n        producer_id = 13;\n        break;\n    default:\n        producer_id = -1;\n        break;\n}\nswitch (getMyVar('版权', '全部')) {\n    case '独家':\n        copyright = 3;\n        break;\n    case '其他':\n        copyright = [1, 2, 4];\n        break;\n    default:\n        copyright = -1;\n        break;\n}\nswitch (getMyVar('付费', '全部')) {\n    case '免费':\n        season_status = 1;\n        break;\n    case '付费':\n        season_status = [2, 6];\n        break;\n    case '大会员':\n        season_status = [4, 6];\n        break;\n    default:\n        season_status = -1;\n        break;\n}\nswitch (getMyVar('季度', '全部')) {\n    case '1月':\n        season_month = 1;\n        break;\n    case '4月':\n        season_month = 4;\n        break;\n    case '7月':\n        season_month = 7;\n        break;\n    case '10月':\n        season_month = 10;\n        break;\n    default:\n        season_month = -1;\n        break;\n}\n// 判断和映射年份\nswitch (getMyVar('大类', '国创')) {\n    case '国创':\n    case '番剧':\n        // 番剧和国创【也是叫做年份但参数名、格式和其他分类不一样】\n        anime_year = getMyVar('年份', '全部');\n        switch (anime_year.includes('-')) {\n            case true:\n                early = anime_year.split('-')[1];\n                later = anime_year.split('-')[0];\n                year = `[${early},${Number(later) + 1})`;\n                break;\n            case false:\n                switch (anime_year) {\n                    case '90年代':\n                        year = '[1990,2000)';\n                        break;\n                    case '80年代':\n                        year = '[1980,1990)';\n                        break;\n                    case '更早':\n                        year = '[,1980)';\n                        break;\n                    case '全部':\n                        year = -1;\n                        break;\n                    default:\n                        year = `[${anime_year},${Number(anime_year) + 1})`;\n                        break;\n                }\n        }\n    default:\n        // 除了番剧和国创的其他分类\n        tv_year = getMyVar('年份', '全部');\n        switch (tv_year.includes('-')) {\n            case true:\n                early = tv_year.split('-')[1];\n                later = tv_year.split('-')[0];\n                release_date = `[${early}-01-01 00:00:00,${Number(later) + 1}-01-01 00:00:00)`\n                break;\n            case false:\n                switch (tv_year) {\n                    case '90年代':\n                        release_date = '[1990-01-01 00:00:00,2000-01-01 00:00:00)'\n                        break;\n                    case '80年代':\n                        release_date = '[1980-01-01 00:00:00,1990-01-01 00:00:00)'\n                        break;\n                    case '更早':\n                        release_date = '[,1980-01-01 00:00:00)';\n                        break;\n                    case '全部':\n                        release_date = -1;\n                        break;\n                    default:\n                        release_date = `[${tv_year}-01-01 00:00:00,${Number(tv_year) + 1}-01-01 00:00:00)`;\n                        break;\n                }\n        }\n}\nswitch (getMyVar('风格', '全部')) {\n    case '电影':\n        style_id = -10;\n        break;\n    // 番剧栏目\n    case '原创':\n        style_id = 10010;\n        break;\n    case '漫画改':\n        style_id = 10011;\n        break;\n    case '小说改':\n        style_id = 10012;\n        break;\n    case '游戏改':\n        style_id = 10013;\n        break;\n    case '特摄':\n        style_id = 10014;\n        break;\n    case '布袋戏':\n        style_id = 10015;\n        break;\n    case '热血':\n        style_id = 10016;\n        break;\n    case '穿越':\n        style_id = 10017;\n        break;\n    case '奇幻':\n        style_id = 10018;\n        break;\n    // 咋跳了一个捏~\n    case '战斗':\n        style_id = 10020;\n        break;\n    case '搞笑':\n        style_id = 10021;\n        break;\n    case '日常':\n        style_id = 10022;\n        break;\n    case '科幻':\n        style_id = 10023;\n        break;\n    case '萌系':\n        style_id = 10024;\n        break;\n    case '治愈':\n        style_id = 10025;\n        break;\n    case '校园':\n        style_id = 10026;\n        break;\n    case '少儿':\n        style_id = 10027;\n        break;\n    case '泡面':\n        style_id = 10028;\n        break;\n    case '恋爱':\n        style_id = 10029;\n        break;\n    case '少女':\n        style_id = 10030;\n        break;\n    case '魔法':\n        style_id = 10031;\n        break;\n    case '冒险':\n        style_id = 10032;\n        break;\n    case '历史':\n        style_id = 10033;\n        break;\n    case '架空':\n        style_id = 10034;\n        break;\n    case '机战':\n        style_id = 10035;\n        break;\n    case '神魔':\n        style_id = 10036;\n        break;\n    case '声控':\n        style_id = 10037;\n        break;\n    case '运动':\n        style_id = 10038;\n        break;\n    case '励志':\n        style_id = 10039;\n        break;\n    case '音乐':\n        style_id = 10040;\n        break;\n    case '推理':\n        style_id = 10041;\n        break;\n    case '社团':\n        style_id = 10042;\n        break;\n    case '智斗':\n        style_id = 10043;\n        break;\n    case '催泪':\n        style_id = 10044;\n        break;\n    case '美食':\n        style_id = 10045;\n        break;\n    case '偶像':\n        style_id = 10046;\n        break;\n    case '乙女':\n        style_id = 10047;\n        break;\n    case '职场':\n        style_id = 10048;\n        break;\n\n    // 综艺栏目、电影\n    case '剧情':\n        style_id = 10050;\n        break;\n    case '喜剧':\n        style_id = 10051;\n        break;\n    case '爱情':\n        style_id = 10052;\n        break;\n    case '动作':\n        style_id = 10053;\n        break;\n    case '恐怖':\n        style_id = 10054;\n        break;\n    case '犯罪':\n        style_id = 10055;\n        break;\n    case '惊悚':\n        style_id = 10056;\n        break;\n    case '悬疑':\n        style_id = 10057;\n        break;\n    case '战争':\n        style_id = 10058;\n        break;\n    case '动画':\n        style_id = 10059;\n        break;\n    case '传记':\n        style_id = 10060;\n        break;\n    case '家庭':\n        style_id = 10061;\n        break;\n    case '歌舞':\n        style_id = 10062;\n        break;\n    case '纪实':\n        style_id = 10063;\n        break;\n    case '灾难':\n        style_id = 10064;\n        break;\n    case '人文':\n        style_id = 10065;\n        break;\n    case '科技':\n        style_id = 10066;\n        break;\n    case '宇宙':\n        style_id = 10068;\n        break;\n    case '萌宠':\n        style_id = 10069;\n        break;\n    case '社会':\n        style_id = 10070;\n        break;\n    case '动物':\n        style_id = 10071;\n        break;\n    case '自然':\n        style_id = 10072;\n        break;\n    case '医疗':\n        style_id = 10073;\n        break;\n    case '军事':\n        style_id = 10074;\n        break;\n    case '罪案':\n        style_id = 10075;\n        break;\n    case '神秘':\n        style_id = 10076;\n        break;\n    case '旅行':\n        style_id = 10077;\n        break;\n    case '武侠':\n        style_id = 10078;\n        break;\n    case '青春':\n        style_id = 10079;\n        break;\n    case '都市':\n        style_id = 10080;\n        break;\n    case '古装':\n        style_id = 10081;\n        break;\n    case '谍战':\n        style_id = 10082;\n        break;\n    case '经典':\n        style_id = 10083;\n        break;\n    case '情感':\n        style_id = 10084;\n        break;\n    case '神话':\n        style_id = 10085;\n        break;\n    case '年代':\n        style_id = 10086;\n        break;\n    case '农村':\n        style_id = 10087;\n        break;\n    case '刑侦':\n        style_id = 10088;\n        break;\n    case '军旅':\n        style_id = 10089;\n        break;\n    case '访谈':\n        style_id = 10090;\n        break;\n    case '脱口秀':\n        style_id = 10091;\n        break;\n    case '真人秀':\n        style_id = 10092;\n        break;\n    case '选秀':\n        style_id = 10094;\n        break;\n    case '旅游':\n        style_id = 10095;\n        break;\n    case '晚会':\n        style_id = 10098;\n        break;\n    case '演唱会':\n        style_id = 10096;\n        break;\n    case '亲子':\n        style_id = 10097;\n        break;\n    case '养成':\n        style_id = 10099;\n        break;\n    case '文化':\n        style_id = 10100;\n        break;\n    // 电影栏目\n    case '短片':\n        style_id = 10104;\n        break;\n    default:\n        style_id = -1;\n        break;\n}\n// 映射真实请求地址\nswitch (seasonType) {\n    case 4:\n        // 国创\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?season_version=' + season_version + '&is_finish=' + is_finish + '&copyright=' + copyright + '&season_status=' + season_status + '&year=' + year + '&style_id=' + style_id + '&order=3&st=4&sort=0&page=' + page + '&season_type=4&pagesize=30&type=1'\n        break;\n    case 5:\n        // 电视剧\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?area=' + area + '&style_id=' + style_id + '&release_date=' + release_date + '&season_status=' + season_status + '&order=2&st=5&sort=0&page=' + page + '&season_type=5&pagesize=30&type=1'\n        break;\n    case 7:\n        // 综艺\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?season_status=' + season_status + '&style_id=' + style_id + '&order=2&st=7&sort=0&page=' + page + '&season_type=7&pagesize=30&type=1';\n        break;\n    case 1:\n        // 番剧\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?season_version=' + season_version + '&spoken_language_type=' + spoken_language_type + '&area=' + area + '&is_finish=' + is_finish + '&copyright=' + copyright + '&season_status=' + season_status + '&season_month=' + season_month + '&year=' + year + '&style_id=' + style_id + '&order=3&st=1&sort=0&page=' + page + '&season_type=1&pagesize=30&type=1';\n        break;\n    case 3:\n        // 纪录片\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?style_id=' + style_id + '&producer_id=' + producer_id + '&release_date=' + release_date + '&season_status=' + season_status + '&order=2&st=3&sort=0&page=' + page + '&season_type=3&pagesize=30&type=1'\n        break;\n    case 2:\n        // 电影\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?area=' + area + '&style_id=' + style_id + '&release_date=' + release_date + '&season_status=' + season_status + '&order=2&st=2&sort=0&page=' + page + '&season_type=2&pagesize=30&type=1'\n        break;\n}\ntrue_url = encodeURI(true_url);\nlist = JSON.parse(fetch(true_url)).data.list;\ntry {\n    list.forEach(movie => {\n        d.push({\n            title: movie.title,\n            url: \"hiker://page/filmerji#immersiveTheme#\",\n            img: movie.cover + \"@Referer=\",\n            desc: movie.order,\n            col_type: 'movie_3',\n            extra: {\n                season_id: movie.season_id\n            }\n        });\n    });\n} catch (e) {\n    log('已经抵达页底' + MY_PAGE);\n}\n"},{"col_type":"movie_3","name":"热映时间表","path":"UpdateTables","rule":"function color(text, color) {\n\n    text += \"\";\n\n    if (text.indexOf(\"““””\") === 0) {\n\n        text.replace(\"““””\", \"\");\n\n    }\n\n    return \"““””<font color='\" + color + \"'>\" + text + \"</font>\";\n\n}\n\nvar tabs = {\n\n    \"番剧\": 1,\n\n    \"纪录片\": 3,\n\n    \"国创\": 4\n\n}\n\nif (MY_PAGE == 1) {\n\n    Object.keys(tabs).forEach(item => {\n\n        d.push({\n\n            title: (getMyVar(\"juji\", \"国创\") == item ? color(item, \"red\") : item),\n\n            url: $().lazyRule((a) => {\n\n                putMyVar(\"juji\", a)\n\n                refreshPage()\n\n                return \"toast://切换成功\"\n\n            }, item),\n\n            col_type: \"scroll_button\"\n\n        })\n\n    })\n\n    d.push({\n\n        col_type: \"line\"\n\n    })\n\n    let days = 7\n\n    for (let i = 1; i < days; i++) {\n\n        d.push({\n\n            title: (getMyVar(\"from\", \"1\") == i + \"\" ? color(i + \"天前\", \"red\") : i + \"天前\"),\n\n            url: $().lazyRule((i) => {\n\n                putMyVar(\"from\", i + \"\")\n\n                refreshPage()\n\n                return \"hiker://empty\"\n\n            }, i),\n\n            col_type: \"scroll_button\"\n\n        })\n\n    }\n\n    d.push({\n\n        col_type: \"line\"\n\n    })\n\n    for (let i = 1; i < days; i++) {\n\n        d.push({\n\n            title: (getMyVar(\"to\", \"1\") == i + \"\" ? color(i + \"天后\", \"red\") : i + \"天后\"),\n\n            url: $().lazyRule((i) => {\n\n                putMyVar(\"to\", i + \"\")\n\n                refreshPage()\n\n                return \"hiker://empty\"\n\n            }, i),\n\n            col_type: \"scroll_button\"\n\n        })\n\n    }\n\n\n    $.require(\"hiker://page/api\").getMovies(tabs[getMyVar(\"juji\", \"国创\")], getMyVar(\"from\", \"1\"), getMyVar(\"to\", \"1\")).forEach(item => {\n\n        d.push({\n\n            title: item.date + \" 周\" + item.day_of_week,\n\n            col_type: \"text_1\",\n\n            url: \"hiker://empty\"\n\n        })\n\n        item.episodes.forEach(i => {\n\n            d.push({\n\n                title: i.title,\n\n                img: i.cover+'@Referer=',\n\n                desc:i.pub_index.match(/即将/)?'‘‘’’<font color=\"red\">'+i.pub_index+'\\n'+i.pub_time+'</font>': i.pub_index+ '\\n' + i.pub_time,\n\n                url: \"hiker://page/filmerji#immersiveTheme#\",\n\n                extra: {\n\n                    \"season_id\": i.season_id\n\n                }\n\n            })\n\n        })\n\n    })\n\n}\n\n\n\n"},{"col_type":"movie_3","name":"登录","path":"login","rule":"js:\nvar d = [];\nsetPageTitle('账号登录页面')\nd.push({\n    title: 'cookie登录',\n    url: $('#noLoading#').lazyRule(() => {\n        return $('', '请输入你的cookie').input(() => {\n            if (input == \"\") return \"toast://cookie不能为空\";\n            let userinfo = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/nav\", {\n                headers: {\n                    \"Cookie\": input\n                }\n            })).data;\n            if (userinfo.isLogin === false) return \"toast://你的cookie貌似失效了喔~\";\n            userInfo = {\n                cookie: input,\n                userName: userinfo.uname,\n                userMid:  userinfo.mid,\n                vipStatus: userinfo.vipStatus,\n                face: userinfo.face + \"@Referer=\"\n            }\n            setting = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\"));\n            setting.userList.unshift(userInfo);\n            // 过滤掉cookie为空的元素\n            setting.userList = setting.userList.filter(user => user.cookie !== '');\n            saveFile(\"hiker://files/rules/cy/bili.txt\", JSON.stringify(setting));\n            back(true);\n            return \"toast://cookie设置成功\";\n        })\n    }),\n    col_type: 'text_center_1'\n});\nd.push({\n    title: '登陆说明',\n    desc: \"页面下方登陆成功后，再点击确认登录即可\",\n    url: \"hiker://empty\",\n    col_type: 'text_center_1'\n}, {\n    title: '登陆成功后，再点我！',\n    url: $('#noLoading#').lazyRule(() => {\n        // 这里负责写Cookie，先读，再追加\n        cookie = getVar('biliCookie','');\n        log(\"获取到的cookie:\"+cookie);\n        if (cookie == \"\") return \"toast://获取cookie失败，再等等看？\";\n        let userinfo = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/nav\", {\n            headers: {\n                \"Cookie\": cookie\n            }\n        })).data;\n        if (userinfo.isLogin === false) return \"toast://你先登录，再获取cookie，OK？\";\n        userInfo = {\n            cookie: cookie,\n            userName: userinfo.uname,\n            userMid:  userinfo.mid,\n            vipStatus: userinfo.vipStatus,\n            face: userinfo.face + \"@Referer=\"\n        }\n        setting = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\"));\n        setting.userList.unshift(userInfo);\n        // 过滤掉cookie为空的元素\n        setting.userList = setting.userList.filter(user => user.cookie !== '');\n        saveFile(\"hiker://files/rules/cy/bili.txt\", JSON.stringify(setting));\n        back(true);\n        return 'toast://如果没有登陆成功，建议你下次登陆成功后不要点那么快~'\n    }),\n    col_type: 'text_1'\n}, {\n    url: \"https://m.bilibili.com/\",\n    col_type: \"x5_webview_single\",\n    desc: \"list&&screen-300\",\n    extra: {\n        js: $.toString(() => {\n            var token_timer = function () {\n                var timer = setInterval(() => {\n                    cookie = fba.getCookie(\"https://m.bilibili.com/\");\n                    fba.putVar('biliCookie', cookie);\n                }, 100)\n            };\n            token_timer();\n        }),\n        canBack: true,\n        ua: MOBILE_UA\n    }\n})\nsetResult(d);\n"},{"col_type":"movie_3","name":"影视二级","path":"filmerji","rule":"js:\n// 数据定位\nvar d = [];\nif (MY_PARAMS.season_id) {\n    season_id = MY_PARAMS.season_id + \"\";\n    Data = JSON.parse(fetch('https://api.bilibili.com/pgc/view/web/season?season_id=' + season_id)).result;\n} else {\n    Data = JSON.parse(fetch('https://api.bilibili.com/pgc/view/web/season?ep_id=' + MY_PARAMS.ep_id)).result;\n}\nif (!Data.cover.match(/https/)) {\n    封面 = Data.cover.replace('http', 'https') + \"@Referer=\";\n} else {\n    封面 = Data.cover + \"@Referer=\";\n}\ntry {\n    地区 = Data.areas[0].name;\n} catch (e) {\n    地区 = '地区暂无';\n}\n简介 = Data.evaluate;\n// 正片\n类型 = Data.positive.title;\n上映时间 = Data.publish.pub_time;\ntry {\n    得分 = Data.rating.score;\n} catch (e) {\n    得分 = '暂无得';\n}\n追剧日历 = Data.new_ep.desc;\n更新进度 = Data.new_ep.title;\n影片名称 = Data.title;\n第二标题 = Data.share_sub_title;\n剧集列表 = Data.episodes.filter((list) => {\n    // 过滤预告、花絮\n    if (getItem('previewSwitch', 'fold') === 'fold' && list.badge.match(/预|花絮/)) {\n        return false;\n    } else {\n        return true;\n    }\n});\n短讯 = \"⭐\" + 类型 + \"⭐\" + 第二标题 + '\\n' + 地区 + '-' + 得分 + '分\\n-' + 上映时间 + '-';\n// 重定义二级页面数据\nsetPageTitle(影片名称);\nsetPagePicUrl(封面);\n// 前置参数和预处理---\nimgLink = storage0.getMyVar('图标');\n// 全局lazy——直链+断插\nvar lazy = $('').lazyRule(() => {\n    videoParms = findItem(input);\n    aid = videoParms.extra.aid;\n    bvid = videoParms.extra.bvid;\n    cid = videoParms.extra.cid;\n    badge = videoParms.extra.badge;\n    // 提交历史记录\n    $.require(\"hiker://page/api\").reportProcess(aid, cid);\n    vipStatus = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].vipStatus;\n    if (vipStatus != 0) {\n        // 大会员\n        if (badge.match(/付费/)) {\n            return $(['魔断解析', '已购买'], 1).select((input, aid, cid) => {\n                if (input == '魔断解析') {\n                    eval(fetch('hiker://files/cache/Parse_Dn.js', {}));\n                    return aytmParse(link);\n                } else {\n                    return $.require(\"hiker://page/api\").biliLazy(aid, cid, 116).replace(/;/g, \"；；\");\n                }\n            }, link, aid, cid)\n        } else {\n            return $.require(\"hiker://page/api\").biliLazy(aid, cid, 116).replace(/;/g, \"；；\");\n        }\n    } else {\n        // 普通用户\n        var setting=JSON.parse(request(\"hiker://files/rules/cy/bili.txt\"));\n        var hasBfKey=setting.bfKey!=''?true:false;\n        if (!hasBfKey) {\n            if (badge.match(/会员|付费/)) {\n                eval(fetch('hiker://files/cache/Parse_Dn.js', {}));\n                return aytmParse(input);\n            } else {\n                return $.require(\"hiker://page/api\").biliLazy(aid, cid, 116).replace(/;/g, \"；；\");\n            }\n        } else {\n            // 共享会员播放权益\n            if (badge.match(/付费/)) {\n                return $(['魔断解析', '已购买'], 1).select((input, aid, cid) => {\n                    if (input == '魔断解析') {\n                        eval(fetch('hiker://files/cache/Parse_Dn.js', {}));\n                        return aytmParse(link);\n                    } else {\n                        return $.require(\"hiker://page/api\").biliLazy(aid, cid, 116).replace(/;/g, \"；；\");\n                    }\n                }, link, aid, cid)\n            } else {\n                return $.require(\"hiker://page/api\").biliLazy(aid, cid, 116).replace(/;/g, \"；；\");\n            }\n        }\n    }\n});\nvar Color = \"#19B89D\";\nvar 每页集数 = 30;\nvar 搜索模式 = '分组';\nvar 调用名称 = '简影';\nputMyVar('折叠', '关');\nputMyVar('日历', '关');\nputMyVar('Data', Data);\nputMyVar('lazy', lazy);\n// 清除变量\naddListener('onClose', $.toString(() => {\n    clearMyVar('分集起');\n    clearMyVar('分集终');\n    clearMyVar('折叠');\n    clearMyVar('日历');\n    clearMyVar('Data');\n    clearMyVar('lazy');\n    clearMyVar('剧集列表');\n}))\n// 设置动态最新章节\nsetLastChapterRule('js:' + $.toString(() => {\n    eval(JSON.parse(request('hiker://page/getUpdate')).rule);\n}));\n// 页面内容正文---\n// 基本信息模块\nd.push({\n    title: 短讯,\n    desc: 简介 == '' ? '暂无简介' : 简介.substring(0, 45) + '‘‘’’…<font color=\"#1C1C1C\">详情</font>',\n    img: 封面,\n    url: $().rule((简介) => {\n        res = {};\n        var d = [];\n        d.push({\n            title: '影片简介：' + '\\n\\t\\t\\t\\t\\t\\t\\t' + 简介,\n            col_type: 'long_text'\n        });\n        res.data = d;\n        setHomeResult(res);\n    }, 简介),\n    col_type: 'movie_1_vertical_pic_blur',\n    extra: {\n        longClick: [{\n            title: '预告、花絮开关', js: $.toString(() => {\n                if (getItem('previewSwitch', 'fold') == 'fold') {\n                    setItem('previewSwitch', 'open');\n                    refreshPage(true);\n                    return \"toast://预告已经切换为展示~\";\n                } else {\n                    setItem('previewSwitch', 'fold');\n                    refreshPage(true);\n                    return \"toast://预告不再展示~\";\n                }\n            }),\n        }, {\n            title: 'dm盒子', js: $.toString(() => {\n                return 'hiker://page/setting#noHistory#?rule=dm盒子';\n            })\n        }, {\n            title: '弹幕控制', js: $.toString(() => {\n                if (getItem('isOverrideSave', 'false') == 'true') {\n                    setItem('isOverrideSave', 'false');\n                    return 'toast://弹幕将不受dm盒子参数控制';\n                } else {\n                    setItem('isOverrideSave', 'true');\n                    return 'toast://弹幕将受到dm盒子参数控制';\n                }\n            })\n        }]\n    }\n});\n// 更新日历模块\nd.push({\n    title: '日历',\n    img: imgLink.日历,\n    url: $('#noLoading#').lazyRule((追剧日历, 更新进度) => {\n        if (getMyVar('日历', '关') == '开') {\n            deleteItem('追剧日历');\n            putMyVar('日历', '关');\n        } else {\n            addItemAfter('显示模式', {\n                title: 追剧日历.match(/完结|期待/) ? 追剧日历 : 追剧日历 + '<br><font color=\"red\">更新至' + (更新进度.match(/[\\u4e00-\\u9fa5]/) ? 更新进度 : ('第' + (更新进度 == '' ? 0 : 更新进度) + '话')) + '</font>',\n                col_type: \"rich_text\",\n                extra: {\n                    id: '追剧日历'\n                }\n            });\n            putMyVar('日历', '开');\n        }\n        return 'toast://已切换日历为:' + getMyVar('日历', '开')\n    }, 追剧日历, 更新进度),\n    col_type: 'icon_5'\n});\n// 订阅模块\nd.push({\n    title: '订阅',\n    img: imgLink.订阅,\n    url: $('#noLoading#').lazyRule(() => {\n        selectionList = ['订阅', '取消订阅'];\n        return $(selectionList, 2).select(() => {\n            season_id = JSON.parse(getMyVar('Data')).season_id;\n            if (input == '订阅') {\n                res = $.require(\"hiker://page/api\").subscribeFilm(season_id);\n            } else {\n                res = $.require(\"hiker://page/api\").cancelSubscribeFilm(season_id);\n            }\n            return 'toast://' + res;\n        });\n    }),\n    col_type: 'icon_5'\n});\n// 评论模块\nd.push({\n    title: '评论',\n    img: imgLink.查看评论,\n    url: $('#noLoading#').lazyRule(() => {\n        return $('hiker://empty').rule(() => {\n            var d = [];\n            List = JSON.parse(getMyVar('Data')).episodes;\n            List.forEach(item => {\n                d.push({\n                    title: item.share_copy + '<font color=\"#33cccc\">\t➮</font>',\n                    img: item.cover + '@Referer=',\n                    url: 'hiker://page/Comments?p=fypage',\n                    col_type: \"avatar\",\n                    extra: {\n                        \"id\": item.aid,\n                        \"type\": 1\n                    }\n                });\n            });\n            setResult(d);\n        });\n    }),\n    col_type: 'icon_5'\n});\n\n// 精彩继续模块\nd.push({\n    title: '周边',\n    img: imgLink.周边,\n    url: $('#noLoading#').lazyRule(() => {\n        Data = JSON.parse(getMyVar('Data'));\n        // 有些没有直接去掉懒得处理~\n        if (Data.section) {\n            周边数组 = [\"🏷️相关系列\", \"🤣PV&花絮\", \"🍉竖屏也精彩\", \"🔥精彩二创\"];\n        } else {\n            周边数组 = [\"🏷️相关系列\"];\n        }\n        // 周边数组 = [\"🏷️相关系列\", \"🤣PV&花絮\", \"竖屏也精彩\", \"精彩二创\"];\n        return $(周边数组, 1, 'ღ精彩继续').select(() => {\n            Data = JSON.parse(getMyVar('Data'));\n            lazy = getMyVar('lazy');\n            if (input === '🏷️相关系列') {\n                系列名称 = Data.season_title\n                系列数据 = Data.seasons;\n                return $().rule((系列数据) => {\n                    d = [];\n                    setPageTitle('🏷️相关系列');\n                    if (系列数据 == [] || 系列数据 == '') {\n                        d.push({\n                            title: '‘‘’’<big><font color=\"red\">⭐该影片没有相关系列哦~⭐</font></big>',\n                            url: 'toast://都没有，，你点啥呀~',\n                            desc: '敬请期待~',\n                            col_type: 'text_center_1'\n                        });\n                    }\n                    系列数据.forEach(list => {\n                        d.push({\n                            title: list.season_title,\n                            img: (list.horizontal_cover_1610 == '' ? (list.horizontal_cover_169 == '' ? list.cover : list.horizontal_cover_169) : list.horizontal_cover_1610) + \"@Referer=\",\n                            url: 'hiker://page/filmerji#immersiveTheme#',\n                            desc: list.new_ep.index_show,\n                            col_type: 'movie_1_left_pic',\n                            extra: {\n                                \"ep_id\": list.new_ep.id\n                            }\n                        });\n                    });\n                    setHomeResult(d);\n                }, 系列数据)\n            } else if (input === '🤣PV&花絮') {\n                try {\n                    PV和花絮数据 = Data.section[0].episodes;\n                    return $().rule((PV和花絮数据, lazy) => {\n                        d = [];\n                        setPageTitle('🤣PV&花絮');\n                        if (PV和花絮数据 == [] || PV和花絮数据 == '') {\n                            d.push({\n                                title: '‘‘’’<big><font color=\"red\">⭐该影片/视频没有相关PV和花絮哦~⭐</font></big>',\n                                url: 'toast://都没有，，你点啥呀~',\n                                desc: '敬请期待~',\n                                col_type: 'text_center_1'\n                            });\n                        }\n                        PV和花絮数据.forEach(list => {\n                            d.push({\n                                title: list.title,\n                                img: list.cover + \"@Referer=\",\n                                url: list.link + lazy,\n                                desc: list.subtitle + '\\n' + list.long_title,\n                                col_type: 'movie_1_left_pic',\n                                extra: {\n                                    id: list.link,\n                                    aid: list.aid,\n                                    bvid: list.bvid,\n                                    cid: list.cid,\n                                    badge: list.badge\n                                }\n                            });\n                        });\n                        setHomeResult(d);\n                    }, PV和花絮数据, lazy)\n                } catch (e) {\n                    return 'toast://没有数据哦~'\n                }\n            } else if (input === '🍉竖屏也精彩') {\n                try {\n                    竖屏也精彩数据 = Data.section[1].episodes;\n                    return $().rule((竖屏也精彩数据, lazy) => {\n                        d = [];\n                        setPageTitle('🍉竖屏也精彩');\n                        if (竖屏也精彩数据 == [] || 竖屏也精彩数据 == '') {\n                            d.push({\n                                title: '‘‘’’<big><font color=\"red\">⭐该影片/视频没有相关竖屏短视频哦~⭐</font></big>',\n                                url: 'toast://都没有，，你点啥呀~',\n                                desc: '敬请期待~',\n                                col_type: 'text_center_1'\n                            });\n                        }\n                        竖屏也精彩数据.forEach(list => {\n                            d.push({\n                                title: list.title,\n                                img: list.cover + \"@Referer=\",\n                                url: list.link + lazy,\n                                desc: list.subtitle + '\\n' + list.long_title,\n                                col_type: 'movie_1_left_pic',\n                                extra: {\n                                    id: list.link,\n                                    aid: list.aid,\n                                    bvid: list.bvid,\n                                    cid: list.cid,\n                                    badge: list.badge\n                                }\n                            });\n                        });\n                        setHomeResult(d);\n                    }, 竖屏也精彩数据, lazy)\n                } catch (e) {\n                    return 'toast://没有数据哦~'\n                }\n            } else if (input === '🔥精彩二创') {\n                try {\n                    精彩二创数据 = Data.section[2].episodes;\n                    return $().rule((精彩二创数据, lazy) => {\n                        d = [];\n                        setPageTitle('🔥精彩二创');\n                        if (精彩二创数据 == [] || 精彩二创数据 == '') {\n                            d.push({\n                                title: '‘‘’’<big><font color=\"red\">⭐该影片/视频没有二创作品哦~⭐</font></big>',\n                                url: 'toast://都没有，，你点啥呀~',\n                                desc: '敬请期待~',\n                                col_type: 'text_center_1'\n                            });\n                        }\n                        精彩二创数据.forEach(list => {\n                            // 针对部分参数缺失的情况如凡人修仙传写的，，\n                            if (list.aid == 0 || list.cid == 0) {\n                                viedeoData = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/view?aid=\" + list.link.split('av')[1], {\n                                    headers: {\n                                        \"User-Agent\": PC_UA,\n                                        \"Referer\": 'https://www.bilibili.com/'\n                                    },\n                                    method: \"GET\"\n                                })).data;\n                                aid = viedeoData.aid;\n                                bvid = viedeoData.bvid;\n                                cid = viedeoData.cid;\n                            } else {\n                                aid = list.aid;\n                                bvid = list.bvid;\n                                cid = list.cid;\n                            }\n                            d.push({\n                                title: list.title,\n                                img: list.cover + \"@Referer=\",\n                                url: list.link + lazy,\n                                desc: list.subtitle + '\\n' + list.long_title,\n                                col_type: 'movie_1_left_pic',\n                                extra: {\n                                    id: list.link,\n                                    aid: aid,\n                                    bvid: bvid,\n                                    cid: cid,\n                                    badge: list.badge\n                                }\n                            });\n                        });\n                        setHomeResult(d);\n                    }, 精彩二创数据, lazy)\n                } catch (e) {\n                    return 'toast://没有数据哦~'\n                }\n            }\n            return \"toast://正在进入\" + input + \"界面...\";\n        })\n    }),\n    col_type: \"icon_5\",\n    extra: {\n        id: '精彩继续'\n    }\n});\n// 显示模式更改模块\nd.push({\n    title: getItem('模式', '双边'),\n    img: getItem('模式', '双边') == '列表' ? imgLink.列表 : imgLink.双边,\n    url: $('#noLoading#').lazyRule(() => {\n        显示的剧集列表 = JSON.parse(getMyVar('显示的剧集列表'));\n        if (getItem('模式', '双边') == '列表') {\n            显示的剧集列表.forEach(el => {\n                updateItem(el.link, {\n                    col_type: 'movie_2',\n                });\n            });\n            setItem('模式', '双边')\n        } else {\n            显示的剧集列表.forEach(el => {\n                updateItem(el.link, {\n                    col_type: 'movie_1_left_pic',\n                });\n            });\n            setItem('模式', '列表')\n        }\n        imgLink = storage0.getMyVar('图标');\n        updateItem('显示模式', {\n            title: getItem('模式', '双边'),\n            img: getItem('模式', '双边') == '列表' ? imgLink.列表 : imgLink.双边,\n        });\n        return 'toast://已切换模式为:' + getItem('模式', '双边')\n    }),\n    col_type: 'icon_5',\n    extra: {\n        id: '显示模式'\n    }\n}, {\n    col_type: 'line_blank',\n});\n// 选插模块——局部刷新版\n来源 = 'bl';\nputMyVar('简插', $.toString(() => {\n    let titleArr = []\n    setFile = readFile('hiker://files/rules/DuanNian/MyParse.json');\n    try {\n        eval('json=' + setFile);\n    } catch (e) {\n        log('Json解析发生了错误:' + e.message);\n    }\n    titleArr = json.title;\n    let barry1 = ['✍️辅助'];\n    let barry2 = ['📦️魔断'];\n    let barry3 = ['🔍搜索'];\n    titleArr = barry3.concat(titleArr);\n    titleArr = barry2.concat(titleArr);\n    titleArr = barry1.concat(titleArr);\n    eval('op=json.settings.' + 来源);\n    titleArr = titleArr.map((it) => {\n        return it === op ? '👉' + it : it;\n    });\n    putMyVar('解析数组', titleArr);\n    putMyVar('setFile', setFile);\n}))\neval(getMyVar('简插'));\nd.push({\n    title: '解析：🔘<font color=\"' + Color + '\">' + op + '</font>\\t\\t页码：<font color=\"' + Color + '\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\n    url: $('#noLoading#').lazyRule((json, 来源, Color, op, 影片名称, 搜索模式, 调用名称) => {\n        eval(getMyVar('简插'));\n        return $(eval(getMyVar('解析数组')), 3).select((json, 来源, Color, op, 影片名称, 搜索模式, 调用名称) => {\n            setFile = getMyVar('setFile');\n            input = input.replace(/👉/g, '');\n            if (input === '✍️辅助') {\n                return $().rule(() => {\n                    eval(JSON.parse(request('hiker://page/home?rule=配置助手')).rule);\n                })\n            } else if (input === '📦️魔断') {\n                return \"hiker://page/Route?rule=MyFieldᴰⁿ&type=编辑#noHistory#\";\n            } else if (input === '🔍搜索') {\n                if (搜索模式 == '分组') {\n                    return \"hiker://search?s=\" + 影片名称 + \"&group=\" + 调用名称;\n                } else {\n                    return \"hiker://search?s=\" + 影片名称 + \"&rule=\" + 调用名称;\n                }\n            }\n            // 原先的配置\n            originSettings = JSON.stringify(json.settings);\n            // 修改配置\n            eval('json.settings.' + 来源 + '=input;');\n            setFile = setFile.replace(originSettings, JSON.stringify(json.settings));\n            saveFile('hiker://files/rules/DuanNian/MyParse.json', setFile);\n            // 刷新元素\n            eval(getMyVar('简插'));\n            updateItem('op', {\n                title: '解析：🔘<font color=\"' + Color + '\">' + op + '</font>\\t\\t页码：<font color=\"' + Color + '\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\n            });\n            return \"toast://切换解析口为:\" + input;\n        }, json, 来源, Color, op, 影片名称, 搜索模式, 调用名称)\n    }, json, 来源, Color, op, 影片名称, 搜索模式, 调用名称),\n    img: 'hiker://files/rules/cy/tubiao/bilibili.svg',\n    col_type: \"avatar\",\n    extra: {\n        id: 'op'\n    }\n});\n// 滚动剧集条栏\n剧集长度 = 剧集列表.length;\nif (剧集长度 > 每页集数) {\n    putMyVar('刷新选集', $.toString(() => {\n        putMyVar('分集起', start);\n        putMyVar('分集终', end);\n        eval(getMyVar('简插'));\n        updateItem('op', {\n            title: '解析：🔘<font color=\"' + Color + '\">' + op + '</font>\\t\\t页码：<font color=\"' + Color + '\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\n        })\n        // 删除\n        显示的剧集列表 = JSON.parse(getMyVar('显示的剧集列表'));\n        显示的剧集列表.forEach(el => {\n            deleteItem(el.link);\n        });\n        // 添加\n        lazy = getMyVar('lazy');\n        剧集列表 = JSON.parse(getMyVar('剧集列表'));\n        显示的剧集列表 = 剧集列表.slice(start - 1, end);\n        newArray = [];\n        index = 1;\n        显示的剧集列表.forEach(list => {\n            if (getItem('模式', '双边') == '列表') {\n                newArray.push({\n                    title: list.long_title,\n                    img: list.cover + \"@Referer=\",\n                    url: list.link + lazy,\n                    desc: list.title.match(/[0-9]/) ? (list.badge + '第' + list.title + '话') : list.title,\n                    col_type: 'movie_1_left_pic',\n                    extra: {\n                        id: list.link,\n                        aid: list.aid,\n                        bvid: list.bvid,\n                        cid: list.cid,\n                        badge: list.badge\n                    }\n                });\n            } else {\n                newArray.push({\n                    title: list.long_title,\n                    img: list.cover + \"@Referer=\",\n                    url: list.link + lazy,\n                    desc: list.title.match(/[0-9]/) ? (list.badge + '第' + list.title + '话') : list.title,\n                    col_type: 'movie_2',\n                    extra: {\n                        id: list.link,\n                        aid: list.aid,\n                        bvid: list.bvid,\n                        cid: list.cid,\n                        badge: list.badge\n                    }\n                });\n            }\n            index += 1;\n        });\n        addItemAfter(getMyVar('末页'), newArray);\n        putMyVar('显示的剧集列表', 显示的剧集列表);\n    }));\n    d.push({\n        col_type: 'scroll_button',\n        url: 'hiker://empty',\n        title: '∷',\n        extra: {\n            id: '占位符',\n        }\n    })\n    putMyVar('分集起', 1);\n    putMyVar('分集终', 每页集数);\n    putMyVar('剧集列表', 剧集列表);\n    总页数 = Math.ceil(剧集长度 / 每页集数);\n    start = 1;\n    end = 每页集数;\n    for (let page = 1; page <= 总页数; page++) {\n        if (end > 剧集长度) {\n            end = 剧集长度;\n        }\n        d.push({\n            title: start + '-' + end,\n            url: $('#noLoading##noHistory#').lazyRule((start, end, Color, 来源) => {\n                eval(getMyVar('刷新选集'));\n                return \"hiker://empty\";\n            }, start, end, Color, 来源),\n            col_type: 'scroll_button',\n            extra: {\n                id: start + '-' + end\n            }\n        });\n        if (end < 剧集长度) {\n            start += 每页集数;\n            end += 每页集数;\n        }\n    }\n    // 记录末页的id\n    putMyVar('末页', start + '-' + end);\n} else {\n    putMyVar('分集起', 1);\n    putMyVar('分集终', 剧集长度);\n}\n// 展示剧集:\n显示的剧集列表 = 剧集列表.slice(0, getMyVar('分集终'));\nputMyVar('显示的剧集列表', 显示的剧集列表);\nindex = 1;\n显示的剧集列表.forEach(list => {\n    if (getItem('模式', '双边') == '列表') {\n        d.push({\n            title: list.long_title,\n            img: list.cover + \"@Referer=\",\n            url: list.link + lazy,\n            desc: list.title.match(/[0-9]/) ? (list.badge + '第' + list.title + '话') : list.title,\n            col_type: 'movie_1_left_pic',\n            extra: {\n                id: list.link,\n                aid: list.aid,\n                bvid: list.bvid,\n                cid: list.cid,\n                badge: list.badge\n            }\n        });\n    } else {\n        d.push({\n            title: list.long_title,\n            img: list.cover + \"@Referer=\",\n            url: list.link + lazy,\n            desc: list.title.match(/[0-9]/) ? (list.badge + '第' + list.title + '话') : list.title,\n            col_type: 'movie_2',\n            extra: {\n                id: list.link,\n                aid: list.aid,\n                bvid: list.bvid,\n                cid: list.cid,\n                badge: list.badge\n            }\n        });\n    }\n    index += 1;\n});\nsetResult(d);\n"},{"col_type":"movie_3","name":"up主页","path":"upHome","rule":"js:\nvar d = [];\n// 预处理\nputMyVar('upInfo', '关');\nsetPageTitle(MY_PARAMS.title);\nimgLink = storage0.getMyVar('图标');\n// 防止反爬虫，从上一个页面传递数据——反爬虫严重\nupMid = MY_PARAMS.mid + \"\";\nupName = MY_PARAMS.title;\nupFace = MY_PARAMS.face;\nrelation = $.require(\"hiker://page/api\").userMapping(upMid);\n// 头像栏\nd.push({\n    title: '<font color=\"blue\">' + upName + '</font>',\n    url: $('#noLoading#').lazyRule((upMid) => {\n        if (getMyVar('upInfo', '关') == '开') {\n            deleteItem('upInfo');\n            putMyVar('upInfo', '关');\n        } else {\n            try {\n                // 用户基本信息\n                queryJson = {\n                    mid: upMid,\n                    token: '',\n                    platform: 'web',\n                    web_location: 1550101\n                }\n                parms = $.require(\"hiker://page/api\").getWbiEnc(queryJson);\n                infoLink = 'https://api.bilibili.com/x/space/wbi/acc/info?' + parms;\n                upData = JSON.parse(fetch(infoLink, {\n                    headers: {\n                        \"User-Agent\": PC_UA,\n                        \"Referer\": \"https://www.bilibili.com/\",\n                        \"Cookie\": cookie=JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n                    }\n                })).data;\n                upName = upData.name;\n                upSex = upData.sex;\n                upSign = upData.sign;\n                upBirthday = upData.birthday;\n                try {\n                    upSchool = upData.school.name;\n                } catch (e) {\n                    upSchool = '';\n                }\n                try {\n                    upIdentification = upData.official.title;\n                } catch (e) {\n                    upIdentification = '';\n                }\n                addItemAfter('currentUp', {\n                    title: 'up:' + upName + '\\nmid:' + upMid + '\\n性别:' + upSex + '\\n生日:' + (upBirthday == '' ? '未填写' : upBirthday) + '\\n' + (upSchool == '' ? '' : '学校:' + upSchool + '\\n') + (upSign == '' ? '\\n' : upSign + '\\n') + (upIdentification == '' ? '' : '认证:'),\n                    url: 'hiker://empty',\n                    col_type: 'long_text',\n                    extra: {\n                        id: 'upInfo'\n                    }\n                });\n            } catch (e) {\n                addItemAfter('currentUp', {\n                    title: '好像出了点意外？什么都木有呢~',\n                    url: 'hiker://empty',\n                    col_type: 'long_text',\n                    extra: {\n                        id: 'upInfo'\n                    }\n                });\n            }\n            putMyVar('upInfo', '开');\n        }\n        return 'toast://信息折叠:' + getMyVar('upInfo', '开')\n    }, upMid),\n    img: upFace + \"@Referer=\",\n    col_type: \"avatar\",\n    extra: {\n        id: 'currentUp'\n    }\n}, {\n    col_type: 'line'\n});\n// 公告\nnoticeText = JSON.parse(fetch('https://api.bilibili.com/x/space/notice?mid=' + upMid + '&jsonp=jsonp', {\n    headers: {\n        \"User-Agent\": PC_UA,\n        \"Referer\": \"https://www.bilibili.com/\",\n        \"Cookie\": cookie=JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n    }\n})).data;\nif (noticeText != '') {\n    d.push({\n        title: '公告',\n        url: $().rule((noticeText) => {\n            var d = [];\n            d.push({\n                title: '公告：' + '\\n\\t\\t\\t\\t\\t\\t\\t' + noticeText,\n                col_type: 'long_text'\n            });\n            setHomeResult(d);\n        }, noticeText),\n        desc: noticeText == '' ? '暂无公告' : noticeText,\n        col_type: 'text_1',\n    });\n}\nd.push({\n    col_type: 'line'\n}, {\n    title: relation,\n    img: relation == '未关注' ? imgLink.添加关注 : imgLink.已关注,\n    url: $('#noLoading##noHistory#').lazyRule((upMid) => {\n        return $.require(\"hiker://page/api\").changeUserRelation(upMid, 11)\n    }, upMid),\n    col_type: \"icon_small_4\",\n    extra: {\n        id: 'relation'\n    }\n}, {\n    title: '动态',\n    img: imgLink.动态,\n    url: $('#noLoading##noHistory#').lazyRule((upMid) => {\n        return $('hiker://empty?p=fypage').rule((upMid) => {\n            let d = [];\n            latenews = $.require(\"hiker://page/api\").getDynamicData('upSpace', upMid);\n            eval($.require(\"hiker://page/api\").showDynamicData());\n            setResult(d);\n        }, upMid)\n    }, upMid),\n    col_type: \"icon_small_4\",\n}, {\n    title: '专栏',\n    img: imgLink.专栏,\n    url: \"hiker://page/acticleList?p=fypage\",\n    col_type: \"icon_small_4\",\n    extra: {\n        mid: upMid\n    }\n})\n// 用户视频-合集、系列\nupVideo = JSON.parse(fetch('https://api.bilibili.com/x/polymer/space/seasons_series_list?mid=' + upMid + '&page_num=1&page_size=10', {\n    headers: {\n        \"User-Agent\": PC_UA,\n        \"Referer\": \"https://www.bilibili.com/\"\n    }\n})).data.items_lists;\n// 视频合集、系列\ntry {\n    upVideo.seasons_list.forEach(list => {\n        season_id = list.meta.season_id;\n        // 标题-跳转更多\n        d.push({\n            title: '<font color=\"#33cccc\">' + list.meta.name.substring(0, 30) + '</font>\\t\\t<font color=\"red\">' + list.meta.total + '</font>\t➮',\n            img: imgLink.合集文件夹,\n            // img: list.meta.cover+'@Referer=',\n            col_type: 'avatar',\n            url: $('#noLoading##noHistory#').lazyRule((upMid, season_id) => {\n                return $('hiker://empty?fypage').rule((upMid, season_id) => {\n                    var d = [];\n                    let u = 'https://api.bilibili.com/x/polymer/space/seasons_archives_list?mid=' + upMid + '&season_id=' + season_id + '&sort_reverse=false&page_num=' + MY_PAGE + '&page_size=30';\n                    Video = JSON.parse(fetch(u, {\n                        headers: {\n                            \"User-Agent\": PC_UA,\n                            \"Referer\": \"https://www.bilibili.com/\"\n                        }\n                    })).data;\n                    maxPage = Math.ceil(Video.page.total / Video.page.page_size);\n                    if (MY_PAGE <= maxPage) {\n                        d.push({\n                            title: '当前:第' + Video.page.page_num + '页\\t\\t\\t共有' + maxPage + '页,' + Video.page.total + '条数据',\n                            url: \"hiker://empty\",\n                            col_type: \"text_center_1\",\n                        });\n                        Video.archives.forEach(list => {\n                            d.push({\n                                title: list.title,\n                                img: list.pic + '@Referer=',\n                                desc: '播放量：' + list.stat.view,\n                                col_type: 'movie_1_left_pic',\n                                url: \"hiker://page/video\",\n                                extra: {\n                                    aid: list.aid\n                                }\n                            });\n                        });\n                    }\n                    setHomeResult(d);\n                }, upMid, season_id)\n            }, upMid, season_id)\n        });\n        if (list.archives === undefined) {\n            log(list.meta.name + '为空');\n        } else {\n            if (list.archives.length < 2) {\n                list.archives.forEach(list => {\n                    d.push({\n                        title: list.title,\n                        img: list.pic + '@Referer=',\n                        desc: '播放量：' + list.stat.view,\n                        col_type: 'movie_1_left_pic',\n                        url: \"hiker://page/video\",\n                        extra: {\n                            aid: list.aid\n                        }\n                    });\n                });\n            } else if (list.archives.length == 0) {\n                d.push({\n                    title: \"好家伙，这家伙没有合集视频！\",\n                    desc: \"要不去点击全部视频看看~\",\n                    col_type: 'text_center_1',\n                    url: \"hiker://empty\",\n                });\n            } else {\n                for (let i = 0; i < 2; i++) {\n                    d.push({\n                        title: list.archives[i].title,\n                        img: list.archives[i].pic + '@Referer=',\n                        desc: '播放量：' + list.archives[i].stat.view,\n                        col_type: 'movie_1_left_pic',\n                        url: \"hiker://page/video\",\n                        extra: {\n                            aid: list.archives[i].aid\n                        }\n                    });\n                }\n            }\n        }\n    });\n} catch (e) {\n    d.push({\n        title: '合集为空',\n        url: 'hiker://empty',\n        desc: 'Sorry,没有数据呢~',\n        col_type: 'text_center_1',\n    });\n}\ntry {\n    upVideo.series_list.forEach(list => {\n        series_id = list.meta.series_id;\n        // 标题-跳转更多\n        d.push({\n            title: '<font color=\"#33cccc\">' + list.meta.name.substring(0, 30) + '</font>\\t\\t<font color=\"red\">' + list.meta.total + '</font>\t➮',\n            img: imgLink.合集文件夹,\n            // img: list.meta.cover+'@Referer=',\n            col_type: 'avatar',\n            url: $('#noLoading##noHistory#').lazyRule((upMid, series_id) => {\n                return $('hiker://empty?fypage').rule((upMid, series_id) => {\n                    var d = [];\n                    let u = 'https://api.bilibili.com/x/series/archives?mid=' + upMid + '&series_id=' + series_id + '&only_normal=true&sort=desc&pn=' + MY_PAGE + '&ps=30';\n                    Video = JSON.parse(fetch(u, {\n                        headers: {\n                            \"User-Agent\": PC_UA,\n                            \"Referer\": \"https://www.bilibili.com/\"\n                        }\n                    })).data;\n                    maxPage = Math.ceil(Video.page.total / Video.page.size);\n                    if (MY_PAGE <= maxPage) {\n                        d.push({\n                            title: '当前:第' + Video.page.num + '页\\t\\t\\t共有' + maxPage + '页,' + Video.page.total + '条数据',\n                            url: \"hiker://empty\",\n                            col_type: \"text_center_1\",\n                        });\n                        Video.archives.forEach(list => {\n                            d.push({\n                                title: list.title,\n                                img: list.pic + '@Referer=',\n                                desc: '播放量：' + list.stat.view,\n                                col_type: 'movie_1_left_pic',\n                                url: \"hiker://page/video\",\n                                extra: {\n                                    aid: list.aid\n                                }\n                            });\n                        });\n                    }\n                    setHomeResult(d);\n                }, upMid, series_id)\n            }, upMid, series_id)\n        });\n        if (list.archives === undefined) {\n            log(list.meta.name + '为空');\n        } else {\n            if (list.archives.length < 2) {\n                list.archives.forEach(list => {\n                    d.push({\n                        title: list.title,\n                        img: list.pic + '@Referer=',\n                        desc: '播放量：' + list.stat.view,\n                        col_type: 'movie_1_left_pic',\n                        url: \"hiker://page/video\",\n                        extra: {\n                            aid: list.aid\n                        }\n                    });\n                });\n            } else if (list.archives.length == 0) {\n                d.push({\n                    title: \"好家伙，这家伙没有合集视频！\",\n                    desc: \"要不去点击全部视频看看~\",\n                    col_type: 'text_center_1',\n                    url: \"hiker://empty\",\n                });\n            } else {\n                for (let i = 0; i < 2; i++) {\n                    d.push({\n                        title: list.archives[i].title,\n                        img: list.archives[i].pic + '@Referer=',\n                        desc: '播放量：' + list.archives[i].stat.view,\n                        col_type: 'movie_1_left_pic',\n                        url: \"hiker://page/video\",\n                        extra: {\n                            aid: list.archives[i].aid\n                        }\n                    });\n                }\n            }\n        }\n    });\n} catch (e) {\n    d.push({\n        title: '系列为空',\n        url: 'hiker://empty',\n        desc: 'Sorry,没有数据呢~',\n        col_type: 'text_center_1',\n    });\n}\n// up投稿\nd.push({\n    title: 'TA的视频,点击展开全部',\n    col_type: 'text_center_1',\n    url: $('#noLoading##noHistory#').lazyRule((upMid) => {\n        return $().rule((upMid) => {\n            var d = [];\n            try {\n                queryJson = {\n                    mid: upMid,\n                    ps: 30,\n                    tid: getMyVar('_tid', '0'),\n                    special_type: '',\n                    pn: getMyVar('_page', '1'),\n                    keyword: '',\n                    order: 'pubdate',\n                    platform: 'web',\n                    // web_location: 1550101,\n                    order_avoided: true\n                }\n                parms = $.require(\"hiker://page/api\").getWbiEnc(queryJson);\n                dataLink = 'https://api.bilibili.com/x/space/wbi/arc/search?' + parms;\n                upVideoData = JSON.parse(fetch(dataLink, {\n                    headers: {\n                        \"User-Agent\": PC_UA,\n                        \"Referer\": \"https://www.bilibili.com/\",\n                        \"Cookie\": cookie=JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n                    }\n                })).data;\n                tlist = upVideoData.list.tlist;\n                vlist = upVideoData.list.vlist;\n                // 分类和页码\n                d.push({\n                    title: getMyVar('_tid', '0') == 0 ? '‘‘’’<font color=\"red\">全部</font>' : '全部',\n                    url: $('#noLoading##noHistory#').lazyRule(() => {\n                        putMyVar('_tid', (0 + \"\"));\n                        putMyVar('_page', (1 + \"\"));\n                        refreshPage(true);\n                        return \"hiker://empty\";\n                    }),\n                    col_type: 'scroll_button'\n                });\n                for (item in tlist) {\n                    d.push({\n                        title: (tlist[item].tid + \"\") == getMyVar('_tid', '0') ? '‘‘’’<font color=\"red\">' + (tlist[item].name + `(${tlist[item].count})`) + '</font>' : (tlist[item].name + `(${tlist[item].count})`),\n                        url: $('#noLoading##noHistory#').lazyRule((tid) => {\n                            putMyVar('_tid', (tid + \"\"));\n                            putMyVar('_page', (1 + \"\"));\n                            refreshPage(true);\n                            return \"hiker://empty\";\n                        }, tlist[item].tid),\n                        col_type: 'scroll_button'\n                    });\n                }\n                d.push({\n                    col_type: 'blank_block',\n                });\n                maxPage = Math.ceil(upVideoData.page.count / upVideoData.page.ps);\n                for (let page = 1; page <= maxPage; page++) {\n                    d.push({\n                        title: (page + \"\") == getMyVar('_page', '1') ? '‘‘’’<font color=\"red\">' + (page + \"\") + '</font>' : (page + \"\"),\n                        url: $('#noLoading##noHistory#').lazyRule((page) => {\n                            putMyVar('_page', (page + \"\"));\n                            refreshPage(true);\n                            return \"hiker://empty\";\n                        }, page),\n                        col_type: 'scroll_button',\n                    });\n                }\n                // 平铺视频\n                vlist.forEach(item => {\n                    pubtime = $.require(\"hiker://page/api\").timeConvert(item.created);\n                    d.push({\n                        title: item.title,\n                        img: item.pic + '@Referer=',\n                        desc: '播放量：' + item.play + '\\n' + pubtime,\n                        col_type: 'movie_1_left_pic',\n                        url: \"hiker://page/video\",\n                        extra: {\n                            aid: item.aid\n                        }\n                    });\n                });\n            } catch (e) {\n                d.push({\n                    title: '页面走丢了...',\n                    img: 'https://i0.hdslb.com/bfs/general/f7b667011a46615732c701f4bb1d07f793f8d1df.png@Referer=',\n                    url: 'hiker://empty',\n                    desc: '太频繁了！稍后再试~',\n                    col_type: \"pic_1\"\n                });\n            }\n            setHomeResult(d);\n        }, upMid)\n    }, upMid)\n});\nsetResult(d);"},{"col_type":"movie_3","name":"up搜索","path":"upSearch","rule":"js:\nseaword = MY_PARAMS.seaword;\nvar d = [];\nresultData=$.require(\"hiker://page/api\").getSearchRes('bili_user',seaword,MY_PAGE,36);\nif (MY_PAGE <= resultData.numPages) {\n    d.push({\n        title: '当前:第' + resultData.page + '页\\t\\t\\t共有' + resultData.numPages + '页,' + resultData.numResults + '条数据',\n        url: \"hiker://empty\",\n        col_type: \"text_center_1\",\n    });\n    resultData.result.forEach(list => {\n        d.push({\n            title: \"<big><font color='blue'>\" + list.uname + \"</font></big><small>\" + list.usign + \"</small>\",\n            img: 'https://' + list.upic + \"@Referer=\",\n            col_type: 'avatar',\n            url: \"hiker://page/upHome\",\n            extra: {\n                mid: list.mid,\n                title: list.uname,\n                face: 'https://' + list.upic\n            }\n        });\n    });\n}\nsetSearchResult(d);\n"},{"col_type":"movie_3","name":"video搜索","path":"videoSearch","rule":"js:\nseaword = MY_PARAMS.seaword;\nvar d = [];\nvar resultData=$.require(\"hiker://page/api\").getSearchRes('video',seaword,MY_PAGE,42);\nvar {timeConvert}=$.require(\"hiker://page/api\");\nif (MY_PAGE <= resultData.numPages) {\n    d.push({\n        title: '当前:第' + resultData.page + '页\\t\\t\\t共有' + resultData.numPages + '页,' + resultData.numResults + '条数据',\n        url: \"hiker://empty\",\n        col_type: \"text_center_1\",\n    });\n    resultData.result.forEach(list => {\n        // title=list.title.replace('<em class=\\\"keyword\\\">','<font color=\"red\">').replace('</em>','</font>')\n        title = list.title.replace(/<em class=\\\"keyword\\\">/g, '').replace(/<\\/em>/g, '')\n        pbtime=timeConvert(list.pubdate);\n        d.push({\n            title: title,\n            img: 'https://' + list.pic + \"@Referer=\",\n            desc: '““””<small><small><font color=\"grey\">播放量:'+list.play+'\\t\\t\\t弹幕:'+list.danmaku+'\\t\\t\\t喜欢:'+list.like+'\\n发布时间:'+pbtime+'</font></small></small>',\n            col_type: 'movie_1_left_pic',\n            url: \"hiker://page/video\",\n            extra: {\n                // 视频标识\n                aid: list.aid,\n                bvid:list.bvid,\n                title: title\n            }\n        });\n    });\n}\nsetSearchResult(d);\n"},{"col_type":"movie_1_left_pic","name":"推送","path":"feed","rule":"$.require(\"hiker://page/api\").getFeed().forEach(item => {\n\n    d.push({\n\n        title: item.title,\n\n        img: item.pic+'@Referer=',\n\n        desc: 'up:' + item.owner.name + '\\n' + item.stat.view + \"播放※\" + item.stat.like + \"点赞\",\n\n        url: \"hiker://page/video\",\n\n        col_type: 'movie_1_left_pic',\n\n        extra: {\n\n            // id其实是aid\n\n            aid: item.id,\n\n            cid: item.cid,\n\n        }\n\n    })\n\n})\n\n\n"},{"col_type":"text_1","name":"API","path":"api","rule":"// part1:聚合函数----------------\n// 登录验证\n$.exports.isLoggedIn = function () {\n    if (fileExist(\"hiker://files/rules/cy/bili.txt\")) {\n        biliData = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\"));\n        if (biliData.userList.length == 0) {\n            return JSON.stringify({\n                \"userName\": '未登录',\n                \"userMid\": '',\n                \"userFace\": '',\n                \"type\": false\n            })\n        }\n        currentUser = biliData.userList[0];\n        var cookie = currentUser.cookie;\n        let userinfo = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/nav\", {\n            headers: {\n                \"Cookie\": cookie\n            }\n        })).data;\n        if (userinfo.isLogin === false) {\n            return JSON.stringify({\n                \"userName\": '未登录',\n                \"userMid\": '',\n                \"userFace\": '',\n                \"type\": false\n            })\n        } else {\n            currentUser.userName = userinfo.uname;\n            currentUser.userMid = userinfo.mid;\n            // 1：会员开通；0：未开通\n            currentUser.vipStatus = userinfo.vipStatus;\n            currentUser.face = userinfo.face + \"@Referer=\";\n            saveFile('hiker://files/rules/cy/bili.txt', JSON.stringify(biliData));\n            // return true;\n            return JSON.stringify({\n                \"userName\": currentUser.userName,\n                \"userMid\": currentUser.userMid,\n                \"userFace\": currentUser.face,\n                \"type\": true\n            });\n        }\n    } else {\n        return JSON.stringify({\n            \"userName\": '未登录',\n            \"userMid\": '',\n            \"userFace\": '',\n            \"type\": false\n        });\n    }\n}\n// 哔哩视频解析：获取播放地址+提交播放记录\n$.exports.biliLazy = function (id, cid, qn) {\n    // 重置原生弹幕统一弹幕大小、修改步长\n    function overrideSave(dm) {\n        var danmuData = request(dm);\n        // 字体大小、弹幕步长\n        var danmuSetting = JSON.parse(readFile('hiker://files/dm盒子/settings.json'));\n        var size = danmuSetting.fontSize;\n        var step = danmuSetting.step;\n        var data = '';\n        td = pdfa(danmuData, 'i&&d');\n        for (let i = 0; i < td.length; i += step) {\n            timepoint = pdfh(td[i], 'd&&p').split(\",\")[0];\n            ct = pdfh(td[i], 'd&&p').split(\",\")[1];\n            color = pdfh(td[i], 'd&&p').split(\",\")[3];\n            // 弹幕内容\n            content = pdfh(td[i], 'd&&Text');\n            if (content.indexOf('<') != -1 || content.indexOf('>') != -1 || content.indexOf('&') != -1 || content.indexOf('\\u0000') != -1 || content.indexOf('\\b') != -1) {\n                continue;\n            }\n            tempdata = `<d p=\"${Math.round(timepoint)},${ct},${size},${color},0\">${content}</d>\\n`;\n            data += tempdata;\n        }\n        danmustr = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<i>\\n${data}</i>`;\n        saveFile(dm, danmustr);\n    }\n    // 判断是否重写\n    var dm = 'https://comment.bilibili.com/' + cid + '.xml';\n    if (getItem('isOverrideSave', 'false') == 'true') {\n        file = 'https://comment.bilibili.com/' + cid + '.xml';\n        dm = 'hiker://files/cache/danmu/' + 'bili_from_' + getPageTitle() + '.xml';\n        downloadFile(file, dm);\n        overrideSave(dm);\n    }\n    var data = $.require(\"hiker://page/api\").getUrl(id, cid, qn);\n    // 提交历史记录\n    $.require(\"hiker://page/api\").reportProcess(id, cid);\n    // qualityNum=dash.audio.length;不需要了，找到了更好的判断方法，虽然我并不知道这些参数的含义是什么\n    videoList = [];\n    audioList = [];\n    nameList = [];\n    headers = [];\n    try {\n        data.audio.forEach(item => {\n            audioList.push(item.baseUrl);\n            headers.push({\n                \"Referer\": \"https://www.bilibili.com\",\n                \"User-Agent\": PC_UA\n            });\n        });\n        data.video.forEach(item => {\n            if (item.codecid == 7) {\n                videoList.push(item.baseUrl + \"#isVideo=true#\");\n                if (item.id == 126) {\n                    nameList.push('杜比视界');\n                } else if (item.id == 125) {\n                    nameList.push('HDR 真彩色');\n                } else if (item.id == 120) {\n                    nameList.push('4K超清');\n                } else if (item.id == 116) {\n                    nameList.push('1080P60高帧率');\n                } else if (item.id == 112) {\n                    nameList.push('1080P+高码率');\n                } else if (item.id == 80) {\n                    nameList.push('1080P高清');\n                } else if (item.id == 74) {\n                    nameList.push('720P60高帧率');\n                } else if (item.id == 64) {\n                    nameList.push('720P高清');\n                } else if (item.id == 32) {\n                    nameList.push('480P清晰');\n                } else if (item.id == 16) {\n                    nameList.push('360P流畅');\n                } else if (item.id == 6) {\n                    nameList.push('240P极速');\n                }\n            }\n        });\n        // 保持长度一致\n        while (audioList.length < videoList.length) {\n            // 复制 audioList 中最后一个元素并追加到数组末尾\n            audioList.push(audioList[audioList.length - 1]);\n            // 复制 headers 中最后一个元素并追加到数组末尾\n            headers.push(headers[headers.length - 1]);\n        }\n        return JSON.stringify({\n            urls: videoList,\n            audioUrls: audioList,\n            headers: headers,\n            names: nameList,\n            danmu: dm\n        })\n    } catch (e) {\n        log(\"正常解释失败，进行最后尝试:\");\n        return JSON.stringify({\n            urls: [data.durl[0].url + \"#isVideo=true#\"],\n            names: [data.quality + \"\"],\n            danmu: dm,\n            headers: [{\n                \"Referer\": \"https://www.bilibili.com\",\n                \"User-Agent\": PC_UA\n            }]\n        })\n    }\n}\n// 稍后在看——总操作判断\n$.exports.judgeToview = function (aid) {\n    selection = ['添加', '移除'];\n    return $(selection, 1).select((aid) => {\n        if (input == '添加') {\n            res = $.require(\"hiker://page/api\").addToview(aid);\n            if (res == 0) {\n                return \"toast://添加成功\"\n            } else if (res == -101) {\n                return \"toast://账号未登录\"\n            } else if (res == -111) {\n                return \"toast://csrf校验失败\"\n            } else if (res == -400) {\n                return \"toast://请求错误\"\n            } else if (res == 90001) {\n                return \"toast://列表已满\"\n            } else if (res == 90003) {\n                return \"toast://稿件已经被删除\"\n            } else {\n                return \"toast://未知错误\"\n            }\n        } else {\n            res = $.require(\"hiker://page/api\").delToview(aid);\n            if (res == 0) {\n                return \"toast://移除成功\"\n            } else if (res == -101) {\n                return \"toast://账号未登录\"\n            } else if (res == -111) {\n                return \"toast://csrf校验失败\"\n            } else if (res == -400) {\n                return \"toast://请求错误\"\n            } else {\n                return \"toast://未知错误\"\n            }\n        }\n    }, aid)\n}\n// 操作用户关系\n$.exports.changeUserRelation = function (mid, re_src) {\n    selection = ['关注', '取关', '悄悄关注', '取消悄悄关注', '拉黑', '取消拉黑', '踢出粉丝', '移动分组'];\n    return $(selection, 2).select((mid, re_src) => {\n        if (input == '移动分组') {\n            beforeTagids = [];\n            groups = $.require(\"hiker://page/api\").getUserGroup(mid);\n            if (JSON.stringify(groups) == '{}') {\n                beforeTagids.push(0);\n            } else {\n                for (var prop in groups) {\n                    beforeTagids.push(parseInt(prop));\n                }\n            }\n            // 获取我的分组\n            focusGroupList = [];\n            $.require(\"hiker://page/api\").getMyAttentionGroupList().forEach(list => {\n                focusGroupList.push(list.name + ' ' + list.tagid);\n            });\n            return $(focusGroupList, 1).select((beforeTagids, mid) => {\n                afterTagids = [];\n                afterTagids.push(parseInt(input.split(' ')[1]));\n                fids = [];\n                fids.push(Number(mid));\n                res = $.require(\"hiker://page/api\").moveUsers(beforeTagids, afterTagids, fids);\n                if (res == 0) {\n                    return \"toast://移动用户到\" + input.split(' ')[0] + \"分组成功\"\n                } else if (res == -101) {\n                    return \"toast://账号未登录\"\n                } else if (res == -111) {\n                    return \"toast://csrf校验失败\"\n                } else if (res == -400) {\n                    return \"toast://请求错误\"\n                } else if (res == 22104) {\n                    return \"toast://无权限\"\n                } else if (res == 22105) {\n                    return \"toast://未关注\"\n                } else {\n                    return \"toast://未知错误\"\n                }\n            }, beforeTagids, mid);\n        } else {\n            if (input == '关注') {\n                var act = 1;\n            } else if (input == '取关') {\n                var act = 2;\n            } else if (input == '悄悄关注') {\n                var act = 3;\n            } else if (input == '取消悄悄关注') {\n                var act = 4;\n            } else if (input == '拉黑') {\n                var act = 5;\n            } else if (input == '取消拉黑') {\n                var act = 6;\n            } else if (input == '踢出粉丝') {\n                var act = 7;\n            }\n            res = $.require(\"hiker://page/api\").addAttention(mid, act, re_src);\n            relation = $.require(\"hiker://page/api\").userMapping(mid);\n            updateItem('relation', {\n                title: relation,\n                img: relation == '未关注' ? storage0.getMyVar('图标').添加关注 : storage0.getMyVar('图标').已关注\n            });\n            if (res == 0) {\n                return \"toast://\" + input + \"成功\"\n            } else if (res == -101) {\n                return \"toast://账号未登录\"\n            } else if (res == -111) {\n                return \"toast://csrf校验失败\"\n            } else if (res == -400) {\n                return \"toast://请求错误\"\n            } else if (res == 22001) {\n                return \"toast://不能对自己进行此操作\"\n            } else if (res == 22003) {\n                return \"toast://用户位于黑名单\"\n            } else {\n                return \"toast://未知错误\"\n            }\n        }\n    }, mid, re_src)\n}\n// 映射用户关系\n$.exports.userMapping = function (mid) {\n    relationRes = $.require(\"hiker://page/api\").getRelation(mid);\n    if (relationRes.relation.attribute == 0) {\n        relation = '未关注'\n    } else if (relationRes.relation.attribute == 1) {\n        relation = '悄悄关注'\n    } else if (relationRes.relation.attribute == 2) {\n        relation = '已关注'\n    } else if (relationRes.relation.attribute == 6) {\n        relation = '已互粉'\n    } else if (relationRes.relation.attribute == 128) {\n        relation = '已拉黑'\n    }\n    return relation;\n}\n// 点赞操作逻辑\n$.exports.likeLogic = function (aid) {\n    hasLike = $.require(\"hiker://page/api\").hasLike(aid);\n    if (hasLike == 0) {\n        res = $.require(\"hiker://page/api\").setLike(aid, 1);\n        if (res == 0) {\n            like = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/view?aid=\" + aid)).data.stat.like;\n            updateItem('setLike', {\n                title: (like + 1) + '',\n                img: storage0.getMyVar('图标').已点赞\n            });\n            return \"toast://点赞成功\";\n        } else {\n            return \"toast://点赞出错了~\";\n        }\n    } else {\n        res = $.require(\"hiker://page/api\").setLike(aid, 2);\n        if (res == 0) {\n            like = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/view?aid=\" + aid)).data.stat.like;\n            updateItem('setLike', {\n                title: (like - 1) + '',\n                img: storage0.getMyVar('图标').未点赞\n            });\n            return \"toast://取消点赞成功\";\n        } else {\n            return \"toast://取消点赞出错了~\";\n        }\n    }\n}\n// 收藏操作逻辑\n$.exports.favourLogic = function (aid, mid) {\n    hasFavour = $.require(\"hiker://page/api\").hasFavour(aid);\n    if (hasFavour) {\n        // 移出收藏\n        favourIdList = $.require(\"hiker://page/api\").getFavourIdList(aid, mid);\n        res = $.require(\"hiker://page/api\").setFavour(aid, '', favourIdList);\n        if (res == 0) {\n            like = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/view?aid=\" + aid)).data.stat.favorite;\n            updateItem('setFavour', {\n                title: (like - 1) + '',\n                img: storage0.getMyVar('图标').未收藏\n            });\n            return \"toast://取消收藏成功\";\n        } else {\n            return \"toast://取消收藏出错了~\";\n        }\n    } else {\n        // 选择收藏\n        res = $.require(\"hiker://page/api\").getCollectionGroupList()[0].mediaListResponse.list;\n        GroupList = [];\n        res.forEach(item => {\n            GroupList.push(item.title + ' ' + item.id);\n        });\n        return $(GroupList, 1).select((aid) => {\n            selectId = parseInt(input.split(' ')[1])\n            res = $.require(\"hiker://page/api\").setFavour(aid, selectId, '');\n            if (res == 0) {\n                like = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/view?aid=\" + aid)).data.stat.favorite;\n                updateItem('setFavour', {\n                    title: (like + 1) + '',\n                    img: storage0.getMyVar('图标').已收藏\n                });\n                return \"toast://收藏成功\";\n            } else {\n                return \"toast://收藏出错了~\";\n            }\n        }, aid);\n    }\n}\n\n// part2:散装API----------------\n// 获取搜索结果\n$.exports.getSearchRes = function (search_type, seaword, page, pageSize) {\n    queryJson = {\n        __refresh__: true,\n        _extra: '',\n        context: '',\n        page: page,\n        page_size: pageSize,\n        order: '',\n        duration: '',\n        from_source: '',\n        from_spmid: 333.337,\n        platform: 'pc',\n        highlight: 1,\n        single_column: 0,\n        keyword: seaword,\n        search_type: search_type,\n        preload: true,\n        com2co: true\n    }\n    parms = $.require(\"hiker://page/api\").getWbiEnc(queryJson);\n    dataLink = 'https://api.bilibili.com/x/web-interface/wbi/search/type?' + parms;\n    cookie = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie;\n    res = JSON.parse(fetch(dataLink, {\n        headers: {\n            \"User-Agent\": PC_UA,\n            \"Referer\": \"https://www.bilibili.com/\",\n            \"Cookie\": cookie\n        },\n        method: \"GET\"\n    })).data;\n    return res;\n}\n// 视频推荐\n$.exports.getFeed = function () {\n    let u = \"https://api.bilibili.com/x/web-interface/index/top/feed/rcmd\";\n    var res = JSON.parse(fetch(u, {\n        headers: {\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        }\n    }));\n    return res.data.item\n}\n// 获取播放地址\n$.exports.getUrl = function (avid, cid, qn) {\n    var setting = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\"));\n    var Cookie = setting.bfKey != '' ? base64Decode(base64Decode(setting.bfKey)) : setting.userList[0].cookie;\n    try {\n        let u = request(buildUrl(\"http://api.bilibili.com/x/player/playurl\", {\n            \"avid\": avid,\n            \"cid\": cid,\n            \"qn\": qn,\n            \"fnver\": 0,\n            // \"fnval\": 4048,\n            \"fnval\": 16,\n            \"fourk\": 1\n        }), {\n            headers: {\n                Cookie: Cookie\n            }\n        })\n        res = JSON.parse(u);\n        if (res.data.dash) {\n            return res.data.dash;\n        } else {\n            log(\"没有找到dash字段\");\n            if (res.data.support_formats) {\n                if (u.includes(\"试看\")) {\n                    msg = \"您刚才观看的视频是试看视频，观看完整片段请前往官网购买！\";\n                    log(msg);\n                    confirm({\n                        title: '温馨提示', content: msg, confirm: $.toString(() => {\n                        }), cancel: $.toString(() => {})\n                    })\n                }\n            }\n            return res.data;\n        }\n    } catch (e) {\n        try {\n            // 一人之下第一季的第1，2集——可以获取大会员剧集的前3min\n            log('尝试更改请求接口...:' + e);\n            let u = request(buildUrl(\"https://api.bilibili.com/pgc/player/web/playurl\", {\n                \"avid\": avid,\n                \"cid\": cid,\n                \"qn\": qn,\n                \"fnver\": 0,\n                // \"fnval\": 4048,\n                \"fnval\": 16,\n                \"fourk\": 1\n            }), {\n                headers: {\n                    Cookie: Cookie\n                }\n            })\n            // 仙王的日常第三季第10集，没有dash，服了\n            if (JSON.parse(u).result.dash) {\n                return JSON.parse(u).result.dash;\n            } else {\n                log('尝试走单线路画质~');\n                return JSON.parse(u).result;\n            }\n        } catch (error) {\n            log('cookie有没有可能失效了呢~');\n            return '';\n        }\n    }\n}\n// 提交播放记录\n$.exports.reportProcess = function (avid, cid) {\n    let csrf = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\n    let res = post(\"http://api.bilibili.com/x/v2/history/report\", {\n        body: {\n            \"aid\": avid,\n            \"cid\": cid,\n            \"csrf\": csrf,\n            \"progress\": 0\n        },\n        headers: {\n            Cookie: JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        }\n    })\n}\n\n// 获取评论\n$.exports.getComments = function (id, type, page) {\n    let u = buildUrl(\"http://api.bilibili.com/x/v2/reply\", {\n        \"type\": type,\n        \"oid\": id,\n        \"pn\": page\n    });\n    let res = request(u, {\n        headers: {\n            Cookie: JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        }\n    })\n    return JSON.parse(res).data.replies\n}\n// 添加稍后在看——真的麻了，为什么fetch就错呢~\n$.exports.addToview = function (aid) {\n    let csrf = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\n    let u = \"https://api.bilibili.com/x/v2/history/toview/add\";\n    let res = request(buildUrl(u, {\n        \"aid\": aid,\n        \"csrf\": csrf,\n    }), {\n        headers: {\n            \"Referer\": \"https://www.bilibili.com/\",\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        },\n        method: \"POST\"\n    })\n    return JSON.parse(res).code;\n}\n// 删除稍后在看\n$.exports.delToview = function (aid) {\n    let csrf = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\n    let u = \"http://api.bilibili.com/x/v2/history/toview/del\";\n    let res = request(buildUrl(u, {\n        \"aid\": aid,\n        \"csrf\": csrf,\n    }), {\n        headers: {\n            \"Referer\": \"https://www.bilibili.com/\",\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        },\n        method: \"POST\"\n    })\n    return JSON.parse(res).code;\n}\n// 订阅影视(追番、追剧)\n$.exports.subscribeFilm = function (season_id) {\n    let csrf = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\n    let u = \"https://api.bilibili.com/pgc/web/follow/add\";\n    let res = request(buildUrl(u, {\n        \"season_id\": season_id,\n        \"csrf\": csrf,\n    }), {\n        headers: {\n            \"Referer\": \"https://www.bilibili.com/\",\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        },\n        method: \"POST\"\n    })\n    return JSON.parse(res).result.toast;\n}\n// 取消订阅\n$.exports.cancelSubscribeFilm = function (season_id) {\n    let csrf = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\n    let u = \"https://api.bilibili.com/pgc/web/follow/del\";\n    let res = request(buildUrl(u, {\n        \"season_id\": season_id,\n        \"csrf\": csrf,\n    }), {\n        headers: {\n            \"Referer\": \"https://www.bilibili.com/\",\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        },\n        method: \"POST\"\n    })\n    return JSON.parse(res).result.toast;\n}\n/*操作用户关系\nfid:用户mid\nact:操作代码\nre_src：关注来源\n*/\n$.exports.addAttention = function (mid, act, re_src) {\n    let csrf = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\n    let u = \"https://api.bilibili.com/x/relation/modify\";\n    let res = request(buildUrl(u, {\n        \"fid\": mid,\n        \"act\": act,\n        \"re_src\": re_src,\n        \"csrf\": csrf\n    }), {\n        headers: {\n            \"Referer\": \"https://www.bilibili.com/\",\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        },\n        method: \"POST\"\n    })\n    return JSON.parse(res).code;\n}\n// 移动关注用户分组\n$.exports.moveUsers = function (beforeTagids, afterTagids, fids) {\n    let csrf = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\n    let u = \"https://api.bilibili.com/x/relation/tags/moveUsers\";\n    let res = request(buildUrl(u, {\n        \"beforeTagids\": beforeTagids.toString(),\n        \"afterTagids\": afterTagids.toString(),\n        \"fids\": fids.toString(),\n        \"csrf\": csrf\n    }), {\n        headers: {\n            \"Referer\": \"https://www.bilibili.com/\",\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        },\n        method: \"POST\"\n    })\n    return JSON.parse(res).code;\n}\n// 获取用户关系\n$.exports.getRelation = function (mid) {\n    // https://api.bilibili.com/x/space/acc/relation?mid=,旧接口\n    parms = $.require(\"hiker://page/api\").getWbiEnc({ mid: mid });\n    infoLink = 'https://api.bilibili.com/x/space/wbi/acc/relation?' + parms;\n    return JSON.parse(request(infoLink, {\n        headers: {\n            \"User-Agent\": PC_UA,\n            \"Referer\": \"https://www.bilibili.com/\",\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        }\n    })).data\n}\n// 查询目标用户所在的分组\n$.exports.getUserGroup = function (mid) {\n    return JSON.parse(request(\"https://api.bilibili.com/x/relation/tag/user?fid=\" + mid, {\n        headers: {\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        }\n    })).data\n}\n// 获取关注分组\n$.exports.getMyAttentionGroupList = function () {\n    return JSON.parse(fetch(\"https://api.bilibili.com/x/relation/tags?jsonp=jsonp\", {\n        headers: {\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie,\n            \"User-Agent\": PC_UA,\n            \"Referer\": \"https://www.bilibili.com/\"\n        }\n    })).data;\n}\n// 是否点赞\n$.exports.hasLike = function (aid) {\n    return JSON.parse(request(buildUrl(\"http://api.bilibili.com/x/web-interface/archive/has/like\", {\n        \"aid\": aid\n    }), {\n        headers: {\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        }\n    })).data\n}\n// 是否收藏\n$.exports.hasFavour = function (aid) {\n    return JSON.parse(request(buildUrl(\"http://api.bilibili.com/x/v2/fav/video/favoured\", {\n        \"aid\": aid\n    }), {\n        headers: {\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        }\n    })).data.favoured\n}\n// 视频点赞\n$.exports.setLike = function (aid, dealWay) {\n    let csrf = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\n    let res = post(\"http://api.bilibili.com/x/web-interface/archive/like\", {\n        body: {\n            \"aid\": aid,\n            \"like\": dealWay,\n            \"csrf\": csrf\n        },\n        headers: {\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        }\n    })\n    return JSON.parse(res).code;\n}\n// 获取收藏列表\n$.exports.getCollectionGroupList = function () {\n    return collections = JSON.parse(fetch(\"https://api.bilibili.com/x/v3/fav/folder/list4navigate\", {\n        headers: {\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie,\n        }\n    })).data;\n}\n// 收藏/取消视频API\n$.exports.setFavour = function (aid, add_media_ids, del_media_ids) {\n    let csrf = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\n    let res = post(\"http://api.bilibili.com/medialist/gateway/coll/resource/deal\", {\n        body: {\n            \"rid\": aid,\n            \"type\": 2,\n            \"add_media_ids\": add_media_ids.toString(),\n            \"del_media_ids\": del_media_ids.toString(),\n            \"csrf\": csrf\n        },\n        headers: {\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie,\n            \"Referer\": \"https://www.bilibili.com\"\n        }\n    })\n    return JSON.parse(res).code;\n}\n// 获取视频所在收藏夹\n$.exports.getFavourIdList = function (aid, userMid) {\n    let u = \"https://api.bilibili.com/x/v3/fav/folder/created/list-all\";\n    let res = request(buildUrl(u, {\n        \"type\": 2,\n        \"rid\": aid,\n        \"up_mid\": userMid,\n    }), {\n        headers: {\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie,\n            \"Referer\": \"https://www.bilibili.com\"\n        }\n    });\n    favourIdList = [];\n    JSON.parse(res).data.list.forEach((item) => {\n        if (item.fav_state == 1) {\n            favourIdList.push(item.id);\n        }\n    })\n    return favourIdList;\n}\n// 热映剧集时间轴\n$.exports.getMovies = function (type, before, after) {\n    let u = buildUrl(\"http://api.bilibili.com/pgc/web/timeline\", {\n        \"types\": type,\n        \"before\": before,\n        \"after\": after\n    })\n    let res = JSON.parse(request(u, {\n        headers: {\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n        }\n    }))\n    return res.result\n}\n// 获取专栏文章\n$.exports.getUserArticle = function (upMid, page) {\n    let u = \"https://api.bilibili.com/x/space/article\";\n    let res = request(buildUrl(u, {\n        \"mid\": upMid,\n        \"pn\": page,\n        \"ps\": 12,\n        \"sort\": 'publish_time'\n    }), {\n        headers: {\n            \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie,\n            \"Referer\": \"https://www.bilibili.com\"\n        }\n    });\n    return JSON.parse(res).data;\n}\n// 获取动态数据\n$.exports.getDynamicData = function (from, upMid) {\n    var nextInfo = {};\n    if (MY_PAGE == 1) {\n        if (from == 'upSpace') {\n            var u = \"https://api.bilibili.com/x/polymer/web-dynamic/v1/feed/space?offset=&host_mid=\" + upMid + \"&timezone_offset=-480\";\n        } else {\n            var u = \"https://api.bilibili.com/x/polymer/web-dynamic/v1/feed/all?timezone_offset=-480&type=all\";\n        }\n        latenews = JSON.parse(fetch(u, {\n            headers: {\n                \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie,\n                \"User-Agent\": PC_UA,\n                \"Referer\": \"https://www.bilibili.com/\"\n            }\n        })).data;\n        nextInfo.offset = latenews.offset;\n    } else {\n        if (from == 'upSpace') {\n            var u = \"https://api.bilibili.com/x/polymer/web-dynamic/v1/feed/space?offset=\" + storage0.getMyVar(JSON.stringify(MY_PAGE)).offset + \"&host_mid=\" + upMid + \"&timezone_offset=-480\";\n        } else {\n            var u = \"https://api.bilibili.com/x/polymer/web-dynamic/v1/feed/all?timezone_offset=-480&type=all&offset=\" + storage0.getMyVar(JSON.stringify(MY_PAGE)).offset;\n        }\n        latenews = JSON.parse(fetch(u, {\n            headers: {\n                \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie\n            }\n        })).data;\n        nextInfo.offset = latenews.offset;\n    }\n    storage0.putMyVar(JSON.stringify(MY_PAGE + 1), nextInfo);\n    return latenews;\n}\n\n// ——特别的行为、工具函数——\n// 展示动态数据(返回函数方法的可执行字符串)\n$.exports.showDynamicData = function () {\n    return $.toString(() => {\n        imgLink = storage0.getMyVar('图标');\n        latenews.items.forEach(list => {\n            if (list.type == 'DYNAMIC_TYPE_AV') {\n                // 投稿视频（当前发布）√\n                d.push({\n                    title: list.modules.module_author.name,\n                    desc: '<small><small><font color=\"grey\">' + list.modules.module_author.pub_time + '-' + list.modules.module_author.pub_action + '</font></small></small>',\n                    img: list.modules.module_author.face + \"@Referer=\",\n                    url: 'hiker://page/upHome',\n                    col_type: 'avatar',\n                    extra: {\n                        mid: list.modules.module_author.mid,\n                        title: list.modules.module_author.name,\n                        face: list.modules.module_author.face\n                    }\n                }, {\n                    col_type: 'line'\n                }, {\n                    // 不一定有文字啊\n                    title: (list.modules.module_dynamic.desc === null ? '<font color=\"grey\">up太懒了，连文案都不想配...</font>' : list.modules.module_dynamic.desc.text).replace(/\\n/g, '<br>') + '<br><a href=\"hiker://page/Comments?p=fypage\">查看评论</a>',\n                    url: 'hiker://page/Comments?p=fypage',\n                    // 这个不能用long_text\n                    col_type: 'rich_text',\n                    extra: {\n                        id: list.basic.comment_id_str,\n                        type: 1\n                    }\n                }, {\n                    title: list.modules.module_dynamic.major.archive.title,\n                    img: list.modules.module_dynamic.major.archive.cover + \"@Referer=\",\n                    col_type: 'movie_1_left_pic',\n                    url: \"hiker://page/video\",\n                    desc: list.modules.module_dynamic.major.archive.desc,\n                    extra: {\n                        aid: list.modules.module_dynamic.major.archive.aid,\n                        lineVisible: false\n                    }\n                }, {\n                    desc: '<small><small><font color=\"grey\">留言:' + list.modules.module_stat.comment.count + '\\t\\t分享:' + list.modules.module_stat.forward.count + '\\t\\t喜欢:' + list.modules.module_stat.like.count + '</font></small></small>',\n                    img: imgLink.动态足迹,\n                    url: 'hiker://empty',\n                    col_type: 'avatar'\n                }, {\n                    col_type: 'line_blank'\n                });\n            } else if (list.type == 'DYNAMIC_TYPE_FORWARD') {\n                // 引用，多出了orig指向一个(过去)已发布的视频,准确的说是引用之前的帖子不一定是视频√\n                d.push({\n                    title: list.modules.module_author.name,\n                    img: list.modules.module_author.face + \"@Referer=\",\n                    desc: '<small><small><font color=\"grey\">' + list.modules.module_author.pub_time + '</font></small></small>',\n                    url: 'hiker://page/upHome',\n                    col_type: 'avatar',\n                    extra: {\n                        mid: list.modules.module_author.mid,\n                        title: list.modules.module_author.name,\n                        face: list.modules.module_author.face\n                    }\n                }, {\n                    col_type: 'line'\n                }, {\n                    title: (list.modules.module_dynamic.desc === null ? '<font color=\"grey\">up太懒了，连文案都不想配...</font>' : list.modules.module_dynamic.desc.text).replace(/\\n/g, '<br>') + '<br><a href=\"hiker://page/Comments?p=fypage\">查看评论</a>',\n                    url: 'hiker://page/Comments?p=fypage',\n                    col_type: 'rich_text',\n                    extra: {\n                        id: list.basic.comment_id_str,\n                        // 也是纯文字，因为只是文字+引用早已投稿的视频\n                        type: 17\n                    }\n                });\n                // 引用的内容——截断（根据不同的引用类型进行处理）\n                d.push({\n                    title: '<small><small>下面内容来自引用的帖子,up是:<a href=\"hiker://page/upHome\">' + list.orig.modules.module_author.name + '</a></small></small>',\n                    col_type: \"rich_text\",\n                    extra: {\n                        mid: list.orig.modules.module_author.mid,\n                        title: list.orig.modules.module_author.name,\n                        face: list.orig.modules.module_author.face\n                    }\n                }, {\n                    col_type: \"line\"\n                });\n                if (list.orig.type == 'DYNAMIC_TYPE_AV') {\n                    // 引用视频说说\n                    d.push({\n                        title: list.orig.modules.module_dynamic.major.archive.title,\n                        img: list.orig.modules.module_dynamic.major.archive.cover + \"@Referer=\",\n                        col_type: 'movie_1_left_pic',\n                        url: \"hiker://page/video\",\n                        desc: list.orig.modules.module_dynamic.major.archive.desc,\n                        extra: {\n                            aid: list.orig.modules.module_dynamic.major.archive.aid,\n                            lineVisible: false\n                        }\n                    });\n                } else if (list.orig.type == 'DYNAMIC_TYPE_WORD') {\n                    // 引用文字说说\n                    d.push({\n                        title: (list.orig.modules.module_dynamic.desc.text === null ? '<font color=\"grey\">up太懒了，连文案都不想配...</font>' : list.orig.modules.module_dynamic.desc.text).replace(/\\n/g, '<br>') + '<br><a href=\"hiker://page/Comments?p=fypage\">查看评论</a>',\n                        url: 'hiker://page/Comments?p=fypage',\n                        col_type: 'rich_text',\n                        extra: {\n                            // 评论id来源都不一样\n                            id: list.orig.id_str,\n                            // 纯文字\n                            type: 17\n                        }\n                    });\n\n                } else if (list.orig.type == 'DYNAMIC_TYPE_DRAW') {\n                    // 引用图片说说\n                    d.push({\n                        title: (list.orig.modules.module_dynamic.desc.text === null ? '<font color=\"grey\">up太懒了，连文案都不想配...</font>' : list.orig.modules.module_dynamic.desc.text).replace(/\\n/g, '<br>') + '<br><a href=\"hiker://page/Comments?p=fypage\">查看评论</a>',\n                        col_type: 'rich_text',\n                        url: \"hiker://page/Comments?p=fypage\",\n                        extra: {\n                            id: list.orig.modules.module_dynamic.major.draw.id,\n                            type: 11\n                        }\n                    });\n                    list.orig.modules.module_dynamic.major.draw.items.forEach(item => {\n                        d.push({\n                            img: item.src + \"@Referer=\",\n                            col_type: 'pic_3_square',\n                            url: item.src + \"@Referer=\",\n                        });\n                    });\n                } else {\n                    log('可能还有未适配的说说类型');\n                }\n                // 分割\n                d.push({\n                    desc: '<small><small><font color=\"grey\">留言:' + list.modules.module_stat.comment.count + '\\t\\t分享:' + list.modules.module_stat.forward.count + '\\t\\t喜欢:' + list.modules.module_stat.like.count + '</font></small></small>',\n                    img: imgLink.动态足迹,\n                    url: 'hiker://empty',\n                    col_type: 'avatar'\n                }, {\n                    col_type: 'line_blank'\n                });\n            } else if (list.type == 'DYNAMIC_TYPE_WORD') {\n                // 纯文字\n                d.push({\n                    title: list.modules.module_author.name,\n                    desc: '<small><small><font color=\"grey\">' + list.modules.module_author.pub_time + '</font></small></small>',\n                    img: list.modules.module_author.face + \"@Referer=\",\n                    url: 'hiker://page/upHome',\n                    col_type: 'avatar',\n                    extra: {\n                        mid: list.modules.module_author.mid,\n                        title: list.modules.module_author.name,\n                        face: list.modules.module_author.face\n                    }\n                }, {\n                    col_type: 'line'\n                }, {\n                    title: (list.modules.module_dynamic.desc === null ? '<font color=\"grey\">up太懒了，连文案都不想配...</font>' : list.modules.module_dynamic.desc.text).replace(/\\n/g, '<br>') + '<br><a href=\"hiker://page/Comments?p=fypage\">查看评论</a>',\n                    url: 'hiker://page/Comments?p=fypage',\n                    col_type: 'rich_text',\n                    extra: {\n                        id: list.basic.comment_id_str,\n                        // 纯文字\n                        type: 17\n                    }\n                }, {\n                    desc: '<small><small><font color=\"grey\">留言:' + list.modules.module_stat.comment.count + '\\t\\t分享:' + list.modules.module_stat.forward.count + '\\t\\t喜欢:' + list.modules.module_stat.like.count + '</font></small></small>',\n                    img: imgLink.动态足迹,\n                    url: 'hiker://empty',\n                    col_type: 'avatar'\n                }, {\n                    col_type: 'line_blank'\n                });\n            } else if (list.type == 'DYNAMIC_TYPE_DRAW') {\n                // 图片说说\n                d.push({\n                    title: list.modules.module_author.name,\n                    desc: '<small><small><font color=\"grey\">' + list.modules.module_author.pub_time + '</font></small></small>',\n                    img: list.modules.module_author.face + \"@Referer=\",\n                    url: 'hiker://page/upHome',\n                    col_type: 'avatar',\n                    extra: {\n                        mid: list.modules.module_author.mid,\n                        title: list.modules.module_author.name,\n                        face: list.modules.module_author.face\n                    }\n                }, {\n                    col_type: 'line'\n                }, {\n                    title: (list.modules.module_dynamic.desc === null ? '<font color=\"grey\">up太懒了，连文案都不想配...</font>' : list.modules.module_dynamic.desc.text).replace(/\\n/g, '<br>') + '<br><a href=\"hiker://page/Comments?p=fypage\">查看评论</a>',\n                    url: 'hiker://page/Comments?p=fypage',\n                    col_type: 'rich_text',\n                    extra: {\n                        id: list.basic.comment_id_str,\n                        // 相簿（图片动态）\n                        type: 11\n                    }\n                });\n                list.modules.module_dynamic.major.draw.items.forEach(item => {\n                    d.push({\n                        img: item.src + \"@Referer=\",\n                        col_type: 'pic_3_square',\n                        url: item.src + \"@Referer=\",\n                    });\n                });\n                d.push({\n                    desc: '<small><small><font color=\"grey\">留言:' + list.modules.module_stat.comment.count + '\\t\\t分享:' + list.modules.module_stat.forward.count + '\\t\\t喜欢:' + list.modules.module_stat.like.count + '</font></small></small>',\n                    img: imgLink.动态足迹,\n                    url: 'hiker://empty',\n                    col_type: 'avatar'\n                }, {\n                    col_type: 'line_blank'\n                });\n            }\n        });\n    })\n}\n// 时间日期转换函数\n$.exports.timeConvert = function (time) {\n    function formatDate(e, t) {\n        e = new Date(e * 1000); //时间戳为10位需*1000，时间戳为13位的话不需乘1000\n        return t.replace(/yyyy|YYYY/, e.getFullYear())\n            .replace(/yy|YY/, r(e.getFullYear() % 100, 2))\n            .replace(/mm|MM/, r(e.getMonth() + 1, 2))\n            .replace(/m|M/g, e.getMonth() + 1)\n            .replace(/dd|DD/, r(e.getDate(), 2))\n            .replace(/d|D/g, e.getDate())\n            .replace(/hh|HH/, r(e.getHours(), 2))\n            .replace(/h|H/g, e.getHours())\n            .replace(/ii|II/, r(e.getMinutes(), 2))\n            .replace(/i|I/g, e.getMinutes())\n            .replace(/ss|SS/, r(e.getSeconds(), 2))\n            .replace(/s|S/g, e.getSeconds())\n            .replace(/w/g, e.getDay())\n            .replace(/W/g, [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"][e.getDay()])\n    }\n\n    function r(e, t) {\n        for (var r = 0, n = t - (e + \"\").length; r < n; r++) e = \"0\" + e;\n        return e + \"\"\n    }\n    return formatDate(time, 'YYYY-MM-DD hh:ii:ss');\n    // console.log(formatDate(1664089532, 'YYYY-MM-DD hh:ii:ss'));\n}\n// 秒数分钟表达转换函数\n$.exports.formatSeconds = function (seconds) {\n    let minutes = Math.floor(seconds / 60); // 计算分钟数\n    let remainingSeconds = seconds % 60; // 计算剩余的秒数\n    let formattedTime = `${minutes}:${String(remainingSeconds).padStart(2, '0')}`;\n    return formattedTime;\n}\n\n// B站Wbi签名算法(After 2023-3,get request with wbi.)\n$.exports.getWbiEnc = function (queryJson) {\n    const mixinKeyEncTab = [\n        46, 47, 18, 2, 53, 8, 23, 32, 15, 50, 10, 31, 58, 3, 45, 35, 27, 43, 5, 49,\n        33, 9, 42, 19, 29, 28, 14, 39, 12, 38, 41, 13, 37, 48, 7, 16, 24, 55, 40,\n        61, 26, 17, 0, 1, 60, 51, 30, 4, 22, 25, 54, 21, 56, 59, 6, 63, 57, 62, 11,\n        36, 20, 34, 44, 52\n    ];\n\n    // 对 imgKey 和 subKey 进行字符顺序打乱编码\n    function getMixinKey(orig) {\n        let temp = '';\n        mixinKeyEncTab.forEach((n) => {\n            temp += orig[n]\n        });\n        return temp.slice(0, 32);\n    }\n\n    // 为请求参数进行 wbi 签名\n    function encWbi(params, img_key, sub_key) {\n        const mixin_key = getMixinKey(img_key + sub_key),\n            curr_time = Math.round(Date.now() / 1000),\n            chr_filter = /[!'\\(\\)*]/g\n        let query = [];\n        params = Object.assign(params, { wts: curr_time });    // 添加 wts 字段\n        // 按照 key 重排参数\n        Object.keys(params).sort().forEach((key) => {\n            query.push(\n                encodeURIComponent(key) +\n                '=' +\n                // 过滤 value 中的 \"!'()*\" 字符\n                encodeURIComponent(('' + params[key]).replace(chr_filter, ''))\n            )\n        })\n        query = query.join('&');\n        const wbi_sign = md5(query + mixin_key); // 计算 w_rid\n        return query + '&w_rid=' + wbi_sign;\n    }\n\n    // 获取最新的 img_key 和 sub_key\n    function getWbiKeys() {\n        const json_content = JSON.parse(fetch('https://api.bilibili.com/x/web-interface/nav', {\n            headers: {\n                \"User-Agent\": PC_UA,\n                \"Referer\": \"https://www.bilibili.com/\"\n            },\n            method: 'GET'\n        })).data;\n        img_url = json_content.wbi_img.img_url;\n        sub_url = json_content.wbi_img.sub_url;\n        return {\n            img_key: img_url.substring(img_url.lastIndexOf('/') + 1, img_url.length).split('.')[0],\n            sub_key: sub_url.substring(sub_url.lastIndexOf('/') + 1, sub_url.length).split('.')[0]\n        }\n    }\n\n    const wbi_keys = getWbiKeys();\n\n    const query = encWbi(\n        queryJson,\n        wbi_keys.img_key,\n        wbi_keys.sub_key\n    );\n    return query;\n}\n"},{"col_type":"movie_3","name":"videoPage","path":"video","rule":"js:\nvar d = [];\n// 预处理\nputMyVar('功能折叠', '关');\nimgLink = storage0.getMyVar('图标');\naid = MY_PARAMS.aid + \"\";\n// bvid = MY_PARAMS.bvid + \"\";\nmid = MY_PARAMS.mid + \"\";\nvar {formatSeconds}=$.require(\"hiker://page/api\");\ntry {\n    //获取视频分P信息\n    var p = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/view?aid=\" + aid)).data;\n    hasLike = $.require(\"hiker://page/api\").hasLike(aid);\n    hasFavour = $.require(\"hiker://page/api\").hasFavour(aid);\n    setPageTitle(p.title);\n    setPagePicUrl(p.pic + '@Referer=');\n    // 只有1P的情况\n    if (p.pages.length == 1) {\n        cid = p.pages[0].cid;\n        d.push({\n            title: p.title,\n            img: p.pic + '@Referer=',\n            url: $().lazyRule((aid, cid, qn) => {\n                // 真离了个大谱，明明替换掉了，ua字符串又变回来了，又要处理一次\n                return $.require(\"hiker://page/api\").biliLazy(aid, cid, qn).replace(/;/g, \"；；\");\n            }, aid + \"\", cid + \"\", '112'),\n            col_type: \"pic_1\",\n            desc:'播放量:'+p.stat.view+'\\t\\t\\t弹幕数:'+p.stat.danmaku+'\\n发布日期:'+$.require(\"hiker://page/api\").timeConvert(p.ctime),\n            extra: {\n                id:'aid-'+aid+'|cid-'+cid,\n                longClick: [{\n                    title: 'dm盒子', js: $.toString(() => {\n                        return 'hiker://page/setting#noHistory#?rule=dm盒子';\n                    })\n                }, {\n                    title: '弹幕控制', js: $.toString(() => {\n                        if (getItem('isOverrideSave', 'false') == 'true') {\n                            setItem('isOverrideSave', 'false');\n                            return 'toast://弹幕将不受dm盒子参数控制';\n                        } else {\n                            setItem('isOverrideSave', 'true');\n                            return 'toast://弹幕将受到dm盒子参数控制';\n                        }\n                    })\n                }]\n            }\n        });\n        d.push({\n            title: '<font color=\"blue\">' + p.owner.name + '</font>',\n            url: \"hiker://page/upHome\",\n            img: p.owner.face + \"@Referer=\",\n            col_type: \"avatar\",\n            extra: {\n                mid: p.owner.mid,\n                title: p.owner.name,\n                face: p.owner.face\n            }\n        });\n        // 虽然只有1P,但可能处于合集视频中，往往在up上传中属于一套影片\n        if (p.ugc_season) {\n            d.push({\n                title: '📁所属合集：<a href=\"hiker://page/collectionViedo\">'+p.ugc_season.title+'</a>',\n                url: \"hiker://page/collectionViedo#noHistory#\",\n                col_type: 'rich_text',\n                extra: { \"textSize\": 12, aid: aid }\n            })\n        }\n        d.push({\n            col_type: 'line'\n        }, {\n            title: p.stat.like,\n            img: hasLike == 1 ? imgLink.已点赞 : imgLink.未点赞,\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\n                return $.require(\"hiker://page/api\").likeLogic(aid)\n            }, aid),\n            col_type: \"icon_small_4\",\n            extra: {\n                id: 'setLike'\n            }\n        }, {\n            title: p.stat.favorite,\n            img: hasFavour ? imgLink.已收藏 : imgLink.未收藏,\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\n                upMid = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userMid;\n                return $.require(\"hiker://page/api\").favourLogic(aid, upMid)\n            }, aid),\n            col_type: \"icon_small_4\",\n            extra: {\n                id: 'setFavour'\n            }\n        }, {\n            title: '稍后再看',\n            img: imgLink.稍后再看,\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\n                return $.require(\"hiker://page/api\").judgeToview(aid)\n            }, aid),\n            col_type: \"icon_small_4\",\n        }, {\n            title: '查看评论',\n            url: 'hiker://page/Comments?p=fypage',\n            img: imgLink.查看评论,\n            col_type: \"icon_small_4\",\n            extra: {\n                \"id\": aid,\n                \"type\": 1\n            }\n        }, {\n            col_type: 'line_blank'\n        }, {\n            title: p.desc,\n            col_type: \"long_text\",\n        });\n    } else {\n        // 存在多集分P\n        d.push({\n            title: p.title,\n            img: p.pic + '@Referer=',\n            desc:'播放量:'+p.stat.view+'\\t\\t\\t弹幕数:'+p.stat.danmaku+'\\n发布日期:'+$.require(\"hiker://page/api\").timeConvert(p.ctime),\n            url: $('#noLoading##noHistory#').lazyRule((p) => {\n                return $('hiker://empty?fypage').rule((p) => {\n                    d = [];\n                    d.push({\n                        title: p.desc,\n                        col_type: \"long_text\",\n                    })\n                    setResult(d);\n                }, p)\n            }, p),\n            col_type: \"pic_1\",\n            extra: {\n                longClick: [{\n                    title: 'dm盒子', js: $.toString(() => {\n                        return 'hiker://page/setting#noHistory#?rule=dm盒子';\n                    })\n                }, {\n                    title: '弹幕控制', js: $.toString(() => {\n                        if (getItem('isOverrideSave', 'false') == 'true') {\n                            setItem('isOverrideSave', 'false');\n                            return 'toast://弹幕将不受dm盒子参数控制';\n                        } else {\n                            setItem('isOverrideSave', 'true');\n                            return 'toast://弹幕将受到dm盒子参数控制';\n                        }\n                    })\n                }]\n            }\n        }, {\n            title: '<font color=\"blue\">' + p.owner.name + '</font>',\n            url: \"hiker://page/upHome\",\n            img: p.owner.face + \"@Referer=\",\n            col_type: \"avatar\",\n            extra: {\n                mid: p.owner.mid,\n                title: p.owner.name,\n                face: p.owner.face\n            }\n        }, {\n            col_type: 'line'\n        }, {\n            title: p.stat.like,\n            img: hasLike == 1 ? imgLink.已点赞 : imgLink.未点赞,\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\n                return $.require(\"hiker://page/api\").likeLogic(aid)\n            }, aid),\n            col_type: \"icon_small_4\",\n            extra: {\n                id: 'setLike'\n            }\n        }, {\n            title: p.stat.favorite,\n            img: hasFavour ? imgLink.已收藏 : imgLink.未收藏,\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\n                upMid = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userMid;\n                return $.require(\"hiker://page/api\").favourLogic(aid, upMid)\n            }, aid),\n            col_type: \"icon_small_4\",\n            extra: {\n                id: 'setFavour'\n            }\n        }, {\n            title: '稍后再看',\n            img: imgLink.稍后再看,\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\n                return $.require(\"hiker://page/api\").judgeToview(aid)\n            }, aid),\n            col_type: \"icon_small_4\",\n        }, {\n            title: '查看评论',\n            url: 'hiker://page/Comments?p=fypage',\n            img: imgLink.查看评论,\n            col_type: \"icon_small_4\",\n            extra: {\n                \"id\": aid,\n                \"type\": 1\n            }\n        })\n        d.push({\n            col_type: 'line_blank'\n        }, {\n            title: '选集列表',\n            url: \"hiker://empty\",\n            desc:'<small><small>共' + p.videos + '条视频</small></small>',\n            img: imgLink.列表,\n            col_type: \"avatar\",\n        }, {\n            col_type: 'line'\n        });\n        p.pages.forEach(item => {\n            cid = item.cid;\n            d.push({\n                title: item.part,\n                desc:formatSeconds(item.duration),\n                // img:imgLink.分P列表项,\n                img:item.first_frame+'@Referer=',\n                url: $().lazyRule((aid, cid, qn) => {\n                    return $.require(\"hiker://page/api\").biliLazy(aid, cid, qn).replace(/;/g, \"；；\");\n                }, aid + \"\", cid + \"\", '116'),\n                col_type: \"avatar\",\n                extra:{\n                    id:'aid-'+aid+'|cid-'+cid,\n                }\n            })\n        })\n    }\n} catch (e) {\n    log(e);\n    d.push({\n        title: '页面走丢了...',\n        img: 'https://i0.hdslb.com/bfs/general/f7b667011a46615732c701f4bb1d07f793f8d1df.png@Referer=',\n        url: 'hiker://empty',\n        desc: '大概率视频被封禁，或者up已跑路~',\n        col_type: \"pic_1\"\n    });\n}\nsetResult(d);\n"},{"col_type":"long_text","name":"评论","path":"Comments","rule":"js:\nvar d = [];\nvar id = MY_PARAMS.id;\nvar type = MY_PARAMS.type;\nlog(id);\nif (MY_PAGE == 1) {\n    // 貌似暂时只能文字+数字\n    d.unshift({\n        title: \"发条评论吧\",\n        col_type: \"input\",\n        url: $.toString((id,type) => {\n            let csrf = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).cookie.match(/bili_jct=(.*?);/)[1];\n            post(\"http://api.bilibili.com/x/v2/reply/add\", {\n                body: {\n                    \"type\": type,\n                    \"oid\": id,\n                    \"csrf\": csrf,\n                    \"message\": input\n                },\n                headers: {\n                    \"Cookie\": JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).cookie\n                }\n            })\n            refreshPage()\n        }, id,type)\n    })\n}\nlet data = $.require(\"hiker://page/api\").getComments(id,type,MY_PAGE);\n// log(data);\nif(data){\n    data.forEach(item => {\n        d.push({\n            title: item.member.uname,\n            img: item.member.avatar+'@Referer=',\n            url:'hiker://page/upHome',\n            desc:'<small><small><font color=\"grey\">'+item.reply_control.location + \" \" + item.reply_control.time_desc+'</font></small></small>',\n            col_type: \"avatar\",\n            extra: {\n                mid: item.member.mid,\n                title: item.member.uname,\n                face: item.member.avatar\n            }\n        })\n        d.push({\n            title: item.content.message,\n        })\n    })\n}else{\n    d.push({\n        title: '好像没有评论了啦，！',\n        col_type: \"text_center_1\",\n    })\n}\nsetResult(d);\n"},{"col_type":"movie_3","name":"订阅列表","path":"subscription","rule":"if (getItem('订阅类型', '1') == '1') {\n\n    typerName = '追番';\n\n} else {\n\n    typerName = '追剧';\n\n}\n\nd.push({\n\n    title: '追番' == typerName ? '‘‘’’<font color=\"red\">追番</font>' : '追番',\n\n    url: $('#noLoading##noHistory#').lazyRule(() => {\n\n        setItem('订阅类型', '1')\n\n        refreshPage(true);\n\n        return \"hiker://empty\";\n\n    }),\n\n    col_type: 'scroll_button'\n\n},{\n\n    title: '追剧' == typerName ? '‘‘’’<font color=\"red\">追剧</font>' : '追剧',\n\n    url: $('#noLoading##noHistory#').lazyRule(() => {\n\n        setItem('订阅类型', '2')\n\n        refreshPage(true);\n\n        return \"hiker://empty\";\n\n    }),\n\n    col_type: 'scroll_button'\n\n});\n\nsubscriptions = JSON.parse(fetch(\"https://api.bilibili.com/x/space/bangumi/follow/list?type=\" + getItem('订阅类型', '1') + \"&follow_status=0&pn=\" + page + \"&ps=15&vmid=\" + mid, {\n\n    headers: {\n\n        \"Cookie\": cookie\n\n    }\n\n})).data;\n\nif (page == 1) {\n\n    d.push({\n\n        title: \"当前\" + typerName + \"数量:\" + subscriptions.total,\n\n        url: \"hiker://empty\",\n\n        col_type: \"text_center_1\"\n\n    })\n\n}\n\nsubscriptions.list.forEach(list => {\n\n    d.push({\n\n        title: list.title,\n\n        img: list.cover + \"@Referer=\",\n\n        url: \"hiker://page/filmerji#immersiveTheme#\",\n\n        desc: list.evaluate.substring(0, 12) + '‘‘’’…<font color=\"#1C1C1C\">详情</font>' + '\\n' + list.season_type_name + '|' + (list.areas===undefined?'':list.areas[0].name + '\\n') + (list.progress == '' ? '尚未观看' : list.progress) + (list.new_ep.index_show===undefined?'':'|'+(list.new_ep.index_show.match(/更新|即将/) ? '‘‘’’<font color=\"red\">' + list.new_ep.index_show + '</font>': list.new_ep.index_show)),\n\n        col_type: 'movie_1_vertical_pic',\n\n        extra: {\n\n            season_id: list.season_id\n\n        }\n\n    });\n\n});\n\n"},{"col_type":"movie_3","name":"关注列表","path":"attention","rule":"if (MY_PAGE == 1) {\n\n    focusGroups=$.require(\"hiker://page/api\").getMyAttentionGroupList();\n\n    putMyVar('tempId', JSON.stringify(focusGroups[1].tagid));\n\n    focusGroups.forEach(list => {\n\n        d.push({\n\n            title: list.tagid == getItem('关注分组', JSON.stringify(focusGroups[1].id)) ? \"““””<font color='red'>\" + list.name + list.count + \"</font>\" : list.name + list.count,\n\n            url: $('#noLoading##noHistory#').lazyRule((list) => {\n\n                setItem('关注分组', JSON.stringify(list.tagid));\n\n                refreshPage(true);\n\n                return \"toast://切换关注分组为:\" + list.name;\n\n            }, list),\n\n            col_type: 'scroll_button',\n\n        });\n\n    });\n\n    // 末尾补充悄悄关注分组\n\n    d.push({\n\n        title: '悄悄关注' == getItem('关注分组', JSON.stringify(focusGroups[0].id)) ? \"““””<font color='red'>悄悄关注</font>\" : \"悄悄关注\",\n\n        url: $('#noLoading##noHistory#').lazyRule(() => {\n\n            setItem('关注分组', \"悄悄关注\");\n\n            refreshPage(true);\n\n            return \"toast://切换关注分组为:\" + \"悄悄关注\";\n\n        }),\n\n        col_type: 'scroll_button',\n\n    },{\n\n        col_type: 'line'\n\n    });\n\n}\n\nif (getItem('关注分组')=='悄悄关注') {\n\n    groupContent = JSON.parse(fetch(\"https://api.bilibili.com/x/relation/whispers?pn=\"+page+\"&ps=20&jsonp=jsonp\", {\n\n        headers: {\n\n            \"Cookie\": cookie\n\n        }\n\n    })).data.list;\n\n    groupContent.forEach(list => {\n\n        d.push({\n\n            title: \"<big><font color='blue'>\" + list.uname + \"</font></big><small>\" + list.sign + \"</small>\",\n\n            img: list.face + \"@Referer=\",\n\n            col_type: 'avatar',\n\n            url: \"hiker://page/upHome\",\n\n            extra: {\n\n                mid: list.mid,\n\n                title: list.uname,\n\n                face: list.face\n\n            }\n\n        });\n\n    });\n\n}else{\n\n    groupContent = JSON.parse(fetch(\"https://api.bilibili.com/x/relation/tag?mid=\" + mid + \"&tagid=\" + getItem('关注分组', getMyVar('tempId')) + \"&pn=\" + page + \"&ps=20&jsonp=jsonp\", {\n\n        headers: {\n\n            \"Cookie\": cookie\n\n        }\n\n    })).data;\n\n    groupContent.forEach(list => {\n\n        d.push({\n\n            title: \"<big><font color='blue'>\" + list.uname + \"</font></big><small>\" + list.sign + \"</small>\",\n\n            img: list.face + \"@Referer=\",\n\n            col_type: 'avatar',\n\n            url: \"hiker://page/upHome\",\n\n            extra: {\n\n                mid: list.mid,\n\n                title: list.uname,\n\n                face: list.face\n\n            }\n\n        });\n\n    });\n\n}\n\n\n"},{"col_type":"movie_3","name":"收藏列表","path":"colection","rule":"if (page == 1) {\r\n    d.push({\r\n        title: '我创建的收藏夹' == getItem('收藏类型', '我创建的收藏夹') ? '‘‘’’<font color=\"red\">我创建的收藏夹</font>' : '我创建的收藏夹',\r\n        url: $('#noLoading##noHistory#').lazyRule(() => {\r\n            setItem('收藏类型', '我创建的收藏夹')\r\n            refreshPage(true);\r\n            return \"hiker://empty\";\r\n        }),\r\n        col_type: 'scroll_button'\r\n    }, {\r\n        title: '稍后在看' == getItem('收藏类型', '我创建的收藏夹') ? '‘‘’’<font color=\"red\">稍后在看</font>' : '稍后在看',\r\n        url: $('#noLoading##noHistory#').lazyRule(() => {\r\n            setItem('收藏类型', '稍后在看')\r\n            refreshPage(true);\r\n            return \"hiker://empty\";\r\n        }),\r\n        col_type: 'scroll_button'\r\n    });\r\n}\r\nif (getItem('收藏类型', '我创建的收藏夹') == '我创建的收藏夹') {\r\n    try {\r\n        if (page == 1) {\r\n            d.push({\r\n                // col_type: 'blank_block'\r\n                col_type: 'line'\r\n            }, );\r\n        }\r\n        collections = JSON.parse(fetch(\"https://api.bilibili.com/x/v3/fav/folder/list4navigate\", {\r\n            headers: {\r\n                \"Cookie\": cookie\r\n            }\r\n        })).data;\r\n        groups = collections[0].mediaListResponse.list;\r\n        putMyVar('tempId', JSON.stringify(groups[0].id));\r\n        groups.forEach(list => {\r\n            d.push({\r\n                title: list.id == getItem('收藏夹', JSON.stringify(groups[0].id)) ? \"““””<font color='red'>\" + list.title + \"</font>\" : list.title,\r\n                url: $('#noLoading##noHistory#').lazyRule((list) => {\r\n                    setItem('收藏夹', JSON.stringify(list.id));\r\n                    refreshPage(true);\r\n                    return \"toast://切换收藏夹为:\" + list.title;\r\n                }, list),\r\n                col_type: 'scroll_button',\r\n            });\r\n        });\r\n        d.push({\r\n            col_type: 'line'\r\n        });\r\n        groupContent = JSON.parse(fetch(\"https://api.bilibili.com/x/v3/fav/resource/list?media_id=\" + getItem('收藏夹', getMyVar('tempId')) + \"&pn=\" + page + \"&ps=20&keyword=&order=mtime&type=0&tid=0&platform=web&jsonp=jsonp\", {\r\n            headers: {\r\n                \"Cookie\": cookie\r\n            }\r\n        })).data.medias;\r\n        groupContent.forEach(list => {\r\n            d.push({\r\n                title: list.title,\r\n                img: list.cover + \"@Referer=\",\r\n                col_type: 'movie_1_left_pic',\r\n                url: \"hiker://page/video\",\r\n                desc: 'UP:' + list.upper.name + '\\n' + list.intro,\r\n                extra: {\r\n                    aid: list.id,\r\n                    mid: list.upper.mid\r\n                }\r\n            });\r\n        });\r\n    } catch (e) {\r\n        showLoading('兄弟，你确认你有收藏吗，快去收藏一个视频~');\r\n    }\r\n} else {\r\n    laterViews = JSON.parse(fetch(\"https://api.bilibili.com/x/v2/history/toview/web?jsonp=jsonp\", {\r\n        headers: {\r\n            \"Cookie\": cookie\r\n        }\r\n    })).data;\r\n    count = laterViews.count;\r\n    d.push({\r\n        title: \"共有\" + count + \"条待看视频记录\",\r\n        url: \"hiker://empty\",\r\n        col_type: \"text_center_1\"\r\n    });\r\n    laterViews.list.forEach(list => {\r\n        d.push({\r\n            title: list.title,\r\n            img: list.pic + \"@Referer=\",\r\n            col_type: 'movie_1_left_pic',\r\n            url: \"hiker://page/video\",\r\n            desc: 'UP:' + list.owner.name + '\\n' + list.desc,\r\n            extra: {\r\n                aid: list.aid,\r\n                mid: list.owner.mid\r\n            }\r\n        });\r\n    });\r\n}"},{"col_type":"movie_3","name":"足迹","path":"track","rule":"var nextInfo = {};\n\nif (page == 1) {\n\n    histories = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/history/cursor?max=0&view_at=0&business=\", {\n\n        headers: {\n\n            \"Cookie\": cookie\n\n        }\n\n    })).data;\n\n    nextInfo.max = histories.cursor.max;\n\n    nextInfo.view_at = histories.cursor.view_at;\n\n    nextInfo.business = histories.cursor.business;\n\n} else {\n\n    histories = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/history/cursor?max=\" + storage0.getMyVar(JSON.stringify(page)).max + \"&view_at=\" + storage0.getMyVar(JSON.stringify(page)).view_at + \"&business=\" + storage0.getMyVar(JSON.stringify(page)).business, {\n\n        headers: {\n\n            \"Cookie\": cookie\n\n        }\n\n    })).data;\n\n    nextInfo.max = histories.cursor.max;\n\n    nextInfo.view_at = histories.cursor.view_at;\n\n    nextInfo.business = histories.cursor.business;\n\n}\n\nstorage0.putMyVar(JSON.stringify(page + 1), nextInfo);\n\nhistories.list.forEach(list => {\n\n    viewTime=pbtime = $.require(\"hiker://page/api\").timeConvert(list.view_at);\n\n    if (list.history.business == 'article') {\n\n        // 专栏文章\n\n        d.push({\n\n            title: list.show_title==''?list.title:list.show_title,\n\n            img: list.covers[0] + \"@Referer=\",\n\n            col_type: 'movie_1_left_pic',\n\n            url: \"hiker://page/articleDetail\",\n\n            desc: (list.author_name==''?viewTime:'UP:' + list.author_name+'\\n' )+ viewTime,\n\n            extra: {\n\n                id: list.history.oid,\n\n            }\n\n        });\n\n    } else if(list.history.business == 'article-list'){\n\n        // 文章列表？（反正id存放位置不一样）\n\n        d.push({\n\n            title: list.show_title==''?list.title:list.show_title,\n\n            img: list.covers[0] + \"@Referer=\",\n\n            col_type: 'movie_1_left_pic',\n\n            url: \"hiker://page/articleDetail\",\n\n            desc: (list.author_name==''?viewTime:'UP:' + list.author_name+'\\n' )+ viewTime,\n\n            extra: {\n\n                id: list.history.cid,\n\n            }\n\n        });\n\n    }else if(list.history.business == 'pgc'){\n\n        // 系列剧集（单集）\n\n        d.push({\n\n            title: list.show_title==''?list.title:list.show_title,\n\n            img: list.cover + \"@Referer=\",\n\n            col_type: 'movie_1_left_pic',\n\n            url: \"hiker://page/filmerji#immersiveTheme#\",\n\n            desc: (list.author_name==''?list.tag_name+'\\t\\t'+list.new_desc+'\\n'+viewTime:'UP:' + list.author_name+'\\n'+viewTime),\n\n            extra: {\n\n                ep_id:list.history.epid\n\n            }\n\n        });\n\n    }else {\n\n        // 普通video\n\n        d.push({\n\n            title: list.show_title==''?list.title:list.show_title,\n\n            img: list.cover + \"@Referer=\",\n\n            col_type: 'movie_1_left_pic',\n\n            url: \"hiker://page/video\",\n\n            desc: (list.author_name==''?list.tag_name+'\\t\\t'+list.new_desc+'\\n'+viewTime:'UP:' + list.author_name+'\\n'+viewTime),\n\n            extra: {\n\n                aid: list.history.oid,\n\n            }\n\n        });\n\n    }\n\n});\n\n\n"},{"col_type":"movie_3","name":"动态","path":"latetNews","rule":"d.push({\n\n    col_type: 'line_blank'\n\n});\n\nlatenews=$.require(\"hiker://page/api\").getDynamicData('myHome');\n\neval($.require(\"hiker://page/api\").showDynamicData());\n\n"},{"col_type":"movie_3","name":"专栏列表","path":"acticleList","rule":"js:\n\nvar d=[];\n\npage=MY_PAGE;\n\nupMid = MY_PARAMS.mid + \"\";\n\narticleList=$.require(\"hiker://page/api\").getUserArticle(upMid,page);\n\narticleNum=articleList.count;\n\nif (articleNum==undefined) {\n\n    d.push({\n\n        title: '这up没有专栏文章',\n\n        url: \"hiker://empty\",\n\n        col_type: \"text_center_1\",\n\n    });\n\n}else{\n\n    maxPage = Math.ceil(articleNum / articleList.ps);\n\n    if (page <= maxPage) {\n\n        d.push({\n\n            title: '当前:第' + articleList.pn + '页\\t\\t\\t共有' + maxPage + '页,' + articleNum + '条数据',\n\n            url: \"hiker://empty\",\n\n            col_type: \"text_center_1\",\n\n        });\n\n        articleList.articles.forEach(list => {\n\n            pbtime=$.require(\"hiker://page/api\").timeConvert(list.publish_time);\n\n            d.push({\n\n                title: list.title,\n\n                img: list.banner_url==''? (list.image_urls+ '@Referer='):(list.banner_url+ '@Referer='),\n\n                desc: '‘‘’’<small>'+list.stats.view+'看过\\t\\t'+list.stats.like+'喜欢\\t\\t'+list.stats.favorite+'收藏\\n' + pbtime+'</small>',\n\n                col_type: 'movie_1_left_pic',\n\n                url: \"hiker://page/articleDetail\",\n\n                extra: {\n\n                    // 专栏文章id\n\n                    id: list.id\n\n                }\n\n            });\n\n        });\n\n    }\n\n}\n\nsetResult(d);\n\n"},{"col_type":"movie_3","name":"专栏文章X5","path":"articleDetail","rule":"js:\n\nvar d = [];\n\npage = MY_PAGE;\n\ncvid = MY_PARAMS.id + \"\";\n\nd.push({\n\n    url: \"https://www.bilibili.com/read/cv\"+cvid,\n\n    col_type: \"x5_webview_single\",\n\n    desc: \"100%&&float\",\n\n    extra: {\n\n        canBack: true\n\n    }\n\n})\n\nsetResult(d);\n\n"},{"col_type":"movie_3","name":"综合热门","path":"hotVideo","rule":"let res = JSON.parse(request(\"https://api.bilibili.com/x/web-interface/popular?pn=\" + MY_PAGE, {\n\n    headers: {\n\n        Cookie: JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).cookie\n\n    }\n\n})).data\n\nres.list.forEach(item => {\n\n    d.push({\n\n        title: item.title,\n\n        img: item.pic+ \"@Referer=\",\n\n        url: \"hiker://page/video\",\n\n        desc: item.pub_location,\n\n        col_type: \"movie_2\",\n\n        extra: {\n\n            \"aid\": item.aid,\n\n            \"cid\": item.cid,\n\n        }\n\n    })\n\n})\n\n\n"},{"name":"哔哩最新章节","path":"getUpdate","rule":"if (MY_PARAMS.season_id) {\n    season_id = MY_PARAMS.season_id + \"\";\n    Data = JSON.parse(fetch('https://api.bilibili.com/pgc/view/web/season?season_id=' + season_id)).result;\n} else {\n    Data = JSON.parse(fetch('https://api.bilibili.com/pgc/view/web/season?ep_id=' + MY_PARAMS.ep_id)).result;\n}\n追剧日历 = Data.new_ep.desc;\n更新进度 = Data.new_ep.title;\n更新状态 = 追剧日历.match(/完结|期待/) ? 追剧日历 : '更新至' + (更新进度.match(/[\\u4e00-\\u9fa5]/) ? 更新进度 : ('第' + (更新进度 == '' ? 0 : 更新进度)) + '话')\nsetResult(更新状态);"},{"name":"up合集视频","path":"collectionViedo","rule":"js:\nvar d = [];\n// 预处理\nputMyVar('功能折叠', '关');\nimgLink = storage0.getMyVar('图标');\naid = MY_PARAMS.aid + \"\";\n// bvid = MY_PARAMS.bvid + \"\";\n// mid = MY_PARAMS.mid + \"\";\ntry {\n    //获取视频分P信息\n    var p = JSON.parse(fetch(\"https://api.bilibili.com/x/web-interface/view?aid=\" + aid)).data;\n    // 合集信息\n    var videoData = p.ugc_season;\n    setPageTitle(videoData.title);\n    setPagePicUrl(videoData.cover + '@Referer=');\n    d.push({\n        title: videoData.title,\n        desc:videoData.intro,\n        img: videoData.cover + '@Referer=',\n        url: $('#noLoading##noHistory#').lazyRule((intro) => {\n            return $('hiker://empty?fypage').rule((intro) => {\n                let d = [];\n                d.push({\n                    title: intro,\n                    col_type: \"long_text\",\n                })\n                setResult(d);\n            }, intro)\n        }, videoData.intro),\n        col_type: \"pic_1\",\n        extra: {\n            longClick: [{\n                title: 'dm盒子', js: $.toString(() => {\n                    return 'hiker://page/setting#noHistory#?rule=dm盒子';\n                })\n            }, {\n                title: '弹幕控制', js: $.toString(() => {\n                    if (getItem('isOverrideSave', 'false') == 'true') {\n                        setItem('isOverrideSave', 'false');\n                        return 'toast://弹幕将不受dm盒子参数控制';\n                    } else {\n                        setItem('isOverrideSave', 'true');\n                        return 'toast://弹幕将受到dm盒子参数控制';\n                    }\n                })\n            }]\n        }\n    }, {\n        title: '<font color=\"blue\">' + p.owner.name + '</font>',\n        url: \"hiker://page/upHome\",\n        img: p.owner.face + \"@Referer=\",\n        col_type: \"avatar\",\n        desc: '<small><small>共有' + videoData.ep_count + '条视频数据</small></small>',\n        extra: {\n            mid: p.owner.mid,\n            title: p.owner.name,\n            face: p.owner.face\n        }\n    }, {\n        col_type: 'line'\n    });\n    var index = 1;\n    storage0.putVar('videoSections', videoData.sections);\n    videoData.sections.forEach(el => {\n        d.push({\n            title: '📁' + el.title,\n            url: $('#noLoading##noHistory#').lazyRule((index) => {\n                if (getMyVar('isFold_'+index, 'y') == 'y') {\n                    putMyVar('isFold_'+index, 'n');\n                    deleteItemByCls('section' + index + '-part');\n                    return 'toast://已折叠';\n                } else {\n                    putMyVar('isFold_'+index, 'y');\n                    videoSections = storage0.getVar('videoSections');\n                    sectionPartList = [];\n                    videoSections[index - 1].episodes.forEach(item => {\n                        aid = item.aid;\n                        cid = item.cid;\n                        stat = item.arc.stat;\n                        sectionPartList.push({\n                            title: '““””\\t\\t\\t<small></font>▶︎' + item.title + '\\n\\t\\t\\t\\t\\t</font></small><small><small><font color=gray>播放量：' + stat.view + '\\t\\t\\t弹幕：' + stat.danmaku + '\\t\\t\\t喜欢：' + stat.like + '</font></small></small>',\n                            url: $().lazyRule((aid, cid, qn) => {\n                                return $.require(\"hiker://page/api\").biliLazy(aid, cid, qn).replace(/;/g, \"；；\");\n                            }, aid + \"\", cid + \"\", '116'),\n                            col_type: \"text_1\",\n                            extra: { lineVisible: false, cls: 'section' + index + '-part',id:'aid-'+aid+'|cid-'+cid }\n                        })\n                    });\n                    addItemAfter('Section' + index, sectionPartList);\n                    return 'toast://已展开';\n                }\n            }, index),\n            col_type: 'text_1',\n            extra: { id: 'Section' + index }\n        });\n        el.episodes.forEach(item => {\n            aid = item.aid;\n            cid = item.cid;\n            stat = item.arc.stat;\n            d.push({\n                title: '““””\\t\\t\\t<small></font>▶︎' + item.title + '\\n\\t\\t\\t\\t\\t</font></small><small><small><font color=gray>播放量：' + stat.view + '\\t\\t\\t弹幕：' + stat.danmaku + '\\t\\t\\t喜欢：' + stat.like + '</font></small></small>',\n                url: $().lazyRule((aid, cid, qn) => {\n                    return $.require(\"hiker://page/api\").biliLazy(aid, cid, qn).replace(/;/g, \"；；\");\n                }, aid + \"\", cid + \"\", '116'),\n                col_type: \"text_1\",\n                extra: { lineVisible: false, cls: 'section' + index + '-part',id:'aid-'+aid+'|cid-'+cid }\n            })\n        });\n        index++;\n    })\n} catch (e) {\n    log(e);\n    d.push({\n        title: '页面走丢了...',\n        img: 'https://i0.hdslb.com/bfs/general/f7b667011a46615732c701f4bb1d07f793f8d1df.png@Referer=',\n        url: 'hiker://empty',\n        desc: '大概率视频被封禁，或者up已跑路~',\n        col_type: \"pic_1\"\n    });\n}\nsetResult(d);\n"},{"name":"图标下载","path":"saveLocal","rule":"$.exports.saveLocal = () => {\n    const base64ToHex = (base64Str) => {\n        // 删除前缀并解码Base64字符串\n        var binaryStr = window0.atob(base64Str.split(',')[1]);\n\n        // 转换为16进制字符串\n        var hexStr = '';\n        for (var i = 0; i < binaryStr.length; i++) {\n            var hex = binaryStr.charCodeAt(i).toString(16);\n            hexStr += (hex.length === 2 ? hex : '0' + hex);\n        }\n        return hexStr;\n    };\n    showLoading(\"图标初始化中...\");\n    var tubiao = {};\n    try {\n        // 剪贴板线路\n        html = request('https://netcut.cn/p/a1fcf0d3b0a27f13');\n        data = html.match(/{.*note_content.*updated_at.*}/)[0];\n        eval('tubiao =' + JSON.parse(data).note_content);\n    } catch (e) {\n        log('剪贴板出错,切换托管线路');\n        route = [\n            'https://gitcode.net/qq_23847819/hiker/-/raw/master/tubiao.json',\n            'https://gitea.com/cy/hiker/raw/commit/be2160c6a01db873d9f9681ba7e86eebfa118d86/tubiao.json',\n            'https://raw.codehub.cn/p/hiker/d/tubiao/git/raw/master/tubiao.json?token=GGdlIuVGqY3b3LydIowrksbUBCfMyx2fF31WUZeo4m',\n            'https://gitee.com/mxxl-cy/hiker/raw/master/tubiao.json'\n        ];\n        for (let i = 0; i < route.length; i++) {\n            try {\n                eval('tubiao =' + request(route[i]));\n                if (tubiao[\"五大\"] && tubiao[\"哔哩\"]) {\n                    break;\n                } else {\n                    log('线路：' + tubiao[i] + '被墙了...');\n                }\n            } catch (e) {\n                log('线路：' + tubiao[i] + '出错了...');\n            }\n        }\n    }\n    try {\n        var wuda = tubiao[\"五大\"];\n        var bili = tubiao[\"哔哩\"];\n        var index = 0;\n        for (let item in wuda) {\n            writeHexFile(`hiker://files/rules/cy/tubiao/${item}.svg`, base64ToHex(wuda[item]));\n            log(`初始化第${index++}个图标:${item}...`);\n        }\n        for (let item in bili) {\n            writeHexFile(`hiker://files/rules/cy/bili_pic/${item}.png`, base64ToHex(bili[item]));\n            log(`初始化第${index++}个图标:${item}...`);\n        }\n        showLoading('图标初始化完成：共计' + index + '个图标');\n        hideLoading();\n    } catch (e) {\n        showLoading('图标初始化失败');\n        log('图标初始化失败:' + e);\n        hideLoading();\n    }\n\n};\n"}],"title":"bilili","author":"侠名","version":17,"type":"video","url":"hiker://empty##fypage","col_type":"movie_1_vertical_pic","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d = [];\nvar page = MY_PAGE;\nisLogin = JSON.parse($.require(\"hiker://page/api\").isLoggedIn());\n// 验证登录\nif (isLogin.type === true) {\n    currentUser = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0];\n    cookie = currentUser.cookie;\n    userName = currentUser.userName;\n    mid = currentUser.userMid;\n    userFace = currentUser.face + \"@Referer=\";\n    if (page == 1) {\n        var Tab = ['账号', '热映', '片库', '推送', '热门', '订阅', '关注', '收藏', '足迹', '动态'];\n        Tab = Tab.map((it) => {\n            return it === getItem('首页', '推送') ? '👉' + it : it;\n        });\n        d.push({\n            title: '<font color=\"blue\">' + userName,\n            desc: '</font>⭐<font color=\"#19B89D\">当前：' + getItem('首页', '推送') + '</font>⭐',\n            url: $('#noLoading#').lazyRule((Tab) => {\n                return $(Tab, 2).select(() => {\n                    input = input.replace(/👉/g, '');\n                    if (input === '账号') {\n                        selectOption = ['退出登录', '切换账号','复制cookie', '分享bfKey', '设置bfKey', '清除bfKey','➕️'];\n                        return $(selectOption, 2).select(() => {\n                            switch (input) {\n                                case \"退出登录\":\n                                    setting = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\"));\n                                    // setting.userList[0].cookie = '';\n                                    setting.userList.shift();\n                                    saveFile(\"hiker://files/rules/cy/bili.txt\", JSON.stringify(setting));\n                                    refreshPage(true);\n                                    return \"toast://你已退出\";\n                                case \"切换账号\":\n                                    userList = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList.map((p) => { return p.userName });\n                                    return $(userList, 1).select(() => {\n                                        setting = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\"));\n                                        var temp = setting.userList[0];\n                                        setting.userList.forEach((p, index) => {\n                                            if (p.userName === input && index !== 0) {\n                                                setting.userList[0] = p;\n                                                setting.userList[index] = temp;\n                                                return;\n                                            }\n                                        });\n                                        saveFile(\"hiker://files/rules/cy/bili.txt\", JSON.stringify(setting));\n                                        refreshPage(true);\n                                        return \"toast://切换成功\";\n                                    })\n                                    break;\n                                case \"复制cookie\":\n                                    cookie = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie;\n                                    copy(cookie);\n                                    return \"toast://已复制cookie\";\n                                    break;\n                                case \"分享bfKey\":\n                                    cookie = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList[0].cookie;\n                                    bfKey = base64Encode(base64Encode(cookie));\n                                    copy(bfKey);\n                                    return \"toast://已复制bfKey,快去分享吧，注意账号安全~\";\n                                    break;\n                                case \"设置bfKey\":\n                                    return $('', '播放权益共享，注意安全').input(() => {\n                                        setting = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\"));\n                                        setting.bfKey = input;\n                                        saveFile(\"hiker://files/rules/cy/bili.txt\", JSON.stringify(setting));\n                                        return \"toast://bfKey设置成功\";\n                                    })\n                                    break;\n                                case \"清除bfKey\":\n                                    setting = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\"));\n                                    setting.bfKey = '';\n                                    saveFile(\"hiker://files/rules/cy/bili.txt\", JSON.stringify(setting));\n                                    return \"toast://bfKey已清除\";\n                                    break;\n                                case \"➕️\":\n                                    return \"hiker://page/login#noRecordHistory#\";\n                                    break;\n                                default:\n                                    return \"toast://你选了啥？\";\n                            }\n                        });\n                    } else {\n                        setItem('首页', input);\n                        refreshPage(true);\n                        return \"toast://切换首页为:\" + input;\n                    }\n                })\n            }, Tab),\n            img: userFace === undefined ? 'https://lanmeiguojiang.com/tubiao/movie/20.svg' : userFace,\n            col_type: \"avatar\",\n            extra: {\n                id: '首页显示'\n            }\n        });\n        d.push({\n            col_type: 'blank_block'\n        })\n    }\n    // 匹配首页选项\n    switch (getItem('首页', '推送')) {\n        case '热映':\n            eval(JSON.parse(request('hiker://page/UpdateTables')).rule);\n            break;\n        case '片库':\n            eval(JSON.parse(request('hiker://page/vault')).rule);\n            break;\n        case '推送':\n            eval(JSON.parse(request('hiker://page/feed')).rule);\n            break;\n        case '热门':\n            eval(JSON.parse(request('hiker://page/hotVideo')).rule);\n            break;\n        case '订阅':\n            eval(JSON.parse(request('hiker://page/subscription')).rule);\n            break;\n        case '关注':\n            eval(JSON.parse(request('hiker://page/attention')).rule);\n            break;\n        case '收藏':\n            eval(JSON.parse(request('hiker://page/colection')).rule);\n            break;\n        case '足迹':\n            eval(JSON.parse(request('hiker://page/track')).rule);\n            break;\n        case '动态':\n            eval(JSON.parse(request('hiker://page/latetNews')).rule);\n            break;\n        default:\n            eval(JSON.parse(request('hiker://page/UpdateTables')).rule);\n            break;\n    }\n} else {\n    let a = []\n    let time = 10\n    a.push({\n        title: `                     使用前须知\n本规则调用https://github.com/SocialSisterYi/bilibili-API-collect的api，所有代码全部开源，并且不存在上传用户信息的行为\n本规则为学习目的，请于导入24小时内删除！！！                        \n开始使用本规则即代表遵守规则                       \n            `,\n        \"col_type\": \"long_text\",\n        extra: {\n            id: \"text\"\n        }\n    }, {\n        title: time + \"秒后继续\",\n        col_type: \"text_1\",\n        extra: {\n            id: \"timer\"\n        }\n    })\n    setResult(a)\n    while (time != 0) {\n        java.lang.Thread.sleep(1000)\n        time -= 1\n        updateItem(\"timer\", {\n            title: time + \"秒后继续\"\n        })\n    }\n    addItemAfter(\"timer\", {\n        title: \"选择其他已登录账号\",\n        url: $('#noLoading#').lazyRule(() => {\n            userList = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\")).userList.map((p) => { return p.userName });\n            return $(userList, 1).select(() => {\n                setting = JSON.parse(request(\"hiker://files/rules/cy/bili.txt\"));\n                temp = setting.userList[0];\n                setting.userList.map((p) => {\n                    if (p.userName === input) {\n                        setting.userList[0] = p;\n                        p = temp;\n                    }\n                })\n                saveFile(\"hiker://files/rules/cy/bili.txt\", JSON.stringify(setting));\n                refreshPage(true);\n                return \"toast://切换成功\";\n            })\n        }),\n        col_type: \"text_center_1\"\n    })\n    addItemAfter(\"timer\", {\n        title: \"登陆\",\n        desc: \"登录失效？点此重新登录\",\n        url: \"hiker://page/login#noRecordHistory#\",\n        col_type: \"text_center_1\"\n    })\n    deleteItem(\"text\")\n    deleteItem(\"timer\")\n}\nsetResult(d);\n","searchFind":"js:\nMY_URL = MY_URL.split('##');\nlet seaword = MY_URL[1];\nvar d = [];\nif (MY_PAGE==1) {\n    d.push({\n        title: \"up搜=>\" + seaword,\n        url: 'hiker://page/upSearch?fypage',\n        extra: {\n            seaword: seaword\n        }\n    });\n    d.push({\n        title: \"video搜=>\" + seaword,\n        url: 'hiker://page/videoSearch?fypage',\n        extra: {\n            seaword: seaword\n        }\n    });\n}\nlet {getSearchRes}=$.require(\"hiker://page/api\");\n// 番剧\nlist1=getSearchRes('media_bangumi',seaword,MY_PAGE,12).result;\n// 影视\nlist2=getSearchRes('media_ft',seaword,MY_PAGE,12).result;\nif (list1) {\n    list1.forEach(item => {\n        if (!item.cover.match(/https/)) {\n            封面 = item.cover.replace('http','https') + \"@Referer=\";\n        }else{\n            封面 = item.cover+ \"@Referer=\";\n        }\n        d.push({\n            title: item.title.replace(/<em class=\"keyword\">/g, '').replace(/<\\/em>/g, ''),\n            img: 封面,\n            url: 'hiker://page/filmerji#immersiveTheme#',\n            content: item.desc,\n            desc: item.styles,\n            extra: {\n                season_id: item.season_id\n            }\n        });\n    });\n}\nif (list2) {\n    list2.forEach(item => {\n        if (!item.cover.match(/https/)) {\n            封面 = item.cover.replace('http','https') + \"@Referer=\";\n        }else{\n            封面 = item.cover+ \"@Referer=\";\n        }\n        d.push({\n            title: item.title.replace(/<em class=\"keyword\">/g, '').replace(/<\\/em>/g, ''),\n            img: 封面,\n            url: 'hiker://page/filmerji#immersiveTheme#',\n            content: item.desc,\n            desc: item.styles,\n            extra: {\n                season_id: item.season_id\n            }\n        });\n    });\n}\nsetResult(d);\n","search_url":"hiker://empty##**##fypage","group":"①推荐","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"pc","preRule":"js:\n// 图片预处理\nimgLocation = {\n    \"已收藏\": 'hiker://files/rules/cy/bili_pic/已收藏.png',\n    \"未收藏\": 'hiker://files/rules/cy/bili_pic/未收藏.png',\n    \"稍后再看\": 'hiker://files/rules/cy/bili_pic/稍后再看.png',\n    \"未点赞\": 'hiker://files/rules/cy/bili_pic/未点赞.png',\n    \"已点赞\": 'hiker://files/rules/cy/bili_pic/已点赞.png',\n    \"添加关注\": 'hiker://files/rules/cy/bili_pic/添加关注.png',\n    \"已关注\": 'hiker://files/rules/cy/bili_pic/已关注.png',\n    \"专栏\": 'hiker://files/rules/cy/bili_pic/专栏.png',\n    \"查看评论\": 'hiker://files/rules/cy/bili_pic/查看评论.png',\n    \"周边\": 'hiker://files/rules/cy/bili_pic/周边.png',\n    \"双边\": 'hiker://files/rules/cy/bili_pic/双边.png',\n    \"列表\": 'hiker://files/rules/cy/bili_pic/列表.png',\n    \"订阅\": 'hiker://files/rules/cy/bili_pic/订阅.png',\n    \"日历\": 'hiker://files/rules/cy/bili_pic/日历.png',\n    \"动态\": 'hiker://files/rules/cy/bili_pic/动态.png',\n    \"动态足迹\": 'https://cdn3.iconfinder.com/data/icons/nature-169/32/grass_turf_plant_lawn_nature_meadow_garden_natural_environment-128.png@Referer=',\n    \"合集文件夹\": 'https://cdn4.iconfinder.com/data/icons/commenly-needed/400/Icon-17-128.png@Referer=',\n    \"分P列表项\": 'https://cdn1.iconfinder.com/data/icons/minimal-ui-2/24/play_media_button-128.png@Referer='\n}\nstorage0.putMyVar('图标', imgLocation);\n\n//* 下面代码用于自动拉取图标，无奈 */\nif (!fileExist('hiker://files/rules/cy/bili_pic') || !fileExist('hiker://files/rules/cy/tubiao')) {\n    $.require(\"hiker://page/saveLocal\").saveLocal();\n}\n\n\n//* 下面代码用于初始化账号配置 */\nif (!fileExist('hiker://files/rules/cy/bili.txt')) {\n    settings = JSON.stringify({\n        userList: [{\n            cookie: \"\",\n            userName: '',\n            userMid: '',\n            vipStatus: 0,\n            face: 'https://lanmeiguojiang.com/tubiao/movie/20.svg',\n        }],\n        bfKey: \"\"\n    });\n    saveFile(\"hiker://files/rules/cy/bili.txt\", settings);\n} else {\n    settings = JSON.parse(request('hiker://files/rules/cy/bili.txt'));\n    // 判断 JSON 对象是否满足我们定义的结构\n    if (typeof settings === 'object' &&\n        Array.isArray(settings.userList) &&\n        settings.userList.every(p => typeof p === 'object' && typeof p.cookie === 'string' && typeof p.userName === 'string' && typeof p.userMid === 'number' && typeof p.face === 'string' && typeof p.vipStatus === 'number') &&\n        typeof settings.bfKey === 'string'\n    ) {\n        log('账号配置文件正常');\n    } else {\n        log('初始化/复原账号配置文件');\n        setting = '';\n        try {\n            // 迁移原配置文件中的账号信息\n            originUserSetting = JSON.parse(request('hiker://files/rules/cy/bili.txt'));\n            log(originUserSetting);\n            cookie = originUserSetting.cookie;\n            userName = originUserSetting.userName;\n            userMid = originUserSetting.userMid;\n            face = originUserSetting.face;\n            vipStatus = originUserSetting.vipStatus;\n            if(cookie===undefined){setting='{\"userList\":[],\"bfKey\":\"\"}';}else{\n                setting = JSON.stringify({\n                    userList: [{\n                        cookie: cookie,\n                        userName: userName,\n                        userMid: userMid,\n                        face: face,\n                        vipStatus: vipStatus\n                    }],\n                    bfKey: \"\"\n                });\n            }\n        } catch (e) {\n            log(\"没有旧的合法的配置文件\");\n            setting = JSON.stringify({\n                userList: [],\n                bfKey: \"\"\n            });\n        }\n        saveFile(\"hiker://files/rules/cy/bili.txt\", setting);\n    }\n}\n","pages":"[{\"col_type\":\"movie_3\",\"name\":\"分类片库\",\"path\":\"vault\",\"rule\":\"顶部大类 = ['国创', '电视', '纪录片', '综艺', '番剧', '电影']\\nif (page == 1) {\\n    // 折叠开关\\n    d.push({\\n        title: getMyVar('折叠', '关') == '关' ? '““””<b><span style=\\\"color: #FF0000\\\">∨</span></b>' : '““””<b><span style=\\\"color: #1aad19\\\">∧</span></b>',\\n        url: $('#noLoading#').lazyRule(() => {\\n            if (getMyVar('折叠', '关') == '开') {\\n                putMyVar('折叠', '关');\\n            } else {\\n                putMyVar('折叠', '开');\\n            }\\n            refreshPage(true);\\n            return \\\"hiker://empty\\\";\\n        }),\\n        col_type: 'scroll_button',\\n    })\\n    顶部大类.forEach(li => {\\n        d.push({\\n            title: li == getMyVar('大类', '国创') ? '““””<b><font color=#1aad19>' + li + '</font></b>' : li,\\n            url: $('#noLoading#').lazyRule((li) => {\\n                putMyVar('大类', li);\\n                refreshPage(true);\\n                return \\\"hiker://empty\\\";\\n            }, li),\\n            col_type: 'scroll_button',\\n        })\\n    });\\n    d.push({\\n        col_type: 'blank_block'\\n    })\\n}\\n// 顶部分类参数映射\\nswitch (getMyVar('大类', '国创')) {\\n    case '国创':\\n        seasonType = 4;\\n        if (getMyVar('折叠', '关') == '开') {\\n            if (page == 1) {\\n                html = fetch('https://www.bilibili.com/guochuang/index');\\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\\n                分类列表.forEach(ul => {\\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\\n                    子分类列表 = pdfa(ul, 'ul&&li');\\n                    子分类列表.forEach(li => {\\n                        if (pdfh(li, 'li&&Text') == '其他') {\\n                            return;\\n                        }\\n                        d.push({\\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\\n                                refreshPage(true);\\n                                return \\\"hiker://empty\\\";\\n                            }, li, 筛选条件),\\n                            col_type: 'scroll_button'\\n                        })\\n                    });\\n                    d.push({\\n                        col_type: 'blank_block'\\n                    })\\n                });\\n            }\\n        }\\n        break;\\n    case '电视':\\n        seasonType = 5;\\n        if (getMyVar('折叠', '关') == '开') {\\n            if (page == 1) {\\n                html = fetch('https://www.bilibili.com/tv/index');\\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\\n                分类列表.forEach(ul => {\\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\\n                    子分类列表 = pdfa(ul, 'ul&&li');\\n                    子分类列表.forEach(li => {\\n                        if (pdfh(li, 'li&&Text') == '其他') {\\n                            return;\\n                        }\\n                        d.push({\\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\\n                                refreshPage(true);\\n                                return \\\"hiker://empty\\\";\\n                            }, li, 筛选条件),\\n                            col_type: 'scroll_button'\\n                        })\\n                    });\\n                    d.push({\\n                        col_type: 'blank_block'\\n                    })\\n                });\\n            }\\n        }\\n        break;\\n    case '纪录片':\\n        seasonType = 3;\\n        if (getMyVar('折叠', '关') == '开') {\\n            if (page == 1) {\\n                html = fetch('https://www.bilibili.com/documentary/index/');\\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\\n                分类列表.forEach(ul => {\\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\\n                    子分类列表 = pdfa(ul, 'ul&&li');\\n                    子分类列表.forEach(li => {\\n                        if (pdfh(li, 'li&&Text') == '其他') {\\n                            return;\\n                        }\\n                        d.push({\\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\\n                                refreshPage(true);\\n                                return \\\"hiker://empty\\\";\\n                            }, li, 筛选条件),\\n                            col_type: 'scroll_button'\\n                        })\\n                    });\\n                    d.push({\\n                        col_type: 'blank_block'\\n                    })\\n                });\\n            }\\n        }\\n        break;\\n    case '综艺':\\n        seasonType = 7;\\n        if (getMyVar('折叠', '关') == '开') {\\n            if (page == 1) {\\n                html = fetch('https://www.bilibili.com/variety/index');\\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\\n                分类列表.forEach(ul => {\\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\\n                    子分类列表 = pdfa(ul, 'ul&&li');\\n                    子分类列表.forEach(li => {\\n                        if (pdfh(li, 'li&&Text') == '其他') {\\n                            return;\\n                        }\\n                        d.push({\\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\\n                                refreshPage(true);\\n                                return \\\"hiker://empty\\\";\\n                            }, li, 筛选条件),\\n                            col_type: 'scroll_button'\\n                        })\\n                    });\\n                    d.push({\\n                        col_type: 'blank_block'\\n                    })\\n                });\\n            }\\n        }\\n        break;\\n    case '番剧':\\n        seasonType = 1;\\n        if (getMyVar('折叠', '关') == '开') {\\n            if (page == 1) {\\n                html = fetch('https://www.bilibili.com/anime/index');\\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\\n                分类列表.forEach(ul => {\\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\\n                    子分类列表 = pdfa(ul, 'ul&&li');\\n                    子分类列表.forEach(li => {\\n                        if (pdfh(li, 'li&&Text') == '其他') {\\n                            return;\\n                        }\\n                        d.push({\\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\\n                                refreshPage(true);\\n                                return \\\"hiker://empty\\\";\\n                            }, li, 筛选条件),\\n                            col_type: 'scroll_button'\\n                        })\\n                    });\\n                    d.push({\\n                        col_type: 'blank_block'\\n                    })\\n                });\\n            }\\n        }\\n        break;\\n    case '电影':\\n        seasonType = 2;\\n        if (getMyVar('折叠', '关') == '开') {\\n            if (page == 1) {\\n                html = fetch('https://www.bilibili.com/movie/index');\\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\\n                分类列表.forEach(ul => {\\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\\n                    子分类列表 = pdfa(ul, 'ul&&li');\\n                    子分类列表.forEach(li => {\\n                        if (pdfh(li, 'li&&Text') == '其他') {\\n                            return;\\n                        }\\n                        d.push({\\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\\n                                refreshPage(true);\\n                                return \\\"hiker://empty\\\";\\n                            }, li, 筛选条件),\\n                            col_type: 'scroll_button'\\n                        })\\n                    });\\n                    d.push({\\n                        col_type: 'blank_block'\\n                    })\\n                });\\n            }\\n        }\\n        break;\\n    default:\\n        seasonType = 4;\\n        if (getMyVar('折叠', '关') == '开') {\\n            if (page == 1) {\\n                html = fetch('https://www.bilibili.com/anime/index');\\n                分类列表 = pdfa(html, '.filter-list&&.filter-block');\\n                分类列表.forEach(ul => {\\n                    筛选条件 = pdfh(ul, '.filter-name&&Text');\\n                    子分类列表 = pdfa(ul, 'ul&&li');\\n                    子分类列表.forEach(li => {\\n                        if (pdfh(li, 'li&&Text') == '其他') {\\n                            return;\\n                        }\\n                        d.push({\\n                            title: getMyVar(筛选条件, '全部') == pdfh(li, 'li&&Text') ? '““””<b><font color=#1aad19>' + pdfh(li, 'li&&Text') + '</font></b>' : pdfh(li, 'li&&Text'),\\n                            url: $('#noLoading#').lazyRule((li, 筛选条件) => {\\n                                putMyVar(筛选条件, pdfh(li, 'li&&Text'));\\n                                refreshPage(true);\\n                                return \\\"hiker://empty\\\";\\n                            }, li, 筛选条件),\\n                            col_type: 'scroll_button'\\n                        })\\n                    });\\n                    d.push({\\n                        col_type: 'blank_block'\\n                    })\\n                });\\n            }\\n        }\\n        break;\\n}\\n// 子分类参数映射\\nswitch (getMyVar('类型', '全部')) {\\n    case '正片':\\n        season_version = 1;\\n        break;\\n    case '电影':\\n        season_version = 2;\\n        break;\\n    case '其他':\\n        season_version = 3;\\n        break;\\n    default:\\n        season_version = -1;\\n        break;\\n}\\nswitch (getMyVar('配音', '全部')) {\\n    case '原声':\\n        spoken_language_type = 1;\\n        break;\\n    case '中文配音':\\n        spoken_language_type = 2;\\n        break;\\n    default:\\n        spoken_language_type = -1;\\n        break;\\n}\\nswitch (getMyVar('地区', '全部')) {\\n    case '中国大陆':\\n        area = 1;\\n        break;\\n    case '日本':\\n        area = 2;\\n        break;\\n    case '美国':\\n        area = 3;\\n        break;\\n    case '英国':\\n        area = 4;\\n        break;\\n    case '中国港台':\\n        area = [6, 7];\\n        break;\\n    case '韩国':\\n        area = 8;\\n        break;\\n    case '法国':\\n        area = 9;\\n        break;\\n    case '泰国':\\n        area = 10;\\n        break;\\n    case '西班牙':\\n        area = 13;\\n        break;\\n    case '德国':\\n        area = 15;\\n        break;\\n    case '意大利':\\n        area = 35;\\n        break;\\n    case '其他':\\n        // 只是番剧的情况_共55，要减去出现的——算了，直接在动态分类的时候去掉了\\n        area = [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55];\\n        break;\\n    default:\\n        area = -1;\\n        break;\\n}\\nswitch (getMyVar('状态', '全部')) {\\n    case '完结':\\n        is_finish = 1;\\n        break;\\n    case '连载':\\n        is_finish = 0;\\n        break;\\n    default:\\n        is_finish = -1;\\n        break;\\n}\\nswitch (getMyVar('出品', '全部')) {\\n    case '央视':\\n        producer_id = 4;\\n        break;\\n    case 'BBC':\\n        producer_id = 1;\\n        break;\\n    case '探索频道':\\n        producer_id = 7;\\n        break;\\n    case '国家地理':\\n        producer_id = 14;\\n        break;\\n    case 'NHK':\\n        producer_id = 2;\\n        break;\\n    case '历史频道':\\n        producer_id = 6;\\n        break;\\n    case '卫视':\\n        producer_id = 8;\\n        break;\\n    case '自制':\\n        producer_id = 9;\\n        break;\\n    case 'ITV':\\n        producer_id = 5;\\n        break;\\n    case 'SKY':\\n        producer_id = 3;\\n        break;\\n    case 'ZDF':\\n        producer_id = 10;\\n        break;\\n    case '合作机构':\\n        producer_id = 11;\\n        break;\\n    case '国内其他':\\n        producer_id = 12;\\n        break;\\n    case '国外其它':\\n        producer_id = 13;\\n        break;\\n    default:\\n        producer_id = -1;\\n        break;\\n}\\nswitch (getMyVar('版权', '全部')) {\\n    case '独家':\\n        copyright = 3;\\n        break;\\n    case '其他':\\n        copyright = [1, 2, 4];\\n        break;\\n    default:\\n        copyright = -1;\\n        break;\\n}\\nswitch (getMyVar('付费', '全部')) {\\n    case '免费':\\n        season_status = 1;\\n        break;\\n    case '付费':\\n        season_status = [2, 6];\\n        break;\\n    case '大会员':\\n        season_status = [4, 6];\\n        break;\\n    default:\\n        season_status = -1;\\n        break;\\n}\\nswitch (getMyVar('季度', '全部')) {\\n    case '1月':\\n        season_month = 1;\\n        break;\\n    case '4月':\\n        season_month = 4;\\n        break;\\n    case '7月':\\n        season_month = 7;\\n        break;\\n    case '10月':\\n        season_month = 10;\\n        break;\\n    default:\\n        season_month = -1;\\n        break;\\n}\\n// 判断和映射年份\\nswitch (getMyVar('大类', '国创')) {\\n    case '国创':\\n    case '番剧':\\n        // 番剧和国创【也是叫做年份但参数名、格式和其他分类不一样】\\n        anime_year = getMyVar('年份', '全部');\\n        switch (anime_year.includes('-')) {\\n            case true:\\n                early = anime_year.split('-')[1];\\n                later = anime_year.split('-')[0];\\n                year = `[${early},${Number(later) + 1})`;\\n                break;\\n            case false:\\n                switch (anime_year) {\\n                    case '90年代':\\n                        year = '[1990,2000)';\\n                        break;\\n                    case '80年代':\\n                        year = '[1980,1990)';\\n                        break;\\n                    case '更早':\\n                        year = '[,1980)';\\n                        break;\\n                    case '全部':\\n                        year = -1;\\n                        break;\\n                    default:\\n                        year = `[${anime_year},${Number(anime_year) + 1})`;\\n                        break;\\n                }\\n        }\\n    default:\\n        // 除了番剧和国创的其他分类\\n        tv_year = getMyVar('年份', '全部');\\n        switch (tv_year.includes('-')) {\\n            case true:\\n                early = tv_year.split('-')[1];\\n                later = tv_year.split('-')[0];\\n                release_date = `[${early}-01-01 00:00:00,${Number(later) + 1}-01-01 00:00:00)`\\n                break;\\n            case false:\\n                switch (tv_year) {\\n                    case '90年代':\\n                        release_date = '[1990-01-01 00:00:00,2000-01-01 00:00:00)'\\n                        break;\\n                    case '80年代':\\n                        release_date = '[1980-01-01 00:00:00,1990-01-01 00:00:00)'\\n                        break;\\n                    case '更早':\\n                        release_date = '[,1980-01-01 00:00:00)';\\n                        break;\\n                    case '全部':\\n                        release_date = -1;\\n                        break;\\n                    default:\\n                        release_date = `[${tv_year}-01-01 00:00:00,${Number(tv_year) + 1}-01-01 00:00:00)`;\\n                        break;\\n                }\\n        }\\n}\\nswitch (getMyVar('风格', '全部')) {\\n    case '电影':\\n        style_id = -10;\\n        break;\\n    // 番剧栏目\\n    case '原创':\\n        style_id = 10010;\\n        break;\\n    case '漫画改':\\n        style_id = 10011;\\n        break;\\n    case '小说改':\\n        style_id = 10012;\\n        break;\\n    case '游戏改':\\n        style_id = 10013;\\n        break;\\n    case '特摄':\\n        style_id = 10014;\\n        break;\\n    case '布袋戏':\\n        style_id = 10015;\\n        break;\\n    case '热血':\\n        style_id = 10016;\\n        break;\\n    case '穿越':\\n        style_id = 10017;\\n        break;\\n    case '奇幻':\\n        style_id = 10018;\\n        break;\\n    // 咋跳了一个捏~\\n    case '战斗':\\n        style_id = 10020;\\n        break;\\n    case '搞笑':\\n        style_id = 10021;\\n        break;\\n    case '日常':\\n        style_id = 10022;\\n        break;\\n    case '科幻':\\n        style_id = 10023;\\n        break;\\n    case '萌系':\\n        style_id = 10024;\\n        break;\\n    case '治愈':\\n        style_id = 10025;\\n        break;\\n    case '校园':\\n        style_id = 10026;\\n        break;\\n    case '少儿':\\n        style_id = 10027;\\n        break;\\n    case '泡面':\\n        style_id = 10028;\\n        break;\\n    case '恋爱':\\n        style_id = 10029;\\n        break;\\n    case '少女':\\n        style_id = 10030;\\n        break;\\n    case '魔法':\\n        style_id = 10031;\\n        break;\\n    case '冒险':\\n        style_id = 10032;\\n        break;\\n    case '历史':\\n        style_id = 10033;\\n        break;\\n    case '架空':\\n        style_id = 10034;\\n        break;\\n    case '机战':\\n        style_id = 10035;\\n        break;\\n    case '神魔':\\n        style_id = 10036;\\n        break;\\n    case '声控':\\n        style_id = 10037;\\n        break;\\n    case '运动':\\n        style_id = 10038;\\n        break;\\n    case '励志':\\n        style_id = 10039;\\n        break;\\n    case '音乐':\\n        style_id = 10040;\\n        break;\\n    case '推理':\\n        style_id = 10041;\\n        break;\\n    case '社团':\\n        style_id = 10042;\\n        break;\\n    case '智斗':\\n        style_id = 10043;\\n        break;\\n    case '催泪':\\n        style_id = 10044;\\n        break;\\n    case '美食':\\n        style_id = 10045;\\n        break;\\n    case '偶像':\\n        style_id = 10046;\\n        break;\\n    case '乙女':\\n        style_id = 10047;\\n        break;\\n    case '职场':\\n        style_id = 10048;\\n        break;\\n\\n    // 综艺栏目、电影\\n    case '剧情':\\n        style_id = 10050;\\n        break;\\n    case '喜剧':\\n        style_id = 10051;\\n        break;\\n    case '爱情':\\n        style_id = 10052;\\n        break;\\n    case '动作':\\n        style_id = 10053;\\n        break;\\n    case '恐怖':\\n        style_id = 10054;\\n        break;\\n    case '犯罪':\\n        style_id = 10055;\\n        break;\\n    case '惊悚':\\n        style_id = 10056;\\n        break;\\n    case '悬疑':\\n        style_id = 10057;\\n        break;\\n    case '战争':\\n        style_id = 10058;\\n        break;\\n    case '动画':\\n        style_id = 10059;\\n        break;\\n    case '传记':\\n        style_id = 10060;\\n        break;\\n    case '家庭':\\n        style_id = 10061;\\n        break;\\n    case '歌舞':\\n        style_id = 10062;\\n        break;\\n    case '纪实':\\n        style_id = 10063;\\n        break;\\n    case '灾难':\\n        style_id = 10064;\\n        break;\\n    case '人文':\\n        style_id = 10065;\\n        break;\\n    case '科技':\\n        style_id = 10066;\\n        break;\\n    case '宇宙':\\n        style_id = 10068;\\n        break;\\n    case '萌宠':\\n        style_id = 10069;\\n        break;\\n    case '社会':\\n        style_id = 10070;\\n        break;\\n    case '动物':\\n        style_id = 10071;\\n        break;\\n    case '自然':\\n        style_id = 10072;\\n        break;\\n    case '医疗':\\n        style_id = 10073;\\n        break;\\n    case '军事':\\n        style_id = 10074;\\n        break;\\n    case '罪案':\\n        style_id = 10075;\\n        break;\\n    case '神秘':\\n        style_id = 10076;\\n        break;\\n    case '旅行':\\n        style_id = 10077;\\n        break;\\n    case '武侠':\\n        style_id = 10078;\\n        break;\\n    case '青春':\\n        style_id = 10079;\\n        break;\\n    case '都市':\\n        style_id = 10080;\\n        break;\\n    case '古装':\\n        style_id = 10081;\\n        break;\\n    case '谍战':\\n        style_id = 10082;\\n        break;\\n    case '经典':\\n        style_id = 10083;\\n        break;\\n    case '情感':\\n        style_id = 10084;\\n        break;\\n    case '神话':\\n        style_id = 10085;\\n        break;\\n    case '年代':\\n        style_id = 10086;\\n        break;\\n    case '农村':\\n        style_id = 10087;\\n        break;\\n    case '刑侦':\\n        style_id = 10088;\\n        break;\\n    case '军旅':\\n        style_id = 10089;\\n        break;\\n    case '访谈':\\n        style_id = 10090;\\n        break;\\n    case '脱口秀':\\n        style_id = 10091;\\n        break;\\n    case '真人秀':\\n        style_id = 10092;\\n        break;\\n    case '选秀':\\n        style_id = 10094;\\n        break;\\n    case '旅游':\\n        style_id = 10095;\\n        break;\\n    case '晚会':\\n        style_id = 10098;\\n        break;\\n    case '演唱会':\\n        style_id = 10096;\\n        break;\\n    case '亲子':\\n        style_id = 10097;\\n        break;\\n    case '养成':\\n        style_id = 10099;\\n        break;\\n    case '文化':\\n        style_id = 10100;\\n        break;\\n    // 电影栏目\\n    case '短片':\\n        style_id = 10104;\\n        break;\\n    default:\\n        style_id = -1;\\n        break;\\n}\\n// 映射真实请求地址\\nswitch (seasonType) {\\n    case 4:\\n        // 国创\\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?season_version=' + season_version + '&is_finish=' + is_finish + '&copyright=' + copyright + '&season_status=' + season_status + '&year=' + year + '&style_id=' + style_id + '&order=3&st=4&sort=0&page=' + page + '&season_type=4&pagesize=30&type=1'\\n        break;\\n    case 5:\\n        // 电视剧\\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?area=' + area + '&style_id=' + style_id + '&release_date=' + release_date + '&season_status=' + season_status + '&order=2&st=5&sort=0&page=' + page + '&season_type=5&pagesize=30&type=1'\\n        break;\\n    case 7:\\n        // 综艺\\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?season_status=' + season_status + '&style_id=' + style_id + '&order=2&st=7&sort=0&page=' + page + '&season_type=7&pagesize=30&type=1';\\n        break;\\n    case 1:\\n        // 番剧\\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?season_version=' + season_version + '&spoken_language_type=' + spoken_language_type + '&area=' + area + '&is_finish=' + is_finish + '&copyright=' + copyright + '&season_status=' + season_status + '&season_month=' + season_month + '&year=' + year + '&style_id=' + style_id + '&order=3&st=1&sort=0&page=' + page + '&season_type=1&pagesize=30&type=1';\\n        break;\\n    case 3:\\n        // 纪录片\\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?style_id=' + style_id + '&producer_id=' + producer_id + '&release_date=' + release_date + '&season_status=' + season_status + '&order=2&st=3&sort=0&page=' + page + '&season_type=3&pagesize=30&type=1'\\n        break;\\n    case 2:\\n        // 电影\\n        true_url = 'https://api.bilibili.com/pgc/season/index/result?area=' + area + '&style_id=' + style_id + '&release_date=' + release_date + '&season_status=' + season_status + '&order=2&st=2&sort=0&page=' + page + '&season_type=2&pagesize=30&type=1'\\n        break;\\n}\\ntrue_url = encodeURI(true_url);\\nlist = JSON.parse(fetch(true_url)).data.list;\\ntry {\\n    list.forEach(movie => {\\n        d.push({\\n            title: movie.title,\\n            url: \\\"hiker://page/filmerji#immersiveTheme#\\\",\\n            img: movie.cover + \\\"@Referer=\\\",\\n            desc: movie.order,\\n            col_type: 'movie_3',\\n            extra: {\\n                season_id: movie.season_id\\n            }\\n        });\\n    });\\n} catch (e) {\\n    log('已经抵达页底' + MY_PAGE);\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"热映时间表\",\"path\":\"UpdateTables\",\"rule\":\"function color(text, color) {\\n\\n    text += \\\"\\\";\\n\\n    if (text.indexOf(\\\"““””\\\") === 0) {\\n\\n        text.replace(\\\"““””\\\", \\\"\\\");\\n\\n    }\\n\\n    return \\\"““””<font color='\\\" + color + \\\"'>\\\" + text + \\\"</font>\\\";\\n\\n}\\n\\nvar tabs = {\\n\\n    \\\"番剧\\\": 1,\\n\\n    \\\"纪录片\\\": 3,\\n\\n    \\\"国创\\\": 4\\n\\n}\\n\\nif (MY_PAGE == 1) {\\n\\n    Object.keys(tabs).forEach(item => {\\n\\n        d.push({\\n\\n            title: (getMyVar(\\\"juji\\\", \\\"国创\\\") == item ? color(item, \\\"red\\\") : item),\\n\\n            url: $().lazyRule((a) => {\\n\\n                putMyVar(\\\"juji\\\", a)\\n\\n                refreshPage()\\n\\n                return \\\"toast://切换成功\\\"\\n\\n            }, item),\\n\\n            col_type: \\\"scroll_button\\\"\\n\\n        })\\n\\n    })\\n\\n    d.push({\\n\\n        col_type: \\\"line\\\"\\n\\n    })\\n\\n    let days = 7\\n\\n    for (let i = 1; i < days; i++) {\\n\\n        d.push({\\n\\n            title: (getMyVar(\\\"from\\\", \\\"1\\\") == i + \\\"\\\" ? color(i + \\\"天前\\\", \\\"red\\\") : i + \\\"天前\\\"),\\n\\n            url: $().lazyRule((i) => {\\n\\n                putMyVar(\\\"from\\\", i + \\\"\\\")\\n\\n                refreshPage()\\n\\n                return \\\"hiker://empty\\\"\\n\\n            }, i),\\n\\n            col_type: \\\"scroll_button\\\"\\n\\n        })\\n\\n    }\\n\\n    d.push({\\n\\n        col_type: \\\"line\\\"\\n\\n    })\\n\\n    for (let i = 1; i < days; i++) {\\n\\n        d.push({\\n\\n            title: (getMyVar(\\\"to\\\", \\\"1\\\") == i + \\\"\\\" ? color(i + \\\"天后\\\", \\\"red\\\") : i + \\\"天后\\\"),\\n\\n            url: $().lazyRule((i) => {\\n\\n                putMyVar(\\\"to\\\", i + \\\"\\\")\\n\\n                refreshPage()\\n\\n                return \\\"hiker://empty\\\"\\n\\n            }, i),\\n\\n            col_type: \\\"scroll_button\\\"\\n\\n        })\\n\\n    }\\n\\n\\n    $.require(\\\"hiker://page/api\\\").getMovies(tabs[getMyVar(\\\"juji\\\", \\\"国创\\\")], getMyVar(\\\"from\\\", \\\"1\\\"), getMyVar(\\\"to\\\", \\\"1\\\")).forEach(item => {\\n\\n        d.push({\\n\\n            title: item.date + \\\" 周\\\" + item.day_of_week,\\n\\n            col_type: \\\"text_1\\\",\\n\\n            url: \\\"hiker://empty\\\"\\n\\n        })\\n\\n        item.episodes.forEach(i => {\\n\\n            d.push({\\n\\n                title: i.title,\\n\\n                img: i.cover+'@Referer=',\\n\\n                desc:i.pub_index.match(/即将/)?'‘‘’’<font color=\\\"red\\\">'+i.pub_index+'\\\\n'+i.pub_time+'</font>': i.pub_index+ '\\\\n' + i.pub_time,\\n\\n                url: \\\"hiker://page/filmerji#immersiveTheme#\\\",\\n\\n                extra: {\\n\\n                    \\\"season_id\\\": i.season_id\\n\\n                }\\n\\n            })\\n\\n        })\\n\\n    })\\n\\n}\\n\\n\\n\\n\"},{\"col_type\":\"movie_3\",\"name\":\"登录\",\"path\":\"login\",\"rule\":\"js:\\nvar d = [];\\nsetPageTitle('账号登录页面')\\nd.push({\\n    title: 'cookie登录',\\n    url: $('#noLoading#').lazyRule(() => {\\n        return $('', '请输入你的cookie').input(() => {\\n            if (input == \\\"\\\") return \\\"toast://cookie不能为空\\\";\\n            let userinfo = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/nav\\\", {\\n                headers: {\\n                    \\\"Cookie\\\": input\\n                }\\n            })).data;\\n            if (userinfo.isLogin === false) return \\\"toast://你的cookie貌似失效了喔~\\\";\\n            userInfo = {\\n                cookie: input,\\n                userName: userinfo.uname,\\n                userMid:  userinfo.mid,\\n                vipStatus: userinfo.vipStatus,\\n                face: userinfo.face + \\\"@Referer=\\\"\\n            }\\n            setting = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\"));\\n            setting.userList.unshift(userInfo);\\n            // 过滤掉cookie为空的元素\\n            setting.userList = setting.userList.filter(user => user.cookie !== '');\\n            saveFile(\\\"hiker://files/rules/cy/bili.txt\\\", JSON.stringify(setting));\\n            back(true);\\n            return \\\"toast://cookie设置成功\\\";\\n        })\\n    }),\\n    col_type: 'text_center_1'\\n});\\nd.push({\\n    title: '登陆说明',\\n    desc: \\\"页面下方登陆成功后，再点击确认登录即可\\\",\\n    url: \\\"hiker://empty\\\",\\n    col_type: 'text_center_1'\\n}, {\\n    title: '登陆成功后，再点我！',\\n    url: $('#noLoading#').lazyRule(() => {\\n        // 这里负责写Cookie，先读，再追加\\n        cookie = getVar('biliCookie','');\\n        log(\\\"获取到的cookie:\\\"+cookie);\\n        if (cookie == \\\"\\\") return \\\"toast://获取cookie失败，再等等看？\\\";\\n        let userinfo = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/nav\\\", {\\n            headers: {\\n                \\\"Cookie\\\": cookie\\n            }\\n        })).data;\\n        if (userinfo.isLogin === false) return \\\"toast://你先登录，再获取cookie，OK？\\\";\\n        userInfo = {\\n            cookie: cookie,\\n            userName: userinfo.uname,\\n            userMid:  userinfo.mid,\\n            vipStatus: userinfo.vipStatus,\\n            face: userinfo.face + \\\"@Referer=\\\"\\n        }\\n        setting = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\"));\\n        setting.userList.unshift(userInfo);\\n        // 过滤掉cookie为空的元素\\n        setting.userList = setting.userList.filter(user => user.cookie !== '');\\n        saveFile(\\\"hiker://files/rules/cy/bili.txt\\\", JSON.stringify(setting));\\n        back(true);\\n        return 'toast://如果没有登陆成功，建议你下次登陆成功后不要点那么快~'\\n    }),\\n    col_type: 'text_1'\\n}, {\\n    url: \\\"https://m.bilibili.com/\\\",\\n    col_type: \\\"x5_webview_single\\\",\\n    desc: \\\"list&&screen-300\\\",\\n    extra: {\\n        js: $.toString(() => {\\n            var token_timer = function () {\\n                var timer = setInterval(() => {\\n                    cookie = fba.getCookie(\\\"https://m.bilibili.com/\\\");\\n                    fba.putVar('biliCookie', cookie);\\n                }, 100)\\n            };\\n            token_timer();\\n        }),\\n        canBack: true,\\n        ua: MOBILE_UA\\n    }\\n})\\nsetResult(d);\\n\"},{\"col_type\":\"movie_3\",\"name\":\"影视二级\",\"path\":\"filmerji\",\"rule\":\"js:\\n// 数据定位\\nvar d = [];\\nif (MY_PARAMS.season_id) {\\n    season_id = MY_PARAMS.season_id + \\\"\\\";\\n    Data = JSON.parse(fetch('https://api.bilibili.com/pgc/view/web/season?season_id=' + season_id)).result;\\n} else {\\n    Data = JSON.parse(fetch('https://api.bilibili.com/pgc/view/web/season?ep_id=' + MY_PARAMS.ep_id)).result;\\n}\\nif (!Data.cover.match(/https/)) {\\n    封面 = Data.cover.replace('http', 'https') + \\\"@Referer=\\\";\\n} else {\\n    封面 = Data.cover + \\\"@Referer=\\\";\\n}\\ntry {\\n    地区 = Data.areas[0].name;\\n} catch (e) {\\n    地区 = '地区暂无';\\n}\\n简介 = Data.evaluate;\\n// 正片\\n类型 = Data.positive.title;\\n上映时间 = Data.publish.pub_time;\\ntry {\\n    得分 = Data.rating.score;\\n} catch (e) {\\n    得分 = '暂无得';\\n}\\n追剧日历 = Data.new_ep.desc;\\n更新进度 = Data.new_ep.title;\\n影片名称 = Data.title;\\n第二标题 = Data.share_sub_title;\\n剧集列表 = Data.episodes.filter((list) => {\\n    // 过滤预告、花絮\\n    if (getItem('previewSwitch', 'fold') === 'fold' && list.badge.match(/预|花絮/)) {\\n        return false;\\n    } else {\\n        return true;\\n    }\\n});\\n短讯 = \\\"⭐\\\" + 类型 + \\\"⭐\\\" + 第二标题 + '\\\\n' + 地区 + '-' + 得分 + '分\\\\n-' + 上映时间 + '-';\\n// 重定义二级页面数据\\nsetPageTitle(影片名称);\\nsetPagePicUrl(封面);\\n// 前置参数和预处理---\\nimgLink = storage0.getMyVar('图标');\\n// 全局lazy——直链+断插\\nvar lazy = $('').lazyRule(() => {\\n    videoParms = findItem(input);\\n    aid = videoParms.extra.aid;\\n    bvid = videoParms.extra.bvid;\\n    cid = videoParms.extra.cid;\\n    badge = videoParms.extra.badge;\\n    // 提交历史记录\\n    $.require(\\\"hiker://page/api\\\").reportProcess(aid, cid);\\n    vipStatus = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].vipStatus;\\n    if (vipStatus != 0) {\\n        // 大会员\\n        if (badge.match(/付费/)) {\\n            return $(['魔断解析', '已购买'], 1).select((input, aid, cid) => {\\n                if (input == '魔断解析') {\\n                    eval(fetch('hiker://files/cache/Parse_Dn.js', {}));\\n                    return aytmParse(link);\\n                } else {\\n                    return $.require(\\\"hiker://page/api\\\").biliLazy(aid, cid, 116).replace(/;/g, \\\"；；\\\");\\n                }\\n            }, link, aid, cid)\\n        } else {\\n            return $.require(\\\"hiker://page/api\\\").biliLazy(aid, cid, 116).replace(/;/g, \\\"；；\\\");\\n        }\\n    } else {\\n        // 普通用户\\n        var setting=JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\"));\\n        var hasBfKey=setting.bfKey!=''?true:false;\\n        if (!hasBfKey) {\\n            if (badge.match(/会员|付费/)) {\\n                eval(fetch('hiker://files/cache/Parse_Dn.js', {}));\\n                return aytmParse(input);\\n            } else {\\n                return $.require(\\\"hiker://page/api\\\").biliLazy(aid, cid, 116).replace(/;/g, \\\"；；\\\");\\n            }\\n        } else {\\n            // 共享会员播放权益\\n            if (badge.match(/付费/)) {\\n                return $(['魔断解析', '已购买'], 1).select((input, aid, cid) => {\\n                    if (input == '魔断解析') {\\n                        eval(fetch('hiker://files/cache/Parse_Dn.js', {}));\\n                        return aytmParse(link);\\n                    } else {\\n                        return $.require(\\\"hiker://page/api\\\").biliLazy(aid, cid, 116).replace(/;/g, \\\"；；\\\");\\n                    }\\n                }, link, aid, cid)\\n            } else {\\n                return $.require(\\\"hiker://page/api\\\").biliLazy(aid, cid, 116).replace(/;/g, \\\"；；\\\");\\n            }\\n        }\\n    }\\n});\\nvar Color = \\\"#19B89D\\\";\\nvar 每页集数 = 30;\\nvar 搜索模式 = '分组';\\nvar 调用名称 = '简影';\\nputMyVar('折叠', '关');\\nputMyVar('日历', '关');\\nputMyVar('Data', Data);\\nputMyVar('lazy', lazy);\\n// 清除变量\\naddListener('onClose', $.toString(() => {\\n    clearMyVar('分集起');\\n    clearMyVar('分集终');\\n    clearMyVar('折叠');\\n    clearMyVar('日历');\\n    clearMyVar('Data');\\n    clearMyVar('lazy');\\n    clearMyVar('剧集列表');\\n}))\\n// 设置动态最新章节\\nsetLastChapterRule('js:' + $.toString(() => {\\n    eval(JSON.parse(request('hiker://page/getUpdate')).rule);\\n}));\\n// 页面内容正文---\\n// 基本信息模块\\nd.push({\\n    title: 短讯,\\n    desc: 简介 == '' ? '暂无简介' : 简介.substring(0, 45) + '‘‘’’…<font color=\\\"#1C1C1C\\\">详情</font>',\\n    img: 封面,\\n    url: $().rule((简介) => {\\n        res = {};\\n        var d = [];\\n        d.push({\\n            title: '影片简介：' + '\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t' + 简介,\\n            col_type: 'long_text'\\n        });\\n        res.data = d;\\n        setHomeResult(res);\\n    }, 简介),\\n    col_type: 'movie_1_vertical_pic_blur',\\n    extra: {\\n        longClick: [{\\n            title: '预告、花絮开关', js: $.toString(() => {\\n                if (getItem('previewSwitch', 'fold') == 'fold') {\\n                    setItem('previewSwitch', 'open');\\n                    refreshPage(true);\\n                    return \\\"toast://预告已经切换为展示~\\\";\\n                } else {\\n                    setItem('previewSwitch', 'fold');\\n                    refreshPage(true);\\n                    return \\\"toast://预告不再展示~\\\";\\n                }\\n            }),\\n        }, {\\n            title: 'dm盒子', js: $.toString(() => {\\n                return 'hiker://page/setting#noHistory#?rule=dm盒子';\\n            })\\n        }, {\\n            title: '弹幕控制', js: $.toString(() => {\\n                if (getItem('isOverrideSave', 'false') == 'true') {\\n                    setItem('isOverrideSave', 'false');\\n                    return 'toast://弹幕将不受dm盒子参数控制';\\n                } else {\\n                    setItem('isOverrideSave', 'true');\\n                    return 'toast://弹幕将受到dm盒子参数控制';\\n                }\\n            })\\n        }]\\n    }\\n});\\n// 更新日历模块\\nd.push({\\n    title: '日历',\\n    img: imgLink.日历,\\n    url: $('#noLoading#').lazyRule((追剧日历, 更新进度) => {\\n        if (getMyVar('日历', '关') == '开') {\\n            deleteItem('追剧日历');\\n            putMyVar('日历', '关');\\n        } else {\\n            addItemAfter('显示模式', {\\n                title: 追剧日历.match(/完结|期待/) ? 追剧日历 : 追剧日历 + '<br><font color=\\\"red\\\">更新至' + (更新进度.match(/[\\\\u4e00-\\\\u9fa5]/) ? 更新进度 : ('第' + (更新进度 == '' ? 0 : 更新进度) + '话')) + '</font>',\\n                col_type: \\\"rich_text\\\",\\n                extra: {\\n                    id: '追剧日历'\\n                }\\n            });\\n            putMyVar('日历', '开');\\n        }\\n        return 'toast://已切换日历为:' + getMyVar('日历', '开')\\n    }, 追剧日历, 更新进度),\\n    col_type: 'icon_5'\\n});\\n// 订阅模块\\nd.push({\\n    title: '订阅',\\n    img: imgLink.订阅,\\n    url: $('#noLoading#').lazyRule(() => {\\n        selectionList = ['订阅', '取消订阅'];\\n        return $(selectionList, 2).select(() => {\\n            season_id = JSON.parse(getMyVar('Data')).season_id;\\n            if (input == '订阅') {\\n                res = $.require(\\\"hiker://page/api\\\").subscribeFilm(season_id);\\n            } else {\\n                res = $.require(\\\"hiker://page/api\\\").cancelSubscribeFilm(season_id);\\n            }\\n            return 'toast://' + res;\\n        });\\n    }),\\n    col_type: 'icon_5'\\n});\\n// 评论模块\\nd.push({\\n    title: '评论',\\n    img: imgLink.查看评论,\\n    url: $('#noLoading#').lazyRule(() => {\\n        return $('hiker://empty').rule(() => {\\n            var d = [];\\n            List = JSON.parse(getMyVar('Data')).episodes;\\n            List.forEach(item => {\\n                d.push({\\n                    title: item.share_copy + '<font color=\\\"#33cccc\\\">\\t➮</font>',\\n                    img: item.cover + '@Referer=',\\n                    url: 'hiker://page/Comments?p=fypage',\\n                    col_type: \\\"avatar\\\",\\n                    extra: {\\n                        \\\"id\\\": item.aid,\\n                        \\\"type\\\": 1\\n                    }\\n                });\\n            });\\n            setResult(d);\\n        });\\n    }),\\n    col_type: 'icon_5'\\n});\\n\\n// 精彩继续模块\\nd.push({\\n    title: '周边',\\n    img: imgLink.周边,\\n    url: $('#noLoading#').lazyRule(() => {\\n        Data = JSON.parse(getMyVar('Data'));\\n        // 有些没有直接去掉懒得处理~\\n        if (Data.section) {\\n            周边数组 = [\\\"🏷️相关系列\\\", \\\"🤣PV&花絮\\\", \\\"🍉竖屏也精彩\\\", \\\"🔥精彩二创\\\"];\\n        } else {\\n            周边数组 = [\\\"🏷️相关系列\\\"];\\n        }\\n        // 周边数组 = [\\\"🏷️相关系列\\\", \\\"🤣PV&花絮\\\", \\\"竖屏也精彩\\\", \\\"精彩二创\\\"];\\n        return $(周边数组, 1, 'ღ精彩继续').select(() => {\\n            Data = JSON.parse(getMyVar('Data'));\\n            lazy = getMyVar('lazy');\\n            if (input === '🏷️相关系列') {\\n                系列名称 = Data.season_title\\n                系列数据 = Data.seasons;\\n                return $().rule((系列数据) => {\\n                    d = [];\\n                    setPageTitle('🏷️相关系列');\\n                    if (系列数据 == [] || 系列数据 == '') {\\n                        d.push({\\n                            title: '‘‘’’<big><font color=\\\"red\\\">⭐该影片没有相关系列哦~⭐</font></big>',\\n                            url: 'toast://都没有，，你点啥呀~',\\n                            desc: '敬请期待~',\\n                            col_type: 'text_center_1'\\n                        });\\n                    }\\n                    系列数据.forEach(list => {\\n                        d.push({\\n                            title: list.season_title,\\n                            img: (list.horizontal_cover_1610 == '' ? (list.horizontal_cover_169 == '' ? list.cover : list.horizontal_cover_169) : list.horizontal_cover_1610) + \\\"@Referer=\\\",\\n                            url: 'hiker://page/filmerji#immersiveTheme#',\\n                            desc: list.new_ep.index_show,\\n                            col_type: 'movie_1_left_pic',\\n                            extra: {\\n                                \\\"ep_id\\\": list.new_ep.id\\n                            }\\n                        });\\n                    });\\n                    setHomeResult(d);\\n                }, 系列数据)\\n            } else if (input === '🤣PV&花絮') {\\n                try {\\n                    PV和花絮数据 = Data.section[0].episodes;\\n                    return $().rule((PV和花絮数据, lazy) => {\\n                        d = [];\\n                        setPageTitle('🤣PV&花絮');\\n                        if (PV和花絮数据 == [] || PV和花絮数据 == '') {\\n                            d.push({\\n                                title: '‘‘’’<big><font color=\\\"red\\\">⭐该影片/视频没有相关PV和花絮哦~⭐</font></big>',\\n                                url: 'toast://都没有，，你点啥呀~',\\n                                desc: '敬请期待~',\\n                                col_type: 'text_center_1'\\n                            });\\n                        }\\n                        PV和花絮数据.forEach(list => {\\n                            d.push({\\n                                title: list.title,\\n                                img: list.cover + \\\"@Referer=\\\",\\n                                url: list.link + lazy,\\n                                desc: list.subtitle + '\\\\n' + list.long_title,\\n                                col_type: 'movie_1_left_pic',\\n                                extra: {\\n                                    id: list.link,\\n                                    aid: list.aid,\\n                                    bvid: list.bvid,\\n                                    cid: list.cid,\\n                                    badge: list.badge\\n                                }\\n                            });\\n                        });\\n                        setHomeResult(d);\\n                    }, PV和花絮数据, lazy)\\n                } catch (e) {\\n                    return 'toast://没有数据哦~'\\n                }\\n            } else if (input === '🍉竖屏也精彩') {\\n                try {\\n                    竖屏也精彩数据 = Data.section[1].episodes;\\n                    return $().rule((竖屏也精彩数据, lazy) => {\\n                        d = [];\\n                        setPageTitle('🍉竖屏也精彩');\\n                        if (竖屏也精彩数据 == [] || 竖屏也精彩数据 == '') {\\n                            d.push({\\n                                title: '‘‘’’<big><font color=\\\"red\\\">⭐该影片/视频没有相关竖屏短视频哦~⭐</font></big>',\\n                                url: 'toast://都没有，，你点啥呀~',\\n                                desc: '敬请期待~',\\n                                col_type: 'text_center_1'\\n                            });\\n                        }\\n                        竖屏也精彩数据.forEach(list => {\\n                            d.push({\\n                                title: list.title,\\n                                img: list.cover + \\\"@Referer=\\\",\\n                                url: list.link + lazy,\\n                                desc: list.subtitle + '\\\\n' + list.long_title,\\n                                col_type: 'movie_1_left_pic',\\n                                extra: {\\n                                    id: list.link,\\n                                    aid: list.aid,\\n                                    bvid: list.bvid,\\n                                    cid: list.cid,\\n                                    badge: list.badge\\n                                }\\n                            });\\n                        });\\n                        setHomeResult(d);\\n                    }, 竖屏也精彩数据, lazy)\\n                } catch (e) {\\n                    return 'toast://没有数据哦~'\\n                }\\n            } else if (input === '🔥精彩二创') {\\n                try {\\n                    精彩二创数据 = Data.section[2].episodes;\\n                    return $().rule((精彩二创数据, lazy) => {\\n                        d = [];\\n                        setPageTitle('🔥精彩二创');\\n                        if (精彩二创数据 == [] || 精彩二创数据 == '') {\\n                            d.push({\\n                                title: '‘‘’’<big><font color=\\\"red\\\">⭐该影片/视频没有二创作品哦~⭐</font></big>',\\n                                url: 'toast://都没有，，你点啥呀~',\\n                                desc: '敬请期待~',\\n                                col_type: 'text_center_1'\\n                            });\\n                        }\\n                        精彩二创数据.forEach(list => {\\n                            // 针对部分参数缺失的情况如凡人修仙传写的，，\\n                            if (list.aid == 0 || list.cid == 0) {\\n                                viedeoData = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/view?aid=\\\" + list.link.split('av')[1], {\\n                                    headers: {\\n                                        \\\"User-Agent\\\": PC_UA,\\n                                        \\\"Referer\\\": 'https://www.bilibili.com/'\\n                                    },\\n                                    method: \\\"GET\\\"\\n                                })).data;\\n                                aid = viedeoData.aid;\\n                                bvid = viedeoData.bvid;\\n                                cid = viedeoData.cid;\\n                            } else {\\n                                aid = list.aid;\\n                                bvid = list.bvid;\\n                                cid = list.cid;\\n                            }\\n                            d.push({\\n                                title: list.title,\\n                                img: list.cover + \\\"@Referer=\\\",\\n                                url: list.link + lazy,\\n                                desc: list.subtitle + '\\\\n' + list.long_title,\\n                                col_type: 'movie_1_left_pic',\\n                                extra: {\\n                                    id: list.link,\\n                                    aid: aid,\\n                                    bvid: bvid,\\n                                    cid: cid,\\n                                    badge: list.badge\\n                                }\\n                            });\\n                        });\\n                        setHomeResult(d);\\n                    }, 精彩二创数据, lazy)\\n                } catch (e) {\\n                    return 'toast://没有数据哦~'\\n                }\\n            }\\n            return \\\"toast://正在进入\\\" + input + \\\"界面...\\\";\\n        })\\n    }),\\n    col_type: \\\"icon_5\\\",\\n    extra: {\\n        id: '精彩继续'\\n    }\\n});\\n// 显示模式更改模块\\nd.push({\\n    title: getItem('模式', '双边'),\\n    img: getItem('模式', '双边') == '列表' ? imgLink.列表 : imgLink.双边,\\n    url: $('#noLoading#').lazyRule(() => {\\n        显示的剧集列表 = JSON.parse(getMyVar('显示的剧集列表'));\\n        if (getItem('模式', '双边') == '列表') {\\n            显示的剧集列表.forEach(el => {\\n                updateItem(el.link, {\\n                    col_type: 'movie_2',\\n                });\\n            });\\n            setItem('模式', '双边')\\n        } else {\\n            显示的剧集列表.forEach(el => {\\n                updateItem(el.link, {\\n                    col_type: 'movie_1_left_pic',\\n                });\\n            });\\n            setItem('模式', '列表')\\n        }\\n        imgLink = storage0.getMyVar('图标');\\n        updateItem('显示模式', {\\n            title: getItem('模式', '双边'),\\n            img: getItem('模式', '双边') == '列表' ? imgLink.列表 : imgLink.双边,\\n        });\\n        return 'toast://已切换模式为:' + getItem('模式', '双边')\\n    }),\\n    col_type: 'icon_5',\\n    extra: {\\n        id: '显示模式'\\n    }\\n}, {\\n    col_type: 'line_blank',\\n});\\n// 选插模块——局部刷新版\\n来源 = 'bl';\\nputMyVar('简插', $.toString(() => {\\n    let titleArr = []\\n    setFile = readFile('hiker://files/rules/DuanNian/MyParse.json');\\n    try {\\n        eval('json=' + setFile);\\n    } catch (e) {\\n        log('Json解析发生了错误:' + e.message);\\n    }\\n    titleArr = json.title;\\n    let barry1 = ['✍️辅助'];\\n    let barry2 = ['📦️魔断'];\\n    let barry3 = ['🔍搜索'];\\n    titleArr = barry3.concat(titleArr);\\n    titleArr = barry2.concat(titleArr);\\n    titleArr = barry1.concat(titleArr);\\n    eval('op=json.settings.' + 来源);\\n    titleArr = titleArr.map((it) => {\\n        return it === op ? '👉' + it : it;\\n    });\\n    putMyVar('解析数组', titleArr);\\n    putMyVar('setFile', setFile);\\n}))\\neval(getMyVar('简插'));\\nd.push({\\n    title: '解析：🔘<font color=\\\"' + Color + '\\\">' + op + '</font>\\\\t\\\\t页码：<font color=\\\"' + Color + '\\\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\\n    url: $('#noLoading#').lazyRule((json, 来源, Color, op, 影片名称, 搜索模式, 调用名称) => {\\n        eval(getMyVar('简插'));\\n        return $(eval(getMyVar('解析数组')), 3).select((json, 来源, Color, op, 影片名称, 搜索模式, 调用名称) => {\\n            setFile = getMyVar('setFile');\\n            input = input.replace(/👉/g, '');\\n            if (input === '✍️辅助') {\\n                return $().rule(() => {\\n                    eval(JSON.parse(request('hiker://page/home?rule=配置助手')).rule);\\n                })\\n            } else if (input === '📦️魔断') {\\n                return \\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=编辑#noHistory#\\\";\\n            } else if (input === '🔍搜索') {\\n                if (搜索模式 == '分组') {\\n                    return \\\"hiker://search?s=\\\" + 影片名称 + \\\"&group=\\\" + 调用名称;\\n                } else {\\n                    return \\\"hiker://search?s=\\\" + 影片名称 + \\\"&rule=\\\" + 调用名称;\\n                }\\n            }\\n            // 原先的配置\\n            originSettings = JSON.stringify(json.settings);\\n            // 修改配置\\n            eval('json.settings.' + 来源 + '=input;');\\n            setFile = setFile.replace(originSettings, JSON.stringify(json.settings));\\n            saveFile('hiker://files/rules/DuanNian/MyParse.json', setFile);\\n            // 刷新元素\\n            eval(getMyVar('简插'));\\n            updateItem('op', {\\n                title: '解析：🔘<font color=\\\"' + Color + '\\\">' + op + '</font>\\\\t\\\\t页码：<font color=\\\"' + Color + '\\\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\\n            });\\n            return \\\"toast://切换解析口为:\\\" + input;\\n        }, json, 来源, Color, op, 影片名称, 搜索模式, 调用名称)\\n    }, json, 来源, Color, op, 影片名称, 搜索模式, 调用名称),\\n    img: 'hiker://files/rules/cy/tubiao/bilibili.svg',\\n    col_type: \\\"avatar\\\",\\n    extra: {\\n        id: 'op'\\n    }\\n});\\n// 滚动剧集条栏\\n剧集长度 = 剧集列表.length;\\nif (剧集长度 > 每页集数) {\\n    putMyVar('刷新选集', $.toString(() => {\\n        putMyVar('分集起', start);\\n        putMyVar('分集终', end);\\n        eval(getMyVar('简插'));\\n        updateItem('op', {\\n            title: '解析：🔘<font color=\\\"' + Color + '\\\">' + op + '</font>\\\\t\\\\t页码：<font color=\\\"' + Color + '\\\">' + ((getMyVar('分集起', '首页') == '首页') ? '首页' : (getMyVar('分集起') + '-' + getMyVar('分集终'))) + '</font>',\\n        })\\n        // 删除\\n        显示的剧集列表 = JSON.parse(getMyVar('显示的剧集列表'));\\n        显示的剧集列表.forEach(el => {\\n            deleteItem(el.link);\\n        });\\n        // 添加\\n        lazy = getMyVar('lazy');\\n        剧集列表 = JSON.parse(getMyVar('剧集列表'));\\n        显示的剧集列表 = 剧集列表.slice(start - 1, end);\\n        newArray = [];\\n        index = 1;\\n        显示的剧集列表.forEach(list => {\\n            if (getItem('模式', '双边') == '列表') {\\n                newArray.push({\\n                    title: list.long_title,\\n                    img: list.cover + \\\"@Referer=\\\",\\n                    url: list.link + lazy,\\n                    desc: list.title.match(/[0-9]/) ? (list.badge + '第' + list.title + '话') : list.title,\\n                    col_type: 'movie_1_left_pic',\\n                    extra: {\\n                        id: list.link,\\n                        aid: list.aid,\\n                        bvid: list.bvid,\\n                        cid: list.cid,\\n                        badge: list.badge\\n                    }\\n                });\\n            } else {\\n                newArray.push({\\n                    title: list.long_title,\\n                    img: list.cover + \\\"@Referer=\\\",\\n                    url: list.link + lazy,\\n                    desc: list.title.match(/[0-9]/) ? (list.badge + '第' + list.title + '话') : list.title,\\n                    col_type: 'movie_2',\\n                    extra: {\\n                        id: list.link,\\n                        aid: list.aid,\\n                        bvid: list.bvid,\\n                        cid: list.cid,\\n                        badge: list.badge\\n                    }\\n                });\\n            }\\n            index += 1;\\n        });\\n        addItemAfter(getMyVar('末页'), newArray);\\n        putMyVar('显示的剧集列表', 显示的剧集列表);\\n    }));\\n    d.push({\\n        col_type: 'scroll_button',\\n        url: 'hiker://empty',\\n        title: '∷',\\n        extra: {\\n            id: '占位符',\\n        }\\n    })\\n    putMyVar('分集起', 1);\\n    putMyVar('分集终', 每页集数);\\n    putMyVar('剧集列表', 剧集列表);\\n    总页数 = Math.ceil(剧集长度 / 每页集数);\\n    start = 1;\\n    end = 每页集数;\\n    for (let page = 1; page <= 总页数; page++) {\\n        if (end > 剧集长度) {\\n            end = 剧集长度;\\n        }\\n        d.push({\\n            title: start + '-' + end,\\n            url: $('#noLoading##noHistory#').lazyRule((start, end, Color, 来源) => {\\n                eval(getMyVar('刷新选集'));\\n                return \\\"hiker://empty\\\";\\n            }, start, end, Color, 来源),\\n            col_type: 'scroll_button',\\n            extra: {\\n                id: start + '-' + end\\n            }\\n        });\\n        if (end < 剧集长度) {\\n            start += 每页集数;\\n            end += 每页集数;\\n        }\\n    }\\n    // 记录末页的id\\n    putMyVar('末页', start + '-' + end);\\n} else {\\n    putMyVar('分集起', 1);\\n    putMyVar('分集终', 剧集长度);\\n}\\n// 展示剧集:\\n显示的剧集列表 = 剧集列表.slice(0, getMyVar('分集终'));\\nputMyVar('显示的剧集列表', 显示的剧集列表);\\nindex = 1;\\n显示的剧集列表.forEach(list => {\\n    if (getItem('模式', '双边') == '列表') {\\n        d.push({\\n            title: list.long_title,\\n            img: list.cover + \\\"@Referer=\\\",\\n            url: list.link + lazy,\\n            desc: list.title.match(/[0-9]/) ? (list.badge + '第' + list.title + '话') : list.title,\\n            col_type: 'movie_1_left_pic',\\n            extra: {\\n                id: list.link,\\n                aid: list.aid,\\n                bvid: list.bvid,\\n                cid: list.cid,\\n                badge: list.badge\\n            }\\n        });\\n    } else {\\n        d.push({\\n            title: list.long_title,\\n            img: list.cover + \\\"@Referer=\\\",\\n            url: list.link + lazy,\\n            desc: list.title.match(/[0-9]/) ? (list.badge + '第' + list.title + '话') : list.title,\\n            col_type: 'movie_2',\\n            extra: {\\n                id: list.link,\\n                aid: list.aid,\\n                bvid: list.bvid,\\n                cid: list.cid,\\n                badge: list.badge\\n            }\\n        });\\n    }\\n    index += 1;\\n});\\nsetResult(d);\\n\"},{\"col_type\":\"movie_3\",\"name\":\"up主页\",\"path\":\"upHome\",\"rule\":\"js:\\nvar d = [];\\n// 预处理\\nputMyVar('upInfo', '关');\\nsetPageTitle(MY_PARAMS.title);\\nimgLink = storage0.getMyVar('图标');\\n// 防止反爬虫，从上一个页面传递数据——反爬虫严重\\nupMid = MY_PARAMS.mid + \\\"\\\";\\nupName = MY_PARAMS.title;\\nupFace = MY_PARAMS.face;\\nrelation = $.require(\\\"hiker://page/api\\\").userMapping(upMid);\\n// 头像栏\\nd.push({\\n    title: '<font color=\\\"blue\\\">' + upName + '</font>',\\n    url: $('#noLoading#').lazyRule((upMid) => {\\n        if (getMyVar('upInfo', '关') == '开') {\\n            deleteItem('upInfo');\\n            putMyVar('upInfo', '关');\\n        } else {\\n            try {\\n                // 用户基本信息\\n                queryJson = {\\n                    mid: upMid,\\n                    token: '',\\n                    platform: 'web',\\n                    web_location: 1550101\\n                }\\n                parms = $.require(\\\"hiker://page/api\\\").getWbiEnc(queryJson);\\n                infoLink = 'https://api.bilibili.com/x/space/wbi/acc/info?' + parms;\\n                upData = JSON.parse(fetch(infoLink, {\\n                    headers: {\\n                        \\\"User-Agent\\\": PC_UA,\\n                        \\\"Referer\\\": \\\"https://www.bilibili.com/\\\",\\n                        \\\"Cookie\\\": cookie=JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n                    }\\n                })).data;\\n                upName = upData.name;\\n                upSex = upData.sex;\\n                upSign = upData.sign;\\n                upBirthday = upData.birthday;\\n                try {\\n                    upSchool = upData.school.name;\\n                } catch (e) {\\n                    upSchool = '';\\n                }\\n                try {\\n                    upIdentification = upData.official.title;\\n                } catch (e) {\\n                    upIdentification = '';\\n                }\\n                addItemAfter('currentUp', {\\n                    title: 'up:' + upName + '\\\\nmid:' + upMid + '\\\\n性别:' + upSex + '\\\\n生日:' + (upBirthday == '' ? '未填写' : upBirthday) + '\\\\n' + (upSchool == '' ? '' : '学校:' + upSchool + '\\\\n') + (upSign == '' ? '\\\\n' : upSign + '\\\\n') + (upIdentification == '' ? '' : '认证:'),\\n                    url: 'hiker://empty',\\n                    col_type: 'long_text',\\n                    extra: {\\n                        id: 'upInfo'\\n                    }\\n                });\\n            } catch (e) {\\n                addItemAfter('currentUp', {\\n                    title: '好像出了点意外？什么都木有呢~',\\n                    url: 'hiker://empty',\\n                    col_type: 'long_text',\\n                    extra: {\\n                        id: 'upInfo'\\n                    }\\n                });\\n            }\\n            putMyVar('upInfo', '开');\\n        }\\n        return 'toast://信息折叠:' + getMyVar('upInfo', '开')\\n    }, upMid),\\n    img: upFace + \\\"@Referer=\\\",\\n    col_type: \\\"avatar\\\",\\n    extra: {\\n        id: 'currentUp'\\n    }\\n}, {\\n    col_type: 'line'\\n});\\n// 公告\\nnoticeText = JSON.parse(fetch('https://api.bilibili.com/x/space/notice?mid=' + upMid + '&jsonp=jsonp', {\\n    headers: {\\n        \\\"User-Agent\\\": PC_UA,\\n        \\\"Referer\\\": \\\"https://www.bilibili.com/\\\",\\n        \\\"Cookie\\\": cookie=JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n    }\\n})).data;\\nif (noticeText != '') {\\n    d.push({\\n        title: '公告',\\n        url: $().rule((noticeText) => {\\n            var d = [];\\n            d.push({\\n                title: '公告：' + '\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t' + noticeText,\\n                col_type: 'long_text'\\n            });\\n            setHomeResult(d);\\n        }, noticeText),\\n        desc: noticeText == '' ? '暂无公告' : noticeText,\\n        col_type: 'text_1',\\n    });\\n}\\nd.push({\\n    col_type: 'line'\\n}, {\\n    title: relation,\\n    img: relation == '未关注' ? imgLink.添加关注 : imgLink.已关注,\\n    url: $('#noLoading##noHistory#').lazyRule((upMid) => {\\n        return $.require(\\\"hiker://page/api\\\").changeUserRelation(upMid, 11)\\n    }, upMid),\\n    col_type: \\\"icon_small_4\\\",\\n    extra: {\\n        id: 'relation'\\n    }\\n}, {\\n    title: '动态',\\n    img: imgLink.动态,\\n    url: $('#noLoading##noHistory#').lazyRule((upMid) => {\\n        return $('hiker://empty?p=fypage').rule((upMid) => {\\n            let d = [];\\n            latenews = $.require(\\\"hiker://page/api\\\").getDynamicData('upSpace', upMid);\\n            eval($.require(\\\"hiker://page/api\\\").showDynamicData());\\n            setResult(d);\\n        }, upMid)\\n    }, upMid),\\n    col_type: \\\"icon_small_4\\\",\\n}, {\\n    title: '专栏',\\n    img: imgLink.专栏,\\n    url: \\\"hiker://page/acticleList?p=fypage\\\",\\n    col_type: \\\"icon_small_4\\\",\\n    extra: {\\n        mid: upMid\\n    }\\n})\\n// 用户视频-合集、系列\\nupVideo = JSON.parse(fetch('https://api.bilibili.com/x/polymer/space/seasons_series_list?mid=' + upMid + '&page_num=1&page_size=10', {\\n    headers: {\\n        \\\"User-Agent\\\": PC_UA,\\n        \\\"Referer\\\": \\\"https://www.bilibili.com/\\\"\\n    }\\n})).data.items_lists;\\n// 视频合集、系列\\ntry {\\n    upVideo.seasons_list.forEach(list => {\\n        season_id = list.meta.season_id;\\n        // 标题-跳转更多\\n        d.push({\\n            title: '<font color=\\\"#33cccc\\\">' + list.meta.name.substring(0, 30) + '</font>\\\\t\\\\t<font color=\\\"red\\\">' + list.meta.total + '</font>\\t➮',\\n            img: imgLink.合集文件夹,\\n            // img: list.meta.cover+'@Referer=',\\n            col_type: 'avatar',\\n            url: $('#noLoading##noHistory#').lazyRule((upMid, season_id) => {\\n                return $('hiker://empty?fypage').rule((upMid, season_id) => {\\n                    var d = [];\\n                    let u = 'https://api.bilibili.com/x/polymer/space/seasons_archives_list?mid=' + upMid + '&season_id=' + season_id + '&sort_reverse=false&page_num=' + MY_PAGE + '&page_size=30';\\n                    Video = JSON.parse(fetch(u, {\\n                        headers: {\\n                            \\\"User-Agent\\\": PC_UA,\\n                            \\\"Referer\\\": \\\"https://www.bilibili.com/\\\"\\n                        }\\n                    })).data;\\n                    maxPage = Math.ceil(Video.page.total / Video.page.page_size);\\n                    if (MY_PAGE <= maxPage) {\\n                        d.push({\\n                            title: '当前:第' + Video.page.page_num + '页\\\\t\\\\t\\\\t共有' + maxPage + '页,' + Video.page.total + '条数据',\\n                            url: \\\"hiker://empty\\\",\\n                            col_type: \\\"text_center_1\\\",\\n                        });\\n                        Video.archives.forEach(list => {\\n                            d.push({\\n                                title: list.title,\\n                                img: list.pic + '@Referer=',\\n                                desc: '播放量：' + list.stat.view,\\n                                col_type: 'movie_1_left_pic',\\n                                url: \\\"hiker://page/video\\\",\\n                                extra: {\\n                                    aid: list.aid\\n                                }\\n                            });\\n                        });\\n                    }\\n                    setHomeResult(d);\\n                }, upMid, season_id)\\n            }, upMid, season_id)\\n        });\\n        if (list.archives === undefined) {\\n            log(list.meta.name + '为空');\\n        } else {\\n            if (list.archives.length < 2) {\\n                list.archives.forEach(list => {\\n                    d.push({\\n                        title: list.title,\\n                        img: list.pic + '@Referer=',\\n                        desc: '播放量：' + list.stat.view,\\n                        col_type: 'movie_1_left_pic',\\n                        url: \\\"hiker://page/video\\\",\\n                        extra: {\\n                            aid: list.aid\\n                        }\\n                    });\\n                });\\n            } else if (list.archives.length == 0) {\\n                d.push({\\n                    title: \\\"好家伙，这家伙没有合集视频！\\\",\\n                    desc: \\\"要不去点击全部视频看看~\\\",\\n                    col_type: 'text_center_1',\\n                    url: \\\"hiker://empty\\\",\\n                });\\n            } else {\\n                for (let i = 0; i < 2; i++) {\\n                    d.push({\\n                        title: list.archives[i].title,\\n                        img: list.archives[i].pic + '@Referer=',\\n                        desc: '播放量：' + list.archives[i].stat.view,\\n                        col_type: 'movie_1_left_pic',\\n                        url: \\\"hiker://page/video\\\",\\n                        extra: {\\n                            aid: list.archives[i].aid\\n                        }\\n                    });\\n                }\\n            }\\n        }\\n    });\\n} catch (e) {\\n    d.push({\\n        title: '合集为空',\\n        url: 'hiker://empty',\\n        desc: 'Sorry,没有数据呢~',\\n        col_type: 'text_center_1',\\n    });\\n}\\ntry {\\n    upVideo.series_list.forEach(list => {\\n        series_id = list.meta.series_id;\\n        // 标题-跳转更多\\n        d.push({\\n            title: '<font color=\\\"#33cccc\\\">' + list.meta.name.substring(0, 30) + '</font>\\\\t\\\\t<font color=\\\"red\\\">' + list.meta.total + '</font>\\t➮',\\n            img: imgLink.合集文件夹,\\n            // img: list.meta.cover+'@Referer=',\\n            col_type: 'avatar',\\n            url: $('#noLoading##noHistory#').lazyRule((upMid, series_id) => {\\n                return $('hiker://empty?fypage').rule((upMid, series_id) => {\\n                    var d = [];\\n                    let u = 'https://api.bilibili.com/x/series/archives?mid=' + upMid + '&series_id=' + series_id + '&only_normal=true&sort=desc&pn=' + MY_PAGE + '&ps=30';\\n                    Video = JSON.parse(fetch(u, {\\n                        headers: {\\n                            \\\"User-Agent\\\": PC_UA,\\n                            \\\"Referer\\\": \\\"https://www.bilibili.com/\\\"\\n                        }\\n                    })).data;\\n                    maxPage = Math.ceil(Video.page.total / Video.page.size);\\n                    if (MY_PAGE <= maxPage) {\\n                        d.push({\\n                            title: '当前:第' + Video.page.num + '页\\\\t\\\\t\\\\t共有' + maxPage + '页,' + Video.page.total + '条数据',\\n                            url: \\\"hiker://empty\\\",\\n                            col_type: \\\"text_center_1\\\",\\n                        });\\n                        Video.archives.forEach(list => {\\n                            d.push({\\n                                title: list.title,\\n                                img: list.pic + '@Referer=',\\n                                desc: '播放量：' + list.stat.view,\\n                                col_type: 'movie_1_left_pic',\\n                                url: \\\"hiker://page/video\\\",\\n                                extra: {\\n                                    aid: list.aid\\n                                }\\n                            });\\n                        });\\n                    }\\n                    setHomeResult(d);\\n                }, upMid, series_id)\\n            }, upMid, series_id)\\n        });\\n        if (list.archives === undefined) {\\n            log(list.meta.name + '为空');\\n        } else {\\n            if (list.archives.length < 2) {\\n                list.archives.forEach(list => {\\n                    d.push({\\n                        title: list.title,\\n                        img: list.pic + '@Referer=',\\n                        desc: '播放量：' + list.stat.view,\\n                        col_type: 'movie_1_left_pic',\\n                        url: \\\"hiker://page/video\\\",\\n                        extra: {\\n                            aid: list.aid\\n                        }\\n                    });\\n                });\\n            } else if (list.archives.length == 0) {\\n                d.push({\\n                    title: \\\"好家伙，这家伙没有合集视频！\\\",\\n                    desc: \\\"要不去点击全部视频看看~\\\",\\n                    col_type: 'text_center_1',\\n                    url: \\\"hiker://empty\\\",\\n                });\\n            } else {\\n                for (let i = 0; i < 2; i++) {\\n                    d.push({\\n                        title: list.archives[i].title,\\n                        img: list.archives[i].pic + '@Referer=',\\n                        desc: '播放量：' + list.archives[i].stat.view,\\n                        col_type: 'movie_1_left_pic',\\n                        url: \\\"hiker://page/video\\\",\\n                        extra: {\\n                            aid: list.archives[i].aid\\n                        }\\n                    });\\n                }\\n            }\\n        }\\n    });\\n} catch (e) {\\n    d.push({\\n        title: '系列为空',\\n        url: 'hiker://empty',\\n        desc: 'Sorry,没有数据呢~',\\n        col_type: 'text_center_1',\\n    });\\n}\\n// up投稿\\nd.push({\\n    title: 'TA的视频,点击展开全部',\\n    col_type: 'text_center_1',\\n    url: $('#noLoading##noHistory#').lazyRule((upMid) => {\\n        return $().rule((upMid) => {\\n            var d = [];\\n            try {\\n                queryJson = {\\n                    mid: upMid,\\n                    ps: 30,\\n                    tid: getMyVar('_tid', '0'),\\n                    special_type: '',\\n                    pn: getMyVar('_page', '1'),\\n                    keyword: '',\\n                    order: 'pubdate',\\n                    platform: 'web',\\n                    // web_location: 1550101,\\n                    order_avoided: true\\n                }\\n                parms = $.require(\\\"hiker://page/api\\\").getWbiEnc(queryJson);\\n                dataLink = 'https://api.bilibili.com/x/space/wbi/arc/search?' + parms;\\n                upVideoData = JSON.parse(fetch(dataLink, {\\n                    headers: {\\n                        \\\"User-Agent\\\": PC_UA,\\n                        \\\"Referer\\\": \\\"https://www.bilibili.com/\\\",\\n                        \\\"Cookie\\\": cookie=JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n                    }\\n                })).data;\\n                tlist = upVideoData.list.tlist;\\n                vlist = upVideoData.list.vlist;\\n                // 分类和页码\\n                d.push({\\n                    title: getMyVar('_tid', '0') == 0 ? '‘‘’’<font color=\\\"red\\\">全部</font>' : '全部',\\n                    url: $('#noLoading##noHistory#').lazyRule(() => {\\n                        putMyVar('_tid', (0 + \\\"\\\"));\\n                        putMyVar('_page', (1 + \\\"\\\"));\\n                        refreshPage(true);\\n                        return \\\"hiker://empty\\\";\\n                    }),\\n                    col_type: 'scroll_button'\\n                });\\n                for (item in tlist) {\\n                    d.push({\\n                        title: (tlist[item].tid + \\\"\\\") == getMyVar('_tid', '0') ? '‘‘’’<font color=\\\"red\\\">' + (tlist[item].name + `(${tlist[item].count})`) + '</font>' : (tlist[item].name + `(${tlist[item].count})`),\\n                        url: $('#noLoading##noHistory#').lazyRule((tid) => {\\n                            putMyVar('_tid', (tid + \\\"\\\"));\\n                            putMyVar('_page', (1 + \\\"\\\"));\\n                            refreshPage(true);\\n                            return \\\"hiker://empty\\\";\\n                        }, tlist[item].tid),\\n                        col_type: 'scroll_button'\\n                    });\\n                }\\n                d.push({\\n                    col_type: 'blank_block',\\n                });\\n                maxPage = Math.ceil(upVideoData.page.count / upVideoData.page.ps);\\n                for (let page = 1; page <= maxPage; page++) {\\n                    d.push({\\n                        title: (page + \\\"\\\") == getMyVar('_page', '1') ? '‘‘’’<font color=\\\"red\\\">' + (page + \\\"\\\") + '</font>' : (page + \\\"\\\"),\\n                        url: $('#noLoading##noHistory#').lazyRule((page) => {\\n                            putMyVar('_page', (page + \\\"\\\"));\\n                            refreshPage(true);\\n                            return \\\"hiker://empty\\\";\\n                        }, page),\\n                        col_type: 'scroll_button',\\n                    });\\n                }\\n                // 平铺视频\\n                vlist.forEach(item => {\\n                    pubtime = $.require(\\\"hiker://page/api\\\").timeConvert(item.created);\\n                    d.push({\\n                        title: item.title,\\n                        img: item.pic + '@Referer=',\\n                        desc: '播放量：' + item.play + '\\\\n' + pubtime,\\n                        col_type: 'movie_1_left_pic',\\n                        url: \\\"hiker://page/video\\\",\\n                        extra: {\\n                            aid: item.aid\\n                        }\\n                    });\\n                });\\n            } catch (e) {\\n                d.push({\\n                    title: '页面走丢了...',\\n                    img: 'https://i0.hdslb.com/bfs/general/f7b667011a46615732c701f4bb1d07f793f8d1df.png@Referer=',\\n                    url: 'hiker://empty',\\n                    desc: '太频繁了！稍后再试~',\\n                    col_type: \\\"pic_1\\\"\\n                });\\n            }\\n            setHomeResult(d);\\n        }, upMid)\\n    }, upMid)\\n});\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"up搜索\",\"path\":\"upSearch\",\"rule\":\"js:\\nseaword = MY_PARAMS.seaword;\\nvar d = [];\\nresultData=$.require(\\\"hiker://page/api\\\").getSearchRes('bili_user',seaword,MY_PAGE,36);\\nif (MY_PAGE <= resultData.numPages) {\\n    d.push({\\n        title: '当前:第' + resultData.page + '页\\\\t\\\\t\\\\t共有' + resultData.numPages + '页,' + resultData.numResults + '条数据',\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"text_center_1\\\",\\n    });\\n    resultData.result.forEach(list => {\\n        d.push({\\n            title: \\\"<big><font color='blue'>\\\" + list.uname + \\\"</font></big><small>\\\" + list.usign + \\\"</small>\\\",\\n            img: 'https://' + list.upic + \\\"@Referer=\\\",\\n            col_type: 'avatar',\\n            url: \\\"hiker://page/upHome\\\",\\n            extra: {\\n                mid: list.mid,\\n                title: list.uname,\\n                face: 'https://' + list.upic\\n            }\\n        });\\n    });\\n}\\nsetSearchResult(d);\\n\"},{\"col_type\":\"movie_3\",\"name\":\"video搜索\",\"path\":\"videoSearch\",\"rule\":\"js:\\nseaword = MY_PARAMS.seaword;\\nvar d = [];\\nvar resultData=$.require(\\\"hiker://page/api\\\").getSearchRes('video',seaword,MY_PAGE,42);\\nvar {timeConvert}=$.require(\\\"hiker://page/api\\\");\\nif (MY_PAGE <= resultData.numPages) {\\n    d.push({\\n        title: '当前:第' + resultData.page + '页\\\\t\\\\t\\\\t共有' + resultData.numPages + '页,' + resultData.numResults + '条数据',\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"text_center_1\\\",\\n    });\\n    resultData.result.forEach(list => {\\n        // title=list.title.replace('<em class=\\\\\\\"keyword\\\\\\\">','<font color=\\\"red\\\">').replace('</em>','</font>')\\n        title = list.title.replace(/<em class=\\\\\\\"keyword\\\\\\\">/g, '').replace(/<\\\\/em>/g, '')\\n        pbtime=timeConvert(list.pubdate);\\n        d.push({\\n            title: title,\\n            img: 'https://' + list.pic + \\\"@Referer=\\\",\\n            desc: '““””<small><small><font color=\\\"grey\\\">播放量:'+list.play+'\\\\t\\\\t\\\\t弹幕:'+list.danmaku+'\\\\t\\\\t\\\\t喜欢:'+list.like+'\\\\n发布时间:'+pbtime+'</font></small></small>',\\n            col_type: 'movie_1_left_pic',\\n            url: \\\"hiker://page/video\\\",\\n            extra: {\\n                // 视频标识\\n                aid: list.aid,\\n                bvid:list.bvid,\\n                title: title\\n            }\\n        });\\n    });\\n}\\nsetSearchResult(d);\\n\"},{\"col_type\":\"movie_1_left_pic\",\"name\":\"推送\",\"path\":\"feed\",\"rule\":\"$.require(\\\"hiker://page/api\\\").getFeed().forEach(item => {\\n\\n    d.push({\\n\\n        title: item.title,\\n\\n        img: item.pic+'@Referer=',\\n\\n        desc: 'up:' + item.owner.name + '\\\\n' + item.stat.view + \\\"播放※\\\" + item.stat.like + \\\"点赞\\\",\\n\\n        url: \\\"hiker://page/video\\\",\\n\\n        col_type: 'movie_1_left_pic',\\n\\n        extra: {\\n\\n            // id其实是aid\\n\\n            aid: item.id,\\n\\n            cid: item.cid,\\n\\n        }\\n\\n    })\\n\\n})\\n\\n\\n\"},{\"col_type\":\"text_1\",\"name\":\"API\",\"path\":\"api\",\"rule\":\"// part1:聚合函数----------------\\n// 登录验证\\n$.exports.isLoggedIn = function () {\\n    if (fileExist(\\\"hiker://files/rules/cy/bili.txt\\\")) {\\n        biliData = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\"));\\n        if (biliData.userList.length == 0) {\\n            return JSON.stringify({\\n                \\\"userName\\\": '未登录',\\n                \\\"userMid\\\": '',\\n                \\\"userFace\\\": '',\\n                \\\"type\\\": false\\n            })\\n        }\\n        currentUser = biliData.userList[0];\\n        var cookie = currentUser.cookie;\\n        let userinfo = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/nav\\\", {\\n            headers: {\\n                \\\"Cookie\\\": cookie\\n            }\\n        })).data;\\n        if (userinfo.isLogin === false) {\\n            return JSON.stringify({\\n                \\\"userName\\\": '未登录',\\n                \\\"userMid\\\": '',\\n                \\\"userFace\\\": '',\\n                \\\"type\\\": false\\n            })\\n        } else {\\n            currentUser.userName = userinfo.uname;\\n            currentUser.userMid = userinfo.mid;\\n            // 1：会员开通；0：未开通\\n            currentUser.vipStatus = userinfo.vipStatus;\\n            currentUser.face = userinfo.face + \\\"@Referer=\\\";\\n            saveFile('hiker://files/rules/cy/bili.txt', JSON.stringify(biliData));\\n            // return true;\\n            return JSON.stringify({\\n                \\\"userName\\\": currentUser.userName,\\n                \\\"userMid\\\": currentUser.userMid,\\n                \\\"userFace\\\": currentUser.face,\\n                \\\"type\\\": true\\n            });\\n        }\\n    } else {\\n        return JSON.stringify({\\n            \\\"userName\\\": '未登录',\\n            \\\"userMid\\\": '',\\n            \\\"userFace\\\": '',\\n            \\\"type\\\": false\\n        });\\n    }\\n}\\n// 哔哩视频解析：获取播放地址+提交播放记录\\n$.exports.biliLazy = function (id, cid, qn) {\\n    // 重置原生弹幕统一弹幕大小、修改步长\\n    function overrideSave(dm) {\\n        var danmuData = request(dm);\\n        // 字体大小、弹幕步长\\n        var danmuSetting = JSON.parse(readFile('hiker://files/dm盒子/settings.json'));\\n        var size = danmuSetting.fontSize;\\n        var step = danmuSetting.step;\\n        var data = '';\\n        td = pdfa(danmuData, 'i&&d');\\n        for (let i = 0; i < td.length; i += step) {\\n            timepoint = pdfh(td[i], 'd&&p').split(\\\",\\\")[0];\\n            ct = pdfh(td[i], 'd&&p').split(\\\",\\\")[1];\\n            color = pdfh(td[i], 'd&&p').split(\\\",\\\")[3];\\n            // 弹幕内容\\n            content = pdfh(td[i], 'd&&Text');\\n            if (content.indexOf('<') != -1 || content.indexOf('>') != -1 || content.indexOf('&') != -1 || content.indexOf('\\\\u0000') != -1 || content.indexOf('\\\\b') != -1) {\\n                continue;\\n            }\\n            tempdata = `<d p=\\\"${Math.round(timepoint)},${ct},${size},${color},0\\\">${content}</d>\\\\n`;\\n            data += tempdata;\\n        }\\n        danmustr = `<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\\\n<i>\\\\n${data}</i>`;\\n        saveFile(dm, danmustr);\\n    }\\n    // 判断是否重写\\n    var dm = 'https://comment.bilibili.com/' + cid + '.xml';\\n    if (getItem('isOverrideSave', 'false') == 'true') {\\n        file = 'https://comment.bilibili.com/' + cid + '.xml';\\n        dm = 'hiker://files/cache/danmu/' + 'bili_from_' + getPageTitle() + '.xml';\\n        downloadFile(file, dm);\\n        overrideSave(dm);\\n    }\\n    var data = $.require(\\\"hiker://page/api\\\").getUrl(id, cid, qn);\\n    // 提交历史记录\\n    $.require(\\\"hiker://page/api\\\").reportProcess(id, cid);\\n    // qualityNum=dash.audio.length;不需要了，找到了更好的判断方法，虽然我并不知道这些参数的含义是什么\\n    videoList = [];\\n    audioList = [];\\n    nameList = [];\\n    headers = [];\\n    try {\\n        data.audio.forEach(item => {\\n            audioList.push(item.baseUrl);\\n            headers.push({\\n                \\\"Referer\\\": \\\"https://www.bilibili.com\\\",\\n                \\\"User-Agent\\\": PC_UA\\n            });\\n        });\\n        data.video.forEach(item => {\\n            if (item.codecid == 7) {\\n                videoList.push(item.baseUrl + \\\"#isVideo=true#\\\");\\n                if (item.id == 126) {\\n                    nameList.push('杜比视界');\\n                } else if (item.id == 125) {\\n                    nameList.push('HDR 真彩色');\\n                } else if (item.id == 120) {\\n                    nameList.push('4K超清');\\n                } else if (item.id == 116) {\\n                    nameList.push('1080P60高帧率');\\n                } else if (item.id == 112) {\\n                    nameList.push('1080P+高码率');\\n                } else if (item.id == 80) {\\n                    nameList.push('1080P高清');\\n                } else if (item.id == 74) {\\n                    nameList.push('720P60高帧率');\\n                } else if (item.id == 64) {\\n                    nameList.push('720P高清');\\n                } else if (item.id == 32) {\\n                    nameList.push('480P清晰');\\n                } else if (item.id == 16) {\\n                    nameList.push('360P流畅');\\n                } else if (item.id == 6) {\\n                    nameList.push('240P极速');\\n                }\\n            }\\n        });\\n        // 保持长度一致\\n        while (audioList.length < videoList.length) {\\n            // 复制 audioList 中最后一个元素并追加到数组末尾\\n            audioList.push(audioList[audioList.length - 1]);\\n            // 复制 headers 中最后一个元素并追加到数组末尾\\n            headers.push(headers[headers.length - 1]);\\n        }\\n        return JSON.stringify({\\n            urls: videoList,\\n            audioUrls: audioList,\\n            headers: headers,\\n            names: nameList,\\n            danmu: dm\\n        })\\n    } catch (e) {\\n        log(\\\"正常解释失败，进行最后尝试:\\\");\\n        return JSON.stringify({\\n            urls: [data.durl[0].url + \\\"#isVideo=true#\\\"],\\n            names: [data.quality + \\\"\\\"],\\n            danmu: dm,\\n            headers: [{\\n                \\\"Referer\\\": \\\"https://www.bilibili.com\\\",\\n                \\\"User-Agent\\\": PC_UA\\n            }]\\n        })\\n    }\\n}\\n// 稍后在看——总操作判断\\n$.exports.judgeToview = function (aid) {\\n    selection = ['添加', '移除'];\\n    return $(selection, 1).select((aid) => {\\n        if (input == '添加') {\\n            res = $.require(\\\"hiker://page/api\\\").addToview(aid);\\n            if (res == 0) {\\n                return \\\"toast://添加成功\\\"\\n            } else if (res == -101) {\\n                return \\\"toast://账号未登录\\\"\\n            } else if (res == -111) {\\n                return \\\"toast://csrf校验失败\\\"\\n            } else if (res == -400) {\\n                return \\\"toast://请求错误\\\"\\n            } else if (res == 90001) {\\n                return \\\"toast://列表已满\\\"\\n            } else if (res == 90003) {\\n                return \\\"toast://稿件已经被删除\\\"\\n            } else {\\n                return \\\"toast://未知错误\\\"\\n            }\\n        } else {\\n            res = $.require(\\\"hiker://page/api\\\").delToview(aid);\\n            if (res == 0) {\\n                return \\\"toast://移除成功\\\"\\n            } else if (res == -101) {\\n                return \\\"toast://账号未登录\\\"\\n            } else if (res == -111) {\\n                return \\\"toast://csrf校验失败\\\"\\n            } else if (res == -400) {\\n                return \\\"toast://请求错误\\\"\\n            } else {\\n                return \\\"toast://未知错误\\\"\\n            }\\n        }\\n    }, aid)\\n}\\n// 操作用户关系\\n$.exports.changeUserRelation = function (mid, re_src) {\\n    selection = ['关注', '取关', '悄悄关注', '取消悄悄关注', '拉黑', '取消拉黑', '踢出粉丝', '移动分组'];\\n    return $(selection, 2).select((mid, re_src) => {\\n        if (input == '移动分组') {\\n            beforeTagids = [];\\n            groups = $.require(\\\"hiker://page/api\\\").getUserGroup(mid);\\n            if (JSON.stringify(groups) == '{}') {\\n                beforeTagids.push(0);\\n            } else {\\n                for (var prop in groups) {\\n                    beforeTagids.push(parseInt(prop));\\n                }\\n            }\\n            // 获取我的分组\\n            focusGroupList = [];\\n            $.require(\\\"hiker://page/api\\\").getMyAttentionGroupList().forEach(list => {\\n                focusGroupList.push(list.name + ' ' + list.tagid);\\n            });\\n            return $(focusGroupList, 1).select((beforeTagids, mid) => {\\n                afterTagids = [];\\n                afterTagids.push(parseInt(input.split(' ')[1]));\\n                fids = [];\\n                fids.push(Number(mid));\\n                res = $.require(\\\"hiker://page/api\\\").moveUsers(beforeTagids, afterTagids, fids);\\n                if (res == 0) {\\n                    return \\\"toast://移动用户到\\\" + input.split(' ')[0] + \\\"分组成功\\\"\\n                } else if (res == -101) {\\n                    return \\\"toast://账号未登录\\\"\\n                } else if (res == -111) {\\n                    return \\\"toast://csrf校验失败\\\"\\n                } else if (res == -400) {\\n                    return \\\"toast://请求错误\\\"\\n                } else if (res == 22104) {\\n                    return \\\"toast://无权限\\\"\\n                } else if (res == 22105) {\\n                    return \\\"toast://未关注\\\"\\n                } else {\\n                    return \\\"toast://未知错误\\\"\\n                }\\n            }, beforeTagids, mid);\\n        } else {\\n            if (input == '关注') {\\n                var act = 1;\\n            } else if (input == '取关') {\\n                var act = 2;\\n            } else if (input == '悄悄关注') {\\n                var act = 3;\\n            } else if (input == '取消悄悄关注') {\\n                var act = 4;\\n            } else if (input == '拉黑') {\\n                var act = 5;\\n            } else if (input == '取消拉黑') {\\n                var act = 6;\\n            } else if (input == '踢出粉丝') {\\n                var act = 7;\\n            }\\n            res = $.require(\\\"hiker://page/api\\\").addAttention(mid, act, re_src);\\n            relation = $.require(\\\"hiker://page/api\\\").userMapping(mid);\\n            updateItem('relation', {\\n                title: relation,\\n                img: relation == '未关注' ? storage0.getMyVar('图标').添加关注 : storage0.getMyVar('图标').已关注\\n            });\\n            if (res == 0) {\\n                return \\\"toast://\\\" + input + \\\"成功\\\"\\n            } else if (res == -101) {\\n                return \\\"toast://账号未登录\\\"\\n            } else if (res == -111) {\\n                return \\\"toast://csrf校验失败\\\"\\n            } else if (res == -400) {\\n                return \\\"toast://请求错误\\\"\\n            } else if (res == 22001) {\\n                return \\\"toast://不能对自己进行此操作\\\"\\n            } else if (res == 22003) {\\n                return \\\"toast://用户位于黑名单\\\"\\n            } else {\\n                return \\\"toast://未知错误\\\"\\n            }\\n        }\\n    }, mid, re_src)\\n}\\n// 映射用户关系\\n$.exports.userMapping = function (mid) {\\n    relationRes = $.require(\\\"hiker://page/api\\\").getRelation(mid);\\n    if (relationRes.relation.attribute == 0) {\\n        relation = '未关注'\\n    } else if (relationRes.relation.attribute == 1) {\\n        relation = '悄悄关注'\\n    } else if (relationRes.relation.attribute == 2) {\\n        relation = '已关注'\\n    } else if (relationRes.relation.attribute == 6) {\\n        relation = '已互粉'\\n    } else if (relationRes.relation.attribute == 128) {\\n        relation = '已拉黑'\\n    }\\n    return relation;\\n}\\n// 点赞操作逻辑\\n$.exports.likeLogic = function (aid) {\\n    hasLike = $.require(\\\"hiker://page/api\\\").hasLike(aid);\\n    if (hasLike == 0) {\\n        res = $.require(\\\"hiker://page/api\\\").setLike(aid, 1);\\n        if (res == 0) {\\n            like = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/view?aid=\\\" + aid)).data.stat.like;\\n            updateItem('setLike', {\\n                title: (like + 1) + '',\\n                img: storage0.getMyVar('图标').已点赞\\n            });\\n            return \\\"toast://点赞成功\\\";\\n        } else {\\n            return \\\"toast://点赞出错了~\\\";\\n        }\\n    } else {\\n        res = $.require(\\\"hiker://page/api\\\").setLike(aid, 2);\\n        if (res == 0) {\\n            like = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/view?aid=\\\" + aid)).data.stat.like;\\n            updateItem('setLike', {\\n                title: (like - 1) + '',\\n                img: storage0.getMyVar('图标').未点赞\\n            });\\n            return \\\"toast://取消点赞成功\\\";\\n        } else {\\n            return \\\"toast://取消点赞出错了~\\\";\\n        }\\n    }\\n}\\n// 收藏操作逻辑\\n$.exports.favourLogic = function (aid, mid) {\\n    hasFavour = $.require(\\\"hiker://page/api\\\").hasFavour(aid);\\n    if (hasFavour) {\\n        // 移出收藏\\n        favourIdList = $.require(\\\"hiker://page/api\\\").getFavourIdList(aid, mid);\\n        res = $.require(\\\"hiker://page/api\\\").setFavour(aid, '', favourIdList);\\n        if (res == 0) {\\n            like = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/view?aid=\\\" + aid)).data.stat.favorite;\\n            updateItem('setFavour', {\\n                title: (like - 1) + '',\\n                img: storage0.getMyVar('图标').未收藏\\n            });\\n            return \\\"toast://取消收藏成功\\\";\\n        } else {\\n            return \\\"toast://取消收藏出错了~\\\";\\n        }\\n    } else {\\n        // 选择收藏\\n        res = $.require(\\\"hiker://page/api\\\").getCollectionGroupList()[0].mediaListResponse.list;\\n        GroupList = [];\\n        res.forEach(item => {\\n            GroupList.push(item.title + ' ' + item.id);\\n        });\\n        return $(GroupList, 1).select((aid) => {\\n            selectId = parseInt(input.split(' ')[1])\\n            res = $.require(\\\"hiker://page/api\\\").setFavour(aid, selectId, '');\\n            if (res == 0) {\\n                like = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/view?aid=\\\" + aid)).data.stat.favorite;\\n                updateItem('setFavour', {\\n                    title: (like + 1) + '',\\n                    img: storage0.getMyVar('图标').已收藏\\n                });\\n                return \\\"toast://收藏成功\\\";\\n            } else {\\n                return \\\"toast://收藏出错了~\\\";\\n            }\\n        }, aid);\\n    }\\n}\\n\\n// part2:散装API----------------\\n// 获取搜索结果\\n$.exports.getSearchRes = function (search_type, seaword, page, pageSize) {\\n    queryJson = {\\n        __refresh__: true,\\n        _extra: '',\\n        context: '',\\n        page: page,\\n        page_size: pageSize,\\n        order: '',\\n        duration: '',\\n        from_source: '',\\n        from_spmid: 333.337,\\n        platform: 'pc',\\n        highlight: 1,\\n        single_column: 0,\\n        keyword: seaword,\\n        search_type: search_type,\\n        preload: true,\\n        com2co: true\\n    }\\n    parms = $.require(\\\"hiker://page/api\\\").getWbiEnc(queryJson);\\n    dataLink = 'https://api.bilibili.com/x/web-interface/wbi/search/type?' + parms;\\n    cookie = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie;\\n    res = JSON.parse(fetch(dataLink, {\\n        headers: {\\n            \\\"User-Agent\\\": PC_UA,\\n            \\\"Referer\\\": \\\"https://www.bilibili.com/\\\",\\n            \\\"Cookie\\\": cookie\\n        },\\n        method: \\\"GET\\\"\\n    })).data;\\n    return res;\\n}\\n// 视频推荐\\n$.exports.getFeed = function () {\\n    let u = \\\"https://api.bilibili.com/x/web-interface/index/top/feed/rcmd\\\";\\n    var res = JSON.parse(fetch(u, {\\n        headers: {\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        }\\n    }));\\n    return res.data.item\\n}\\n// 获取播放地址\\n$.exports.getUrl = function (avid, cid, qn) {\\n    var setting = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\"));\\n    var Cookie = setting.bfKey != '' ? base64Decode(base64Decode(setting.bfKey)) : setting.userList[0].cookie;\\n    try {\\n        let u = request(buildUrl(\\\"http://api.bilibili.com/x/player/playurl\\\", {\\n            \\\"avid\\\": avid,\\n            \\\"cid\\\": cid,\\n            \\\"qn\\\": qn,\\n            \\\"fnver\\\": 0,\\n            // \\\"fnval\\\": 4048,\\n            \\\"fnval\\\": 16,\\n            \\\"fourk\\\": 1\\n        }), {\\n            headers: {\\n                Cookie: Cookie\\n            }\\n        })\\n        res = JSON.parse(u);\\n        if (res.data.dash) {\\n            return res.data.dash;\\n        } else {\\n            log(\\\"没有找到dash字段\\\");\\n            if (res.data.support_formats) {\\n                if (u.includes(\\\"试看\\\")) {\\n                    msg = \\\"您刚才观看的视频是试看视频，观看完整片段请前往官网购买！\\\";\\n                    log(msg);\\n                    confirm({\\n                        title: '温馨提示', content: msg, confirm: $.toString(() => {\\n                        }), cancel: $.toString(() => {})\\n                    })\\n                }\\n            }\\n            return res.data;\\n        }\\n    } catch (e) {\\n        try {\\n            // 一人之下第一季的第1，2集——可以获取大会员剧集的前3min\\n            log('尝试更改请求接口...:' + e);\\n            let u = request(buildUrl(\\\"https://api.bilibili.com/pgc/player/web/playurl\\\", {\\n                \\\"avid\\\": avid,\\n                \\\"cid\\\": cid,\\n                \\\"qn\\\": qn,\\n                \\\"fnver\\\": 0,\\n                // \\\"fnval\\\": 4048,\\n                \\\"fnval\\\": 16,\\n                \\\"fourk\\\": 1\\n            }), {\\n                headers: {\\n                    Cookie: Cookie\\n                }\\n            })\\n            // 仙王的日常第三季第10集，没有dash，服了\\n            if (JSON.parse(u).result.dash) {\\n                return JSON.parse(u).result.dash;\\n            } else {\\n                log('尝试走单线路画质~');\\n                return JSON.parse(u).result;\\n            }\\n        } catch (error) {\\n            log('cookie有没有可能失效了呢~');\\n            return '';\\n        }\\n    }\\n}\\n// 提交播放记录\\n$.exports.reportProcess = function (avid, cid) {\\n    let csrf = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\\n    let res = post(\\\"http://api.bilibili.com/x/v2/history/report\\\", {\\n        body: {\\n            \\\"aid\\\": avid,\\n            \\\"cid\\\": cid,\\n            \\\"csrf\\\": csrf,\\n            \\\"progress\\\": 0\\n        },\\n        headers: {\\n            Cookie: JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        }\\n    })\\n}\\n\\n// 获取评论\\n$.exports.getComments = function (id, type, page) {\\n    let u = buildUrl(\\\"http://api.bilibili.com/x/v2/reply\\\", {\\n        \\\"type\\\": type,\\n        \\\"oid\\\": id,\\n        \\\"pn\\\": page\\n    });\\n    let res = request(u, {\\n        headers: {\\n            Cookie: JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        }\\n    })\\n    return JSON.parse(res).data.replies\\n}\\n// 添加稍后在看——真的麻了，为什么fetch就错呢~\\n$.exports.addToview = function (aid) {\\n    let csrf = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\\n    let u = \\\"https://api.bilibili.com/x/v2/history/toview/add\\\";\\n    let res = request(buildUrl(u, {\\n        \\\"aid\\\": aid,\\n        \\\"csrf\\\": csrf,\\n    }), {\\n        headers: {\\n            \\\"Referer\\\": \\\"https://www.bilibili.com/\\\",\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        },\\n        method: \\\"POST\\\"\\n    })\\n    return JSON.parse(res).code;\\n}\\n// 删除稍后在看\\n$.exports.delToview = function (aid) {\\n    let csrf = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\\n    let u = \\\"http://api.bilibili.com/x/v2/history/toview/del\\\";\\n    let res = request(buildUrl(u, {\\n        \\\"aid\\\": aid,\\n        \\\"csrf\\\": csrf,\\n    }), {\\n        headers: {\\n            \\\"Referer\\\": \\\"https://www.bilibili.com/\\\",\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        },\\n        method: \\\"POST\\\"\\n    })\\n    return JSON.parse(res).code;\\n}\\n// 订阅影视(追番、追剧)\\n$.exports.subscribeFilm = function (season_id) {\\n    let csrf = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\\n    let u = \\\"https://api.bilibili.com/pgc/web/follow/add\\\";\\n    let res = request(buildUrl(u, {\\n        \\\"season_id\\\": season_id,\\n        \\\"csrf\\\": csrf,\\n    }), {\\n        headers: {\\n            \\\"Referer\\\": \\\"https://www.bilibili.com/\\\",\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        },\\n        method: \\\"POST\\\"\\n    })\\n    return JSON.parse(res).result.toast;\\n}\\n// 取消订阅\\n$.exports.cancelSubscribeFilm = function (season_id) {\\n    let csrf = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\\n    let u = \\\"https://api.bilibili.com/pgc/web/follow/del\\\";\\n    let res = request(buildUrl(u, {\\n        \\\"season_id\\\": season_id,\\n        \\\"csrf\\\": csrf,\\n    }), {\\n        headers: {\\n            \\\"Referer\\\": \\\"https://www.bilibili.com/\\\",\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        },\\n        method: \\\"POST\\\"\\n    })\\n    return JSON.parse(res).result.toast;\\n}\\n/*操作用户关系\\nfid:用户mid\\nact:操作代码\\nre_src：关注来源\\n*/\\n$.exports.addAttention = function (mid, act, re_src) {\\n    let csrf = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\\n    let u = \\\"https://api.bilibili.com/x/relation/modify\\\";\\n    let res = request(buildUrl(u, {\\n        \\\"fid\\\": mid,\\n        \\\"act\\\": act,\\n        \\\"re_src\\\": re_src,\\n        \\\"csrf\\\": csrf\\n    }), {\\n        headers: {\\n            \\\"Referer\\\": \\\"https://www.bilibili.com/\\\",\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        },\\n        method: \\\"POST\\\"\\n    })\\n    return JSON.parse(res).code;\\n}\\n// 移动关注用户分组\\n$.exports.moveUsers = function (beforeTagids, afterTagids, fids) {\\n    let csrf = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\\n    let u = \\\"https://api.bilibili.com/x/relation/tags/moveUsers\\\";\\n    let res = request(buildUrl(u, {\\n        \\\"beforeTagids\\\": beforeTagids.toString(),\\n        \\\"afterTagids\\\": afterTagids.toString(),\\n        \\\"fids\\\": fids.toString(),\\n        \\\"csrf\\\": csrf\\n    }), {\\n        headers: {\\n            \\\"Referer\\\": \\\"https://www.bilibili.com/\\\",\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        },\\n        method: \\\"POST\\\"\\n    })\\n    return JSON.parse(res).code;\\n}\\n// 获取用户关系\\n$.exports.getRelation = function (mid) {\\n    // https://api.bilibili.com/x/space/acc/relation?mid=,旧接口\\n    parms = $.require(\\\"hiker://page/api\\\").getWbiEnc({ mid: mid });\\n    infoLink = 'https://api.bilibili.com/x/space/wbi/acc/relation?' + parms;\\n    return JSON.parse(request(infoLink, {\\n        headers: {\\n            \\\"User-Agent\\\": PC_UA,\\n            \\\"Referer\\\": \\\"https://www.bilibili.com/\\\",\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        }\\n    })).data\\n}\\n// 查询目标用户所在的分组\\n$.exports.getUserGroup = function (mid) {\\n    return JSON.parse(request(\\\"https://api.bilibili.com/x/relation/tag/user?fid=\\\" + mid, {\\n        headers: {\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        }\\n    })).data\\n}\\n// 获取关注分组\\n$.exports.getMyAttentionGroupList = function () {\\n    return JSON.parse(fetch(\\\"https://api.bilibili.com/x/relation/tags?jsonp=jsonp\\\", {\\n        headers: {\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie,\\n            \\\"User-Agent\\\": PC_UA,\\n            \\\"Referer\\\": \\\"https://www.bilibili.com/\\\"\\n        }\\n    })).data;\\n}\\n// 是否点赞\\n$.exports.hasLike = function (aid) {\\n    return JSON.parse(request(buildUrl(\\\"http://api.bilibili.com/x/web-interface/archive/has/like\\\", {\\n        \\\"aid\\\": aid\\n    }), {\\n        headers: {\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        }\\n    })).data\\n}\\n// 是否收藏\\n$.exports.hasFavour = function (aid) {\\n    return JSON.parse(request(buildUrl(\\\"http://api.bilibili.com/x/v2/fav/video/favoured\\\", {\\n        \\\"aid\\\": aid\\n    }), {\\n        headers: {\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        }\\n    })).data.favoured\\n}\\n// 视频点赞\\n$.exports.setLike = function (aid, dealWay) {\\n    let csrf = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\\n    let res = post(\\\"http://api.bilibili.com/x/web-interface/archive/like\\\", {\\n        body: {\\n            \\\"aid\\\": aid,\\n            \\\"like\\\": dealWay,\\n            \\\"csrf\\\": csrf\\n        },\\n        headers: {\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        }\\n    })\\n    return JSON.parse(res).code;\\n}\\n// 获取收藏列表\\n$.exports.getCollectionGroupList = function () {\\n    return collections = JSON.parse(fetch(\\\"https://api.bilibili.com/x/v3/fav/folder/list4navigate\\\", {\\n        headers: {\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie,\\n        }\\n    })).data;\\n}\\n// 收藏/取消视频API\\n$.exports.setFavour = function (aid, add_media_ids, del_media_ids) {\\n    let csrf = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/) === null ? JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.split('bili_jct=')[1] : JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie.match(/bili_jct=(.*?);/)[1];\\n    let res = post(\\\"http://api.bilibili.com/medialist/gateway/coll/resource/deal\\\", {\\n        body: {\\n            \\\"rid\\\": aid,\\n            \\\"type\\\": 2,\\n            \\\"add_media_ids\\\": add_media_ids.toString(),\\n            \\\"del_media_ids\\\": del_media_ids.toString(),\\n            \\\"csrf\\\": csrf\\n        },\\n        headers: {\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie,\\n            \\\"Referer\\\": \\\"https://www.bilibili.com\\\"\\n        }\\n    })\\n    return JSON.parse(res).code;\\n}\\n// 获取视频所在收藏夹\\n$.exports.getFavourIdList = function (aid, userMid) {\\n    let u = \\\"https://api.bilibili.com/x/v3/fav/folder/created/list-all\\\";\\n    let res = request(buildUrl(u, {\\n        \\\"type\\\": 2,\\n        \\\"rid\\\": aid,\\n        \\\"up_mid\\\": userMid,\\n    }), {\\n        headers: {\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie,\\n            \\\"Referer\\\": \\\"https://www.bilibili.com\\\"\\n        }\\n    });\\n    favourIdList = [];\\n    JSON.parse(res).data.list.forEach((item) => {\\n        if (item.fav_state == 1) {\\n            favourIdList.push(item.id);\\n        }\\n    })\\n    return favourIdList;\\n}\\n// 热映剧集时间轴\\n$.exports.getMovies = function (type, before, after) {\\n    let u = buildUrl(\\\"http://api.bilibili.com/pgc/web/timeline\\\", {\\n        \\\"types\\\": type,\\n        \\\"before\\\": before,\\n        \\\"after\\\": after\\n    })\\n    let res = JSON.parse(request(u, {\\n        headers: {\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n        }\\n    }))\\n    return res.result\\n}\\n// 获取专栏文章\\n$.exports.getUserArticle = function (upMid, page) {\\n    let u = \\\"https://api.bilibili.com/x/space/article\\\";\\n    let res = request(buildUrl(u, {\\n        \\\"mid\\\": upMid,\\n        \\\"pn\\\": page,\\n        \\\"ps\\\": 12,\\n        \\\"sort\\\": 'publish_time'\\n    }), {\\n        headers: {\\n            \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie,\\n            \\\"Referer\\\": \\\"https://www.bilibili.com\\\"\\n        }\\n    });\\n    return JSON.parse(res).data;\\n}\\n// 获取动态数据\\n$.exports.getDynamicData = function (from, upMid) {\\n    var nextInfo = {};\\n    if (MY_PAGE == 1) {\\n        if (from == 'upSpace') {\\n            var u = \\\"https://api.bilibili.com/x/polymer/web-dynamic/v1/feed/space?offset=&host_mid=\\\" + upMid + \\\"&timezone_offset=-480\\\";\\n        } else {\\n            var u = \\\"https://api.bilibili.com/x/polymer/web-dynamic/v1/feed/all?timezone_offset=-480&type=all\\\";\\n        }\\n        latenews = JSON.parse(fetch(u, {\\n            headers: {\\n                \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie,\\n                \\\"User-Agent\\\": PC_UA,\\n                \\\"Referer\\\": \\\"https://www.bilibili.com/\\\"\\n            }\\n        })).data;\\n        nextInfo.offset = latenews.offset;\\n    } else {\\n        if (from == 'upSpace') {\\n            var u = \\\"https://api.bilibili.com/x/polymer/web-dynamic/v1/feed/space?offset=\\\" + storage0.getMyVar(JSON.stringify(MY_PAGE)).offset + \\\"&host_mid=\\\" + upMid + \\\"&timezone_offset=-480\\\";\\n        } else {\\n            var u = \\\"https://api.bilibili.com/x/polymer/web-dynamic/v1/feed/all?timezone_offset=-480&type=all&offset=\\\" + storage0.getMyVar(JSON.stringify(MY_PAGE)).offset;\\n        }\\n        latenews = JSON.parse(fetch(u, {\\n            headers: {\\n                \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userList[0].cookie\\n            }\\n        })).data;\\n        nextInfo.offset = latenews.offset;\\n    }\\n    storage0.putMyVar(JSON.stringify(MY_PAGE + 1), nextInfo);\\n    return latenews;\\n}\\n\\n// ——特别的行为、工具函数——\\n// 展示动态数据(返回函数方法的可执行字符串)\\n$.exports.showDynamicData = function () {\\n    return $.toString(() => {\\n        imgLink = storage0.getMyVar('图标');\\n        latenews.items.forEach(list => {\\n            if (list.type == 'DYNAMIC_TYPE_AV') {\\n                // 投稿视频（当前发布）√\\n                d.push({\\n                    title: list.modules.module_author.name,\\n                    desc: '<small><small><font color=\\\"grey\\\">' + list.modules.module_author.pub_time + '-' + list.modules.module_author.pub_action + '</font></small></small>',\\n                    img: list.modules.module_author.face + \\\"@Referer=\\\",\\n                    url: 'hiker://page/upHome',\\n                    col_type: 'avatar',\\n                    extra: {\\n                        mid: list.modules.module_author.mid,\\n                        title: list.modules.module_author.name,\\n                        face: list.modules.module_author.face\\n                    }\\n                }, {\\n                    col_type: 'line'\\n                }, {\\n                    // 不一定有文字啊\\n                    title: (list.modules.module_dynamic.desc === null ? '<font color=\\\"grey\\\">up太懒了，连文案都不想配...</font>' : list.modules.module_dynamic.desc.text).replace(/\\\\n/g, '<br>') + '<br><a href=\\\"hiker://page/Comments?p=fypage\\\">查看评论</a>',\\n                    url: 'hiker://page/Comments?p=fypage',\\n                    // 这个不能用long_text\\n                    col_type: 'rich_text',\\n                    extra: {\\n                        id: list.basic.comment_id_str,\\n                        type: 1\\n                    }\\n                }, {\\n                    title: list.modules.module_dynamic.major.archive.title,\\n                    img: list.modules.module_dynamic.major.archive.cover + \\\"@Referer=\\\",\\n                    col_type: 'movie_1_left_pic',\\n                    url: \\\"hiker://page/video\\\",\\n                    desc: list.modules.module_dynamic.major.archive.desc,\\n                    extra: {\\n                        aid: list.modules.module_dynamic.major.archive.aid,\\n                        lineVisible: false\\n                    }\\n                }, {\\n                    desc: '<small><small><font color=\\\"grey\\\">留言:' + list.modules.module_stat.comment.count + '\\\\t\\\\t分享:' + list.modules.module_stat.forward.count + '\\\\t\\\\t喜欢:' + list.modules.module_stat.like.count + '</font></small></small>',\\n                    img: imgLink.动态足迹,\\n                    url: 'hiker://empty',\\n                    col_type: 'avatar'\\n                }, {\\n                    col_type: 'line_blank'\\n                });\\n            } else if (list.type == 'DYNAMIC_TYPE_FORWARD') {\\n                // 引用，多出了orig指向一个(过去)已发布的视频,准确的说是引用之前的帖子不一定是视频√\\n                d.push({\\n                    title: list.modules.module_author.name,\\n                    img: list.modules.module_author.face + \\\"@Referer=\\\",\\n                    desc: '<small><small><font color=\\\"grey\\\">' + list.modules.module_author.pub_time + '</font></small></small>',\\n                    url: 'hiker://page/upHome',\\n                    col_type: 'avatar',\\n                    extra: {\\n                        mid: list.modules.module_author.mid,\\n                        title: list.modules.module_author.name,\\n                        face: list.modules.module_author.face\\n                    }\\n                }, {\\n                    col_type: 'line'\\n                }, {\\n                    title: (list.modules.module_dynamic.desc === null ? '<font color=\\\"grey\\\">up太懒了，连文案都不想配...</font>' : list.modules.module_dynamic.desc.text).replace(/\\\\n/g, '<br>') + '<br><a href=\\\"hiker://page/Comments?p=fypage\\\">查看评论</a>',\\n                    url: 'hiker://page/Comments?p=fypage',\\n                    col_type: 'rich_text',\\n                    extra: {\\n                        id: list.basic.comment_id_str,\\n                        // 也是纯文字，因为只是文字+引用早已投稿的视频\\n                        type: 17\\n                    }\\n                });\\n                // 引用的内容——截断（根据不同的引用类型进行处理）\\n                d.push({\\n                    title: '<small><small>下面内容来自引用的帖子,up是:<a href=\\\"hiker://page/upHome\\\">' + list.orig.modules.module_author.name + '</a></small></small>',\\n                    col_type: \\\"rich_text\\\",\\n                    extra: {\\n                        mid: list.orig.modules.module_author.mid,\\n                        title: list.orig.modules.module_author.name,\\n                        face: list.orig.modules.module_author.face\\n                    }\\n                }, {\\n                    col_type: \\\"line\\\"\\n                });\\n                if (list.orig.type == 'DYNAMIC_TYPE_AV') {\\n                    // 引用视频说说\\n                    d.push({\\n                        title: list.orig.modules.module_dynamic.major.archive.title,\\n                        img: list.orig.modules.module_dynamic.major.archive.cover + \\\"@Referer=\\\",\\n                        col_type: 'movie_1_left_pic',\\n                        url: \\\"hiker://page/video\\\",\\n                        desc: list.orig.modules.module_dynamic.major.archive.desc,\\n                        extra: {\\n                            aid: list.orig.modules.module_dynamic.major.archive.aid,\\n                            lineVisible: false\\n                        }\\n                    });\\n                } else if (list.orig.type == 'DYNAMIC_TYPE_WORD') {\\n                    // 引用文字说说\\n                    d.push({\\n                        title: (list.orig.modules.module_dynamic.desc.text === null ? '<font color=\\\"grey\\\">up太懒了，连文案都不想配...</font>' : list.orig.modules.module_dynamic.desc.text).replace(/\\\\n/g, '<br>') + '<br><a href=\\\"hiker://page/Comments?p=fypage\\\">查看评论</a>',\\n                        url: 'hiker://page/Comments?p=fypage',\\n                        col_type: 'rich_text',\\n                        extra: {\\n                            // 评论id来源都不一样\\n                            id: list.orig.id_str,\\n                            // 纯文字\\n                            type: 17\\n                        }\\n                    });\\n\\n                } else if (list.orig.type == 'DYNAMIC_TYPE_DRAW') {\\n                    // 引用图片说说\\n                    d.push({\\n                        title: (list.orig.modules.module_dynamic.desc.text === null ? '<font color=\\\"grey\\\">up太懒了，连文案都不想配...</font>' : list.orig.modules.module_dynamic.desc.text).replace(/\\\\n/g, '<br>') + '<br><a href=\\\"hiker://page/Comments?p=fypage\\\">查看评论</a>',\\n                        col_type: 'rich_text',\\n                        url: \\\"hiker://page/Comments?p=fypage\\\",\\n                        extra: {\\n                            id: list.orig.modules.module_dynamic.major.draw.id,\\n                            type: 11\\n                        }\\n                    });\\n                    list.orig.modules.module_dynamic.major.draw.items.forEach(item => {\\n                        d.push({\\n                            img: item.src + \\\"@Referer=\\\",\\n                            col_type: 'pic_3_square',\\n                            url: item.src + \\\"@Referer=\\\",\\n                        });\\n                    });\\n                } else {\\n                    log('可能还有未适配的说说类型');\\n                }\\n                // 分割\\n                d.push({\\n                    desc: '<small><small><font color=\\\"grey\\\">留言:' + list.modules.module_stat.comment.count + '\\\\t\\\\t分享:' + list.modules.module_stat.forward.count + '\\\\t\\\\t喜欢:' + list.modules.module_stat.like.count + '</font></small></small>',\\n                    img: imgLink.动态足迹,\\n                    url: 'hiker://empty',\\n                    col_type: 'avatar'\\n                }, {\\n                    col_type: 'line_blank'\\n                });\\n            } else if (list.type == 'DYNAMIC_TYPE_WORD') {\\n                // 纯文字\\n                d.push({\\n                    title: list.modules.module_author.name,\\n                    desc: '<small><small><font color=\\\"grey\\\">' + list.modules.module_author.pub_time + '</font></small></small>',\\n                    img: list.modules.module_author.face + \\\"@Referer=\\\",\\n                    url: 'hiker://page/upHome',\\n                    col_type: 'avatar',\\n                    extra: {\\n                        mid: list.modules.module_author.mid,\\n                        title: list.modules.module_author.name,\\n                        face: list.modules.module_author.face\\n                    }\\n                }, {\\n                    col_type: 'line'\\n                }, {\\n                    title: (list.modules.module_dynamic.desc === null ? '<font color=\\\"grey\\\">up太懒了，连文案都不想配...</font>' : list.modules.module_dynamic.desc.text).replace(/\\\\n/g, '<br>') + '<br><a href=\\\"hiker://page/Comments?p=fypage\\\">查看评论</a>',\\n                    url: 'hiker://page/Comments?p=fypage',\\n                    col_type: 'rich_text',\\n                    extra: {\\n                        id: list.basic.comment_id_str,\\n                        // 纯文字\\n                        type: 17\\n                    }\\n                }, {\\n                    desc: '<small><small><font color=\\\"grey\\\">留言:' + list.modules.module_stat.comment.count + '\\\\t\\\\t分享:' + list.modules.module_stat.forward.count + '\\\\t\\\\t喜欢:' + list.modules.module_stat.like.count + '</font></small></small>',\\n                    img: imgLink.动态足迹,\\n                    url: 'hiker://empty',\\n                    col_type: 'avatar'\\n                }, {\\n                    col_type: 'line_blank'\\n                });\\n            } else if (list.type == 'DYNAMIC_TYPE_DRAW') {\\n                // 图片说说\\n                d.push({\\n                    title: list.modules.module_author.name,\\n                    desc: '<small><small><font color=\\\"grey\\\">' + list.modules.module_author.pub_time + '</font></small></small>',\\n                    img: list.modules.module_author.face + \\\"@Referer=\\\",\\n                    url: 'hiker://page/upHome',\\n                    col_type: 'avatar',\\n                    extra: {\\n                        mid: list.modules.module_author.mid,\\n                        title: list.modules.module_author.name,\\n                        face: list.modules.module_author.face\\n                    }\\n                }, {\\n                    col_type: 'line'\\n                }, {\\n                    title: (list.modules.module_dynamic.desc === null ? '<font color=\\\"grey\\\">up太懒了，连文案都不想配...</font>' : list.modules.module_dynamic.desc.text).replace(/\\\\n/g, '<br>') + '<br><a href=\\\"hiker://page/Comments?p=fypage\\\">查看评论</a>',\\n                    url: 'hiker://page/Comments?p=fypage',\\n                    col_type: 'rich_text',\\n                    extra: {\\n                        id: list.basic.comment_id_str,\\n                        // 相簿（图片动态）\\n                        type: 11\\n                    }\\n                });\\n                list.modules.module_dynamic.major.draw.items.forEach(item => {\\n                    d.push({\\n                        img: item.src + \\\"@Referer=\\\",\\n                        col_type: 'pic_3_square',\\n                        url: item.src + \\\"@Referer=\\\",\\n                    });\\n                });\\n                d.push({\\n                    desc: '<small><small><font color=\\\"grey\\\">留言:' + list.modules.module_stat.comment.count + '\\\\t\\\\t分享:' + list.modules.module_stat.forward.count + '\\\\t\\\\t喜欢:' + list.modules.module_stat.like.count + '</font></small></small>',\\n                    img: imgLink.动态足迹,\\n                    url: 'hiker://empty',\\n                    col_type: 'avatar'\\n                }, {\\n                    col_type: 'line_blank'\\n                });\\n            }\\n        });\\n    })\\n}\\n// 时间日期转换函数\\n$.exports.timeConvert = function (time) {\\n    function formatDate(e, t) {\\n        e = new Date(e * 1000); //时间戳为10位需*1000，时间戳为13位的话不需乘1000\\n        return t.replace(/yyyy|YYYY/, e.getFullYear())\\n            .replace(/yy|YY/, r(e.getFullYear() % 100, 2))\\n            .replace(/mm|MM/, r(e.getMonth() + 1, 2))\\n            .replace(/m|M/g, e.getMonth() + 1)\\n            .replace(/dd|DD/, r(e.getDate(), 2))\\n            .replace(/d|D/g, e.getDate())\\n            .replace(/hh|HH/, r(e.getHours(), 2))\\n            .replace(/h|H/g, e.getHours())\\n            .replace(/ii|II/, r(e.getMinutes(), 2))\\n            .replace(/i|I/g, e.getMinutes())\\n            .replace(/ss|SS/, r(e.getSeconds(), 2))\\n            .replace(/s|S/g, e.getSeconds())\\n            .replace(/w/g, e.getDay())\\n            .replace(/W/g, [\\\"日\\\", \\\"一\\\", \\\"二\\\", \\\"三\\\", \\\"四\\\", \\\"五\\\", \\\"六\\\"][e.getDay()])\\n    }\\n\\n    function r(e, t) {\\n        for (var r = 0, n = t - (e + \\\"\\\").length; r < n; r++) e = \\\"0\\\" + e;\\n        return e + \\\"\\\"\\n    }\\n    return formatDate(time, 'YYYY-MM-DD hh:ii:ss');\\n    // console.log(formatDate(1664089532, 'YYYY-MM-DD hh:ii:ss'));\\n}\\n// 秒数分钟表达转换函数\\n$.exports.formatSeconds = function (seconds) {\\n    let minutes = Math.floor(seconds / 60); // 计算分钟数\\n    let remainingSeconds = seconds % 60; // 计算剩余的秒数\\n    let formattedTime = `${minutes}:${String(remainingSeconds).padStart(2, '0')}`;\\n    return formattedTime;\\n}\\n\\n// B站Wbi签名算法(After 2023-3,get request with wbi.)\\n$.exports.getWbiEnc = function (queryJson) {\\n    const mixinKeyEncTab = [\\n        46, 47, 18, 2, 53, 8, 23, 32, 15, 50, 10, 31, 58, 3, 45, 35, 27, 43, 5, 49,\\n        33, 9, 42, 19, 29, 28, 14, 39, 12, 38, 41, 13, 37, 48, 7, 16, 24, 55, 40,\\n        61, 26, 17, 0, 1, 60, 51, 30, 4, 22, 25, 54, 21, 56, 59, 6, 63, 57, 62, 11,\\n        36, 20, 34, 44, 52\\n    ];\\n\\n    // 对 imgKey 和 subKey 进行字符顺序打乱编码\\n    function getMixinKey(orig) {\\n        let temp = '';\\n        mixinKeyEncTab.forEach((n) => {\\n            temp += orig[n]\\n        });\\n        return temp.slice(0, 32);\\n    }\\n\\n    // 为请求参数进行 wbi 签名\\n    function encWbi(params, img_key, sub_key) {\\n        const mixin_key = getMixinKey(img_key + sub_key),\\n            curr_time = Math.round(Date.now() / 1000),\\n            chr_filter = /[!'\\\\(\\\\)*]/g\\n        let query = [];\\n        params = Object.assign(params, { wts: curr_time });    // 添加 wts 字段\\n        // 按照 key 重排参数\\n        Object.keys(params).sort().forEach((key) => {\\n            query.push(\\n                encodeURIComponent(key) +\\n                '=' +\\n                // 过滤 value 中的 \\\"!'()*\\\" 字符\\n                encodeURIComponent(('' + params[key]).replace(chr_filter, ''))\\n            )\\n        })\\n        query = query.join('&');\\n        const wbi_sign = md5(query + mixin_key); // 计算 w_rid\\n        return query + '&w_rid=' + wbi_sign;\\n    }\\n\\n    // 获取最新的 img_key 和 sub_key\\n    function getWbiKeys() {\\n        const json_content = JSON.parse(fetch('https://api.bilibili.com/x/web-interface/nav', {\\n            headers: {\\n                \\\"User-Agent\\\": PC_UA,\\n                \\\"Referer\\\": \\\"https://www.bilibili.com/\\\"\\n            },\\n            method: 'GET'\\n        })).data;\\n        img_url = json_content.wbi_img.img_url;\\n        sub_url = json_content.wbi_img.sub_url;\\n        return {\\n            img_key: img_url.substring(img_url.lastIndexOf('/') + 1, img_url.length).split('.')[0],\\n            sub_key: sub_url.substring(sub_url.lastIndexOf('/') + 1, sub_url.length).split('.')[0]\\n        }\\n    }\\n\\n    const wbi_keys = getWbiKeys();\\n\\n    const query = encWbi(\\n        queryJson,\\n        wbi_keys.img_key,\\n        wbi_keys.sub_key\\n    );\\n    return query;\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"videoPage\",\"path\":\"video\",\"rule\":\"js:\\nvar d = [];\\n// 预处理\\nputMyVar('功能折叠', '关');\\nimgLink = storage0.getMyVar('图标');\\naid = MY_PARAMS.aid + \\\"\\\";\\n// bvid = MY_PARAMS.bvid + \\\"\\\";\\nmid = MY_PARAMS.mid + \\\"\\\";\\nvar {formatSeconds}=$.require(\\\"hiker://page/api\\\");\\ntry {\\n    //获取视频分P信息\\n    var p = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/view?aid=\\\" + aid)).data;\\n    hasLike = $.require(\\\"hiker://page/api\\\").hasLike(aid);\\n    hasFavour = $.require(\\\"hiker://page/api\\\").hasFavour(aid);\\n    setPageTitle(p.title);\\n    setPagePicUrl(p.pic + '@Referer=');\\n    // 只有1P的情况\\n    if (p.pages.length == 1) {\\n        cid = p.pages[0].cid;\\n        d.push({\\n            title: p.title,\\n            img: p.pic + '@Referer=',\\n            url: $().lazyRule((aid, cid, qn) => {\\n                // 真离了个大谱，明明替换掉了，ua字符串又变回来了，又要处理一次\\n                return $.require(\\\"hiker://page/api\\\").biliLazy(aid, cid, qn).replace(/;/g, \\\"；；\\\");\\n            }, aid + \\\"\\\", cid + \\\"\\\", '112'),\\n            col_type: \\\"pic_1\\\",\\n            desc:'播放量:'+p.stat.view+'\\\\t\\\\t\\\\t弹幕数:'+p.stat.danmaku+'\\\\n发布日期:'+$.require(\\\"hiker://page/api\\\").timeConvert(p.ctime),\\n            extra: {\\n                id:'aid-'+aid+'|cid-'+cid,\\n                longClick: [{\\n                    title: 'dm盒子', js: $.toString(() => {\\n                        return 'hiker://page/setting#noHistory#?rule=dm盒子';\\n                    })\\n                }, {\\n                    title: '弹幕控制', js: $.toString(() => {\\n                        if (getItem('isOverrideSave', 'false') == 'true') {\\n                            setItem('isOverrideSave', 'false');\\n                            return 'toast://弹幕将不受dm盒子参数控制';\\n                        } else {\\n                            setItem('isOverrideSave', 'true');\\n                            return 'toast://弹幕将受到dm盒子参数控制';\\n                        }\\n                    })\\n                }]\\n            }\\n        });\\n        d.push({\\n            title: '<font color=\\\"blue\\\">' + p.owner.name + '</font>',\\n            url: \\\"hiker://page/upHome\\\",\\n            img: p.owner.face + \\\"@Referer=\\\",\\n            col_type: \\\"avatar\\\",\\n            extra: {\\n                mid: p.owner.mid,\\n                title: p.owner.name,\\n                face: p.owner.face\\n            }\\n        });\\n        // 虽然只有1P,但可能处于合集视频中，往往在up上传中属于一套影片\\n        if (p.ugc_season) {\\n            d.push({\\n                title: '📁所属合集：<a href=\\\"hiker://page/collectionViedo\\\">'+p.ugc_season.title+'</a>',\\n                url: \\\"hiker://page/collectionViedo#noHistory#\\\",\\n                col_type: 'rich_text',\\n                extra: { \\\"textSize\\\": 12, aid: aid }\\n            })\\n        }\\n        d.push({\\n            col_type: 'line'\\n        }, {\\n            title: p.stat.like,\\n            img: hasLike == 1 ? imgLink.已点赞 : imgLink.未点赞,\\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\\n                return $.require(\\\"hiker://page/api\\\").likeLogic(aid)\\n            }, aid),\\n            col_type: \\\"icon_small_4\\\",\\n            extra: {\\n                id: 'setLike'\\n            }\\n        }, {\\n            title: p.stat.favorite,\\n            img: hasFavour ? imgLink.已收藏 : imgLink.未收藏,\\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\\n                upMid = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userMid;\\n                return $.require(\\\"hiker://page/api\\\").favourLogic(aid, upMid)\\n            }, aid),\\n            col_type: \\\"icon_small_4\\\",\\n            extra: {\\n                id: 'setFavour'\\n            }\\n        }, {\\n            title: '稍后再看',\\n            img: imgLink.稍后再看,\\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\\n                return $.require(\\\"hiker://page/api\\\").judgeToview(aid)\\n            }, aid),\\n            col_type: \\\"icon_small_4\\\",\\n        }, {\\n            title: '查看评论',\\n            url: 'hiker://page/Comments?p=fypage',\\n            img: imgLink.查看评论,\\n            col_type: \\\"icon_small_4\\\",\\n            extra: {\\n                \\\"id\\\": aid,\\n                \\\"type\\\": 1\\n            }\\n        }, {\\n            col_type: 'line_blank'\\n        }, {\\n            title: p.desc,\\n            col_type: \\\"long_text\\\",\\n        });\\n    } else {\\n        // 存在多集分P\\n        d.push({\\n            title: p.title,\\n            img: p.pic + '@Referer=',\\n            desc:'播放量:'+p.stat.view+'\\\\t\\\\t\\\\t弹幕数:'+p.stat.danmaku+'\\\\n发布日期:'+$.require(\\\"hiker://page/api\\\").timeConvert(p.ctime),\\n            url: $('#noLoading##noHistory#').lazyRule((p) => {\\n                return $('hiker://empty?fypage').rule((p) => {\\n                    d = [];\\n                    d.push({\\n                        title: p.desc,\\n                        col_type: \\\"long_text\\\",\\n                    })\\n                    setResult(d);\\n                }, p)\\n            }, p),\\n            col_type: \\\"pic_1\\\",\\n            extra: {\\n                longClick: [{\\n                    title: 'dm盒子', js: $.toString(() => {\\n                        return 'hiker://page/setting#noHistory#?rule=dm盒子';\\n                    })\\n                }, {\\n                    title: '弹幕控制', js: $.toString(() => {\\n                        if (getItem('isOverrideSave', 'false') == 'true') {\\n                            setItem('isOverrideSave', 'false');\\n                            return 'toast://弹幕将不受dm盒子参数控制';\\n                        } else {\\n                            setItem('isOverrideSave', 'true');\\n                            return 'toast://弹幕将受到dm盒子参数控制';\\n                        }\\n                    })\\n                }]\\n            }\\n        }, {\\n            title: '<font color=\\\"blue\\\">' + p.owner.name + '</font>',\\n            url: \\\"hiker://page/upHome\\\",\\n            img: p.owner.face + \\\"@Referer=\\\",\\n            col_type: \\\"avatar\\\",\\n            extra: {\\n                mid: p.owner.mid,\\n                title: p.owner.name,\\n                face: p.owner.face\\n            }\\n        }, {\\n            col_type: 'line'\\n        }, {\\n            title: p.stat.like,\\n            img: hasLike == 1 ? imgLink.已点赞 : imgLink.未点赞,\\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\\n                return $.require(\\\"hiker://page/api\\\").likeLogic(aid)\\n            }, aid),\\n            col_type: \\\"icon_small_4\\\",\\n            extra: {\\n                id: 'setLike'\\n            }\\n        }, {\\n            title: p.stat.favorite,\\n            img: hasFavour ? imgLink.已收藏 : imgLink.未收藏,\\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\\n                upMid = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).userMid;\\n                return $.require(\\\"hiker://page/api\\\").favourLogic(aid, upMid)\\n            }, aid),\\n            col_type: \\\"icon_small_4\\\",\\n            extra: {\\n                id: 'setFavour'\\n            }\\n        }, {\\n            title: '稍后再看',\\n            img: imgLink.稍后再看,\\n            url: $('#noLoading##noHistory#').lazyRule((aid) => {\\n                return $.require(\\\"hiker://page/api\\\").judgeToview(aid)\\n            }, aid),\\n            col_type: \\\"icon_small_4\\\",\\n        }, {\\n            title: '查看评论',\\n            url: 'hiker://page/Comments?p=fypage',\\n            img: imgLink.查看评论,\\n            col_type: \\\"icon_small_4\\\",\\n            extra: {\\n                \\\"id\\\": aid,\\n                \\\"type\\\": 1\\n            }\\n        })\\n        d.push({\\n            col_type: 'line_blank'\\n        }, {\\n            title: '选集列表',\\n            url: \\\"hiker://empty\\\",\\n            desc:'<small><small>共' + p.videos + '条视频</small></small>',\\n            img: imgLink.列表,\\n            col_type: \\\"avatar\\\",\\n        }, {\\n            col_type: 'line'\\n        });\\n        p.pages.forEach(item => {\\n            cid = item.cid;\\n            d.push({\\n                title: item.part,\\n                desc:formatSeconds(item.duration),\\n                // img:imgLink.分P列表项,\\n                img:item.first_frame+'@Referer=',\\n                url: $().lazyRule((aid, cid, qn) => {\\n                    return $.require(\\\"hiker://page/api\\\").biliLazy(aid, cid, qn).replace(/;/g, \\\"；；\\\");\\n                }, aid + \\\"\\\", cid + \\\"\\\", '116'),\\n                col_type: \\\"avatar\\\",\\n                extra:{\\n                    id:'aid-'+aid+'|cid-'+cid,\\n                }\\n            })\\n        })\\n    }\\n} catch (e) {\\n    log(e);\\n    d.push({\\n        title: '页面走丢了...',\\n        img: 'https://i0.hdslb.com/bfs/general/f7b667011a46615732c701f4bb1d07f793f8d1df.png@Referer=',\\n        url: 'hiker://empty',\\n        desc: '大概率视频被封禁，或者up已跑路~',\\n        col_type: \\\"pic_1\\\"\\n    });\\n}\\nsetResult(d);\\n\"},{\"col_type\":\"long_text\",\"name\":\"评论\",\"path\":\"Comments\",\"rule\":\"js:\\nvar d = [];\\nvar id = MY_PARAMS.id;\\nvar type = MY_PARAMS.type;\\nlog(id);\\nif (MY_PAGE == 1) {\\n    // 貌似暂时只能文字+数字\\n    d.unshift({\\n        title: \\\"发条评论吧\\\",\\n        col_type: \\\"input\\\",\\n        url: $.toString((id,type) => {\\n            let csrf = JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).cookie.match(/bili_jct=(.*?);/)[1];\\n            post(\\\"http://api.bilibili.com/x/v2/reply/add\\\", {\\n                body: {\\n                    \\\"type\\\": type,\\n                    \\\"oid\\\": id,\\n                    \\\"csrf\\\": csrf,\\n                    \\\"message\\\": input\\n                },\\n                headers: {\\n                    \\\"Cookie\\\": JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).cookie\\n                }\\n            })\\n            refreshPage()\\n        }, id,type)\\n    })\\n}\\nlet data = $.require(\\\"hiker://page/api\\\").getComments(id,type,MY_PAGE);\\n// log(data);\\nif(data){\\n    data.forEach(item => {\\n        d.push({\\n            title: item.member.uname,\\n            img: item.member.avatar+'@Referer=',\\n            url:'hiker://page/upHome',\\n            desc:'<small><small><font color=\\\"grey\\\">'+item.reply_control.location + \\\" \\\" + item.reply_control.time_desc+'</font></small></small>',\\n            col_type: \\\"avatar\\\",\\n            extra: {\\n                mid: item.member.mid,\\n                title: item.member.uname,\\n                face: item.member.avatar\\n            }\\n        })\\n        d.push({\\n            title: item.content.message,\\n        })\\n    })\\n}else{\\n    d.push({\\n        title: '好像没有评论了啦，！',\\n        col_type: \\\"text_center_1\\\",\\n    })\\n}\\nsetResult(d);\\n\"},{\"col_type\":\"movie_3\",\"name\":\"订阅列表\",\"path\":\"subscription\",\"rule\":\"if (getItem('订阅类型', '1') == '1') {\\n\\n    typerName = '追番';\\n\\n} else {\\n\\n    typerName = '追剧';\\n\\n}\\n\\nd.push({\\n\\n    title: '追番' == typerName ? '‘‘’’<font color=\\\"red\\\">追番</font>' : '追番',\\n\\n    url: $('#noLoading##noHistory#').lazyRule(() => {\\n\\n        setItem('订阅类型', '1')\\n\\n        refreshPage(true);\\n\\n        return \\\"hiker://empty\\\";\\n\\n    }),\\n\\n    col_type: 'scroll_button'\\n\\n},{\\n\\n    title: '追剧' == typerName ? '‘‘’’<font color=\\\"red\\\">追剧</font>' : '追剧',\\n\\n    url: $('#noLoading##noHistory#').lazyRule(() => {\\n\\n        setItem('订阅类型', '2')\\n\\n        refreshPage(true);\\n\\n        return \\\"hiker://empty\\\";\\n\\n    }),\\n\\n    col_type: 'scroll_button'\\n\\n});\\n\\nsubscriptions = JSON.parse(fetch(\\\"https://api.bilibili.com/x/space/bangumi/follow/list?type=\\\" + getItem('订阅类型', '1') + \\\"&follow_status=0&pn=\\\" + page + \\\"&ps=15&vmid=\\\" + mid, {\\n\\n    headers: {\\n\\n        \\\"Cookie\\\": cookie\\n\\n    }\\n\\n})).data;\\n\\nif (page == 1) {\\n\\n    d.push({\\n\\n        title: \\\"当前\\\" + typerName + \\\"数量:\\\" + subscriptions.total,\\n\\n        url: \\\"hiker://empty\\\",\\n\\n        col_type: \\\"text_center_1\\\"\\n\\n    })\\n\\n}\\n\\nsubscriptions.list.forEach(list => {\\n\\n    d.push({\\n\\n        title: list.title,\\n\\n        img: list.cover + \\\"@Referer=\\\",\\n\\n        url: \\\"hiker://page/filmerji#immersiveTheme#\\\",\\n\\n        desc: list.evaluate.substring(0, 12) + '‘‘’’…<font color=\\\"#1C1C1C\\\">详情</font>' + '\\\\n' + list.season_type_name + '|' + (list.areas===undefined?'':list.areas[0].name + '\\\\n') + (list.progress == '' ? '尚未观看' : list.progress) + (list.new_ep.index_show===undefined?'':'|'+(list.new_ep.index_show.match(/更新|即将/) ? '‘‘’’<font color=\\\"red\\\">' + list.new_ep.index_show + '</font>': list.new_ep.index_show)),\\n\\n        col_type: 'movie_1_vertical_pic',\\n\\n        extra: {\\n\\n            season_id: list.season_id\\n\\n        }\\n\\n    });\\n\\n});\\n\\n\"},{\"col_type\":\"movie_3\",\"name\":\"关注列表\",\"path\":\"attention\",\"rule\":\"if (MY_PAGE == 1) {\\n\\n    focusGroups=$.require(\\\"hiker://page/api\\\").getMyAttentionGroupList();\\n\\n    putMyVar('tempId', JSON.stringify(focusGroups[1].tagid));\\n\\n    focusGroups.forEach(list => {\\n\\n        d.push({\\n\\n            title: list.tagid == getItem('关注分组', JSON.stringify(focusGroups[1].id)) ? \\\"““””<font color='red'>\\\" + list.name + list.count + \\\"</font>\\\" : list.name + list.count,\\n\\n            url: $('#noLoading##noHistory#').lazyRule((list) => {\\n\\n                setItem('关注分组', JSON.stringify(list.tagid));\\n\\n                refreshPage(true);\\n\\n                return \\\"toast://切换关注分组为:\\\" + list.name;\\n\\n            }, list),\\n\\n            col_type: 'scroll_button',\\n\\n        });\\n\\n    });\\n\\n    // 末尾补充悄悄关注分组\\n\\n    d.push({\\n\\n        title: '悄悄关注' == getItem('关注分组', JSON.stringify(focusGroups[0].id)) ? \\\"““””<font color='red'>悄悄关注</font>\\\" : \\\"悄悄关注\\\",\\n\\n        url: $('#noLoading##noHistory#').lazyRule(() => {\\n\\n            setItem('关注分组', \\\"悄悄关注\\\");\\n\\n            refreshPage(true);\\n\\n            return \\\"toast://切换关注分组为:\\\" + \\\"悄悄关注\\\";\\n\\n        }),\\n\\n        col_type: 'scroll_button',\\n\\n    },{\\n\\n        col_type: 'line'\\n\\n    });\\n\\n}\\n\\nif (getItem('关注分组')=='悄悄关注') {\\n\\n    groupContent = JSON.parse(fetch(\\\"https://api.bilibili.com/x/relation/whispers?pn=\\\"+page+\\\"&ps=20&jsonp=jsonp\\\", {\\n\\n        headers: {\\n\\n            \\\"Cookie\\\": cookie\\n\\n        }\\n\\n    })).data.list;\\n\\n    groupContent.forEach(list => {\\n\\n        d.push({\\n\\n            title: \\\"<big><font color='blue'>\\\" + list.uname + \\\"</font></big><small>\\\" + list.sign + \\\"</small>\\\",\\n\\n            img: list.face + \\\"@Referer=\\\",\\n\\n            col_type: 'avatar',\\n\\n            url: \\\"hiker://page/upHome\\\",\\n\\n            extra: {\\n\\n                mid: list.mid,\\n\\n                title: list.uname,\\n\\n                face: list.face\\n\\n            }\\n\\n        });\\n\\n    });\\n\\n}else{\\n\\n    groupContent = JSON.parse(fetch(\\\"https://api.bilibili.com/x/relation/tag?mid=\\\" + mid + \\\"&tagid=\\\" + getItem('关注分组', getMyVar('tempId')) + \\\"&pn=\\\" + page + \\\"&ps=20&jsonp=jsonp\\\", {\\n\\n        headers: {\\n\\n            \\\"Cookie\\\": cookie\\n\\n        }\\n\\n    })).data;\\n\\n    groupContent.forEach(list => {\\n\\n        d.push({\\n\\n            title: \\\"<big><font color='blue'>\\\" + list.uname + \\\"</font></big><small>\\\" + list.sign + \\\"</small>\\\",\\n\\n            img: list.face + \\\"@Referer=\\\",\\n\\n            col_type: 'avatar',\\n\\n            url: \\\"hiker://page/upHome\\\",\\n\\n            extra: {\\n\\n                mid: list.mid,\\n\\n                title: list.uname,\\n\\n                face: list.face\\n\\n            }\\n\\n        });\\n\\n    });\\n\\n}\\n\\n\\n\"},{\"col_type\":\"movie_3\",\"name\":\"收藏列表\",\"path\":\"colection\",\"rule\":\"if (page == 1) {\\r\\n    d.push({\\r\\n        title: '我创建的收藏夹' == getItem('收藏类型', '我创建的收藏夹') ? '‘‘’’<font color=\\\"red\\\">我创建的收藏夹</font>' : '我创建的收藏夹',\\r\\n        url: $('#noLoading##noHistory#').lazyRule(() => {\\r\\n            setItem('收藏类型', '我创建的收藏夹')\\r\\n            refreshPage(true);\\r\\n            return \\\"hiker://empty\\\";\\r\\n        }),\\r\\n        col_type: 'scroll_button'\\r\\n    }, {\\r\\n        title: '稍后在看' == getItem('收藏类型', '我创建的收藏夹') ? '‘‘’’<font color=\\\"red\\\">稍后在看</font>' : '稍后在看',\\r\\n        url: $('#noLoading##noHistory#').lazyRule(() => {\\r\\n            setItem('收藏类型', '稍后在看')\\r\\n            refreshPage(true);\\r\\n            return \\\"hiker://empty\\\";\\r\\n        }),\\r\\n        col_type: 'scroll_button'\\r\\n    });\\r\\n}\\r\\nif (getItem('收藏类型', '我创建的收藏夹') == '我创建的收藏夹') {\\r\\n    try {\\r\\n        if (page == 1) {\\r\\n            d.push({\\r\\n                // col_type: 'blank_block'\\r\\n                col_type: 'line'\\r\\n            }, );\\r\\n        }\\r\\n        collections = JSON.parse(fetch(\\\"https://api.bilibili.com/x/v3/fav/folder/list4navigate\\\", {\\r\\n            headers: {\\r\\n                \\\"Cookie\\\": cookie\\r\\n            }\\r\\n        })).data;\\r\\n        groups = collections[0].mediaListResponse.list;\\r\\n        putMyVar('tempId', JSON.stringify(groups[0].id));\\r\\n        groups.forEach(list => {\\r\\n            d.push({\\r\\n                title: list.id == getItem('收藏夹', JSON.stringify(groups[0].id)) ? \\\"““””<font color='red'>\\\" + list.title + \\\"</font>\\\" : list.title,\\r\\n                url: $('#noLoading##noHistory#').lazyRule((list) => {\\r\\n                    setItem('收藏夹', JSON.stringify(list.id));\\r\\n                    refreshPage(true);\\r\\n                    return \\\"toast://切换收藏夹为:\\\" + list.title;\\r\\n                }, list),\\r\\n                col_type: 'scroll_button',\\r\\n            });\\r\\n        });\\r\\n        d.push({\\r\\n            col_type: 'line'\\r\\n        });\\r\\n        groupContent = JSON.parse(fetch(\\\"https://api.bilibili.com/x/v3/fav/resource/list?media_id=\\\" + getItem('收藏夹', getMyVar('tempId')) + \\\"&pn=\\\" + page + \\\"&ps=20&keyword=&order=mtime&type=0&tid=0&platform=web&jsonp=jsonp\\\", {\\r\\n            headers: {\\r\\n                \\\"Cookie\\\": cookie\\r\\n            }\\r\\n        })).data.medias;\\r\\n        groupContent.forEach(list => {\\r\\n            d.push({\\r\\n                title: list.title,\\r\\n                img: list.cover + \\\"@Referer=\\\",\\r\\n                col_type: 'movie_1_left_pic',\\r\\n                url: \\\"hiker://page/video\\\",\\r\\n                desc: 'UP:' + list.upper.name + '\\\\n' + list.intro,\\r\\n                extra: {\\r\\n                    aid: list.id,\\r\\n                    mid: list.upper.mid\\r\\n                }\\r\\n            });\\r\\n        });\\r\\n    } catch (e) {\\r\\n        showLoading('兄弟，你确认你有收藏吗，快去收藏一个视频~');\\r\\n    }\\r\\n} else {\\r\\n    laterViews = JSON.parse(fetch(\\\"https://api.bilibili.com/x/v2/history/toview/web?jsonp=jsonp\\\", {\\r\\n        headers: {\\r\\n            \\\"Cookie\\\": cookie\\r\\n        }\\r\\n    })).data;\\r\\n    count = laterViews.count;\\r\\n    d.push({\\r\\n        title: \\\"共有\\\" + count + \\\"条待看视频记录\\\",\\r\\n        url: \\\"hiker://empty\\\",\\r\\n        col_type: \\\"text_center_1\\\"\\r\\n    });\\r\\n    laterViews.list.forEach(list => {\\r\\n        d.push({\\r\\n            title: list.title,\\r\\n            img: list.pic + \\\"@Referer=\\\",\\r\\n            col_type: 'movie_1_left_pic',\\r\\n            url: \\\"hiker://page/video\\\",\\r\\n            desc: 'UP:' + list.owner.name + '\\\\n' + list.desc,\\r\\n            extra: {\\r\\n                aid: list.aid,\\r\\n                mid: list.owner.mid\\r\\n            }\\r\\n        });\\r\\n    });\\r\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"足迹\",\"path\":\"track\",\"rule\":\"var nextInfo = {};\\n\\nif (page == 1) {\\n\\n    histories = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/history/cursor?max=0&view_at=0&business=\\\", {\\n\\n        headers: {\\n\\n            \\\"Cookie\\\": cookie\\n\\n        }\\n\\n    })).data;\\n\\n    nextInfo.max = histories.cursor.max;\\n\\n    nextInfo.view_at = histories.cursor.view_at;\\n\\n    nextInfo.business = histories.cursor.business;\\n\\n} else {\\n\\n    histories = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/history/cursor?max=\\\" + storage0.getMyVar(JSON.stringify(page)).max + \\\"&view_at=\\\" + storage0.getMyVar(JSON.stringify(page)).view_at + \\\"&business=\\\" + storage0.getMyVar(JSON.stringify(page)).business, {\\n\\n        headers: {\\n\\n            \\\"Cookie\\\": cookie\\n\\n        }\\n\\n    })).data;\\n\\n    nextInfo.max = histories.cursor.max;\\n\\n    nextInfo.view_at = histories.cursor.view_at;\\n\\n    nextInfo.business = histories.cursor.business;\\n\\n}\\n\\nstorage0.putMyVar(JSON.stringify(page + 1), nextInfo);\\n\\nhistories.list.forEach(list => {\\n\\n    viewTime=pbtime = $.require(\\\"hiker://page/api\\\").timeConvert(list.view_at);\\n\\n    if (list.history.business == 'article') {\\n\\n        // 专栏文章\\n\\n        d.push({\\n\\n            title: list.show_title==''?list.title:list.show_title,\\n\\n            img: list.covers[0] + \\\"@Referer=\\\",\\n\\n            col_type: 'movie_1_left_pic',\\n\\n            url: \\\"hiker://page/articleDetail\\\",\\n\\n            desc: (list.author_name==''?viewTime:'UP:' + list.author_name+'\\\\n' )+ viewTime,\\n\\n            extra: {\\n\\n                id: list.history.oid,\\n\\n            }\\n\\n        });\\n\\n    } else if(list.history.business == 'article-list'){\\n\\n        // 文章列表？（反正id存放位置不一样）\\n\\n        d.push({\\n\\n            title: list.show_title==''?list.title:list.show_title,\\n\\n            img: list.covers[0] + \\\"@Referer=\\\",\\n\\n            col_type: 'movie_1_left_pic',\\n\\n            url: \\\"hiker://page/articleDetail\\\",\\n\\n            desc: (list.author_name==''?viewTime:'UP:' + list.author_name+'\\\\n' )+ viewTime,\\n\\n            extra: {\\n\\n                id: list.history.cid,\\n\\n            }\\n\\n        });\\n\\n    }else if(list.history.business == 'pgc'){\\n\\n        // 系列剧集（单集）\\n\\n        d.push({\\n\\n            title: list.show_title==''?list.title:list.show_title,\\n\\n            img: list.cover + \\\"@Referer=\\\",\\n\\n            col_type: 'movie_1_left_pic',\\n\\n            url: \\\"hiker://page/filmerji#immersiveTheme#\\\",\\n\\n            desc: (list.author_name==''?list.tag_name+'\\\\t\\\\t'+list.new_desc+'\\\\n'+viewTime:'UP:' + list.author_name+'\\\\n'+viewTime),\\n\\n            extra: {\\n\\n                ep_id:list.history.epid\\n\\n            }\\n\\n        });\\n\\n    }else {\\n\\n        // 普通video\\n\\n        d.push({\\n\\n            title: list.show_title==''?list.title:list.show_title,\\n\\n            img: list.cover + \\\"@Referer=\\\",\\n\\n            col_type: 'movie_1_left_pic',\\n\\n            url: \\\"hiker://page/video\\\",\\n\\n            desc: (list.author_name==''?list.tag_name+'\\\\t\\\\t'+list.new_desc+'\\\\n'+viewTime:'UP:' + list.author_name+'\\\\n'+viewTime),\\n\\n            extra: {\\n\\n                aid: list.history.oid,\\n\\n            }\\n\\n        });\\n\\n    }\\n\\n});\\n\\n\\n\"},{\"col_type\":\"movie_3\",\"name\":\"动态\",\"path\":\"latetNews\",\"rule\":\"d.push({\\n\\n    col_type: 'line_blank'\\n\\n});\\n\\nlatenews=$.require(\\\"hiker://page/api\\\").getDynamicData('myHome');\\n\\neval($.require(\\\"hiker://page/api\\\").showDynamicData());\\n\\n\"},{\"col_type\":\"movie_3\",\"name\":\"专栏列表\",\"path\":\"acticleList\",\"rule\":\"js:\\n\\nvar d=[];\\n\\npage=MY_PAGE;\\n\\nupMid = MY_PARAMS.mid + \\\"\\\";\\n\\narticleList=$.require(\\\"hiker://page/api\\\").getUserArticle(upMid,page);\\n\\narticleNum=articleList.count;\\n\\nif (articleNum==undefined) {\\n\\n    d.push({\\n\\n        title: '这up没有专栏文章',\\n\\n        url: \\\"hiker://empty\\\",\\n\\n        col_type: \\\"text_center_1\\\",\\n\\n    });\\n\\n}else{\\n\\n    maxPage = Math.ceil(articleNum / articleList.ps);\\n\\n    if (page <= maxPage) {\\n\\n        d.push({\\n\\n            title: '当前:第' + articleList.pn + '页\\\\t\\\\t\\\\t共有' + maxPage + '页,' + articleNum + '条数据',\\n\\n            url: \\\"hiker://empty\\\",\\n\\n            col_type: \\\"text_center_1\\\",\\n\\n        });\\n\\n        articleList.articles.forEach(list => {\\n\\n            pbtime=$.require(\\\"hiker://page/api\\\").timeConvert(list.publish_time);\\n\\n            d.push({\\n\\n                title: list.title,\\n\\n                img: list.banner_url==''? (list.image_urls+ '@Referer='):(list.banner_url+ '@Referer='),\\n\\n                desc: '‘‘’’<small>'+list.stats.view+'看过\\\\t\\\\t'+list.stats.like+'喜欢\\\\t\\\\t'+list.stats.favorite+'收藏\\\\n' + pbtime+'</small>',\\n\\n                col_type: 'movie_1_left_pic',\\n\\n                url: \\\"hiker://page/articleDetail\\\",\\n\\n                extra: {\\n\\n                    // 专栏文章id\\n\\n                    id: list.id\\n\\n                }\\n\\n            });\\n\\n        });\\n\\n    }\\n\\n}\\n\\nsetResult(d);\\n\\n\"},{\"col_type\":\"movie_3\",\"name\":\"专栏文章X5\",\"path\":\"articleDetail\",\"rule\":\"js:\\n\\nvar d = [];\\n\\npage = MY_PAGE;\\n\\ncvid = MY_PARAMS.id + \\\"\\\";\\n\\nd.push({\\n\\n    url: \\\"https://www.bilibili.com/read/cv\\\"+cvid,\\n\\n    col_type: \\\"x5_webview_single\\\",\\n\\n    desc: \\\"100%&&float\\\",\\n\\n    extra: {\\n\\n        canBack: true\\n\\n    }\\n\\n})\\n\\nsetResult(d);\\n\\n\"},{\"col_type\":\"movie_3\",\"name\":\"综合热门\",\"path\":\"hotVideo\",\"rule\":\"let res = JSON.parse(request(\\\"https://api.bilibili.com/x/web-interface/popular?pn=\\\" + MY_PAGE, {\\n\\n    headers: {\\n\\n        Cookie: JSON.parse(request(\\\"hiker://files/rules/cy/bili.txt\\\")).cookie\\n\\n    }\\n\\n})).data\\n\\nres.list.forEach(item => {\\n\\n    d.push({\\n\\n        title: item.title,\\n\\n        img: item.pic+ \\\"@Referer=\\\",\\n\\n        url: \\\"hiker://page/video\\\",\\n\\n        desc: item.pub_location,\\n\\n        col_type: \\\"movie_2\\\",\\n\\n        extra: {\\n\\n            \\\"aid\\\": item.aid,\\n\\n            \\\"cid\\\": item.cid,\\n\\n        }\\n\\n    })\\n\\n})\\n\\n\\n\"},{\"name\":\"哔哩最新章节\",\"path\":\"getUpdate\",\"rule\":\"if (MY_PARAMS.season_id) {\\n    season_id = MY_PARAMS.season_id + \\\"\\\";\\n    Data = JSON.parse(fetch('https://api.bilibili.com/pgc/view/web/season?season_id=' + season_id)).result;\\n} else {\\n    Data = JSON.parse(fetch('https://api.bilibili.com/pgc/view/web/season?ep_id=' + MY_PARAMS.ep_id)).result;\\n}\\n追剧日历 = Data.new_ep.desc;\\n更新进度 = Data.new_ep.title;\\n更新状态 = 追剧日历.match(/完结|期待/) ? 追剧日历 : '更新至' + (更新进度.match(/[\\\\u4e00-\\\\u9fa5]/) ? 更新进度 : ('第' + (更新进度 == '' ? 0 : 更新进度)) + '话')\\nsetResult(更新状态);\"},{\"name\":\"up合集视频\",\"path\":\"collectionViedo\",\"rule\":\"js:\\nvar d = [];\\n// 预处理\\nputMyVar('功能折叠', '关');\\nimgLink = storage0.getMyVar('图标');\\naid = MY_PARAMS.aid + \\\"\\\";\\n// bvid = MY_PARAMS.bvid + \\\"\\\";\\n// mid = MY_PARAMS.mid + \\\"\\\";\\ntry {\\n    //获取视频分P信息\\n    var p = JSON.parse(fetch(\\\"https://api.bilibili.com/x/web-interface/view?aid=\\\" + aid)).data;\\n    // 合集信息\\n    var videoData = p.ugc_season;\\n    setPageTitle(videoData.title);\\n    setPagePicUrl(videoData.cover + '@Referer=');\\n    d.push({\\n        title: videoData.title,\\n        desc:videoData.intro,\\n        img: videoData.cover + '@Referer=',\\n        url: $('#noLoading##noHistory#').lazyRule((intro) => {\\n            return $('hiker://empty?fypage').rule((intro) => {\\n                let d = [];\\n                d.push({\\n                    title: intro,\\n                    col_type: \\\"long_text\\\",\\n                })\\n                setResult(d);\\n            }, intro)\\n        }, videoData.intro),\\n        col_type: \\\"pic_1\\\",\\n        extra: {\\n            longClick: [{\\n                title: 'dm盒子', js: $.toString(() => {\\n                    return 'hiker://page/setting#noHistory#?rule=dm盒子';\\n                })\\n            }, {\\n                title: '弹幕控制', js: $.toString(() => {\\n                    if (getItem('isOverrideSave', 'false') == 'true') {\\n                        setItem('isOverrideSave', 'false');\\n                        return 'toast://弹幕将不受dm盒子参数控制';\\n                    } else {\\n                        setItem('isOverrideSave', 'true');\\n                        return 'toast://弹幕将受到dm盒子参数控制';\\n                    }\\n                })\\n            }]\\n        }\\n    }, {\\n        title: '<font color=\\\"blue\\\">' + p.owner.name + '</font>',\\n        url: \\\"hiker://page/upHome\\\",\\n        img: p.owner.face + \\\"@Referer=\\\",\\n        col_type: \\\"avatar\\\",\\n        desc: '<small><small>共有' + videoData.ep_count + '条视频数据</small></small>',\\n        extra: {\\n            mid: p.owner.mid,\\n            title: p.owner.name,\\n            face: p.owner.face\\n        }\\n    }, {\\n        col_type: 'line'\\n    });\\n    var index = 1;\\n    storage0.putVar('videoSections', videoData.sections);\\n    videoData.sections.forEach(el => {\\n        d.push({\\n            title: '📁' + el.title,\\n            url: $('#noLoading##noHistory#').lazyRule((index) => {\\n                if (getMyVar('isFold_'+index, 'y') == 'y') {\\n                    putMyVar('isFold_'+index, 'n');\\n                    deleteItemByCls('section' + index + '-part');\\n                    return 'toast://已折叠';\\n                } else {\\n                    putMyVar('isFold_'+index, 'y');\\n                    videoSections = storage0.getVar('videoSections');\\n                    sectionPartList = [];\\n                    videoSections[index - 1].episodes.forEach(item => {\\n                        aid = item.aid;\\n                        cid = item.cid;\\n                        stat = item.arc.stat;\\n                        sectionPartList.push({\\n                            title: '““””\\\\t\\\\t\\\\t<small></font>▶︎' + item.title + '\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t</font></small><small><small><font color=gray>播放量：' + stat.view + '\\\\t\\\\t\\\\t弹幕：' + stat.danmaku + '\\\\t\\\\t\\\\t喜欢：' + stat.like + '</font></small></small>',\\n                            url: $().lazyRule((aid, cid, qn) => {\\n                                return $.require(\\\"hiker://page/api\\\").biliLazy(aid, cid, qn).replace(/;/g, \\\"；；\\\");\\n                            }, aid + \\\"\\\", cid + \\\"\\\", '116'),\\n                            col_type: \\\"text_1\\\",\\n                            extra: { lineVisible: false, cls: 'section' + index + '-part',id:'aid-'+aid+'|cid-'+cid }\\n                        })\\n                    });\\n                    addItemAfter('Section' + index, sectionPartList);\\n                    return 'toast://已展开';\\n                }\\n            }, index),\\n            col_type: 'text_1',\\n            extra: { id: 'Section' + index }\\n        });\\n        el.episodes.forEach(item => {\\n            aid = item.aid;\\n            cid = item.cid;\\n            stat = item.arc.stat;\\n            d.push({\\n                title: '““””\\\\t\\\\t\\\\t<small></font>▶︎' + item.title + '\\\\n\\\\t\\\\t\\\\t\\\\t\\\\t</font></small><small><small><font color=gray>播放量：' + stat.view + '\\\\t\\\\t\\\\t弹幕：' + stat.danmaku + '\\\\t\\\\t\\\\t喜欢：' + stat.like + '</font></small></small>',\\n                url: $().lazyRule((aid, cid, qn) => {\\n                    return $.require(\\\"hiker://page/api\\\").biliLazy(aid, cid, qn).replace(/;/g, \\\"；；\\\");\\n                }, aid + \\\"\\\", cid + \\\"\\\", '116'),\\n                col_type: \\\"text_1\\\",\\n                extra: { lineVisible: false, cls: 'section' + index + '-part',id:'aid-'+aid+'|cid-'+cid }\\n            })\\n        });\\n        index++;\\n    })\\n} catch (e) {\\n    log(e);\\n    d.push({\\n        title: '页面走丢了...',\\n        img: 'https://i0.hdslb.com/bfs/general/f7b667011a46615732c701f4bb1d07f793f8d1df.png@Referer=',\\n        url: 'hiker://empty',\\n        desc: '大概率视频被封禁，或者up已跑路~',\\n        col_type: \\\"pic_1\\\"\\n    });\\n}\\nsetResult(d);\\n\"},{\"name\":\"图标下载\",\"path\":\"saveLocal\",\"rule\":\"$.exports.saveLocal = () => {\\n    const base64ToHex = (base64Str) => {\\n        // 删除前缀并解码Base64字符串\\n        var binaryStr = window0.atob(base64Str.split(',')[1]);\\n\\n        // 转换为16进制字符串\\n        var hexStr = '';\\n        for (var i = 0; i < binaryStr.length; i++) {\\n            var hex = binaryStr.charCodeAt(i).toString(16);\\n            hexStr += (hex.length === 2 ? hex : '0' + hex);\\n        }\\n        return hexStr;\\n    };\\n    showLoading(\\\"图标初始化中...\\\");\\n    var tubiao = {};\\n    try {\\n        // 剪贴板线路\\n        html = request('https://netcut.cn/p/a1fcf0d3b0a27f13');\\n        data = html.match(/{.*note_content.*updated_at.*}/)[0];\\n        eval('tubiao =' + JSON.parse(data).note_content);\\n    } catch (e) {\\n        log('剪贴板出错,切换托管线路');\\n        route = [\\n            'https://gitcode.net/qq_23847819/hiker/-/raw/master/tubiao.json',\\n            'https://gitea.com/cy/hiker/raw/commit/be2160c6a01db873d9f9681ba7e86eebfa118d86/tubiao.json',\\n            'https://raw.codehub.cn/p/hiker/d/tubiao/git/raw/master/tubiao.json?token=GGdlIuVGqY3b3LydIowrksbUBCfMyx2fF31WUZeo4m',\\n            'https://gitee.com/mxxl-cy/hiker/raw/master/tubiao.json'\\n        ];\\n        for (let i = 0; i < route.length; i++) {\\n            try {\\n                eval('tubiao =' + request(route[i]));\\n                if (tubiao[\\\"五大\\\"] && tubiao[\\\"哔哩\\\"]) {\\n                    break;\\n                } else {\\n                    log('线路：' + tubiao[i] + '被墙了...');\\n                }\\n            } catch (e) {\\n                log('线路：' + tubiao[i] + '出错了...');\\n            }\\n        }\\n    }\\n    try {\\n        var wuda = tubiao[\\\"五大\\\"];\\n        var bili = tubiao[\\\"哔哩\\\"];\\n        var index = 0;\\n        for (let item in wuda) {\\n            writeHexFile(`hiker://files/rules/cy/tubiao/${item}.svg`, base64ToHex(wuda[item]));\\n            log(`初始化第${index++}个图标:${item}...`);\\n        }\\n        for (let item in bili) {\\n            writeHexFile(`hiker://files/rules/cy/bili_pic/${item}.png`, base64ToHex(bili[item]));\\n            log(`初始化第${index++}个图标:${item}...`);\\n        }\\n        showLoading('图标初始化完成：共计' + index + '个图标');\\n        hideLoading();\\n    } catch (e) {\\n        showLoading('图标初始化失败');\\n        log('图标初始化失败:' + e);\\n        hideLoading();\\n    }\\n\\n};\\n\"}]","proxy":"","icon":"hiker://files/rules/cy/tubiao/bilibili.svg"}