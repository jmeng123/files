{"last_chapter_rule":"","pageList":[{"col_type":"text_1","name":"Unicode","path":"unicode","rule":"js:\nlet unicode = {};\nunicode.encode = function(obj) {\n    let encode = escape(obj.decText.replace(/%u/g, \"\\\\u\"));\n    return encode;\n}\nunicode.decode = function(obj) {\n    let decode = unescape(obj.encText.replace(/\\\\u/g, \"%u\"));\n    return decode;\n}\n$.exports.unicode = unicode"},{"col_type":"text_1","name":"Base64","path":"base64","rule":"js:\nlet base64 = {};\nbase64.encode = function(obj) {\n    // let encode = encodeURIComponent(base64Encode(obj.decText));\n    let encode = base64Encode(obj.decText);\n    return encode;\n}\nbase64.decode = function(obj) {\n    let decode = decodeURIComponent(base64Decode(obj.encText));\n    return decode;\n}\n$.exports.base64 = base64"},{"col_type":"text_1","name":"ASCII","path":"ascii","rule":"js:\nlet ascii = {};\nascii.unicode1 = function(str) {\n    var value = '';\n    for (var i = 0; i < str.length; i++) {\n        value = value + '&#' + str.charCodeAt(i) + ';';\n    }\n    return value;\n}\nascii.reconvert = function(str) {\n    str = str.replace(/(\\\\u)(\\w{1,4})/gi, function($0) {\n        return (String.fromCharCode(parseInt((escape($0).replace(/(%5Cu)(\\w{1,4})/g, \"$2\")), 16)));\n    });\n    str = str.replace(/(&#x)(\\w{1,4});/gi, function($0) {\n        return String.fromCharCode(parseInt(escape($0).replace(/(%26%23x)(\\w{1,4})(%3B)/g, \"$2\"), 16));\n    });\n    str = str.replace(/(&#)(\\d{1,6});/gi, function($0) {\n        return String.fromCharCode(parseInt(escape($0).replace(/(%26%23)(\\d{1,6})(%3B)/g, \"$2\")));\n    });\n\n    return str;\n}\n// $.exports.unicode1 = unicode1;\n// $.exports.reconvert = reconvert;\nascii.encode = function(obj) {\n    let encode = this.unicode1(obj.decText);\n    return encode;\n}\nascii.decode = function(obj) {\n    let decode = this.reconvert(obj.encText);\n    return decode;\n}\n$.exports.ascii = ascii;"},{"col_type":"text_1","name":"获取分类头部","path":"classicHeader","rule":"js:\nlet d = [];\nlet selectColor = '#C04A2F'\n// 暗橙 E38C4A\n\nfunction putKeyIntoMap(key, value) {\n    const keyMap = JSON.parse(getVar((getVar(\"ClassicHeader.id\", \"classic\")+\"_all_key_Map\"), \"{}\"));\n    keyMap[key] = value;\n    putVar((getVar(\"ClassicHeader.id\", \"classic\") + \"_all_key_Map\"), JSON.stringify(keyMap));\n}\n\nfunction getHeaderFromJSONObject(obj) {\n    for (let key in obj) {\n        d.push({\n            title: key == getVar(getVar(\"ClassicHeader.id\", \"classic\"), Object.keys(obj)[0]) ? \"<b>““””<font color='\" + selectColor +\"'>\" + key + \"</font></b>\" : key,\n            url: $(\"#noLoading#\").lazyRule((key) => {\n                putVar(getVar(\"ClassicHeader.id\", \"classic\"), key);\n                putVar((getVar(\"ClassicHeader.id\", \"classic\") + \"_cur_index\"), key);\n                refreshPage(false);\n                return \"hiker://empty\"\n            }, key),\n            col_type: \"scroll_button\"\n        });\n    }\n    d.push({\n        col_type: \"blank_block\"\n    });\n    let key = getVar(getVar(\"ClassicHeader.id\", \"classic\"), Object.keys(obj)[0]);\n    putVar((getVar(\"ClassicHeader.id\", \"classic\") + \"_cur_index\"), key);\n    getNextHeaderFromJSONArray(key, obj[key]);\n    return d;\n}\n\nfunction getNextHeaderFromJSONArray(key, array) {\n    if (array == undefined || array.length == 0) {\n        return;\n    }\n    let nextHeader = {};\n    let defaultValue = \"\";\n    defaultValue = array[0];\n    if (Object.prototype.toString.call(array[0]) === '[object Object]') {\n        defaultValue = Object.keys(array[0])[0];\n    }\n    putKeyIntoMap((getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key), getVar((getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key), defaultValue))\n    putVar((getVar(\"ClassicHeader.id\", \"classic\") + \"_cur_index\"), key + \"@@\" + getVar((getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key), defaultValue));\n    for (let value of array) {\n        if (Object.prototype.toString.call(value) === '[object Object]') {\n            // log(\"valueKeys: \"+JSON.stringify(Object.keys(value)[0]))\n            let valueKey = Object.keys(value)[0];\n            d.push({\n                title: valueKey == getVar((getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key), defaultValue) ? \"<b>““””<font color='\" + selectColor +\"'>\" + valueKey + \"</font></b>\" : valueKey,\n                url: $(\"#noLoading#\").lazyRule((valueKey, key) => {\n                    function putKeyIntoMap(key, value) {\n                        const keyMap = JSON.parse(getVar((getVar(\"ClassicHeader.id\", \"classic\") + \"_all_key_Map\"), \"{}\"));\n                        keyMap[key] = value;\n                        putVar(getVar(\"ClassicHeader.id\", \"classic\") + \"_all_key_Map\", JSON.stringify(keyMap));\n                    }\n                    putVar(getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key, valueKey);\n                    putVar(getVar(\"ClassicHeader.id\", \"classic\") + \"_cur_index\", key + \"@@\" + valueKey);\n                    putKeyIntoMap(getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key, getVar(getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key, \"defaultValue\"))\n                    refreshPage(false);\n                    return \"hiker://empty\"\n                }, valueKey, key),\n                col_type: \"scroll_button\"\n            });\n            nextHeader[valueKey] = value[valueKey];\n        } else {\n            d.push({\n                title: value == getVar(getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key, defaultValue) ? \"<b>““””<font color='\" + selectColor +\"'>\" + value + \"</font></b>\" : value,\n                url: $(\"#noLoading#\").lazyRule((value, key) => {\n                    function putKeyIntoMap(key, value) {\n                        const keyMap = JSON.parse(getVar(getVar(\"ClassicHeader.id\", \"classic\") + \"_all_key_Map\", \"{}\"));\n                        keyMap[key] = value;\n                        putVar(getVar(\"ClassicHeader.id\", \"classic\") + \"_all_key_Map\", JSON.stringify(keyMap));\n                    }\n                    putVar(getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key, value);\n                    putKeyIntoMap(getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key, getVar(getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key, \"defaultValue\"))\n                    putVar(getVar(\"ClassicHeader.id\", \"classic\") + \"_cur_index\", key + \"@@\" + value);\n                    refreshPage(false);\n                    return \"hiker://empty\"\n                }, value, key),\n                col_type: \"scroll_button\"\n            });\n        }\n    }\n\n    d.push({\n        col_type: \"blank_block\"\n    });\n    if (nextHeader !== undefined && nextHeader.length != 0) {\n        getNextHeaderFromJSONArray(key + \"@@\" + getVar(getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key, defaultValue), nextHeader[getVar(getVar(\"ClassicHeader.id\", \"classic\") + \"@@\" + key, defaultValue)]);\n    }\n}\n\nlet header = {\n    /**\n     * 可自定义当前分类头部 id（其实没啥用，就是为了调试不同规则区分一下而已）\n     */\n    setId: function(id) {\n\t      putVar(\"ClassicHeader.id\", id)\n    },\n    getId: function() {\n\t      return getVar(\"ClassicHeader.id\", \"classic\");\n    },\n    /**\n     * 获取分类头部，返回视界 setResult 用的数组\n     */\n    get: function(obj) {\n        let result = getHeaderFromJSONObject(obj);\n        //log(\"【子页面】\" + JSON.stringify(result))\n        return result;\n    },\n    /**\n      * 页面关闭时需要注册的生命周期，引入依赖后在 addListener 中调用即可\n      * 例：\n         const { header } = $.require(\"hiker://page/classicHeader\");\n         addListener(\"onClose\", $.toString((header) => {\n          header.onClose();\n        }, header));\n      */\n    onClose: function() {\n        // putVar(getVar(\"ClassicHeader.id\", \"classic\") + \"\", \"编码\");\n        // putVar(getVar(\"ClassicHeader.id\", \"classic\") + \"@@编码\", \"佛曰\");\n        let allKeyArr = Object.keys(JSON.parse(getVar(getVar(\"ClassicHeader.id\", \"classic\") + \"_all_key_Map\", \"{}\")));\n        for (let i in allKeyArr) {\n            clearVar(allKeyArr[i]);\n            // log(\"【清理后】\"+ allKeyArr[i] + \": \"+JSON.stringify(getVar(allKeyArr[i], \"\")))\n        }\n        clearVar(getVar(\"ClassicHeader.id\", \"classic\"))\n        clearVar(getVar(\"ClassicHeader.id\", \"classic\") + \"_all_key_Map\")\n        clearVar(\"ClassicHeader.id\")\n    },\n    /**\n     * 获取当前已选多级分类，返回的数据格式为：一级分类@@二级分类@@...，可自行做映射获取 url\n     */\n    getCurrentIndex: function() {\n        return getVar(getVar(\"ClassicHeader.id\", \"classic\") + \"_cur_index\", \"\");\n    }\n}\n$.exports.header = header"},{"col_type":"text_1","name":"编码类页面","path":"encode","rule":"js:\nfunction setEncodePage(d, obj) {\n    d.push({\n        title: \"编码\",\n        desc: \"请输入原文\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getVar(\"decode-text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putVar(\"decode-text\",input)'\n        },\n        url: $.toString((obj) => {\n            obj.decText = input;\n            // log(\"obj.decText: \" + obj.decText)\n            var encode = \"\";\n            var tool = {};\n            for (let key in obj.tools) {\n                // log(obj.type)\n                let type = obj.type.split(\"@@\").pop()\n                if (type == key) {\n                    tool = obj.tools[key];\n                    break;\n                }\n            }\n            encode = tool.encode(obj);\n            // log(\"encode: \" + encode)\n            putVar('encode-text', encode);\n            refreshPage();\n            return 'toast://加密成功';\n        }, obj),\n    });\n\n    d.push({\n        title: \"解码\",\n        desc: \"请输入密文\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getVar(\"encode-text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putVar(\"encode-text\",input)'\n        },\n        url: $.toString((obj) => {\n            obj.encText = input;\n            // log(\"obj.encText: \" + obj.encText)\n            var decode = \"\";\n            var tool = {};\n            for (let key in obj.tools) {\n                let type = obj.type.split(\"@@\").pop()\n                if (type == key) {\n                    tool = obj.tools[key];\n                    break;\n                }\n            }\n            decode = tool.decode(obj);\n            putVar('decode-text', decode);\n            refreshPage();\n            return 'toast://解密成功';\n        }, obj),\n    });\n\n    // https://gitee.com/CherishRx/imagewarehouse/raw/master/image/32d29e2fbcdf8d83071deec7f6aa4b7c.png\n    let cpImgUrl = \"https://iconfont.tyrantg.com/api/illustrate.svg?svg_string=%3Csvg%20class%3D%22icon%22%20style%3D%22width%3A%201em%3Bheight%3A%201em%3Bvertical-align%3A%20middle%3Bfill%3A%20currentColor%3Boverflow%3A%20hidden%3B%22%20viewBox%3D%220%200%201024%201024%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M866.133333%20919.466667h-405.333333c-29.866667%200-53.333333-23.466667-53.333333-53.333334v-618.666666c0-29.866667%2023.466667-53.333333%2053.333333-53.333334h405.333333c29.866667%200%2053.333333%2023.466667%2053.333334%2053.333334v618.666666c0%2029.866667-23.466667%2053.333333-53.333334%2053.333334z%22%20fill%3D%22%2369C0FF%22%20%2F%3E%3Cpath%20d%3D%22M770.133333%20428.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333zM770.133333%20556.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333zM770.133333%20684.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333z%22%20fill%3D%22%23FFFFFF%22%20%2F%3E%3Cpath%20d%3D%22M567.466667%20834.133333h-405.333334c-29.866667%200-53.333333-23.466667-53.333333-53.333333v-618.666667c0-29.866667%2023.466667-53.333333%2053.333333-53.333333h405.333334c29.866667%200%2053.333333%2023.466667%2053.333333%2053.333333v618.666667c0%2029.866667-23.466667%2053.333333-53.333333%2053.333333z%22%20fill%3D%22%231890FF%22%20%2F%3E%3Cpath%20d%3D%22M471.466667%20343.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334zM471.466667%20471.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334zM471.466667%20599.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334z%22%20fill%3D%22%23FFFFFF%22%20%2F%3E%3C%2Fsvg%3E\"\n    let clearImgUrl = \"https://iconfont.tyrantg.com/api/illustrate.svg?svg_string=%3Csvg%20class%3D%22icon%22%20style%3D%22width%3A%201em%3Bheight%3A%201em%3Bvertical-align%3A%20middle%3Bfill%3A%20currentColor%3Boverflow%3A%20hidden%3B%22%20viewBox%3D%220%200%201024%201024%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M179.2%20588.8h710.4c25.6%200%2032-19.2%2025.6-38.4L832%20364.8c-12.8-19.2-38.4-38.4-64-38.4H620.8V64c0-25.6-19.2-44.8-44.8-44.8H492.8c-19.2%200-38.4%2019.2-38.4%2044.8v262.4H300.8c-25.6%200-51.2%2019.2-57.6%2038.4L153.6%20550.4c-6.4%2019.2%200%2038.4%2025.6%2038.4m691.2%2064H217.6c6.4%2064%200%20147.2-51.2%20198.4-76.8%2064-51.2%20140.8%206.4%20166.4h108.8c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h83.2c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h102.4c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192H704c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h102.4s70.4-25.6%2057.6-102.4c-19.2-115.2-25.6-179.2-44.8-262.4%22%20fill%3D%22%237367D1%22%20%2F%3E%3C%2Fsvg%3E\"\n\n    d.push({\n        title: '清空原文',\n        img: clearImgUrl,\n        url: \"hiker://empty#noLoading#\" + \"@lazyRule=.js:putVar('decode-text', '');refreshPage();'toast://清空成功'\",\n        col_type: 'icon_2'\n    });\n\n    d.push({\n        title: '清空密文',\n        img: clearImgUrl,\n        url: \"hiker://empty#noLoading#\" + \"@lazyRule=.js:putVar('encode-text', '');refreshPage();'toast://清空成功'\",\n        col_type: 'icon_2'\n    });\n\n    d.push({\n        title: '复制原文',\n        img: cpImgUrl,\n        url: $(\"hiker://empty#noLoading#\").lazyRule(() => {\n            var dec = getVar(\"decode-text\");\n            if (dec) {\n                return \"copy://\" + dec;\n            } else {\n                return \"toast://内容为空！\"\n            }\n        }),\n        col_type: 'icon_2'\n    });\n\n    d.push({\n        title: '复制密文',\n        img: cpImgUrl,\n        url: $(\"hiker://empty#noLoading#\").lazyRule(() => {\n            var enc = getVar(\"encode-text\");\n            if (enc) {\n                return \"copy://\" + enc;\n            } else {\n                return \"toast://内容为空！\"\n            }\n        }),\n        col_type: 'icon_2'\n    });\n}\n$.exports.setEncodePage = setEncodePage"},{"col_type":"text_1","name":"加密类页面","path":"crypto","rule":"js:\n// const { ConfigMapping } = $.require(\"hiker://page/aes\");\n// log(JSON.stringify(Object.keys(Crypto.ConfigMapping)))\nconst { buildAESUi } = $.require(\"hiker://page/aesui\");\nconst { buildRSAUi } = $.require(\"hiker://page/rsaui\");\nfunction setCryptoPage(d, obj) {\n    if (obj.type.includes(\"对称加密\") && !obj.type.includes(\"非对称加密\")) {\n        buildAESUi(d, obj)\n    } else if (obj.type.includes(\"非对称加密\")) {\n        buildRSAUi(d, obj)\n    }\n}\n$.exports.setCryptoPage = setCryptoPage"},{"col_type":"text_1","name":"AES","path":"aes","rule":"js:\neval(getCryptoJS());\nlet Crypto = {\n    ConfigMapping: {\n        encType: {\n            \"AES\": CryptoJS.AES.encrypt,\n            \"DES\": CryptoJS.DES.encrypt,\n            \"3DES\": CryptoJS.TripleDES.encrypt,\n        },\n        decType: {\n            \"AES\": CryptoJS.AES.decrypt,\n            \"DES\": CryptoJS.DES.decrypt,\n            \"3DES\": CryptoJS.TripleDES.decrypt,\n        },\n        mode: {\n            \"CBC\": CryptoJS.mode.CBC,\n            \"ECB\": CryptoJS.mode.ECB,\n            \"CFB\": CryptoJS.mode.CFB,\n            \"CTR\": CryptoJS.mode.CTR,\n            \"OFB\": CryptoJS.mode.OFB\n        },\n        pad: {\n            \"Pkcs7\": CryptoJS.pad.Pkcs7,\n            \"ZeroPadding\": CryptoJS.pad.ZeroPadding,\n            \"NoPadding\": CryptoJS.pad.NoPadding,\n            \"Iso97971\": CryptoJS.pad.Iso97971,\n            \"AnsiX923\": CryptoJS.pad.AnsiX923,\n            // \"Iso10126\": CryptoJS.pad.Iso10126,\n        },\n        encode: {\n            \"Base64\": \"Base64\",\n            \"HEX\": \"HEX\"\n        },\n        blockSize: {\n            \"AES\": {\n                \"AES-128\": 128,\n                \"AES-192\": 192,\n                \"AES-256\": 256,\n            }\n        },\n        keyEncodeType: {\n            \"UTF-8\": \"UTF-8\",\n            \"Hex\": \"Hex\",\n            \"Latin1\": \"Latin1\"\n        },\n        ivEncodeType: {\n            \"UTF-8\": \"UTF-8\",\n            \"Hex\": \"Hex\",\n            \"Latin1\": \"Latin1\"\n        }\n    },\n    config: {\n        type: {\n            key: \"crypto_type\",\n            get: function() {\n                return getVar(this.key, \"AES\");\n            },\n            set: function(newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n        mode: {\n            key: \"crypto_select_mode\",\n            get: function() {\n                return getVar(this.key, \"CBC\");\n            },\n            set: function(newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n        pad: {\n            key: \"crypto_select_pad\",\n            get: function() {\n                return getVar(this.key, \"Pkcs7\");\n            },\n            set: function(newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n        iv: {\n            key: \"crypto_input_iv\",\n            get: function() {\n                return getVar(this.key, \"\");\n            },\n            set: function(newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n        encode: {\n            key: \"crypto_output_encode\",\n            get: function() {\n                return getVar(this.key, Crypto.ConfigMapping.encode[\"Base64\"])\n            },\n            set: function(newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n        key: {\n            key: \"crypto_key\",\n            get: function() {\n                return getVar(this.key, \"\");\n            },\n            set: function(newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n        text: {\n            key: \"crypto_text\",\n            get: function() {\n                return getVar(this.key, \"\");\n            },\n            set: function(newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n        cipherText: {\n            key: \"crypto_cipher_text\",\n            get: function() {\n                return getVar(this.key, \"\");\n            },\n            set: function(newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n        blockSize: {\n            key: \"crypto_block_size\",\n            get: function() {\n                return getVar(this.key, \"AES-128\");\n            },\n            set: function(newValue) {\n                putVar(this.key, newValue);\n            }\n\n        },\n        keyEncodeType: {\n            key: \"crypto_key_encode_type\",\n            get: function() {\n                // TODO 此处不知为何 Crypto.ConfigMapping.keyEncodeType[\"UTF-8\"] 会报 Crypto undefined\n                return getVar(this.key, \"UTF-8\")\n            },\n            set: function(newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n        ivEncodeType: {\n            key: \"crypto_iv_encode_type\",\n            get: function() {\n                return getVar(this.key, \"UTF-8\")\n            },\n            set: function(newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n    },\n    onClose: function() {\n        let configKeys = Object.keys(this.config);\n        for (let confKey of configKeys) {\n            let key = this.config[confKey].key;\n            clearVar(key);\n        }\n    },\n    buildConfig: function() {\n        let mode = this.config.mode.get();\n        let pad = this.config.pad.get();\n        let iv = this.config.iv.get();\n        let conf = {};\n        conf.mode = this.ConfigMapping.mode[mode];\n        conf.padding = this.ConfigMapping.pad[pad]\n        if (mode != \"ECB\" && iv.length != 0) {\n            conf.iv = CryptoJS.enc.Utf8.parse(iv);\n            if (this.config.ivEncodeType.get() == \"Hex\") {\n                iv = iv.replace(\"[HEX]:\", \"\")\n                conf.iv = CryptoJS.enc.Hex.parse(iv);\n            } else if (this.config.ivEncodeType.get() == \"Latin1\") {\n                conf.iv = CryptoJS.enc.Latin1.parse(iv);\n            }\n        }\n        return conf\n    },\n    encryptor: function(obj) {\n        // 原文\n        let text = obj.decText;\n        if (text) {\n            let keyString = this.config.key.get()\n            let key = CryptoJS.enc.Utf8.parse(keyString);\n            if (this.config.keyEncodeType.get() == \"Hex\") {\n                keyString = keyString.replace(\"[HEX]:\", \"\")\n                key = CryptoJS.enc.Hex.parse(keyString);\n            } else if (this.config.keyEncodeType.get() == \"Latin1\") {\n                key = CryptoJS.enc.Latin1.parse(keyString);\n            }\n            try {\n                let conf = this.buildConfig()\n                let encrypted = this.ConfigMapping.encType[this.config.type.get()](text, key, conf);\n                let encode = this.config.encode.get()\n                let cipherText = encrypted.toString();\n                if (encode === 'HEX') {\n                    cipherText = CryptoJS.enc.Hex.stringify(CryptoJS.enc.Base64.parse(cipherText));\n                }\n                // 密文\n                this.config.cipherText.set(cipherText)\n                return cipherText;\n            } catch (e) {\n                log(e.message)\n                setError(e.message)\n            }\n        } else {\n            throw new Error(\"明文不能为空！\")\n        }\n    },\n    decryptor: function(obj) {\n        let text = obj.encText;\n        if (text) {\n            let encode = this.config.encode.get()\n            let cipherText;\n            if (encode === 'Base64') {\n                cipherText = text\n            } else if (encode === 'HEX') {\n                cipherText = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(text))\n            }\n            let keyString = this.config.key.get()\n            let key = CryptoJS.enc.Utf8.parse(keyString);\n            if (this.config.keyEncodeType.get() == \"Hex\") {\n                keyString = keyString.replace(\"[HEX]:\", \"\")\n                key = CryptoJS.enc.Hex.parse(keyString);\n            } else if (this.config.keyEncodeType.get() == \"Latin1\") {\n                key = CryptoJS.enc.Latin1.parse(keyString);\n            }\n            try {\n                let conf = this.buildConfig()\n                let decrypted = this.ConfigMapping.decType[this.config.type.get()](cipherText, key, conf);\n                let decryptedStr = decrypted.toString(CryptoJS.enc.Utf8);\n                if (!decryptedStr) {\n                    throw new Error(\"请检查密钥 key、偏移量 iv 以及密文是否正确！\");\n                }\n                this.config.text.set(decryptedStr)\n                return decryptedStr\n            } catch (e) {\n                throw new Error(\"解密失败！\" + e.message);\n            }\n        } else {\n            throw new Error(\"密文不能为空！\")\n        }\n    },\n    checkKey: function(obj) {\n        let key = Crypto.config.key.get();\n        if (key.length === 0) {\n            throw new Error(\"密钥 key 不能为空！\")\n        }\n        let type = Crypto.config.type.get();\n        let blockSize = 128;\n        try {\n            blockSize = Crypto.ConfigMapping[\"blockSize\"][type][Crypto.config.blockSize.get()]\n            // log(\"checkKey#blockSize:\" + blockSize)\n        } catch (e) {}\n        if (type === \"DES\") {\n            blockSize = 64;\n        }\n        if (Crypto.config.keyEncodeType.get() == \"Hex\") {\n            key = key.replace(\"[HEX]:\", \"\")\n            blockSize = blockSize * 2;\n        }\n        // 设置数据块长度\n        let keySize = key.length * 8;\n        // log(\"checkKey#keySize:\" + keySize)\n        // log(\"checkKey#keySize/8:\" + keySize/8)\n        // log(\"checkKey#blockSize:\" + blockSize)\n        // log(\"checkKey#blockSize/8:\" + blockSize / 8)\n        if (keySize < blockSize) {\n            obj.from = Crypto.config.keyEncodeType.key\n            let newKey = Crypto.fillKeys(obj, key, blockSize / 8);\n            Crypto.config.key.set(newKey)\n            // log(\"checkKey#newKey: \" + newKey)\n            // log(\"checkKey#newKey.Size: \" + newKey.length * 8)\n            throw new Error('密钥 key 长度过短，已自动 `\\\\x00` 空填充，请再次执行加/解密')\n        } else if (keySize > blockSize) {\n            // TODO 超出部分将被忽略\n            throw new Error(\"密钥 key 长度 \" + key.length + \" 过长，长度应为 \" + blockSize / 8 + \"，请自行检查，然后重新执行加/解密\")\n        } else {\n            return;\n        }\n    },\n    checkIv: function(obj) {\n        let iv = Crypto.config.iv.get();\n        let mode = Crypto.config.mode.get();\n        if (mode === 'ECB') {\n            return;\n        }\n        if (iv.length === 0) {\n            throw new Error(\"偏移量 iv 不能为空！\")\n        }\n        let type = Crypto.config.type.get();\n        let blockSize = 128;\n        if (type === 'DES' || type === '3DES') {\n            blockSize = 64;\n        }\n        if (Crypto.config.ivEncodeType.get() == \"Hex\") {\n            iv = iv.replace(\"[HEX]:\", \"\")\n            blockSize = blockSize * 2;\n        }\n        // 设置数据块长度\n        let ivSize = iv.length * 8;\n        if (ivSize < blockSize) {\n            obj.from = Crypto.config.ivEncodeType.key\n            let newIv = Crypto.fillKeys(obj, iv, blockSize / 8);\n            Crypto.config.iv.set(newIv)\n            throw new Error(\"偏移量 iv 长度过短，已自动 `\\\\x00` 空填充，请再次执行加/解密\")\n        } else if (ivSize > blockSize) {\n            throw new Error(\"偏移量 iv 长度 \" + iv.length + \" 过长，长度应为 \" + blockSize / 8 + \"，请自行检查，然后重新执行加/解密\")\n        } else {\n            return;\n        }\n    },\n    /**\n     * 密钥 `\\x00` 空填充\n     * @param {string} key 密钥\n     * @param {Number} keySize 填充长度, 值: 128, 192, 256\n     */\n    fillKeys: function(obj, key, keySize) {\n        let Tool = $.require(\"hiker://page/utiliy?rule=\" + obj.ruleTitle);\n        let encodeType = \"UTF-8\"\n        if (obj.from == Crypto.config.keyEncodeType.key) {\n            encodeType = Crypto.config.keyEncodeType.get();\n        } else if (obj.from == Crypto.config.ivEncodeType.key) {\n            encodeType = Crypto.config.ivEncodeType.get();\n        }\n        if (encodeType == \"Hex\") {\n            return \"[HEX]:\" + Tool.fillZeroPadding(key, keySize);\n        }\n        return Tool.fillNullPadding(key, keySize);\n    },\n    AES: {\n        encrypt: function(obj) {\n            Crypto.config.type.set(\"AES\")\n            // log(\"AES-Encrypt-obj:\" + JSON.stringify(obj))\n            return Crypto.encryptor(obj);\n        },\n        decrypt: function(obj) {\n            Crypto.config.type.set(\"AES\")\n            return Crypto.decryptor(obj);\n        }\n    },\n    DES: {\n        encrypt: function(obj) {\n            Crypto.config.type.set(\"DES\")\n            return Crypto.encryptor(obj);\n        },\n        decrypt: function(obj) {\n            Crypto.config.type.set(\"DES\")\n            return Crypto.decryptor(obj);\n        }\n    },\n    \"3DES\": {\n        encrypt: function(obj) {\n            Crypto.config.type.set(\"3DES\")\n            return Crypto.encryptor(obj);\n        },\n        decrypt: function(obj) {\n            Crypto.config.type.set(\"3DES\")\n            return Crypto.decryptor(obj);\n        }\n\n    },\n}\n\n$.exports = Crypto;"},{"col_type":"text_1","name":"编码类算法模板","path":"template_encode","rule":"js:\nlet template = {};\n// 编码\ntemplate.encode = function(obj) {\n    log(\"我是原文\"+ obj.decText)\n    let encode = \"原文通过加密得到的密文字符串\";\n    return encode;\n}\n// 解码\ntemplate.decode = function(obj) {\n    log(\"我是密文\"+ obj.encText)\n    let decode = \"密文通过解密得到的原文字符串\";\n    return decode;\n}\n// 导出给外部通过 require 方法使用\n$.exports.template = template"},{"col_type":"text_1","name":"AES-UI","path":"aesui","rule":"js:\nfunction buildAESUi(d, obj) {\n    let config = $.require(\"hiker://page/aes?rule=\" + obj.ruleTitle).config;\n    if (obj.type.includes(\"AES\")) {\n        config.type.set(\"AES\")\n    }\n    if (obj.type.includes(\"DES\") && !obj.type.includes(\"3DES\")) {\n        config.type.set(\"DES\")\n    }\n    if (obj.type.includes(\"3DES\")) {\n        config.type.set(\"3DES\")\n        // https://tool.lmeee.com/jiami/des3 说明：3DES数据块长度为64位，所以IV长度需要为8个字符（ECB模式不用IV），密钥长度为16或24个字符（8个字符以内则结果与DES相同），IV与密钥超过长度则截取，不足则在末尾填充'\\0'补足\n    }\n    d.push({\n        title: \"加密\",\n        desc: \"请输入明文\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getVar(\"crypto_text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putVar(\"crypto_text\",input)'\n        },\n        url: $.toString((obj) => {\n            obj.decText = input;\n            // log(\"obj.decText: \" + obj.decText)\n            let toastText = \"加密成功\";\n            var cipherText = \"\";\n            let Crypto = $.require(\"hiker://page/aes?rule=\" + obj.ruleTitle);\n            let config = Crypto.config;\n            try {\n                Crypto.checkKey(obj);\n                Crypto.checkIv(obj);\n                obj.tools[\"AES\"] = Crypto.AES;\n                obj.tools[\"DES\"] = Crypto.DES;\n                obj.tools[\"3DES\"] = Crypto[\"3DES\"];\n                var tool = {};\n                for (let key in obj.tools) {\n                    if (obj.type.includes(\"3DES\")) {\n                        tool = obj.tools[\"3DES\"];\n                        break;\n                    }\n                    if (obj.type.includes(key) && !obj.type.includes(\"3DES\")) {\n                        tool = obj.tools[key];\n                        break;\n                    }\n                }\n                cipherText = tool.encrypt(obj);\n                // log(\"cipherText: \" + cipherText)\n            } catch (e) {\n                cipherText = e.message;\n                toastText = \"加密失败\";\n            }\n            config.cipherText.set(cipherText)\n            refreshPage();\n            return 'toast://' + toastText;\n        }, obj),\n    });\n    buildConfigsUI(d, obj);\n    d.push({\n        title: \"解密\",\n        desc: \"请输入密文\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getVar(\"crypto_cipher_text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putVar(\"crypto_cipher_text\",input)'\n        },\n        url: $.toString((obj) => {\n            obj.encText = input;\n            // log(\"obj.encText: \" + obj.encText)\n            let toastText = \"解密成功\";\n            let Crypto = $.require(\"hiker://page/aes?rule=\" + obj.ruleTitle);\n            var text = \"\";\n            let config = Crypto.config;\n            try {\n                Crypto.checkKey(obj);\n                Crypto.checkIv(obj);\n                obj.tools[\"AES\"] = Crypto.AES;\n                obj.tools[\"DES\"] = Crypto.DES\n                var tool = {};\n                for (let key in obj.tools) {\n                    if (obj.type.includes(key)) {\n                        tool = obj.tools[key];\n                        break;\n                    }\n                }\n                // log(obj.encText)\n                text = tool.decrypt(obj);\n            } catch (e) {\n                text = e.message;\n                toastText = \"解密失败\";\n            }\n            config.text.set(text)\n            refreshPage();\n            return 'toast://' + toastText;\n        }, obj),\n    });\n}\n\nfunction buildConfigsUI(d, obj) {\n    let Crypto = $.require(\"hiker://page/aes?rule=\" + obj.ruleTitle);\n    let ConfigMapping = Crypto.ConfigMapping;\n    let config = Crypto.config;\n    let mappingKeys = Object.keys(ConfigMapping);\n    let modes = Object.keys(ConfigMapping[\"mode\"]);\n    // log(JSON.stringify(modes))\n    let paddings = Object.keys(ConfigMapping[\"pad\"]);\n    // log(JSON.stringify(paddings))\n    let encodes = Object.keys(ConfigMapping[\"encode\"]);\n    // log(JSON.stringify(encodes))\n    d.push({\n        title: '““””<strong><font color=\"black\">模式</font></strong>',\n        url: \"hiker://empty\",\n        col_type: \"scroll_button\"\n    })\n    for (let mode of modes) {\n        d.push({\n            title: mode == config.mode.get() ? \"‘‘\" + mode + \"’’\" : mode,\n            url: $(\"#noLoading#\").lazyRule((mode, config) => {\n                config.mode.set(mode)\n                refreshPage(false);\n                return \"hiker://empty\"\n            }, mode, config),\n            col_type: \"scroll_button\"\n        });\n    }\n    d.push({\n        col_type: \"blank_block\"\n    })\n\n    d.push({\n        title: '““””<strong><font color=\"black\">填充</font></strong>',\n        url: \"hiker://empty\",\n        col_type: \"scroll_button\"\n    })\n    for (let padding of paddings) {\n        d.push({\n            title: padding == config.pad.get() ? \"‘‘\" + padding + \"’’\" : padding,\n            url: $(\"#noLoading#\").lazyRule((padding, config) => {\n                config.pad.set(padding)\n                refreshPage(false);\n                return \"hiker://empty\"\n            }, padding, config),\n            col_type: \"scroll_button\"\n        });\n    }\n    d.push({\n        col_type: \"blank_block\"\n    })\n\n    if (config.type.get() == 'AES') {\n        let blockSizes = Object.keys(ConfigMapping[\"blockSize\"][config.type.get()]);\n        d.push({\n            title: '““””<strong><font color=\"black\">数据块</font></strong>',\n            url: \"hiker://empty\",\n            col_type: \"scroll_button\"\n        })\n        for (let blockSize of blockSizes) {\n            d.push({\n                title: blockSize == config.blockSize.get() ? \"‘‘\" + blockSize + \"’’\" : blockSize,\n                url: $(\"#noLoading#\").lazyRule((blockSize, config) => {\n                    config.blockSize.set(blockSize)\n                    refreshPage(false);\n                    return \"hiker://empty\"\n                }, blockSize, config),\n                col_type: \"scroll_button\"\n            });\n        }\n        d.push({\n            col_type: \"blank_block\"\n        })\n    }\n\n    d.push({\n        title: '““””<strong><font color=\"black\">密文编码</font></strong>',\n        url: \"hiker://empty\",\n        col_type: \"scroll_button\"\n    })\n    for (let encode of encodes) {\n        d.push({\n            title: encode == config.encode.get() ? \"‘‘\" + encode + \"’’\" : encode,\n            url: $(\"#noLoading#\").lazyRule((encode, config) => {\n                config.encode.set(encode);\n                refreshPage(false);\n                return \"hiker://empty\"\n            }, encode, config),\n            col_type: \"scroll_button\"\n        });\n    }\n    // AES 密钥 key 16/24/32 字符 => 128/192/256 bit\n    let blockSize = 128;\n    try {\n        blockSize = ConfigMapping[\"blockSize\"][config.type.get()][config.blockSize.get()]\n    } catch (e) {}\n    if (config.type.get() === \"DES\") {\n        blockSize = 64;\n    }\n    obj.blockSize = blockSize;\n    let keyLen = blockSize / 8;\n    let keyLenStr = keyLen + \" 个字符\"\n    if (config.keyEncodeType.get() == 'Hex') {\n        keyLenStr = (keyLen * 2) + \" 个十六进制字符\";\n    }\n    d.push({\n        title: \"随机 key\",\n        desc: \"密钥 key, 必须 \" + keyLenStr,\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            /*height: -1,\n            type: \"textarea\",*/\n            defaultValue: config.key.get(),\n            onChange: $.toString((config) => {\n                config.key.set(input)\n            }, config)\n        },\n        url: $.toString((obj, config) => {\n            let Tool = $.require(\"hiker://page/utiliy?rule=\" + obj.ruleTitle);\n            let keyLen = obj.blockSize / 8;\n            if (config.type.get() === 'DES') {\n                keyLen = 8;\n            }\n            let randomKey = Tool.randomString(keyLen);\n            if (config.keyEncodeType.get() == 'Hex') {\n                let hex = $.require(\"hiker://page/hex?rule=\" + obj.ruleTitle).hex;\n                obj.decText = randomKey\n                randomKey = hex.encode(obj)\n            }\n            config.key.set(randomKey);\n            refreshPage(false)\n        }, obj, config)\n    });\n\n    d.push({\n        title: '““””<strong><font color=\"black\">密钥编码</font></strong>',\n        url: $(\"#noLoading#\").lazyRule((config) => {\n            config.keyEncodeType.set(\"UTF-8\");\n            refreshPage(false);\n            return \"toast://重置成功！\";\n        }, config),\n        col_type: \"scroll_button\"\n    })\n    let keyEncodeTypes = Object.keys(ConfigMapping[\"keyEncodeType\"]);\n    // log(JSON.stringify(keyEncodeTypes))\n    for (let keyEncodeType of keyEncodeTypes) {\n        d.push({\n            title: keyEncodeType == config.keyEncodeType.get() ? \"‘‘\" + keyEncodeType + \"’’\" : keyEncodeType,\n            url: $(\"#noLoading#\").lazyRule((keyEncodeType, config, obj) => {\n                let toastText = \"hiker://empty\";\n                let hex = $.require(\"hiker://page/hex?rule=\" + obj.ruleTitle).hex;\n                let key = config.key.get();\n                let oldKeyEncodeType = config.keyEncodeType.get();\n                switch (oldKeyEncodeType) {\n                    case \"UTF-8\":\n                        if (keyEncodeType == \"Hex\") {\n                            obj.decText = key\n                            if (key.length !== 0) {\n                                config.key.set(hex.encode(obj))\n                            }\n                        }\n                        config.keyEncodeType.set(keyEncodeType);\n                        refreshPage(false);\n                        break;\n                    case \"Hex\":\n                        if (key.length == 0) {\n                            config.keyEncodeType.set(keyEncodeType);\n                            refreshPage(false);\n                        } else {\n                            toastText = 'toast://当前不支持 Hex 转其他编码，若需要重置选项请点击[密钥编码]'\n                        }\n                        break;\n                }\n                return toastText;\n            }, keyEncodeType, config, obj),\n            col_type: \"scroll_button\"\n        });\n    }\n\n    if (config.mode.get() !== \"ECB\") {\n        let ivSize = (config.type.get() === \"DES\" || config.type.get() === \"3DES\") ? 64 : 128;\n        obj.ivSize = ivSize;\n        let ivLen = ivSize / 8;\n        let ivLenStr = ivLen + \" 个字符\"\n        if (config.ivEncodeType.get() == 'Hex') {\n            ivLenStr = (ivLen * 2) + \" 个十六进制字符\";\n        }\n        d.push({\n            title: \"随机 iv\",\n            desc: \"偏移量 iv, 必须 \" + ivLenStr,\n            col_type: 'input',\n            extra: {\n                // titleVisible: false,\n                /*height: -1,\n                type: \"textarea\",*/\n                defaultValue: config.iv.get(),\n                onChange: $.toString((config) => {\n                    config.iv.set(input)\n                }, config)\n            },\n            url: $.toString((obj, config) => {\n                let Tool = $.require(\"hiker://page/utiliy?rule=\" + obj.ruleTitle);\n                let ivLen = obj.ivSize / 8;\n                let randomIv = Tool.randomString(ivLen);\n                if (config.ivEncodeType.get() == 'Hex') {\n                    let hex = $.require(\"hiker://page/hex?rule=\" + obj.ruleTitle).hex;\n                    obj.decText = randomIv\n                    randomIv = hex.encode(obj)\n                }\n                config.iv.set(randomIv);\n                refreshPage(false)\n            }, obj, config)\n        });\n        d.push({\n            title: '““””<strong><font color=\"black\">偏移量编码</font></strong>',\n            url: $(\"#noLoading#\").lazyRule((config) => {\n                config.ivEncodeType.set(\"UTF-8\");\n                refreshPage(false);\n                return \"toast://重置成功！\";\n            }, config),\n            col_type: \"scroll_button\"\n        })\n        let ivEncodeTypes = Object.keys(ConfigMapping[\"ivEncodeType\"]);\n        // log(JSON.stringify(keyEncodeTypes))\n        for (let ivEncodeType of ivEncodeTypes) {\n            d.push({\n                title: ivEncodeType == config.ivEncodeType.get() ? \"‘‘\" + ivEncodeType + \"’’\" : ivEncodeType,\n                url: $(\"#noLoading#\").lazyRule((ivEncodeType, config, obj) => {\n                    let toastText = \"hiker://empty\";\n                    let hex = $.require(\"hiker://page/hex?rule=\" + obj.ruleTitle).hex;\n                    let iv = config.iv.get();\n                    let oldIvEncodeType = config.ivEncodeType.get();\n                    switch (oldIvEncodeType) {\n                        case \"UTF-8\":\n                            if (ivEncodeType == \"Hex\") {\n                                obj.decText = iv\n                                if (iv.length !== 0) {\n                                    config.iv.set(hex.encode(obj))\n                                }\n                            }\n                            config.ivEncodeType.set(ivEncodeType);\n                            refreshPage(false);\n                            break;\n                        case \"Hex\":\n                            if (iv.length == 0) {\n                                config.ivEncodeType.set(ivEncodeType);\n                                refreshPage(false);\n                            } else {\n                                toastText = 'toast://当前不支持 Hex 转其他编码，若需要重置选项请点击[偏移量编码]'\n                            }\n                            break;\n                    }\n                    return toastText;\n                }, ivEncodeType, config, obj),\n                col_type: \"scroll_button\"\n            });\n        }\n    } else {\n        config.iv.set(\"\");\n    }\n}\n$.exports.buildAESUi = buildAESUi"},{"col_type":"rich_text","name":"RSA-UI","path":"rsaui","rule":"js:\nlet navigator = {};\nlet window = {\n    navigator: navigator\n};\n\nfunction buildRSAUi(d, obj) {\n    /*d.push({\n        title: '<p style=\"text-align: center;\">目前无法实现，敬请期待（咕咕咕）~</p>',\n        col_type: 'rich_text'\n    })*/\n    // https://cdn.jsdelivr.net/npm/keypair@1.0.3/index.min.js\n    // https://cdn.jsdelivr.net/gh/wwwtyro/cryptico@master/cryptico.min.js\n    // let cryptico = request(\"https://cdn.jsdelivr.net/gh/wwwtyro/cryptico@master/cryptico.min.js\")\n    // eval(cryptico)\n    d.push({\n            title: \"清空\",\n            desc: '请输入 PEM 格式的公钥或私钥，以 \"-----BEGIN XXX KEY-----\" 开头，\"-----END XX KEY-----\" 结尾（也可以没有这两个标识）',\n            col_type: 'input',\n            extra: {\n                // titleVisible: false,\n                defaultValue: getMyVar(\"rsa_pub_or_pri_key\", \"\"),\n                type: \"textarea\",\n                onChange: 'putMyVar(\"rsa_pub_or_pri_key\",input)'\n            },\n            url: $.toString((obj) => {\n                clearMyVar(\"rsa_pub_or_pri_key\")\n                refreshPage(false)\n                return \"hiker://empty\"\n            }, obj)\n        }\n        /*, {\n                title: \"生成\",\n                desc: \"请输入/生成私钥\",\n                col_type: 'input',\n                extra: {\n                    // titleVisible: false,\n                    defaultValue: getVar(\"rsa_pri_key\", \"\"),\n                    type: \"textarea\",\n                    onChange: 'putVar(\"rsa_pri_key\",input)'\n                },\n                url: $.toString((obj) => {\n                    return \"hiker://empty\"\n                }, obj)\n            }*/\n    )\n\n    d.push({\n        title: \"清空\",\n        desc: \"请输入需要加密或解密的内容\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getMyVar(\"rsa_handle_text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putMyVar(\"rsa_handle_text\",input)'\n        },\n        url: $.toString((obj) => {\n            clearMyVar(\"rsa_handle_text\")\n            refreshPage(false)\n            return \"hiker://empty\"\n        }, obj)\n    })\n    obj.modes = [\"正常模式\", \"变态模式\"]\n    obj.choices = [\"是\", \"否\"]\n\n    function isNormalMode(obj, mode) {\n        return mode == getMyVar(\"rsa_select_mode\", obj.modes[0])\n    }\n\n    d.push({\n        title: '““””<strong><font color=\"black\">模式</font></strong>',\n        url: \"hiker://empty\",\n        col_type: \"scroll_button\"\n    })\n    for (let mode of obj.modes) {\n        d.push({\n            title: isNormalMode(obj, mode) ? \"‘‘\" + mode + \"’’\" : mode,\n            url: $(\"#noLoading#\").lazyRule((mode) => {\n                putMyVar(\"rsa_select_mode\", mode)\n                refreshPage(false);\n                return \"hiker://empty\"\n            }, mode),\n            col_type: \"scroll_button\"\n        });\n    }\n    d.push({\n        col_type: \"blank_block\"\n    })\n    d.push({\n        title: '““””<strong><font color=\"black\">分段加密</font></strong>',\n        url: \"hiker://empty\",\n        col_type: \"scroll_button\"\n    })\n\n    function isLong(obj, longStat) {\n        return getMyVar(\"rsa_long_status\", obj.choices[1]) == longStat\n    }\n    for (let longStat of obj.choices) {\n        d.push({\n            title: isLong(obj, longStat) ? \"‘‘\" + longStat + \"’’\" : longStat,\n            url: $(\"#noLoading#\").lazyRule((longStat) => {\n                putMyVar(\"rsa_long_status\", longStat)\n                refreshPage(false);\n                return \"hiker://empty\"\n            }, longStat),\n            col_type: \"scroll_button\"\n        });\n    }\n    d.push({\n        title: (isNormalMode(obj, obj.modes[0]) ? \"公钥\" : \"私钥\") + \"加密\",\n        col_type: 'text_2',\n        extra: {},\n        url: $(\"#noLoading#\").lazyRule((obj, isNormalMode, isLong) => {\n            let handleText = getMyVar(\"rsa_handle_text\", \"\")\n            let key = getMyVar(\"rsa_pub_or_pri_key\", \"\")\n                .replace(/-----BEGIN.*?KEY-----/, '')\n                .replace(/-----END.*?KEY-----/, '');\n            // log(key)\n            if (handleText === '') return 'toast://待处理文本输入为空，请检查!'\n            if (key === '') return 'toast://密钥输入为空，请检查!'\n            let toastText = \"加密成功\"\n            let result = \"\"\n            try {\n                let modes = obj.modes\n                let choices = obj.choices\n                let type = isNormalMode(obj, modes[0]) ? 1 : 2\n                let longStat = isLong(obj, choices[0]) ? 2 : 1\n                let options = {\n                    config: \"RSA/ECB/PKCS1Padding\",\n                    type: type,\n                    long: longStat,\n                    block: true\n                }\n                result = rsaEncrypt(handleText, key, options)\n            } catch (e) {\n                //log(e.message)\n                result = e.message\n                toastText = \"加密失败\"\n            }\n            putMyVar(\"rsa_result_text\", result);\n            refreshPage();\n            return \"toast://\" + toastText\n        }, obj, isNormalMode, isLong)\n    }, {\n        title: (isNormalMode(obj, obj.modes[0]) ? \"私钥\" : \"公钥\") + \"解密\",\n        col_type: 'text_2',\n        extra: {},\n        url: $(\"#noLoading#\").lazyRule((obj, isNormalMode, isLong) => {\n            let handleText = getMyVar(\"rsa_handle_text\", \"\")\n            let key = getMyVar(\"rsa_pub_or_pri_key\", \"\")\n                .replace(/-----BEGIN.*?KEY-----/, '')\n                .replace(/-----END.*?KEY-----/, '');\n            if (handleText === '') return 'toast://待处理文本输入为空，请检查!'\n            if (key === '') return 'toast://密钥输入为空，请检查!'\n            let toastText = \"解密成功\"\n            let result = \"\"\n            try {\n                let modes = obj.modes\n                let choices = obj.choices\n                let type = isNormalMode(obj, modes[0]) ? 1 : 2\n                let longStat = isLong(obj, choices[0]) ? 2 : 1\n                let options = {\n                    config: \"RSA/ECB/PKCS1Padding\",\n                    type: type,\n                    long: longStat,\n                    block: true\n                }\n                result = rsaDecrypt(handleText, key, options)\n            } catch (e) {\n                result = e.message\n                toastText = \"解密失败\"\n            }\n            putMyVar(\"rsa_result_text\", result)\n            refreshPage()\n            return \"toast://\" + toastText\n        }, obj, isNormalMode, isLong)\n    }, {\n        title: \"复制\",\n        desc: \"加密或解密的内容将显示在此\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getMyVar(\"rsa_result_text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putMyVar(\"rsa_result_text\",input)'\n        },\n        url: $.toString(() => {\n            // obj.encText = input;\n            // log(\"obj.encText: \" + obj.encText)\n            return \"copy://\" + input\n        })\n    })\n\n\n}\n$.exports.buildRSAUi = buildRSAUi"},{"col_type":"text_1","name":"工具","path":"utiliy","rule":"js:\nlet Tool = {\n  randomString: function(len){\n      let chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz123456789' \n      let maxLen = chars.length\n      let str = ''\n      for (let i = 0; i < len; i++) {\n        str += chars.charAt(Math.floor(Math.random() * maxLen))\n      }\n      return str\n  },\n  fillNullPadding: function (str, len) {\n    // str.padStart(targetLength [, padString])\n    // str.padEnd(targetLength [, padString])\n    if(str.length >= len) {\n      return str;\n    }\n    return str + Array( len - str.length + 1 ).join(\"\\x00\");\n  },\n  fillZeroPadding: function (str, len) {\n    // str.padStart(targetLength [, padString])\n    // str.padEnd(targetLength [, padString])\n    if(str.length >= len) {\n      return str;\n    }\n    return str + Array( len - str.length + 1 ).join(\"0\");\n  },\n}\n$.exports = Tool;"},{"col_type":"text_1","name":"散列哈希类页面","path":"hash","rule":"js:\nconst { buildHashUi } = $.require(\"hiker://page/hashui\");\nfunction setHashPage(d, obj) {\n    buildHashUi(d, obj);\n}\n$.exports.setHashPage = setHashPage"},{"col_type":"text_1","name":"Hex","path":"hex","rule":"js:\nlet hex = {};\n// 编码\nhex.encode = function(obj) {\n    eval(getCryptoJS());\n    // log(\"我是原文\"+ obj.decText)\n    let wordArray = CryptoJS.enc.Utf8.parse(obj.decText);\n    let encode = \"[HEX]:\" + CryptoJS.enc.Hex.stringify(wordArray);\n    return encode;\n}\n// 解码\nhex.decode = function(obj) {\n    eval(getCryptoJS());\n    // log(\"我是密文\"+ obj.encText)\n    obj.encText = obj.encText.replace(\"[HEX]:\", \"\")\n    let wordArray = CryptoJS.enc.Hex.parse(obj.encText);\n    let decode = CryptoJS.enc.Utf8.stringify(wordArray);\n    /*CryptoJS.enc.Base64.stringify(wordArray);*/\n    return decode;\n}\n// 导出给外部通过 require 方法使用\n$.exports.hex = hex"},{"col_type":"text_1","name":"Hash-UI","path":"hashui","rule":"js:\nfunction buildEmtpyHashUi(d, obj) {\n    d.push({\n        title: '<p style=\"text-align: center;\">正在路上，敬请期待（咕咕咕）~</p>',\n        col_type: 'rich_text'\n    })\n}\nfunction buildHashUi(d, obj) {\n    if (obj.type.includes(\"SHA3\") && !obj.type.includes(\"HMAC\")) {\n        buildEmtpyHashUi(d, obj);\n        return;\n    }\n     d.push({\n        title: \"哈希/散列\",\n        desc: \"请输入原文\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getVar(\"hash_text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putVar(\"hash_text\",input)'\n        },\n        url: $.toString((obj) => {\n            // obj.decText = input;\n            // log(\"obj.decText: \" + obj.decText)\n            let toastText = \"加密成功\";\n            let hash_result = \"\";\n            let tool = {};\n            let toolSelects = obj.type.split(\"@@\");\n            let toolSelect = toolSelects[toolSelects.length - 1];\n            let HashAlgorithm = $.require(\"hiker://page/hashalgorithm?rule=\" + obj.ruleTitle);\n            HashAlgorithm.config.type.set(toolSelect)\n            tool = HashAlgorithm;\n            try {\n                hash_result = tool.hash();\n                // log(\"hash_result: \" + hash_result)\n            } catch (e) {\n                hash_result = e.message;\n                toastText = \"加密失败\";\n            }\n            HashAlgorithm.config.resultText.set(hash_result)\n            refreshPage();\n            return 'toast://' + toastText;\n        }, obj),\n    });\n    if (obj.type.includes(\"HMAC\") || obj.type.includes(\"PBKDF2\")) {\n        buildConfigsUI(d, obj);\n    }\n    d.push({\n        title: \"复制\",\n        desc: \"哈希值\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getVar(\"hash_result_text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putVar(\"hash_result_text\",input)'\n        },\n        url: $.toString(() => {\n            // obj.encText = input;\n            // log(\"obj.encText: \" + obj.encText)\n            if (input) {\n                return \"copy://\" + input;\n            } else {\n                return \"toast://内容为空！\"\n            }\n        }),\n    });\n    \n}\nfunction buildConfigsUI(d, obj) {\n    // HMAC || PBKDF2\n    let HashAlgorithm = $.require(\"hiker://page/hashalgorithm?rule=\" + obj.ruleTitle);\n    if (obj.type.includes(\"HMAC\")) {\n        // HMAC-xxx\n        buildHmacConfigsUI(d, obj, HashAlgorithm.config)\n    } else if (obj.type.includes(\"PBKDF2\")) {\n        // PBKDF2\n        buildPBKDF2ConfigsUI(d, obj, HashAlgorithm.Mapping, HashAlgorithm.config)\n    }\n}\nfunction buildHmacConfigsUI (d, obj, config) {\n    // obj.type.includes(\"HMAC\")\n    d.push({\n        title: \"随机 key\",\n        desc: \"密钥 key\",\n        col_type: 'input',\n        extra: {\n            titleVisible: false,\n            height: -1,\n            type: \"textarea\",\n            defaultValue: config.key.get(),\n            onChange: $.toString((config) => {\n                config.key.set(input)\n            }, config)\n        }\n    });\n}\nfunction buildPBKDF2ConfigsUI(d, obj, mapping, config) {\n    // obj.type.includes(\"PBKDF2\")\n    let keySizes = Object.keys(mapping[\"keySize\"]);\n    d.push({\n        title: '““””<strong><font color=\"black\">KEY长度</font></strong>',\n        url: \"hiker://empty\",\n        col_type: \"scroll_button\"\n    })\n    for (let keySize of keySizes) {\n        d.push({\n            title: keySize == config.keySize.get() ? \"‘‘\" + keySize + \"’’\" : keySize,\n            url: $(\"#noLoading#\").lazyRule((keySize, config) => {\n                    config.keySize.set(keySize)\n                    refreshPage(false);\n                    return \"hiker://empty\"\n            }, keySize, config),\n            col_type: \"scroll_button\"\n        });\n    }\n    d.push({\n        col_type: \"blank_block\"\n    })\n    d.push({\n        title: \"随机 salt\",\n        desc: \"盐 salt，建议至少为 8 字节，且要为随机数。\",\n        col_type: 'input',\n        extra: {\n            titleVisible: false,\n            height: -1,\n            type: \"textarea\",\n            defaultValue: config.salt.get(),\n            onChange: $.toString((config) => {\n                config.salt.set(input)\n            }, config)\n        }\n    });\n    d.push({\n        title: \"迭代次数\",\n        desc: \"迭代次数(选填)，建议至少为 50000 次，除非有严格的性能要求。\",\n        col_type: 'input',\n        extra: {\n            titleVisible: false,\n            height: -1,\n            type: \"textarea\",\n            defaultValue: config.iterations.get(),\n            onChange: $.toString((config) => {\n                config.iterations.set(input)\n            }, config)\n        }\n    });\n}\n$.exports.buildHashUi = buildHashUi"},{"col_type":"text_1","name":"Hash算法","path":"hashalgorithm","rule":"js:\neval(getCryptoJS());\nlet HashAlgorithm = {\n\tMapping: {\n\t\thashType: {\n\t\t\t\"MD5\": CryptoJS.MD5,\n\t\t\t\"SHA-1\": CryptoJS.SHA1,\n\t\t\t\"SHA-224\": CryptoJS.SHA224,\n\t\t\t\"SHA-256\": CryptoJS.SHA256,\n\t\t\t\"SHA-384\": CryptoJS.SHA384,\n\t\t\t\"SHA-512\": CryptoJS.SHA512,\n\t\t\t\"HMAC-MD5\": CryptoJS.HmacMD5,\n\t\t\t\"HMAC-SHA1\": CryptoJS.HmacSHA1,\n\t\t\t\"HMAC-SHA224\": CryptoJS.HmacSHA224, \n\t\t\t\"HMAC-SHA256\": CryptoJS.HmacSHA256, \n\t\t\t\"HMAC-SHA384\": CryptoJS.HmacSHA384, \n\t\t\t\"HMAC-SHA512\": CryptoJS.HmacSHA512,\n\t\t\t\"PBKDF2\": CryptoJS.PBKDF2,\n\t\t},\n        keySize: {\n            \"128位\": 128,\n            \"256位\": 256,\n            \"512位\": 512,\n        },\n\t},\n\tconfig: {\n        type: {\n            key: \"hash_type\",\n            get: function () {\n                return getVar(this.key, \"MD5\");\n            },\n            set: function (newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n        key: {\n            key: \"hash_hmac_key\",\n            get: function () {\n                return getVar(this.key, \"\");\n            },\n            set: function (newValue) {\n                putVar(this.key, newValue);\n            }\n        },\n\t\ttext: {\n\t\t\tkey: \"hash_text\",\n            get: function () {\n                return getVar(this.key, \"\");\n            },\n            set: function (newValue) {\n                putVar(this.key, newValue);\n            }\n\t\t},\n\t\tresultText: {\n\t\t\tkey: \"hash_result_text\",\n            get: function () {\n                return getVar(this.key, \"\");\n            },\n            set: function (newValue) {\n                putVar(this.key, newValue);\n            }\n\t\t},\n        keySize: {\n            key: \"hash_key_size\",\n            get: function () {\n                return getVar(this.key, \"128位\");\n            },\n            set: function (newValue) {\n                putVar(this.key, newValue);\n            }\n\n        },\n        salt: {\n            key: \"hash_salt\",\n            get: function () {\n                return getVar(this.key, \"\");\n            },\n            set: function (newValue) {\n                putVar(this.key, newValue);\n            }\n\n        },\n        iterations: {\n            key: \"hash_iterations\",\n            get: function () {\n                return getVar(this.key, \"\");\n            },\n            set: function (newValue) {\n                putVar(this.key, newValue);\n            }\n\n        },\n\t},\n    onClose: function() {\n        let configKeys = Object.keys(this.config);\n        for(let confKey of configKeys) {\n            let key = this.config[confKey].key;\n            clearVar(key);\n        }\n    },\n\thash: function () {\n\t\tlet text = this.config.text.get();\n\t\tlet type = this.config.type.get();\n\t\tlet hash = {};\n\t\tif (text) {\n            if (type.includes(\"HMAC\")) {\n                // HMAC-xxx\n                let key = this.config.key.get();\n                hash = this.Mapping.hashType[type](text, key)\n            } else if (type.includes(\"PBKDF2\")) {\n                // PBKDF2\n                let keySize = this.Mapping.keySize[this.config.keySize.get()];\n                let salt = this.config.salt.get();\n                let iterations = this.config.iterations.get();\n                if (!salt) {\n                \tthrow new Error(\"盐 salt 不能为空！\")\n                }\n                salt = CryptoJS.enc.Utf8.parse(salt)\n                let options =  {\n                \t\tkeySize: keySize / 32\n                }\n                if (iterations) {\n                \toptions.iterations = iterations;\n                }\n                hash = this.Mapping.hashType[type](text, salt, options)\n            } else {\n\t\t\t\thash = this.Mapping.hashType[type](text);\n            }\n\t\t\t// 密文\n\t\t\tlet hashResult = hash.toString();\n            // log(\"hash#hash_result: \" + hashResult)\n            this.config.resultText.set(hashResult);\n\t\t\treturn hashResult;\n\t\t} else {\n            throw new Error(\"原文不能为空！\")\n        }\n\t}\n};\n$.exports = HashAlgorithm"},{"col_type":"movie_3","name":"兽音","path":"roar","rule":"js:\nlet roar = {};\nroar.encode = function(obj) {\n    // log(\"[roar]obj.decText: \" + obj.decText)\n    let encode = request('http://hi.pcmoe.net/bear.php', {\n        headers: {\n            'X-Token': '203B61D35068',\n            'Origin': 'http://hi.pcmoe.net',\n            'X-Requested-With': 'XMLHttpRequest',\n            //'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\n            'Content-type': 'application/x-www-form-urlencoded',\n            'Referer': 'http://hi.pcmoe.net'\n        },\n        body: 'mode=Roar&code=Encode&txt=' + obj.decText,\n        method: 'POST'\n    });\n    // log(\"[roar]encode: \" + encode)\n    return encode;\n}\nroar.decode = function(obj) {\n    let decode = request('http://hi.pcmoe.net/bear.php', {\n        headers: {\n            'X-Token': '203B61D35068',\n            'Origin': 'http://hi.pcmoe.net',\n            'X-Requested-With': 'XMLHttpRequest',\n            //'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\n            'Content-type': 'application/x-www-form-urlencoded',\n            'Referer': 'http://hi.pcmoe.net'\n        },\n        body: 'mode=Roar&code=Decode&txt=' + obj.encText,\n        method: 'POST'\n    });\n    return decode;\n}\n$.exports.roar = roar"},{"col_type":"movie_3","name":"熊曰","path":"bear","rule":"js:\nlet bear = {};\nbear.encode = function(obj) {\n    // log(\"[bear]obj.decText: \" + obj.decText)\n    let encode = request('http://hi.pcmoe.net/bear.php', {\n        headers: {\n            'X-Token': '203B61D35068',\n            'Origin': 'http://hi.pcmoe.net',\n            'X-Requested-With': 'XMLHttpRequest',\n            //'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\n            'Content-type': 'application/x-www-form-urlencoded',\n            'Referer': 'http://hi.pcmoe.net'\n        },\n        body: 'mode=Bear&code=Encode&txt=' + obj.decText,\n        method: 'POST'\n    });\n    // log(\"[bear]encode: \" + encode)\n    return encode;\n}\nbear.decode = function(obj) {\n    let decode = request('http://hi.pcmoe.net/bear.php', {\n        headers: {\n            'X-Token': '203B61D35068',\n            'Origin': 'http://hi.pcmoe.net',\n            'X-Requested-With': 'XMLHttpRequest',\n            //'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\n            'Content-type': 'application/x-www-form-urlencoded',\n            'Referer': 'http://hi.pcmoe.net'\n        },\n        body: 'mode=Bear&code=Decode&txt=' + obj.encText,\n        method: 'POST'\n    });\n    return decode;\n}\n$.exports.bear = bear"},{"col_type":"movie_3","name":"首页","path":"home","rule":"js:\nsetPageTitle('加解密工具')\nconst {\n    header\n} = $.require(\"hiker://page/classicHeader\");\nconst {\n    setEncodePage\n} = $.require(\"hiker://page/encode\");\nconst {\n    setCryptoPage\n} = $.require(\"hiker://page/crypto\");\nconst {\n    setHashPage\n} = $.require(\"hiker://page/hash\");\nconst {\n    setOtherPage\n} = $.require(\"hiker://page/other\");\n// const { Crypto } = $.require(\"hiker://page/aes\");\n/**\n * 1. 引入算法依赖\n */\nconst {\n    buddha\n} = $.require(\"hiker://page/buddha\");\nconst {\n    newBuddha\n} = $.require(\"hiker://page/newBuddha\");\nconst {\n    bear\n} = $.require(\"hiker://page/bear\");\nconst {\n    roar\n} = $.require(\"hiker://page/roar\");\nconst {\n    unicode\n} = $.require(\"hiker://page/unicode\");\nconst {\n    uri\n} = $.require(\"hiker://page/uri\");\nconst {\n    uricomponent\n} = $.require(\"hiker://page/uricomponent\");\nconst {\n    base64\n} = $.require(\"hiker://page/base64\");\nconst {\n    ascii\n} = $.require(\"hiker://page/ascii\");\nconst {\n    hex\n} = $.require(\"hiker://page/hex\");\n\nlet ruleTitle = MY_RULE.title;\naddListener('onClose', $.toString((header, ruleTitle) => {\n    putVar(\"encode-text\", \"\");\n    putVar(\"decode-text\", \"\");\n    header.onClose();\n    let Crypto = $.require(\"hiker://page/aes?rule=\" + ruleTitle);\n    Crypto.onClose();\n    clearMyVar(\"rsa_pub_or_pri_key\")\n    clearMyVar(\"rsa_handle_text\")\n    clearMyVar(\"rsa_select_mode\")\n    clearMyVar(\"rsa_long_status\")\n    clearMyVar(\"rsa_result_text\");\n    let HashAlgorithm = $.require(\"hiker://page/hashalgorithm?rule=\" + ruleTitle);\n    HashAlgorithm.onClose();\n}, header, ruleTitle))\n\nlet d = [];\n/*d.push({\n    desc: \"0\",\n    col_type: \"x5_webview_single\"\n})*/\ntry {\n    if (!newWindow) {\n\n    }\n} catch (e) {\n    for (let i = 0; i < 1; i++) {\n        d.push({\n            col_type: 'big_blank_block'\n        });\n    }\n    d.push({\n        col_type: 'text_center_1',\n        title: '““””<br><big style=\"text-align: center;\"><b>🔑加解密工具🔑</b></big>',\n        url: \"hiker://empty\",\n        extra: {\n            lineVisible: false\n        }\n    });\n\n}\nlet classic = {\n    \"编码转换\": [{\n            \"佛熊兽曰\": [\"佛曰\", \"新佛曰\", \"熊曰\", \"兽音\"]\n        },\n        \"Unicode\",\n        {\n            \"URL\": [\"URI\", \"URIComponent\"]\n        },\n        \"Base64\", \"ASCII\", \"Hex\"\n    ],\n    \"加密/解密\": [{\n            \"对称加密\": [\"AES\", \"DES\", \"3DES\"]\n        },\n        {\n            \"非对称加密\": [\"RSA\"]\n        }\n    ],\n    \"散列/哈希\": [\n        \"MD5\",\n        {\n            \"SHA\": [\"SHA-1\", \"SHA-224\", \"SHA-256\", \"SHA-384\", \"SHA-512\", /*\"SHA3-512\"*/ ]\n        },\n        {\n            \"HMAC\": [\"HMAC-MD5\", \"HMAC-SHA1\", \"HMAC-SHA224\", \"HMAC-SHA256\", \"HMAC-SHA384\", \"HMAC-SHA512\"]\n        },\n        \"PBKDF2\"\n    ],\n    \"其他转换\": [\n        \"V6解密\",\n        \"PrivateJS\",\n        \"时间戳\",\n    ]\n}\nd = d.concat(header.get(classic))\nvar type = header.getCurrentIndex();\ntry {\n    if (newWindow) {\n        /*for (let i = 0; i < 1; i++) {\n            d.push({\n                col_type: 'big_blank_block'\n            });\n        }*/\n        d.push({\n            title: '““””<b>选项</b>',\n            col_type: 'scroll_button',\n            url: 'hiker://empty',\n        })\n        d.push({\n            title: '点我化为新窗口',\n            col_type: 'scroll_button',\n            url: 'hiker://page/home#gameTheme#',\n            extra: {\n                newWindow: true,\n                // lineVisible: false\n            }\n        })\n    }\n} catch (e) {\n    log(e.message)\n}\n\n/**\n * 2. 在 tools 加入键值对，用于映射算法，格式为 分类中的替换值（即 fyAll 的值）: 引入的算法依赖的对象名\n */\nvar obj = {\n    ruleTitle: ruleTitle,\n    type: type,\n    tools: {\n        \"佛曰\": buddha,\n        \"新佛曰\": newBuddha,\n        \"熊曰\": bear,\n        \"兽音\": roar,\n        \"Unicode\": unicode,\n        \"URI\": uri,\n        \"URIComponent\": uricomponent,\n        \"Base64\": base64,\n        \"ASCII\": ascii,\n        \"Hex\": hex,\n        // \"AES\": Crypto.AES,\n        // \"DES\": Crypto.DES,\n    },\n}\n\n/**\n * 3. 添加子页面写自己的算法，模板请参考“算法模板”这个子页面或已有的子页面\n *\n * 注：此备注后的所有代码各位都不需要动\n */\n// log(obj.type)\nif (obj.type.includes(\"编码转换\")) {\n    setEncodePage(d, obj);\n} else if (obj.type.includes(\"加密/解密\")) {\n    setCryptoPage(d, obj);\n} else if (obj.type.includes(\"散列/哈希\")) {\n    setHashPage(d, obj);\n} else if (obj.type.includes(\"其他转换\")) {\n    setOtherPage(d, obj);\n}\nsetResult(d)"},{"col_type":"rich_text","name":"Other-UI","path":"otherui","rule":"// js:\nfunction buildEmptyOtherUi(d, obj) {\n    d.push({\n        title: '<p style=\"text-align: center;\">正在路上，敬请期待（咕咕咕）~</p>',\n        col_type: 'rich_text'\n    })\n}\n\nfunction buildControllerUi(d, obj) {\n    // https://gitee.com/CherishRx/imagewarehouse/raw/master/image/32d29e2fbcdf8d83071deec7f6aa4b7c.png\n    let cpImgUrl = \"https://iconfont.tyrantg.com/api/illustrate.svg?svg_string=%3Csvg%20class%3D%22icon%22%20style%3D%22width%3A%201em%3Bheight%3A%201em%3Bvertical-align%3A%20middle%3Bfill%3A%20currentColor%3Boverflow%3A%20hidden%3B%22%20viewBox%3D%220%200%201024%201024%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M866.133333%20919.466667h-405.333333c-29.866667%200-53.333333-23.466667-53.333333-53.333334v-618.666666c0-29.866667%2023.466667-53.333333%2053.333333-53.333334h405.333333c29.866667%200%2053.333333%2023.466667%2053.333334%2053.333334v618.666666c0%2029.866667-23.466667%2053.333333-53.333334%2053.333334z%22%20fill%3D%22%2369C0FF%22%20%2F%3E%3Cpath%20d%3D%22M770.133333%20428.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333zM770.133333%20556.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333zM770.133333%20684.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333z%22%20fill%3D%22%23FFFFFF%22%20%2F%3E%3Cpath%20d%3D%22M567.466667%20834.133333h-405.333334c-29.866667%200-53.333333-23.466667-53.333333-53.333333v-618.666667c0-29.866667%2023.466667-53.333333%2053.333333-53.333333h405.333334c29.866667%200%2053.333333%2023.466667%2053.333333%2053.333333v618.666667c0%2029.866667-23.466667%2053.333333-53.333333%2053.333333z%22%20fill%3D%22%231890FF%22%20%2F%3E%3Cpath%20d%3D%22M471.466667%20343.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334zM471.466667%20471.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334zM471.466667%20599.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334z%22%20fill%3D%22%23FFFFFF%22%20%2F%3E%3C%2Fsvg%3E\"\n    let clearImgUrl = \"https://iconfont.tyrantg.com/api/illustrate.svg?svg_string=%3Csvg%20class%3D%22icon%22%20style%3D%22width%3A%201em%3Bheight%3A%201em%3Bvertical-align%3A%20middle%3Bfill%3A%20currentColor%3Boverflow%3A%20hidden%3B%22%20viewBox%3D%220%200%201024%201024%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M179.2%20588.8h710.4c25.6%200%2032-19.2%2025.6-38.4L832%20364.8c-12.8-19.2-38.4-38.4-64-38.4H620.8V64c0-25.6-19.2-44.8-44.8-44.8H492.8c-19.2%200-38.4%2019.2-38.4%2044.8v262.4H300.8c-25.6%200-51.2%2019.2-57.6%2038.4L153.6%20550.4c-6.4%2019.2%200%2038.4%2025.6%2038.4m691.2%2064H217.6c6.4%2064%200%20147.2-51.2%20198.4-76.8%2064-51.2%20140.8%206.4%20166.4h108.8c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h83.2c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h102.4c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192H704c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h102.4s70.4-25.6%2057.6-102.4c-19.2-115.2-25.6-179.2-44.8-262.4%22%20fill%3D%22%237367D1%22%20%2F%3E%3C%2Fsvg%3E\"\n\n\n    d.push({\n        title: '清空输入',\n        img: clearImgUrl,\n        url: \"hiker://empty#noLoading#\" + \"@lazyRule=.js:putMyVar('other.encode.text', '');refreshPage();'toast://清空成功'\",\n        col_type: 'icon_2'\n    });\n\n    d.push({\n        title: '清空输出',\n        img: clearImgUrl,\n        url: \"hiker://empty#noLoading#\" + \"@lazyRule=.js:putMyVar('other.decode.text', '');refreshPage();'toast://清空成功'\",\n        col_type: 'icon_2'\n    });\n\n    d.push({\n        title: '复制输入',\n        img: cpImgUrl,\n        url: $(\"hiker://empty#noLoading#\").lazyRule(() => {\n            var dec = getMyVar(\"other.encode.text\");\n            if (dec) {\n                return \"copy://\" + dec;\n            } else {\n                return \"toast://内容为空！\"\n            }\n        }),\n        col_type: 'icon_2'\n    });\n\n    d.push({\n        title: '复制输出',\n        img: cpImgUrl,\n        url: $(\"hiker://empty#noLoading#\").lazyRule(() => {\n            var enc = getMyVar(\"other.decode.text\");\n            if (enc) {\n                return \"copy://\" + enc;\n            } else {\n                return \"toast://内容为空！\"\n            }\n        }),\n        col_type: 'icon_2'\n    });\n}\n\nfunction buildOtherUi(d, obj) {\n    if (obj.type.includes(\"时间戳\")) {\n        buildEmptyOtherUi(d, obj);\n        return;\n    }\n    if (obj.type.includes(\"V6解密\")) {\n        buildDecodeV6UI(d, obj);\n    } else if (obj.type.includes(\"PrivateJS\")) {\n        buildPrivateJsUi(d, obj);\n    }\n    if (obj.type.includes(\"V6解密\") || obj.type.includes(\"PrivateJS\")) {\n        buildControllerUi(d, obj);\n    }\n}\n// TODO 添加清除 Var 变量\nfunction buildDecodeV6UI(d, obj) {\n    d.push({\n        title: \"解混淆\",\n        desc: \"请输入 jiami.com.v6 的密文\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getMyVar(\"other.encode.text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putMyVar(\"other.encode.text\", input)'\n        },\n        url: $.toString((obj) => {\n            // obj.decText = input;\n            // log(\"obj.decText: \" + obj.decText)\n            if (input === '') return 'toast://输入为空，请检查!'\n            let toastText = \"解混淆成功\";\n            let dec_result = \"\";\n            try {\n                let code = (/^http(s*):\\/\\//.test(input.trim())) ? request(input) : input;\n                dec_result = fetch(base64Decode(\"aHR0cHM6Ly9nYXRzYnktbmluZS1ibHVzaC52ZXJjZWwuYXBwL2FwaS92Ng==\"), {\n                    body: {\n                        code: code\n                    },\n                });\n                // log(\"hash_result: \" + hash_result)\n                if (code === '') toastText = \"解混淆失败\";\n            } catch (e) {\n                dec_result = e.message;\n                toastText = \"解混淆失败\";\n            }\n            putMyVar(\"other.decode.text\", dec_result)\n            refreshPage();\n            return 'toast://' + toastText;\n        }, obj),\n    });\n    d.push({\n        title: \"代码查看\",\n        desc: \"结果输出\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getMyVar(\"other.decode.text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putMyVar(\"other.decode.text\", input)'\n        },\n        url: $.toString(() => {\n            // obj.encText = input;\n            // log(\"obj.encText: \" + obj.encText)\n            if (input) {\n                let cachePath = 'hiker://files/cache/CryptoTool.cache';\n                writeFile(cachePath, input);\n                return 'editFile://' + cachePath;\n            } else {\n                return \"toast://内容为空！\"\n            }\n        }),\n    });\n}\n\nfunction buildPrivateJsUi(d, obj) {\n    d.push({\n        title: \"加密\",\n        desc: \"请输入代码明文\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getMyVar(\"other.encode.text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putMyVar(\"other.encode.text\", input)'\n        },\n        url: $.toString((obj) => {\n            // obj.decText = input;\n            // log(\"obj.decText: \" + obj.decText)\n            if (input === '') return 'toast://输入为空，请检查!'\n            let toastText = \"加密代码成功\";\n            let dec_result = 'evalPrivateJS(\\\"' + getPrivateJS(input) + '\")';\n            putMyVar(\"other.decode.text\", dec_result)\n            refreshPage();\n            return 'toast://' + toastText;\n        }, obj),\n    });\n    d.push({\n        title: \"代码查看\",\n        desc: \"结果输出\",\n        col_type: 'input',\n        extra: {\n            // titleVisible: false,\n            defaultValue: getMyVar(\"other.decode.text\", \"\"),\n            type: \"textarea\",\n            onChange: 'putMyVar(\"other.decode.text\", input)'\n        },\n        url: $.toString(() => {\n            // obj.encText = input;\n            // log(\"obj.encText: \" + obj.encText)\n            if (input) {\n                let cachePath = 'hiker://files/cache/CryptoTool.cache';\n                writeFile(cachePath, input);\n                return 'editFile://' + cachePath;\n            } else {\n                return \"toast://内容为空！\"\n            }\n        }),\n    });\n}\n\n$.exports.buildOtherUi = buildOtherUi"},{"col_type":"rich_text","name":"其他转换页面","path":"other","rule":"const { buildOtherUi } = $.require(\"hiker://page/otherui\");\nfunction setOtherPage(d, obj) {\n    buildOtherUi(d, obj);\n}\n$.exports.setOtherPage = setOtherPage"},{"col_type":"movie_3","name":"佛曰","path":"buddha","rule":"js:\nlet buddha = {};\nbuddha.encode = function(obj) {\n    // log(\"[buddha]obj.decText: \" + obj.decText)\n    let encode = request(\"https://www.keyfc.net/bbs/tools/tudou.aspx\",{\n    headers:{\n        \"referer\":\"https://www.keyfc.net/bbs/tools/tudoucode.aspx\",\n        //\"user-agent\":\"Mozilla/5.0 (Linux; Android 11; Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36\",\n        \"content-type\":\"application/x-www-form-urlencoded\",\n        //\"Cookie\":\"lastolupdate=989792506;ASPSESSIONIDCGRCCCQD=CGIDOGMBMCAJKJNCAGPPGFNP;dnt=referer=showtopic.aspx%3ftopicid%3d23944%26page%3d1%26forumpage%3d1\"\n        },\n    body:\"orignalMsg=\"+encodeURI(obj.decText)+\"&action=Encode\",\n    method:\"POST\"\n    })\n    // log(\"[buddha]encode: \" + encode)\n    return encode.split(\"CDATA[\")[1].split(\"]\")[0];\n}\nbuddha.decode = function(obj) {\n    let decode = request(\"https://www.keyfc.net/bbs/tools/tudou.aspx\",{\n    headers:{\n        \"referer\":\"https://www.keyfc.net/bbs/tools/tudoucode.aspx\",\n        //\"user-agent\":\"Mozilla/5.0 (Linux; Android 11; Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36\",\n        \"content-type\":\"application/x-www-form-urlencoded\",\n        //\"Cookie\":\"lastolupdate=989792506;ASPSESSIONIDCGRCCCQD=CGIDOGMBMCAJKJNCAGPPGFNP;dnt=referer=showtopic.aspx%3ftopicid%3d23944%26page%3d1%26forumpage%3d1\"\n        },\n    body:\"orignalMsg=\"+encodeURI(obj.encText)+\"&action=Decode\",\n    method:\"POST\"\n    })\n    return decode.split(\"CDATA[\")[1].split(\"]\")[0];\n}\n$.exports.buddha = buddha"},{"col_type":"rich_text","name":"URI","path":"uri","rule":"js:\nlet uri = {};\nuri.encode = function(obj) {\n    let encode = encodeURI(obj.decText);\n    return encode;\n}\nuri.decode = function(obj) {\n    let decode = decodeURI(obj.encText);\n    return decode;\n}\n$.exports.uri = uri"},{"col_type":"rich_text","name":"URIComponent","path":"uricomponent","rule":"js:\nlet uricomponent = {};\nuricomponent.encode = function(obj) {\n    let encode = encodeURIComponent(obj.decText);\n    return encode;\n}\nuricomponent.decode = function(obj) {\n    let decode = decodeURIComponent(obj.encText);\n    return decode;\n}\n$.exports.uricomponent = uricomponent"},{"col_type":"movie_3","name":"新佛曰","path":"newBuddha","rule":"js:\nlet newBuddha = {};\nnewBuddha.encode = function(obj) {\n    // log(\"[buddha]obj.decText: \" + obj.decText)\n    let encode = request('http://hi.pcmoe.net/bear.php', {\n        headers: {\n            'X-Token': '07B97AA644E8',\n            'Origin': 'http://hi.pcmoe.net',\n            'X-Requested-With': 'XMLHttpRequest',\n            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\n            'Content-type': 'application/x-www-form-urlencoded',\n            'Referer': 'http://hi.pcmoe.net/buddha.html'\n        },\n        body: 'mode=Buddha&code=Encode&txt=' + obj.decText,\n        method: 'POST'\n    });\n    // log(\"[buddha]encode: \" + encode)\n    return encode;\n}\nnewBuddha.decode = function(obj) {\n    let decode = request('http://hi.pcmoe.net/bear.php', {\n        headers: {\n            'X-Token': '07B97AA644E8',\n            'Origin': 'http://hi.pcmoe.net',\n            'X-Requested-With': 'XMLHttpRequest',\n            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\n            'Content-type': 'application/x-www-form-urlencoded',\n            'Referer': 'http://hi.pcmoe.net/buddha.html'\n        },\n        body: 'mode=Buddha&code=Decode&txt=' + obj.encText,\n        method: 'POST'\n    });\n    return decode;\n}\n$.exports.newBuddha = newBuddha"}],"title":"加解密工具","author":"Rx&Reborn&@LoyDgIk&wzhjgood&Joker","version":26,"type":"other","url":"hiker://empty#fyAll","col_type":"rich_text","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nlet newWindow = true\nlet homePage = JSON.parse(request('hiker://page/home?rule=加解密工具')).rule\neval(homePage)","searchFind":"","search_url":"","titleColor":"","group":"⑧工具","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"text_1\",\"name\":\"Unicode\",\"path\":\"unicode\",\"rule\":\"js:\\nlet unicode = {};\\nunicode.encode = function(obj) {\\n    let encode = escape(obj.decText.replace(/%u/g, \\\"\\\\\\\\u\\\"));\\n    return encode;\\n}\\nunicode.decode = function(obj) {\\n    let decode = unescape(obj.encText.replace(/\\\\\\\\u/g, \\\"%u\\\"));\\n    return decode;\\n}\\n$.exports.unicode = unicode\"},{\"col_type\":\"text_1\",\"name\":\"Base64\",\"path\":\"base64\",\"rule\":\"js:\\nlet base64 = {};\\nbase64.encode = function(obj) {\\n    // let encode = encodeURIComponent(base64Encode(obj.decText));\\n    let encode = base64Encode(obj.decText);\\n    return encode;\\n}\\nbase64.decode = function(obj) {\\n    let decode = decodeURIComponent(base64Decode(obj.encText));\\n    return decode;\\n}\\n$.exports.base64 = base64\"},{\"col_type\":\"text_1\",\"name\":\"ASCII\",\"path\":\"ascii\",\"rule\":\"js:\\nlet ascii = {};\\nascii.unicode1 = function(str) {\\n    var value = '';\\n    for (var i = 0; i < str.length; i++) {\\n        value = value + '&#' + str.charCodeAt(i) + ';';\\n    }\\n    return value;\\n}\\nascii.reconvert = function(str) {\\n    str = str.replace(/(\\\\\\\\u)(\\\\w{1,4})/gi, function($0) {\\n        return (String.fromCharCode(parseInt((escape($0).replace(/(%5Cu)(\\\\w{1,4})/g, \\\"$2\\\")), 16)));\\n    });\\n    str = str.replace(/(&#x)(\\\\w{1,4});/gi, function($0) {\\n        return String.fromCharCode(parseInt(escape($0).replace(/(%26%23x)(\\\\w{1,4})(%3B)/g, \\\"$2\\\"), 16));\\n    });\\n    str = str.replace(/(&#)(\\\\d{1,6});/gi, function($0) {\\n        return String.fromCharCode(parseInt(escape($0).replace(/(%26%23)(\\\\d{1,6})(%3B)/g, \\\"$2\\\")));\\n    });\\n\\n    return str;\\n}\\n// $.exports.unicode1 = unicode1;\\n// $.exports.reconvert = reconvert;\\nascii.encode = function(obj) {\\n    let encode = this.unicode1(obj.decText);\\n    return encode;\\n}\\nascii.decode = function(obj) {\\n    let decode = this.reconvert(obj.encText);\\n    return decode;\\n}\\n$.exports.ascii = ascii;\"},{\"col_type\":\"text_1\",\"name\":\"获取分类头部\",\"path\":\"classicHeader\",\"rule\":\"js:\\nlet d = [];\\nlet selectColor = '#C04A2F'\\n// 暗橙 E38C4A\\n\\nfunction putKeyIntoMap(key, value) {\\n    const keyMap = JSON.parse(getVar((getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\")+\\\"_all_key_Map\\\"), \\\"{}\\\"));\\n    keyMap[key] = value;\\n    putVar((getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_all_key_Map\\\"), JSON.stringify(keyMap));\\n}\\n\\nfunction getHeaderFromJSONObject(obj) {\\n    for (let key in obj) {\\n        d.push({\\n            title: key == getVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\"), Object.keys(obj)[0]) ? \\\"<b>““””<font color='\\\" + selectColor +\\\"'>\\\" + key + \\\"</font></b>\\\" : key,\\n            url: $(\\\"#noLoading#\\\").lazyRule((key) => {\\n                putVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\"), key);\\n                putVar((getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_cur_index\\\"), key);\\n                refreshPage(false);\\n                return \\\"hiker://empty\\\"\\n            }, key),\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    }\\n    d.push({\\n        col_type: \\\"blank_block\\\"\\n    });\\n    let key = getVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\"), Object.keys(obj)[0]);\\n    putVar((getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_cur_index\\\"), key);\\n    getNextHeaderFromJSONArray(key, obj[key]);\\n    return d;\\n}\\n\\nfunction getNextHeaderFromJSONArray(key, array) {\\n    if (array == undefined || array.length == 0) {\\n        return;\\n    }\\n    let nextHeader = {};\\n    let defaultValue = \\\"\\\";\\n    defaultValue = array[0];\\n    if (Object.prototype.toString.call(array[0]) === '[object Object]') {\\n        defaultValue = Object.keys(array[0])[0];\\n    }\\n    putKeyIntoMap((getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key), getVar((getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key), defaultValue))\\n    putVar((getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_cur_index\\\"), key + \\\"@@\\\" + getVar((getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key), defaultValue));\\n    for (let value of array) {\\n        if (Object.prototype.toString.call(value) === '[object Object]') {\\n            // log(\\\"valueKeys: \\\"+JSON.stringify(Object.keys(value)[0]))\\n            let valueKey = Object.keys(value)[0];\\n            d.push({\\n                title: valueKey == getVar((getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key), defaultValue) ? \\\"<b>““””<font color='\\\" + selectColor +\\\"'>\\\" + valueKey + \\\"</font></b>\\\" : valueKey,\\n                url: $(\\\"#noLoading#\\\").lazyRule((valueKey, key) => {\\n                    function putKeyIntoMap(key, value) {\\n                        const keyMap = JSON.parse(getVar((getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_all_key_Map\\\"), \\\"{}\\\"));\\n                        keyMap[key] = value;\\n                        putVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_all_key_Map\\\", JSON.stringify(keyMap));\\n                    }\\n                    putVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key, valueKey);\\n                    putVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_cur_index\\\", key + \\\"@@\\\" + valueKey);\\n                    putKeyIntoMap(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key, getVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key, \\\"defaultValue\\\"))\\n                    refreshPage(false);\\n                    return \\\"hiker://empty\\\"\\n                }, valueKey, key),\\n                col_type: \\\"scroll_button\\\"\\n            });\\n            nextHeader[valueKey] = value[valueKey];\\n        } else {\\n            d.push({\\n                title: value == getVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key, defaultValue) ? \\\"<b>““””<font color='\\\" + selectColor +\\\"'>\\\" + value + \\\"</font></b>\\\" : value,\\n                url: $(\\\"#noLoading#\\\").lazyRule((value, key) => {\\n                    function putKeyIntoMap(key, value) {\\n                        const keyMap = JSON.parse(getVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_all_key_Map\\\", \\\"{}\\\"));\\n                        keyMap[key] = value;\\n                        putVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_all_key_Map\\\", JSON.stringify(keyMap));\\n                    }\\n                    putVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key, value);\\n                    putKeyIntoMap(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key, getVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key, \\\"defaultValue\\\"))\\n                    putVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_cur_index\\\", key + \\\"@@\\\" + value);\\n                    refreshPage(false);\\n                    return \\\"hiker://empty\\\"\\n                }, value, key),\\n                col_type: \\\"scroll_button\\\"\\n            });\\n        }\\n    }\\n\\n    d.push({\\n        col_type: \\\"blank_block\\\"\\n    });\\n    if (nextHeader !== undefined && nextHeader.length != 0) {\\n        getNextHeaderFromJSONArray(key + \\\"@@\\\" + getVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key, defaultValue), nextHeader[getVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@\\\" + key, defaultValue)]);\\n    }\\n}\\n\\nlet header = {\\n    /**\\n     * 可自定义当前分类头部 id（其实没啥用，就是为了调试不同规则区分一下而已）\\n     */\\n    setId: function(id) {\\n\\t      putVar(\\\"ClassicHeader.id\\\", id)\\n    },\\n    getId: function() {\\n\\t      return getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\");\\n    },\\n    /**\\n     * 获取分类头部，返回视界 setResult 用的数组\\n     */\\n    get: function(obj) {\\n        let result = getHeaderFromJSONObject(obj);\\n        //log(\\\"【子页面】\\\" + JSON.stringify(result))\\n        return result;\\n    },\\n    /**\\n      * 页面关闭时需要注册的生命周期，引入依赖后在 addListener 中调用即可\\n      * 例：\\n         const { header } = $.require(\\\"hiker://page/classicHeader\\\");\\n         addListener(\\\"onClose\\\", $.toString((header) => {\\n          header.onClose();\\n        }, header));\\n      */\\n    onClose: function() {\\n        // putVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"\\\", \\\"编码\\\");\\n        // putVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"@@编码\\\", \\\"佛曰\\\");\\n        let allKeyArr = Object.keys(JSON.parse(getVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_all_key_Map\\\", \\\"{}\\\")));\\n        for (let i in allKeyArr) {\\n            clearVar(allKeyArr[i]);\\n            // log(\\\"【清理后】\\\"+ allKeyArr[i] + \\\": \\\"+JSON.stringify(getVar(allKeyArr[i], \\\"\\\")))\\n        }\\n        clearVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\"))\\n        clearVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_all_key_Map\\\")\\n        clearVar(\\\"ClassicHeader.id\\\")\\n    },\\n    /**\\n     * 获取当前已选多级分类，返回的数据格式为：一级分类@@二级分类@@...，可自行做映射获取 url\\n     */\\n    getCurrentIndex: function() {\\n        return getVar(getVar(\\\"ClassicHeader.id\\\", \\\"classic\\\") + \\\"_cur_index\\\", \\\"\\\");\\n    }\\n}\\n$.exports.header = header\"},{\"col_type\":\"text_1\",\"name\":\"编码类页面\",\"path\":\"encode\",\"rule\":\"js:\\nfunction setEncodePage(d, obj) {\\n    d.push({\\n        title: \\\"编码\\\",\\n        desc: \\\"请输入原文\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getVar(\\\"decode-text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putVar(\\\"decode-text\\\",input)'\\n        },\\n        url: $.toString((obj) => {\\n            obj.decText = input;\\n            // log(\\\"obj.decText: \\\" + obj.decText)\\n            var encode = \\\"\\\";\\n            var tool = {};\\n            for (let key in obj.tools) {\\n                // log(obj.type)\\n                let type = obj.type.split(\\\"@@\\\").pop()\\n                if (type == key) {\\n                    tool = obj.tools[key];\\n                    break;\\n                }\\n            }\\n            encode = tool.encode(obj);\\n            // log(\\\"encode: \\\" + encode)\\n            putVar('encode-text', encode);\\n            refreshPage();\\n            return 'toast://加密成功';\\n        }, obj),\\n    });\\n\\n    d.push({\\n        title: \\\"解码\\\",\\n        desc: \\\"请输入密文\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getVar(\\\"encode-text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putVar(\\\"encode-text\\\",input)'\\n        },\\n        url: $.toString((obj) => {\\n            obj.encText = input;\\n            // log(\\\"obj.encText: \\\" + obj.encText)\\n            var decode = \\\"\\\";\\n            var tool = {};\\n            for (let key in obj.tools) {\\n                let type = obj.type.split(\\\"@@\\\").pop()\\n                if (type == key) {\\n                    tool = obj.tools[key];\\n                    break;\\n                }\\n            }\\n            decode = tool.decode(obj);\\n            putVar('decode-text', decode);\\n            refreshPage();\\n            return 'toast://解密成功';\\n        }, obj),\\n    });\\n\\n    // https://gitee.com/CherishRx/imagewarehouse/raw/master/image/32d29e2fbcdf8d83071deec7f6aa4b7c.png\\n    let cpImgUrl = \\\"https://iconfont.tyrantg.com/api/illustrate.svg?svg_string=%3Csvg%20class%3D%22icon%22%20style%3D%22width%3A%201em%3Bheight%3A%201em%3Bvertical-align%3A%20middle%3Bfill%3A%20currentColor%3Boverflow%3A%20hidden%3B%22%20viewBox%3D%220%200%201024%201024%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M866.133333%20919.466667h-405.333333c-29.866667%200-53.333333-23.466667-53.333333-53.333334v-618.666666c0-29.866667%2023.466667-53.333333%2053.333333-53.333334h405.333333c29.866667%200%2053.333333%2023.466667%2053.333334%2053.333334v618.666666c0%2029.866667-23.466667%2053.333333-53.333334%2053.333334z%22%20fill%3D%22%2369C0FF%22%20%2F%3E%3Cpath%20d%3D%22M770.133333%20428.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333zM770.133333%20556.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333zM770.133333%20684.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333z%22%20fill%3D%22%23FFFFFF%22%20%2F%3E%3Cpath%20d%3D%22M567.466667%20834.133333h-405.333334c-29.866667%200-53.333333-23.466667-53.333333-53.333333v-618.666667c0-29.866667%2023.466667-53.333333%2053.333333-53.333333h405.333334c29.866667%200%2053.333333%2023.466667%2053.333333%2053.333333v618.666667c0%2029.866667-23.466667%2053.333333-53.333333%2053.333333z%22%20fill%3D%22%231890FF%22%20%2F%3E%3Cpath%20d%3D%22M471.466667%20343.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334zM471.466667%20471.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334zM471.466667%20599.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334z%22%20fill%3D%22%23FFFFFF%22%20%2F%3E%3C%2Fsvg%3E\\\"\\n    let clearImgUrl = \\\"https://iconfont.tyrantg.com/api/illustrate.svg?svg_string=%3Csvg%20class%3D%22icon%22%20style%3D%22width%3A%201em%3Bheight%3A%201em%3Bvertical-align%3A%20middle%3Bfill%3A%20currentColor%3Boverflow%3A%20hidden%3B%22%20viewBox%3D%220%200%201024%201024%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M179.2%20588.8h710.4c25.6%200%2032-19.2%2025.6-38.4L832%20364.8c-12.8-19.2-38.4-38.4-64-38.4H620.8V64c0-25.6-19.2-44.8-44.8-44.8H492.8c-19.2%200-38.4%2019.2-38.4%2044.8v262.4H300.8c-25.6%200-51.2%2019.2-57.6%2038.4L153.6%20550.4c-6.4%2019.2%200%2038.4%2025.6%2038.4m691.2%2064H217.6c6.4%2064%200%20147.2-51.2%20198.4-76.8%2064-51.2%20140.8%206.4%20166.4h108.8c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h83.2c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h102.4c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192H704c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h102.4s70.4-25.6%2057.6-102.4c-19.2-115.2-25.6-179.2-44.8-262.4%22%20fill%3D%22%237367D1%22%20%2F%3E%3C%2Fsvg%3E\\\"\\n\\n    d.push({\\n        title: '清空原文',\\n        img: clearImgUrl,\\n        url: \\\"hiker://empty#noLoading#\\\" + \\\"@lazyRule=.js:putVar('decode-text', '');refreshPage();'toast://清空成功'\\\",\\n        col_type: 'icon_2'\\n    });\\n\\n    d.push({\\n        title: '清空密文',\\n        img: clearImgUrl,\\n        url: \\\"hiker://empty#noLoading#\\\" + \\\"@lazyRule=.js:putVar('encode-text', '');refreshPage();'toast://清空成功'\\\",\\n        col_type: 'icon_2'\\n    });\\n\\n    d.push({\\n        title: '复制原文',\\n        img: cpImgUrl,\\n        url: $(\\\"hiker://empty#noLoading#\\\").lazyRule(() => {\\n            var dec = getVar(\\\"decode-text\\\");\\n            if (dec) {\\n                return \\\"copy://\\\" + dec;\\n            } else {\\n                return \\\"toast://内容为空！\\\"\\n            }\\n        }),\\n        col_type: 'icon_2'\\n    });\\n\\n    d.push({\\n        title: '复制密文',\\n        img: cpImgUrl,\\n        url: $(\\\"hiker://empty#noLoading#\\\").lazyRule(() => {\\n            var enc = getVar(\\\"encode-text\\\");\\n            if (enc) {\\n                return \\\"copy://\\\" + enc;\\n            } else {\\n                return \\\"toast://内容为空！\\\"\\n            }\\n        }),\\n        col_type: 'icon_2'\\n    });\\n}\\n$.exports.setEncodePage = setEncodePage\"},{\"col_type\":\"text_1\",\"name\":\"加密类页面\",\"path\":\"crypto\",\"rule\":\"js:\\n// const { ConfigMapping } = $.require(\\\"hiker://page/aes\\\");\\n// log(JSON.stringify(Object.keys(Crypto.ConfigMapping)))\\nconst { buildAESUi } = $.require(\\\"hiker://page/aesui\\\");\\nconst { buildRSAUi } = $.require(\\\"hiker://page/rsaui\\\");\\nfunction setCryptoPage(d, obj) {\\n    if (obj.type.includes(\\\"对称加密\\\") && !obj.type.includes(\\\"非对称加密\\\")) {\\n        buildAESUi(d, obj)\\n    } else if (obj.type.includes(\\\"非对称加密\\\")) {\\n        buildRSAUi(d, obj)\\n    }\\n}\\n$.exports.setCryptoPage = setCryptoPage\"},{\"col_type\":\"text_1\",\"name\":\"AES\",\"path\":\"aes\",\"rule\":\"js:\\neval(getCryptoJS());\\nlet Crypto = {\\n    ConfigMapping: {\\n        encType: {\\n            \\\"AES\\\": CryptoJS.AES.encrypt,\\n            \\\"DES\\\": CryptoJS.DES.encrypt,\\n            \\\"3DES\\\": CryptoJS.TripleDES.encrypt,\\n        },\\n        decType: {\\n            \\\"AES\\\": CryptoJS.AES.decrypt,\\n            \\\"DES\\\": CryptoJS.DES.decrypt,\\n            \\\"3DES\\\": CryptoJS.TripleDES.decrypt,\\n        },\\n        mode: {\\n            \\\"CBC\\\": CryptoJS.mode.CBC,\\n            \\\"ECB\\\": CryptoJS.mode.ECB,\\n            \\\"CFB\\\": CryptoJS.mode.CFB,\\n            \\\"CTR\\\": CryptoJS.mode.CTR,\\n            \\\"OFB\\\": CryptoJS.mode.OFB\\n        },\\n        pad: {\\n            \\\"Pkcs7\\\": CryptoJS.pad.Pkcs7,\\n            \\\"ZeroPadding\\\": CryptoJS.pad.ZeroPadding,\\n            \\\"NoPadding\\\": CryptoJS.pad.NoPadding,\\n            \\\"Iso97971\\\": CryptoJS.pad.Iso97971,\\n            \\\"AnsiX923\\\": CryptoJS.pad.AnsiX923,\\n            // \\\"Iso10126\\\": CryptoJS.pad.Iso10126,\\n        },\\n        encode: {\\n            \\\"Base64\\\": \\\"Base64\\\",\\n            \\\"HEX\\\": \\\"HEX\\\"\\n        },\\n        blockSize: {\\n            \\\"AES\\\": {\\n                \\\"AES-128\\\": 128,\\n                \\\"AES-192\\\": 192,\\n                \\\"AES-256\\\": 256,\\n            }\\n        },\\n        keyEncodeType: {\\n            \\\"UTF-8\\\": \\\"UTF-8\\\",\\n            \\\"Hex\\\": \\\"Hex\\\",\\n            \\\"Latin1\\\": \\\"Latin1\\\"\\n        },\\n        ivEncodeType: {\\n            \\\"UTF-8\\\": \\\"UTF-8\\\",\\n            \\\"Hex\\\": \\\"Hex\\\",\\n            \\\"Latin1\\\": \\\"Latin1\\\"\\n        }\\n    },\\n    config: {\\n        type: {\\n            key: \\\"crypto_type\\\",\\n            get: function() {\\n                return getVar(this.key, \\\"AES\\\");\\n            },\\n            set: function(newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n        mode: {\\n            key: \\\"crypto_select_mode\\\",\\n            get: function() {\\n                return getVar(this.key, \\\"CBC\\\");\\n            },\\n            set: function(newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n        pad: {\\n            key: \\\"crypto_select_pad\\\",\\n            get: function() {\\n                return getVar(this.key, \\\"Pkcs7\\\");\\n            },\\n            set: function(newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n        iv: {\\n            key: \\\"crypto_input_iv\\\",\\n            get: function() {\\n                return getVar(this.key, \\\"\\\");\\n            },\\n            set: function(newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n        encode: {\\n            key: \\\"crypto_output_encode\\\",\\n            get: function() {\\n                return getVar(this.key, Crypto.ConfigMapping.encode[\\\"Base64\\\"])\\n            },\\n            set: function(newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n        key: {\\n            key: \\\"crypto_key\\\",\\n            get: function() {\\n                return getVar(this.key, \\\"\\\");\\n            },\\n            set: function(newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n        text: {\\n            key: \\\"crypto_text\\\",\\n            get: function() {\\n                return getVar(this.key, \\\"\\\");\\n            },\\n            set: function(newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n        cipherText: {\\n            key: \\\"crypto_cipher_text\\\",\\n            get: function() {\\n                return getVar(this.key, \\\"\\\");\\n            },\\n            set: function(newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n        blockSize: {\\n            key: \\\"crypto_block_size\\\",\\n            get: function() {\\n                return getVar(this.key, \\\"AES-128\\\");\\n            },\\n            set: function(newValue) {\\n                putVar(this.key, newValue);\\n            }\\n\\n        },\\n        keyEncodeType: {\\n            key: \\\"crypto_key_encode_type\\\",\\n            get: function() {\\n                // TODO 此处不知为何 Crypto.ConfigMapping.keyEncodeType[\\\"UTF-8\\\"] 会报 Crypto undefined\\n                return getVar(this.key, \\\"UTF-8\\\")\\n            },\\n            set: function(newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n        ivEncodeType: {\\n            key: \\\"crypto_iv_encode_type\\\",\\n            get: function() {\\n                return getVar(this.key, \\\"UTF-8\\\")\\n            },\\n            set: function(newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n    },\\n    onClose: function() {\\n        let configKeys = Object.keys(this.config);\\n        for (let confKey of configKeys) {\\n            let key = this.config[confKey].key;\\n            clearVar(key);\\n        }\\n    },\\n    buildConfig: function() {\\n        let mode = this.config.mode.get();\\n        let pad = this.config.pad.get();\\n        let iv = this.config.iv.get();\\n        let conf = {};\\n        conf.mode = this.ConfigMapping.mode[mode];\\n        conf.padding = this.ConfigMapping.pad[pad]\\n        if (mode != \\\"ECB\\\" && iv.length != 0) {\\n            conf.iv = CryptoJS.enc.Utf8.parse(iv);\\n            if (this.config.ivEncodeType.get() == \\\"Hex\\\") {\\n                iv = iv.replace(\\\"[HEX]:\\\", \\\"\\\")\\n                conf.iv = CryptoJS.enc.Hex.parse(iv);\\n            } else if (this.config.ivEncodeType.get() == \\\"Latin1\\\") {\\n                conf.iv = CryptoJS.enc.Latin1.parse(iv);\\n            }\\n        }\\n        return conf\\n    },\\n    encryptor: function(obj) {\\n        // 原文\\n        let text = obj.decText;\\n        if (text) {\\n            let keyString = this.config.key.get()\\n            let key = CryptoJS.enc.Utf8.parse(keyString);\\n            if (this.config.keyEncodeType.get() == \\\"Hex\\\") {\\n                keyString = keyString.replace(\\\"[HEX]:\\\", \\\"\\\")\\n                key = CryptoJS.enc.Hex.parse(keyString);\\n            } else if (this.config.keyEncodeType.get() == \\\"Latin1\\\") {\\n                key = CryptoJS.enc.Latin1.parse(keyString);\\n            }\\n            try {\\n                let conf = this.buildConfig()\\n                let encrypted = this.ConfigMapping.encType[this.config.type.get()](text, key, conf);\\n                let encode = this.config.encode.get()\\n                let cipherText = encrypted.toString();\\n                if (encode === 'HEX') {\\n                    cipherText = CryptoJS.enc.Hex.stringify(CryptoJS.enc.Base64.parse(cipherText));\\n                }\\n                // 密文\\n                this.config.cipherText.set(cipherText)\\n                return cipherText;\\n            } catch (e) {\\n                log(e.message)\\n                setError(e.message)\\n            }\\n        } else {\\n            throw new Error(\\\"明文不能为空！\\\")\\n        }\\n    },\\n    decryptor: function(obj) {\\n        let text = obj.encText;\\n        if (text) {\\n            let encode = this.config.encode.get()\\n            let cipherText;\\n            if (encode === 'Base64') {\\n                cipherText = text\\n            } else if (encode === 'HEX') {\\n                cipherText = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(text))\\n            }\\n            let keyString = this.config.key.get()\\n            let key = CryptoJS.enc.Utf8.parse(keyString);\\n            if (this.config.keyEncodeType.get() == \\\"Hex\\\") {\\n                keyString = keyString.replace(\\\"[HEX]:\\\", \\\"\\\")\\n                key = CryptoJS.enc.Hex.parse(keyString);\\n            } else if (this.config.keyEncodeType.get() == \\\"Latin1\\\") {\\n                key = CryptoJS.enc.Latin1.parse(keyString);\\n            }\\n            try {\\n                let conf = this.buildConfig()\\n                let decrypted = this.ConfigMapping.decType[this.config.type.get()](cipherText, key, conf);\\n                let decryptedStr = decrypted.toString(CryptoJS.enc.Utf8);\\n                if (!decryptedStr) {\\n                    throw new Error(\\\"请检查密钥 key、偏移量 iv 以及密文是否正确！\\\");\\n                }\\n                this.config.text.set(decryptedStr)\\n                return decryptedStr\\n            } catch (e) {\\n                throw new Error(\\\"解密失败！\\\" + e.message);\\n            }\\n        } else {\\n            throw new Error(\\\"密文不能为空！\\\")\\n        }\\n    },\\n    checkKey: function(obj) {\\n        let key = Crypto.config.key.get();\\n        if (key.length === 0) {\\n            throw new Error(\\\"密钥 key 不能为空！\\\")\\n        }\\n        let type = Crypto.config.type.get();\\n        let blockSize = 128;\\n        try {\\n            blockSize = Crypto.ConfigMapping[\\\"blockSize\\\"][type][Crypto.config.blockSize.get()]\\n            // log(\\\"checkKey#blockSize:\\\" + blockSize)\\n        } catch (e) {}\\n        if (type === \\\"DES\\\") {\\n            blockSize = 64;\\n        }\\n        if (Crypto.config.keyEncodeType.get() == \\\"Hex\\\") {\\n            key = key.replace(\\\"[HEX]:\\\", \\\"\\\")\\n            blockSize = blockSize * 2;\\n        }\\n        // 设置数据块长度\\n        let keySize = key.length * 8;\\n        // log(\\\"checkKey#keySize:\\\" + keySize)\\n        // log(\\\"checkKey#keySize/8:\\\" + keySize/8)\\n        // log(\\\"checkKey#blockSize:\\\" + blockSize)\\n        // log(\\\"checkKey#blockSize/8:\\\" + blockSize / 8)\\n        if (keySize < blockSize) {\\n            obj.from = Crypto.config.keyEncodeType.key\\n            let newKey = Crypto.fillKeys(obj, key, blockSize / 8);\\n            Crypto.config.key.set(newKey)\\n            // log(\\\"checkKey#newKey: \\\" + newKey)\\n            // log(\\\"checkKey#newKey.Size: \\\" + newKey.length * 8)\\n            throw new Error('密钥 key 长度过短，已自动 `\\\\\\\\x00` 空填充，请再次执行加/解密')\\n        } else if (keySize > blockSize) {\\n            // TODO 超出部分将被忽略\\n            throw new Error(\\\"密钥 key 长度 \\\" + key.length + \\\" 过长，长度应为 \\\" + blockSize / 8 + \\\"，请自行检查，然后重新执行加/解密\\\")\\n        } else {\\n            return;\\n        }\\n    },\\n    checkIv: function(obj) {\\n        let iv = Crypto.config.iv.get();\\n        let mode = Crypto.config.mode.get();\\n        if (mode === 'ECB') {\\n            return;\\n        }\\n        if (iv.length === 0) {\\n            throw new Error(\\\"偏移量 iv 不能为空！\\\")\\n        }\\n        let type = Crypto.config.type.get();\\n        let blockSize = 128;\\n        if (type === 'DES' || type === '3DES') {\\n            blockSize = 64;\\n        }\\n        if (Crypto.config.ivEncodeType.get() == \\\"Hex\\\") {\\n            iv = iv.replace(\\\"[HEX]:\\\", \\\"\\\")\\n            blockSize = blockSize * 2;\\n        }\\n        // 设置数据块长度\\n        let ivSize = iv.length * 8;\\n        if (ivSize < blockSize) {\\n            obj.from = Crypto.config.ivEncodeType.key\\n            let newIv = Crypto.fillKeys(obj, iv, blockSize / 8);\\n            Crypto.config.iv.set(newIv)\\n            throw new Error(\\\"偏移量 iv 长度过短，已自动 `\\\\\\\\x00` 空填充，请再次执行加/解密\\\")\\n        } else if (ivSize > blockSize) {\\n            throw new Error(\\\"偏移量 iv 长度 \\\" + iv.length + \\\" 过长，长度应为 \\\" + blockSize / 8 + \\\"，请自行检查，然后重新执行加/解密\\\")\\n        } else {\\n            return;\\n        }\\n    },\\n    /**\\n     * 密钥 `\\\\x00` 空填充\\n     * @param {string} key 密钥\\n     * @param {Number} keySize 填充长度, 值: 128, 192, 256\\n     */\\n    fillKeys: function(obj, key, keySize) {\\n        let Tool = $.require(\\\"hiker://page/utiliy?rule=\\\" + obj.ruleTitle);\\n        let encodeType = \\\"UTF-8\\\"\\n        if (obj.from == Crypto.config.keyEncodeType.key) {\\n            encodeType = Crypto.config.keyEncodeType.get();\\n        } else if (obj.from == Crypto.config.ivEncodeType.key) {\\n            encodeType = Crypto.config.ivEncodeType.get();\\n        }\\n        if (encodeType == \\\"Hex\\\") {\\n            return \\\"[HEX]:\\\" + Tool.fillZeroPadding(key, keySize);\\n        }\\n        return Tool.fillNullPadding(key, keySize);\\n    },\\n    AES: {\\n        encrypt: function(obj) {\\n            Crypto.config.type.set(\\\"AES\\\")\\n            // log(\\\"AES-Encrypt-obj:\\\" + JSON.stringify(obj))\\n            return Crypto.encryptor(obj);\\n        },\\n        decrypt: function(obj) {\\n            Crypto.config.type.set(\\\"AES\\\")\\n            return Crypto.decryptor(obj);\\n        }\\n    },\\n    DES: {\\n        encrypt: function(obj) {\\n            Crypto.config.type.set(\\\"DES\\\")\\n            return Crypto.encryptor(obj);\\n        },\\n        decrypt: function(obj) {\\n            Crypto.config.type.set(\\\"DES\\\")\\n            return Crypto.decryptor(obj);\\n        }\\n    },\\n    \\\"3DES\\\": {\\n        encrypt: function(obj) {\\n            Crypto.config.type.set(\\\"3DES\\\")\\n            return Crypto.encryptor(obj);\\n        },\\n        decrypt: function(obj) {\\n            Crypto.config.type.set(\\\"3DES\\\")\\n            return Crypto.decryptor(obj);\\n        }\\n\\n    },\\n}\\n\\n$.exports = Crypto;\"},{\"col_type\":\"text_1\",\"name\":\"编码类算法模板\",\"path\":\"template_encode\",\"rule\":\"js:\\nlet template = {};\\n// 编码\\ntemplate.encode = function(obj) {\\n    log(\\\"我是原文\\\"+ obj.decText)\\n    let encode = \\\"原文通过加密得到的密文字符串\\\";\\n    return encode;\\n}\\n// 解码\\ntemplate.decode = function(obj) {\\n    log(\\\"我是密文\\\"+ obj.encText)\\n    let decode = \\\"密文通过解密得到的原文字符串\\\";\\n    return decode;\\n}\\n// 导出给外部通过 require 方法使用\\n$.exports.template = template\"},{\"col_type\":\"text_1\",\"name\":\"AES-UI\",\"path\":\"aesui\",\"rule\":\"js:\\nfunction buildAESUi(d, obj) {\\n    let config = $.require(\\\"hiker://page/aes?rule=\\\" + obj.ruleTitle).config;\\n    if (obj.type.includes(\\\"AES\\\")) {\\n        config.type.set(\\\"AES\\\")\\n    }\\n    if (obj.type.includes(\\\"DES\\\") && !obj.type.includes(\\\"3DES\\\")) {\\n        config.type.set(\\\"DES\\\")\\n    }\\n    if (obj.type.includes(\\\"3DES\\\")) {\\n        config.type.set(\\\"3DES\\\")\\n        // https://tool.lmeee.com/jiami/des3 说明：3DES数据块长度为64位，所以IV长度需要为8个字符（ECB模式不用IV），密钥长度为16或24个字符（8个字符以内则结果与DES相同），IV与密钥超过长度则截取，不足则在末尾填充'\\\\0'补足\\n    }\\n    d.push({\\n        title: \\\"加密\\\",\\n        desc: \\\"请输入明文\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getVar(\\\"crypto_text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putVar(\\\"crypto_text\\\",input)'\\n        },\\n        url: $.toString((obj) => {\\n            obj.decText = input;\\n            // log(\\\"obj.decText: \\\" + obj.decText)\\n            let toastText = \\\"加密成功\\\";\\n            var cipherText = \\\"\\\";\\n            let Crypto = $.require(\\\"hiker://page/aes?rule=\\\" + obj.ruleTitle);\\n            let config = Crypto.config;\\n            try {\\n                Crypto.checkKey(obj);\\n                Crypto.checkIv(obj);\\n                obj.tools[\\\"AES\\\"] = Crypto.AES;\\n                obj.tools[\\\"DES\\\"] = Crypto.DES;\\n                obj.tools[\\\"3DES\\\"] = Crypto[\\\"3DES\\\"];\\n                var tool = {};\\n                for (let key in obj.tools) {\\n                    if (obj.type.includes(\\\"3DES\\\")) {\\n                        tool = obj.tools[\\\"3DES\\\"];\\n                        break;\\n                    }\\n                    if (obj.type.includes(key) && !obj.type.includes(\\\"3DES\\\")) {\\n                        tool = obj.tools[key];\\n                        break;\\n                    }\\n                }\\n                cipherText = tool.encrypt(obj);\\n                // log(\\\"cipherText: \\\" + cipherText)\\n            } catch (e) {\\n                cipherText = e.message;\\n                toastText = \\\"加密失败\\\";\\n            }\\n            config.cipherText.set(cipherText)\\n            refreshPage();\\n            return 'toast://' + toastText;\\n        }, obj),\\n    });\\n    buildConfigsUI(d, obj);\\n    d.push({\\n        title: \\\"解密\\\",\\n        desc: \\\"请输入密文\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getVar(\\\"crypto_cipher_text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putVar(\\\"crypto_cipher_text\\\",input)'\\n        },\\n        url: $.toString((obj) => {\\n            obj.encText = input;\\n            // log(\\\"obj.encText: \\\" + obj.encText)\\n            let toastText = \\\"解密成功\\\";\\n            let Crypto = $.require(\\\"hiker://page/aes?rule=\\\" + obj.ruleTitle);\\n            var text = \\\"\\\";\\n            let config = Crypto.config;\\n            try {\\n                Crypto.checkKey(obj);\\n                Crypto.checkIv(obj);\\n                obj.tools[\\\"AES\\\"] = Crypto.AES;\\n                obj.tools[\\\"DES\\\"] = Crypto.DES\\n                var tool = {};\\n                for (let key in obj.tools) {\\n                    if (obj.type.includes(key)) {\\n                        tool = obj.tools[key];\\n                        break;\\n                    }\\n                }\\n                // log(obj.encText)\\n                text = tool.decrypt(obj);\\n            } catch (e) {\\n                text = e.message;\\n                toastText = \\\"解密失败\\\";\\n            }\\n            config.text.set(text)\\n            refreshPage();\\n            return 'toast://' + toastText;\\n        }, obj),\\n    });\\n}\\n\\nfunction buildConfigsUI(d, obj) {\\n    let Crypto = $.require(\\\"hiker://page/aes?rule=\\\" + obj.ruleTitle);\\n    let ConfigMapping = Crypto.ConfigMapping;\\n    let config = Crypto.config;\\n    let mappingKeys = Object.keys(ConfigMapping);\\n    let modes = Object.keys(ConfigMapping[\\\"mode\\\"]);\\n    // log(JSON.stringify(modes))\\n    let paddings = Object.keys(ConfigMapping[\\\"pad\\\"]);\\n    // log(JSON.stringify(paddings))\\n    let encodes = Object.keys(ConfigMapping[\\\"encode\\\"]);\\n    // log(JSON.stringify(encodes))\\n    d.push({\\n        title: '““””<strong><font color=\\\"black\\\">模式</font></strong>',\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"scroll_button\\\"\\n    })\\n    for (let mode of modes) {\\n        d.push({\\n            title: mode == config.mode.get() ? \\\"‘‘\\\" + mode + \\\"’’\\\" : mode,\\n            url: $(\\\"#noLoading#\\\").lazyRule((mode, config) => {\\n                config.mode.set(mode)\\n                refreshPage(false);\\n                return \\\"hiker://empty\\\"\\n            }, mode, config),\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    }\\n    d.push({\\n        col_type: \\\"blank_block\\\"\\n    })\\n\\n    d.push({\\n        title: '““””<strong><font color=\\\"black\\\">填充</font></strong>',\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"scroll_button\\\"\\n    })\\n    for (let padding of paddings) {\\n        d.push({\\n            title: padding == config.pad.get() ? \\\"‘‘\\\" + padding + \\\"’’\\\" : padding,\\n            url: $(\\\"#noLoading#\\\").lazyRule((padding, config) => {\\n                config.pad.set(padding)\\n                refreshPage(false);\\n                return \\\"hiker://empty\\\"\\n            }, padding, config),\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    }\\n    d.push({\\n        col_type: \\\"blank_block\\\"\\n    })\\n\\n    if (config.type.get() == 'AES') {\\n        let blockSizes = Object.keys(ConfigMapping[\\\"blockSize\\\"][config.type.get()]);\\n        d.push({\\n            title: '““””<strong><font color=\\\"black\\\">数据块</font></strong>',\\n            url: \\\"hiker://empty\\\",\\n            col_type: \\\"scroll_button\\\"\\n        })\\n        for (let blockSize of blockSizes) {\\n            d.push({\\n                title: blockSize == config.blockSize.get() ? \\\"‘‘\\\" + blockSize + \\\"’’\\\" : blockSize,\\n                url: $(\\\"#noLoading#\\\").lazyRule((blockSize, config) => {\\n                    config.blockSize.set(blockSize)\\n                    refreshPage(false);\\n                    return \\\"hiker://empty\\\"\\n                }, blockSize, config),\\n                col_type: \\\"scroll_button\\\"\\n            });\\n        }\\n        d.push({\\n            col_type: \\\"blank_block\\\"\\n        })\\n    }\\n\\n    d.push({\\n        title: '““””<strong><font color=\\\"black\\\">密文编码</font></strong>',\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"scroll_button\\\"\\n    })\\n    for (let encode of encodes) {\\n        d.push({\\n            title: encode == config.encode.get() ? \\\"‘‘\\\" + encode + \\\"’’\\\" : encode,\\n            url: $(\\\"#noLoading#\\\").lazyRule((encode, config) => {\\n                config.encode.set(encode);\\n                refreshPage(false);\\n                return \\\"hiker://empty\\\"\\n            }, encode, config),\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    }\\n    // AES 密钥 key 16/24/32 字符 => 128/192/256 bit\\n    let blockSize = 128;\\n    try {\\n        blockSize = ConfigMapping[\\\"blockSize\\\"][config.type.get()][config.blockSize.get()]\\n    } catch (e) {}\\n    if (config.type.get() === \\\"DES\\\") {\\n        blockSize = 64;\\n    }\\n    obj.blockSize = blockSize;\\n    let keyLen = blockSize / 8;\\n    let keyLenStr = keyLen + \\\" 个字符\\\"\\n    if (config.keyEncodeType.get() == 'Hex') {\\n        keyLenStr = (keyLen * 2) + \\\" 个十六进制字符\\\";\\n    }\\n    d.push({\\n        title: \\\"随机 key\\\",\\n        desc: \\\"密钥 key, 必须 \\\" + keyLenStr,\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            /*height: -1,\\n            type: \\\"textarea\\\",*/\\n            defaultValue: config.key.get(),\\n            onChange: $.toString((config) => {\\n                config.key.set(input)\\n            }, config)\\n        },\\n        url: $.toString((obj, config) => {\\n            let Tool = $.require(\\\"hiker://page/utiliy?rule=\\\" + obj.ruleTitle);\\n            let keyLen = obj.blockSize / 8;\\n            if (config.type.get() === 'DES') {\\n                keyLen = 8;\\n            }\\n            let randomKey = Tool.randomString(keyLen);\\n            if (config.keyEncodeType.get() == 'Hex') {\\n                let hex = $.require(\\\"hiker://page/hex?rule=\\\" + obj.ruleTitle).hex;\\n                obj.decText = randomKey\\n                randomKey = hex.encode(obj)\\n            }\\n            config.key.set(randomKey);\\n            refreshPage(false)\\n        }, obj, config)\\n    });\\n\\n    d.push({\\n        title: '““””<strong><font color=\\\"black\\\">密钥编码</font></strong>',\\n        url: $(\\\"#noLoading#\\\").lazyRule((config) => {\\n            config.keyEncodeType.set(\\\"UTF-8\\\");\\n            refreshPage(false);\\n            return \\\"toast://重置成功！\\\";\\n        }, config),\\n        col_type: \\\"scroll_button\\\"\\n    })\\n    let keyEncodeTypes = Object.keys(ConfigMapping[\\\"keyEncodeType\\\"]);\\n    // log(JSON.stringify(keyEncodeTypes))\\n    for (let keyEncodeType of keyEncodeTypes) {\\n        d.push({\\n            title: keyEncodeType == config.keyEncodeType.get() ? \\\"‘‘\\\" + keyEncodeType + \\\"’’\\\" : keyEncodeType,\\n            url: $(\\\"#noLoading#\\\").lazyRule((keyEncodeType, config, obj) => {\\n                let toastText = \\\"hiker://empty\\\";\\n                let hex = $.require(\\\"hiker://page/hex?rule=\\\" + obj.ruleTitle).hex;\\n                let key = config.key.get();\\n                let oldKeyEncodeType = config.keyEncodeType.get();\\n                switch (oldKeyEncodeType) {\\n                    case \\\"UTF-8\\\":\\n                        if (keyEncodeType == \\\"Hex\\\") {\\n                            obj.decText = key\\n                            if (key.length !== 0) {\\n                                config.key.set(hex.encode(obj))\\n                            }\\n                        }\\n                        config.keyEncodeType.set(keyEncodeType);\\n                        refreshPage(false);\\n                        break;\\n                    case \\\"Hex\\\":\\n                        if (key.length == 0) {\\n                            config.keyEncodeType.set(keyEncodeType);\\n                            refreshPage(false);\\n                        } else {\\n                            toastText = 'toast://当前不支持 Hex 转其他编码，若需要重置选项请点击[密钥编码]'\\n                        }\\n                        break;\\n                }\\n                return toastText;\\n            }, keyEncodeType, config, obj),\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    }\\n\\n    if (config.mode.get() !== \\\"ECB\\\") {\\n        let ivSize = (config.type.get() === \\\"DES\\\" || config.type.get() === \\\"3DES\\\") ? 64 : 128;\\n        obj.ivSize = ivSize;\\n        let ivLen = ivSize / 8;\\n        let ivLenStr = ivLen + \\\" 个字符\\\"\\n        if (config.ivEncodeType.get() == 'Hex') {\\n            ivLenStr = (ivLen * 2) + \\\" 个十六进制字符\\\";\\n        }\\n        d.push({\\n            title: \\\"随机 iv\\\",\\n            desc: \\\"偏移量 iv, 必须 \\\" + ivLenStr,\\n            col_type: 'input',\\n            extra: {\\n                // titleVisible: false,\\n                /*height: -1,\\n                type: \\\"textarea\\\",*/\\n                defaultValue: config.iv.get(),\\n                onChange: $.toString((config) => {\\n                    config.iv.set(input)\\n                }, config)\\n            },\\n            url: $.toString((obj, config) => {\\n                let Tool = $.require(\\\"hiker://page/utiliy?rule=\\\" + obj.ruleTitle);\\n                let ivLen = obj.ivSize / 8;\\n                let randomIv = Tool.randomString(ivLen);\\n                if (config.ivEncodeType.get() == 'Hex') {\\n                    let hex = $.require(\\\"hiker://page/hex?rule=\\\" + obj.ruleTitle).hex;\\n                    obj.decText = randomIv\\n                    randomIv = hex.encode(obj)\\n                }\\n                config.iv.set(randomIv);\\n                refreshPage(false)\\n            }, obj, config)\\n        });\\n        d.push({\\n            title: '““””<strong><font color=\\\"black\\\">偏移量编码</font></strong>',\\n            url: $(\\\"#noLoading#\\\").lazyRule((config) => {\\n                config.ivEncodeType.set(\\\"UTF-8\\\");\\n                refreshPage(false);\\n                return \\\"toast://重置成功！\\\";\\n            }, config),\\n            col_type: \\\"scroll_button\\\"\\n        })\\n        let ivEncodeTypes = Object.keys(ConfigMapping[\\\"ivEncodeType\\\"]);\\n        // log(JSON.stringify(keyEncodeTypes))\\n        for (let ivEncodeType of ivEncodeTypes) {\\n            d.push({\\n                title: ivEncodeType == config.ivEncodeType.get() ? \\\"‘‘\\\" + ivEncodeType + \\\"’’\\\" : ivEncodeType,\\n                url: $(\\\"#noLoading#\\\").lazyRule((ivEncodeType, config, obj) => {\\n                    let toastText = \\\"hiker://empty\\\";\\n                    let hex = $.require(\\\"hiker://page/hex?rule=\\\" + obj.ruleTitle).hex;\\n                    let iv = config.iv.get();\\n                    let oldIvEncodeType = config.ivEncodeType.get();\\n                    switch (oldIvEncodeType) {\\n                        case \\\"UTF-8\\\":\\n                            if (ivEncodeType == \\\"Hex\\\") {\\n                                obj.decText = iv\\n                                if (iv.length !== 0) {\\n                                    config.iv.set(hex.encode(obj))\\n                                }\\n                            }\\n                            config.ivEncodeType.set(ivEncodeType);\\n                            refreshPage(false);\\n                            break;\\n                        case \\\"Hex\\\":\\n                            if (iv.length == 0) {\\n                                config.ivEncodeType.set(ivEncodeType);\\n                                refreshPage(false);\\n                            } else {\\n                                toastText = 'toast://当前不支持 Hex 转其他编码，若需要重置选项请点击[偏移量编码]'\\n                            }\\n                            break;\\n                    }\\n                    return toastText;\\n                }, ivEncodeType, config, obj),\\n                col_type: \\\"scroll_button\\\"\\n            });\\n        }\\n    } else {\\n        config.iv.set(\\\"\\\");\\n    }\\n}\\n$.exports.buildAESUi = buildAESUi\"},{\"col_type\":\"rich_text\",\"name\":\"RSA-UI\",\"path\":\"rsaui\",\"rule\":\"js:\\nlet navigator = {};\\nlet window = {\\n    navigator: navigator\\n};\\n\\nfunction buildRSAUi(d, obj) {\\n    /*d.push({\\n        title: '<p style=\\\"text-align: center;\\\">目前无法实现，敬请期待（咕咕咕）~</p>',\\n        col_type: 'rich_text'\\n    })*/\\n    // https://cdn.jsdelivr.net/npm/keypair@1.0.3/index.min.js\\n    // https://cdn.jsdelivr.net/gh/wwwtyro/cryptico@master/cryptico.min.js\\n    // let cryptico = request(\\\"https://cdn.jsdelivr.net/gh/wwwtyro/cryptico@master/cryptico.min.js\\\")\\n    // eval(cryptico)\\n    d.push({\\n            title: \\\"清空\\\",\\n            desc: '请输入 PEM 格式的公钥或私钥，以 \\\"-----BEGIN XXX KEY-----\\\" 开头，\\\"-----END XX KEY-----\\\" 结尾（也可以没有这两个标识）',\\n            col_type: 'input',\\n            extra: {\\n                // titleVisible: false,\\n                defaultValue: getMyVar(\\\"rsa_pub_or_pri_key\\\", \\\"\\\"),\\n                type: \\\"textarea\\\",\\n                onChange: 'putMyVar(\\\"rsa_pub_or_pri_key\\\",input)'\\n            },\\n            url: $.toString((obj) => {\\n                clearMyVar(\\\"rsa_pub_or_pri_key\\\")\\n                refreshPage(false)\\n                return \\\"hiker://empty\\\"\\n            }, obj)\\n        }\\n        /*, {\\n                title: \\\"生成\\\",\\n                desc: \\\"请输入/生成私钥\\\",\\n                col_type: 'input',\\n                extra: {\\n                    // titleVisible: false,\\n                    defaultValue: getVar(\\\"rsa_pri_key\\\", \\\"\\\"),\\n                    type: \\\"textarea\\\",\\n                    onChange: 'putVar(\\\"rsa_pri_key\\\",input)'\\n                },\\n                url: $.toString((obj) => {\\n                    return \\\"hiker://empty\\\"\\n                }, obj)\\n            }*/\\n    )\\n\\n    d.push({\\n        title: \\\"清空\\\",\\n        desc: \\\"请输入需要加密或解密的内容\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getMyVar(\\\"rsa_handle_text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putMyVar(\\\"rsa_handle_text\\\",input)'\\n        },\\n        url: $.toString((obj) => {\\n            clearMyVar(\\\"rsa_handle_text\\\")\\n            refreshPage(false)\\n            return \\\"hiker://empty\\\"\\n        }, obj)\\n    })\\n    obj.modes = [\\\"正常模式\\\", \\\"变态模式\\\"]\\n    obj.choices = [\\\"是\\\", \\\"否\\\"]\\n\\n    function isNormalMode(obj, mode) {\\n        return mode == getMyVar(\\\"rsa_select_mode\\\", obj.modes[0])\\n    }\\n\\n    d.push({\\n        title: '““””<strong><font color=\\\"black\\\">模式</font></strong>',\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"scroll_button\\\"\\n    })\\n    for (let mode of obj.modes) {\\n        d.push({\\n            title: isNormalMode(obj, mode) ? \\\"‘‘\\\" + mode + \\\"’’\\\" : mode,\\n            url: $(\\\"#noLoading#\\\").lazyRule((mode) => {\\n                putMyVar(\\\"rsa_select_mode\\\", mode)\\n                refreshPage(false);\\n                return \\\"hiker://empty\\\"\\n            }, mode),\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    }\\n    d.push({\\n        col_type: \\\"blank_block\\\"\\n    })\\n    d.push({\\n        title: '““””<strong><font color=\\\"black\\\">分段加密</font></strong>',\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"scroll_button\\\"\\n    })\\n\\n    function isLong(obj, longStat) {\\n        return getMyVar(\\\"rsa_long_status\\\", obj.choices[1]) == longStat\\n    }\\n    for (let longStat of obj.choices) {\\n        d.push({\\n            title: isLong(obj, longStat) ? \\\"‘‘\\\" + longStat + \\\"’’\\\" : longStat,\\n            url: $(\\\"#noLoading#\\\").lazyRule((longStat) => {\\n                putMyVar(\\\"rsa_long_status\\\", longStat)\\n                refreshPage(false);\\n                return \\\"hiker://empty\\\"\\n            }, longStat),\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    }\\n    d.push({\\n        title: (isNormalMode(obj, obj.modes[0]) ? \\\"公钥\\\" : \\\"私钥\\\") + \\\"加密\\\",\\n        col_type: 'text_2',\\n        extra: {},\\n        url: $(\\\"#noLoading#\\\").lazyRule((obj, isNormalMode, isLong) => {\\n            let handleText = getMyVar(\\\"rsa_handle_text\\\", \\\"\\\")\\n            let key = getMyVar(\\\"rsa_pub_or_pri_key\\\", \\\"\\\")\\n                .replace(/-----BEGIN.*?KEY-----/, '')\\n                .replace(/-----END.*?KEY-----/, '');\\n            // log(key)\\n            if (handleText === '') return 'toast://待处理文本输入为空，请检查!'\\n            if (key === '') return 'toast://密钥输入为空，请检查!'\\n            let toastText = \\\"加密成功\\\"\\n            let result = \\\"\\\"\\n            try {\\n                let modes = obj.modes\\n                let choices = obj.choices\\n                let type = isNormalMode(obj, modes[0]) ? 1 : 2\\n                let longStat = isLong(obj, choices[0]) ? 2 : 1\\n                let options = {\\n                    config: \\\"RSA/ECB/PKCS1Padding\\\",\\n                    type: type,\\n                    long: longStat,\\n                    block: true\\n                }\\n                result = rsaEncrypt(handleText, key, options)\\n            } catch (e) {\\n                //log(e.message)\\n                result = e.message\\n                toastText = \\\"加密失败\\\"\\n            }\\n            putMyVar(\\\"rsa_result_text\\\", result);\\n            refreshPage();\\n            return \\\"toast://\\\" + toastText\\n        }, obj, isNormalMode, isLong)\\n    }, {\\n        title: (isNormalMode(obj, obj.modes[0]) ? \\\"私钥\\\" : \\\"公钥\\\") + \\\"解密\\\",\\n        col_type: 'text_2',\\n        extra: {},\\n        url: $(\\\"#noLoading#\\\").lazyRule((obj, isNormalMode, isLong) => {\\n            let handleText = getMyVar(\\\"rsa_handle_text\\\", \\\"\\\")\\n            let key = getMyVar(\\\"rsa_pub_or_pri_key\\\", \\\"\\\")\\n                .replace(/-----BEGIN.*?KEY-----/, '')\\n                .replace(/-----END.*?KEY-----/, '');\\n            if (handleText === '') return 'toast://待处理文本输入为空，请检查!'\\n            if (key === '') return 'toast://密钥输入为空，请检查!'\\n            let toastText = \\\"解密成功\\\"\\n            let result = \\\"\\\"\\n            try {\\n                let modes = obj.modes\\n                let choices = obj.choices\\n                let type = isNormalMode(obj, modes[0]) ? 1 : 2\\n                let longStat = isLong(obj, choices[0]) ? 2 : 1\\n                let options = {\\n                    config: \\\"RSA/ECB/PKCS1Padding\\\",\\n                    type: type,\\n                    long: longStat,\\n                    block: true\\n                }\\n                result = rsaDecrypt(handleText, key, options)\\n            } catch (e) {\\n                result = e.message\\n                toastText = \\\"解密失败\\\"\\n            }\\n            putMyVar(\\\"rsa_result_text\\\", result)\\n            refreshPage()\\n            return \\\"toast://\\\" + toastText\\n        }, obj, isNormalMode, isLong)\\n    }, {\\n        title: \\\"复制\\\",\\n        desc: \\\"加密或解密的内容将显示在此\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getMyVar(\\\"rsa_result_text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putMyVar(\\\"rsa_result_text\\\",input)'\\n        },\\n        url: $.toString(() => {\\n            // obj.encText = input;\\n            // log(\\\"obj.encText: \\\" + obj.encText)\\n            return \\\"copy://\\\" + input\\n        })\\n    })\\n\\n\\n}\\n$.exports.buildRSAUi = buildRSAUi\"},{\"col_type\":\"text_1\",\"name\":\"工具\",\"path\":\"utiliy\",\"rule\":\"js:\\nlet Tool = {\\n  randomString: function(len){\\n      let chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz123456789' \\n      let maxLen = chars.length\\n      let str = ''\\n      for (let i = 0; i < len; i++) {\\n        str += chars.charAt(Math.floor(Math.random() * maxLen))\\n      }\\n      return str\\n  },\\n  fillNullPadding: function (str, len) {\\n    // str.padStart(targetLength [, padString])\\n    // str.padEnd(targetLength [, padString])\\n    if(str.length >= len) {\\n      return str;\\n    }\\n    return str + Array( len - str.length + 1 ).join(\\\"\\\\x00\\\");\\n  },\\n  fillZeroPadding: function (str, len) {\\n    // str.padStart(targetLength [, padString])\\n    // str.padEnd(targetLength [, padString])\\n    if(str.length >= len) {\\n      return str;\\n    }\\n    return str + Array( len - str.length + 1 ).join(\\\"0\\\");\\n  },\\n}\\n$.exports = Tool;\"},{\"col_type\":\"text_1\",\"name\":\"散列哈希类页面\",\"path\":\"hash\",\"rule\":\"js:\\nconst { buildHashUi } = $.require(\\\"hiker://page/hashui\\\");\\nfunction setHashPage(d, obj) {\\n    buildHashUi(d, obj);\\n}\\n$.exports.setHashPage = setHashPage\"},{\"col_type\":\"text_1\",\"name\":\"Hex\",\"path\":\"hex\",\"rule\":\"js:\\nlet hex = {};\\n// 编码\\nhex.encode = function(obj) {\\n    eval(getCryptoJS());\\n    // log(\\\"我是原文\\\"+ obj.decText)\\n    let wordArray = CryptoJS.enc.Utf8.parse(obj.decText);\\n    let encode = \\\"[HEX]:\\\" + CryptoJS.enc.Hex.stringify(wordArray);\\n    return encode;\\n}\\n// 解码\\nhex.decode = function(obj) {\\n    eval(getCryptoJS());\\n    // log(\\\"我是密文\\\"+ obj.encText)\\n    obj.encText = obj.encText.replace(\\\"[HEX]:\\\", \\\"\\\")\\n    let wordArray = CryptoJS.enc.Hex.parse(obj.encText);\\n    let decode = CryptoJS.enc.Utf8.stringify(wordArray);\\n    /*CryptoJS.enc.Base64.stringify(wordArray);*/\\n    return decode;\\n}\\n// 导出给外部通过 require 方法使用\\n$.exports.hex = hex\"},{\"col_type\":\"text_1\",\"name\":\"Hash-UI\",\"path\":\"hashui\",\"rule\":\"js:\\nfunction buildEmtpyHashUi(d, obj) {\\n    d.push({\\n        title: '<p style=\\\"text-align: center;\\\">正在路上，敬请期待（咕咕咕）~</p>',\\n        col_type: 'rich_text'\\n    })\\n}\\nfunction buildHashUi(d, obj) {\\n    if (obj.type.includes(\\\"SHA3\\\") && !obj.type.includes(\\\"HMAC\\\")) {\\n        buildEmtpyHashUi(d, obj);\\n        return;\\n    }\\n     d.push({\\n        title: \\\"哈希/散列\\\",\\n        desc: \\\"请输入原文\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getVar(\\\"hash_text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putVar(\\\"hash_text\\\",input)'\\n        },\\n        url: $.toString((obj) => {\\n            // obj.decText = input;\\n            // log(\\\"obj.decText: \\\" + obj.decText)\\n            let toastText = \\\"加密成功\\\";\\n            let hash_result = \\\"\\\";\\n            let tool = {};\\n            let toolSelects = obj.type.split(\\\"@@\\\");\\n            let toolSelect = toolSelects[toolSelects.length - 1];\\n            let HashAlgorithm = $.require(\\\"hiker://page/hashalgorithm?rule=\\\" + obj.ruleTitle);\\n            HashAlgorithm.config.type.set(toolSelect)\\n            tool = HashAlgorithm;\\n            try {\\n                hash_result = tool.hash();\\n                // log(\\\"hash_result: \\\" + hash_result)\\n            } catch (e) {\\n                hash_result = e.message;\\n                toastText = \\\"加密失败\\\";\\n            }\\n            HashAlgorithm.config.resultText.set(hash_result)\\n            refreshPage();\\n            return 'toast://' + toastText;\\n        }, obj),\\n    });\\n    if (obj.type.includes(\\\"HMAC\\\") || obj.type.includes(\\\"PBKDF2\\\")) {\\n        buildConfigsUI(d, obj);\\n    }\\n    d.push({\\n        title: \\\"复制\\\",\\n        desc: \\\"哈希值\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getVar(\\\"hash_result_text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putVar(\\\"hash_result_text\\\",input)'\\n        },\\n        url: $.toString(() => {\\n            // obj.encText = input;\\n            // log(\\\"obj.encText: \\\" + obj.encText)\\n            if (input) {\\n                return \\\"copy://\\\" + input;\\n            } else {\\n                return \\\"toast://内容为空！\\\"\\n            }\\n        }),\\n    });\\n    \\n}\\nfunction buildConfigsUI(d, obj) {\\n    // HMAC || PBKDF2\\n    let HashAlgorithm = $.require(\\\"hiker://page/hashalgorithm?rule=\\\" + obj.ruleTitle);\\n    if (obj.type.includes(\\\"HMAC\\\")) {\\n        // HMAC-xxx\\n        buildHmacConfigsUI(d, obj, HashAlgorithm.config)\\n    } else if (obj.type.includes(\\\"PBKDF2\\\")) {\\n        // PBKDF2\\n        buildPBKDF2ConfigsUI(d, obj, HashAlgorithm.Mapping, HashAlgorithm.config)\\n    }\\n}\\nfunction buildHmacConfigsUI (d, obj, config) {\\n    // obj.type.includes(\\\"HMAC\\\")\\n    d.push({\\n        title: \\\"随机 key\\\",\\n        desc: \\\"密钥 key\\\",\\n        col_type: 'input',\\n        extra: {\\n            titleVisible: false,\\n            height: -1,\\n            type: \\\"textarea\\\",\\n            defaultValue: config.key.get(),\\n            onChange: $.toString((config) => {\\n                config.key.set(input)\\n            }, config)\\n        }\\n    });\\n}\\nfunction buildPBKDF2ConfigsUI(d, obj, mapping, config) {\\n    // obj.type.includes(\\\"PBKDF2\\\")\\n    let keySizes = Object.keys(mapping[\\\"keySize\\\"]);\\n    d.push({\\n        title: '““””<strong><font color=\\\"black\\\">KEY长度</font></strong>',\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"scroll_button\\\"\\n    })\\n    for (let keySize of keySizes) {\\n        d.push({\\n            title: keySize == config.keySize.get() ? \\\"‘‘\\\" + keySize + \\\"’’\\\" : keySize,\\n            url: $(\\\"#noLoading#\\\").lazyRule((keySize, config) => {\\n                    config.keySize.set(keySize)\\n                    refreshPage(false);\\n                    return \\\"hiker://empty\\\"\\n            }, keySize, config),\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    }\\n    d.push({\\n        col_type: \\\"blank_block\\\"\\n    })\\n    d.push({\\n        title: \\\"随机 salt\\\",\\n        desc: \\\"盐 salt，建议至少为 8 字节，且要为随机数。\\\",\\n        col_type: 'input',\\n        extra: {\\n            titleVisible: false,\\n            height: -1,\\n            type: \\\"textarea\\\",\\n            defaultValue: config.salt.get(),\\n            onChange: $.toString((config) => {\\n                config.salt.set(input)\\n            }, config)\\n        }\\n    });\\n    d.push({\\n        title: \\\"迭代次数\\\",\\n        desc: \\\"迭代次数(选填)，建议至少为 50000 次，除非有严格的性能要求。\\\",\\n        col_type: 'input',\\n        extra: {\\n            titleVisible: false,\\n            height: -1,\\n            type: \\\"textarea\\\",\\n            defaultValue: config.iterations.get(),\\n            onChange: $.toString((config) => {\\n                config.iterations.set(input)\\n            }, config)\\n        }\\n    });\\n}\\n$.exports.buildHashUi = buildHashUi\"},{\"col_type\":\"text_1\",\"name\":\"Hash算法\",\"path\":\"hashalgorithm\",\"rule\":\"js:\\neval(getCryptoJS());\\nlet HashAlgorithm = {\\n\\tMapping: {\\n\\t\\thashType: {\\n\\t\\t\\t\\\"MD5\\\": CryptoJS.MD5,\\n\\t\\t\\t\\\"SHA-1\\\": CryptoJS.SHA1,\\n\\t\\t\\t\\\"SHA-224\\\": CryptoJS.SHA224,\\n\\t\\t\\t\\\"SHA-256\\\": CryptoJS.SHA256,\\n\\t\\t\\t\\\"SHA-384\\\": CryptoJS.SHA384,\\n\\t\\t\\t\\\"SHA-512\\\": CryptoJS.SHA512,\\n\\t\\t\\t\\\"HMAC-MD5\\\": CryptoJS.HmacMD5,\\n\\t\\t\\t\\\"HMAC-SHA1\\\": CryptoJS.HmacSHA1,\\n\\t\\t\\t\\\"HMAC-SHA224\\\": CryptoJS.HmacSHA224, \\n\\t\\t\\t\\\"HMAC-SHA256\\\": CryptoJS.HmacSHA256, \\n\\t\\t\\t\\\"HMAC-SHA384\\\": CryptoJS.HmacSHA384, \\n\\t\\t\\t\\\"HMAC-SHA512\\\": CryptoJS.HmacSHA512,\\n\\t\\t\\t\\\"PBKDF2\\\": CryptoJS.PBKDF2,\\n\\t\\t},\\n        keySize: {\\n            \\\"128位\\\": 128,\\n            \\\"256位\\\": 256,\\n            \\\"512位\\\": 512,\\n        },\\n\\t},\\n\\tconfig: {\\n        type: {\\n            key: \\\"hash_type\\\",\\n            get: function () {\\n                return getVar(this.key, \\\"MD5\\\");\\n            },\\n            set: function (newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n        key: {\\n            key: \\\"hash_hmac_key\\\",\\n            get: function () {\\n                return getVar(this.key, \\\"\\\");\\n            },\\n            set: function (newValue) {\\n                putVar(this.key, newValue);\\n            }\\n        },\\n\\t\\ttext: {\\n\\t\\t\\tkey: \\\"hash_text\\\",\\n            get: function () {\\n                return getVar(this.key, \\\"\\\");\\n            },\\n            set: function (newValue) {\\n                putVar(this.key, newValue);\\n            }\\n\\t\\t},\\n\\t\\tresultText: {\\n\\t\\t\\tkey: \\\"hash_result_text\\\",\\n            get: function () {\\n                return getVar(this.key, \\\"\\\");\\n            },\\n            set: function (newValue) {\\n                putVar(this.key, newValue);\\n            }\\n\\t\\t},\\n        keySize: {\\n            key: \\\"hash_key_size\\\",\\n            get: function () {\\n                return getVar(this.key, \\\"128位\\\");\\n            },\\n            set: function (newValue) {\\n                putVar(this.key, newValue);\\n            }\\n\\n        },\\n        salt: {\\n            key: \\\"hash_salt\\\",\\n            get: function () {\\n                return getVar(this.key, \\\"\\\");\\n            },\\n            set: function (newValue) {\\n                putVar(this.key, newValue);\\n            }\\n\\n        },\\n        iterations: {\\n            key: \\\"hash_iterations\\\",\\n            get: function () {\\n                return getVar(this.key, \\\"\\\");\\n            },\\n            set: function (newValue) {\\n                putVar(this.key, newValue);\\n            }\\n\\n        },\\n\\t},\\n    onClose: function() {\\n        let configKeys = Object.keys(this.config);\\n        for(let confKey of configKeys) {\\n            let key = this.config[confKey].key;\\n            clearVar(key);\\n        }\\n    },\\n\\thash: function () {\\n\\t\\tlet text = this.config.text.get();\\n\\t\\tlet type = this.config.type.get();\\n\\t\\tlet hash = {};\\n\\t\\tif (text) {\\n            if (type.includes(\\\"HMAC\\\")) {\\n                // HMAC-xxx\\n                let key = this.config.key.get();\\n                hash = this.Mapping.hashType[type](text, key)\\n            } else if (type.includes(\\\"PBKDF2\\\")) {\\n                // PBKDF2\\n                let keySize = this.Mapping.keySize[this.config.keySize.get()];\\n                let salt = this.config.salt.get();\\n                let iterations = this.config.iterations.get();\\n                if (!salt) {\\n                \\tthrow new Error(\\\"盐 salt 不能为空！\\\")\\n                }\\n                salt = CryptoJS.enc.Utf8.parse(salt)\\n                let options =  {\\n                \\t\\tkeySize: keySize / 32\\n                }\\n                if (iterations) {\\n                \\toptions.iterations = iterations;\\n                }\\n                hash = this.Mapping.hashType[type](text, salt, options)\\n            } else {\\n\\t\\t\\t\\thash = this.Mapping.hashType[type](text);\\n            }\\n\\t\\t\\t// 密文\\n\\t\\t\\tlet hashResult = hash.toString();\\n            // log(\\\"hash#hash_result: \\\" + hashResult)\\n            this.config.resultText.set(hashResult);\\n\\t\\t\\treturn hashResult;\\n\\t\\t} else {\\n            throw new Error(\\\"原文不能为空！\\\")\\n        }\\n\\t}\\n};\\n$.exports = HashAlgorithm\"},{\"col_type\":\"movie_3\",\"name\":\"兽音\",\"path\":\"roar\",\"rule\":\"js:\\nlet roar = {};\\nroar.encode = function(obj) {\\n    // log(\\\"[roar]obj.decText: \\\" + obj.decText)\\n    let encode = request('http://hi.pcmoe.net/bear.php', {\\n        headers: {\\n            'X-Token': '203B61D35068',\\n            'Origin': 'http://hi.pcmoe.net',\\n            'X-Requested-With': 'XMLHttpRequest',\\n            //'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\\n            'Content-type': 'application/x-www-form-urlencoded',\\n            'Referer': 'http://hi.pcmoe.net'\\n        },\\n        body: 'mode=Roar&code=Encode&txt=' + obj.decText,\\n        method: 'POST'\\n    });\\n    // log(\\\"[roar]encode: \\\" + encode)\\n    return encode;\\n}\\nroar.decode = function(obj) {\\n    let decode = request('http://hi.pcmoe.net/bear.php', {\\n        headers: {\\n            'X-Token': '203B61D35068',\\n            'Origin': 'http://hi.pcmoe.net',\\n            'X-Requested-With': 'XMLHttpRequest',\\n            //'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\\n            'Content-type': 'application/x-www-form-urlencoded',\\n            'Referer': 'http://hi.pcmoe.net'\\n        },\\n        body: 'mode=Roar&code=Decode&txt=' + obj.encText,\\n        method: 'POST'\\n    });\\n    return decode;\\n}\\n$.exports.roar = roar\"},{\"col_type\":\"movie_3\",\"name\":\"熊曰\",\"path\":\"bear\",\"rule\":\"js:\\nlet bear = {};\\nbear.encode = function(obj) {\\n    // log(\\\"[bear]obj.decText: \\\" + obj.decText)\\n    let encode = request('http://hi.pcmoe.net/bear.php', {\\n        headers: {\\n            'X-Token': '203B61D35068',\\n            'Origin': 'http://hi.pcmoe.net',\\n            'X-Requested-With': 'XMLHttpRequest',\\n            //'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\\n            'Content-type': 'application/x-www-form-urlencoded',\\n            'Referer': 'http://hi.pcmoe.net'\\n        },\\n        body: 'mode=Bear&code=Encode&txt=' + obj.decText,\\n        method: 'POST'\\n    });\\n    // log(\\\"[bear]encode: \\\" + encode)\\n    return encode;\\n}\\nbear.decode = function(obj) {\\n    let decode = request('http://hi.pcmoe.net/bear.php', {\\n        headers: {\\n            'X-Token': '203B61D35068',\\n            'Origin': 'http://hi.pcmoe.net',\\n            'X-Requested-With': 'XMLHttpRequest',\\n            //'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\\n            'Content-type': 'application/x-www-form-urlencoded',\\n            'Referer': 'http://hi.pcmoe.net'\\n        },\\n        body: 'mode=Bear&code=Decode&txt=' + obj.encText,\\n        method: 'POST'\\n    });\\n    return decode;\\n}\\n$.exports.bear = bear\"},{\"col_type\":\"movie_3\",\"name\":\"首页\",\"path\":\"home\",\"rule\":\"js:\\nsetPageTitle('加解密工具')\\nconst {\\n    header\\n} = $.require(\\\"hiker://page/classicHeader\\\");\\nconst {\\n    setEncodePage\\n} = $.require(\\\"hiker://page/encode\\\");\\nconst {\\n    setCryptoPage\\n} = $.require(\\\"hiker://page/crypto\\\");\\nconst {\\n    setHashPage\\n} = $.require(\\\"hiker://page/hash\\\");\\nconst {\\n    setOtherPage\\n} = $.require(\\\"hiker://page/other\\\");\\n// const { Crypto } = $.require(\\\"hiker://page/aes\\\");\\n/**\\n * 1. 引入算法依赖\\n */\\nconst {\\n    buddha\\n} = $.require(\\\"hiker://page/buddha\\\");\\nconst {\\n    newBuddha\\n} = $.require(\\\"hiker://page/newBuddha\\\");\\nconst {\\n    bear\\n} = $.require(\\\"hiker://page/bear\\\");\\nconst {\\n    roar\\n} = $.require(\\\"hiker://page/roar\\\");\\nconst {\\n    unicode\\n} = $.require(\\\"hiker://page/unicode\\\");\\nconst {\\n    uri\\n} = $.require(\\\"hiker://page/uri\\\");\\nconst {\\n    uricomponent\\n} = $.require(\\\"hiker://page/uricomponent\\\");\\nconst {\\n    base64\\n} = $.require(\\\"hiker://page/base64\\\");\\nconst {\\n    ascii\\n} = $.require(\\\"hiker://page/ascii\\\");\\nconst {\\n    hex\\n} = $.require(\\\"hiker://page/hex\\\");\\n\\nlet ruleTitle = MY_RULE.title;\\naddListener('onClose', $.toString((header, ruleTitle) => {\\n    putVar(\\\"encode-text\\\", \\\"\\\");\\n    putVar(\\\"decode-text\\\", \\\"\\\");\\n    header.onClose();\\n    let Crypto = $.require(\\\"hiker://page/aes?rule=\\\" + ruleTitle);\\n    Crypto.onClose();\\n    clearMyVar(\\\"rsa_pub_or_pri_key\\\")\\n    clearMyVar(\\\"rsa_handle_text\\\")\\n    clearMyVar(\\\"rsa_select_mode\\\")\\n    clearMyVar(\\\"rsa_long_status\\\")\\n    clearMyVar(\\\"rsa_result_text\\\");\\n    let HashAlgorithm = $.require(\\\"hiker://page/hashalgorithm?rule=\\\" + ruleTitle);\\n    HashAlgorithm.onClose();\\n}, header, ruleTitle))\\n\\nlet d = [];\\n/*d.push({\\n    desc: \\\"0\\\",\\n    col_type: \\\"x5_webview_single\\\"\\n})*/\\ntry {\\n    if (!newWindow) {\\n\\n    }\\n} catch (e) {\\n    for (let i = 0; i < 1; i++) {\\n        d.push({\\n            col_type: 'big_blank_block'\\n        });\\n    }\\n    d.push({\\n        col_type: 'text_center_1',\\n        title: '““””<br><big style=\\\"text-align: center;\\\"><b>🔑加解密工具🔑</b></big>',\\n        url: \\\"hiker://empty\\\",\\n        extra: {\\n            lineVisible: false\\n        }\\n    });\\n\\n}\\nlet classic = {\\n    \\\"编码转换\\\": [{\\n            \\\"佛熊兽曰\\\": [\\\"佛曰\\\", \\\"新佛曰\\\", \\\"熊曰\\\", \\\"兽音\\\"]\\n        },\\n        \\\"Unicode\\\",\\n        {\\n            \\\"URL\\\": [\\\"URI\\\", \\\"URIComponent\\\"]\\n        },\\n        \\\"Base64\\\", \\\"ASCII\\\", \\\"Hex\\\"\\n    ],\\n    \\\"加密/解密\\\": [{\\n            \\\"对称加密\\\": [\\\"AES\\\", \\\"DES\\\", \\\"3DES\\\"]\\n        },\\n        {\\n            \\\"非对称加密\\\": [\\\"RSA\\\"]\\n        }\\n    ],\\n    \\\"散列/哈希\\\": [\\n        \\\"MD5\\\",\\n        {\\n            \\\"SHA\\\": [\\\"SHA-1\\\", \\\"SHA-224\\\", \\\"SHA-256\\\", \\\"SHA-384\\\", \\\"SHA-512\\\", /*\\\"SHA3-512\\\"*/ ]\\n        },\\n        {\\n            \\\"HMAC\\\": [\\\"HMAC-MD5\\\", \\\"HMAC-SHA1\\\", \\\"HMAC-SHA224\\\", \\\"HMAC-SHA256\\\", \\\"HMAC-SHA384\\\", \\\"HMAC-SHA512\\\"]\\n        },\\n        \\\"PBKDF2\\\"\\n    ],\\n    \\\"其他转换\\\": [\\n        \\\"V6解密\\\",\\n        \\\"PrivateJS\\\",\\n        \\\"时间戳\\\",\\n    ]\\n}\\nd = d.concat(header.get(classic))\\nvar type = header.getCurrentIndex();\\ntry {\\n    if (newWindow) {\\n        /*for (let i = 0; i < 1; i++) {\\n            d.push({\\n                col_type: 'big_blank_block'\\n            });\\n        }*/\\n        d.push({\\n            title: '““””<b>选项</b>',\\n            col_type: 'scroll_button',\\n            url: 'hiker://empty',\\n        })\\n        d.push({\\n            title: '点我化为新窗口',\\n            col_type: 'scroll_button',\\n            url: 'hiker://page/home#gameTheme#',\\n            extra: {\\n                newWindow: true,\\n                // lineVisible: false\\n            }\\n        })\\n    }\\n} catch (e) {\\n    log(e.message)\\n}\\n\\n/**\\n * 2. 在 tools 加入键值对，用于映射算法，格式为 分类中的替换值（即 fyAll 的值）: 引入的算法依赖的对象名\\n */\\nvar obj = {\\n    ruleTitle: ruleTitle,\\n    type: type,\\n    tools: {\\n        \\\"佛曰\\\": buddha,\\n        \\\"新佛曰\\\": newBuddha,\\n        \\\"熊曰\\\": bear,\\n        \\\"兽音\\\": roar,\\n        \\\"Unicode\\\": unicode,\\n        \\\"URI\\\": uri,\\n        \\\"URIComponent\\\": uricomponent,\\n        \\\"Base64\\\": base64,\\n        \\\"ASCII\\\": ascii,\\n        \\\"Hex\\\": hex,\\n        // \\\"AES\\\": Crypto.AES,\\n        // \\\"DES\\\": Crypto.DES,\\n    },\\n}\\n\\n/**\\n * 3. 添加子页面写自己的算法，模板请参考“算法模板”这个子页面或已有的子页面\\n *\\n * 注：此备注后的所有代码各位都不需要动\\n */\\n// log(obj.type)\\nif (obj.type.includes(\\\"编码转换\\\")) {\\n    setEncodePage(d, obj);\\n} else if (obj.type.includes(\\\"加密/解密\\\")) {\\n    setCryptoPage(d, obj);\\n} else if (obj.type.includes(\\\"散列/哈希\\\")) {\\n    setHashPage(d, obj);\\n} else if (obj.type.includes(\\\"其他转换\\\")) {\\n    setOtherPage(d, obj);\\n}\\nsetResult(d)\"},{\"col_type\":\"rich_text\",\"name\":\"Other-UI\",\"path\":\"otherui\",\"rule\":\"// js:\\nfunction buildEmptyOtherUi(d, obj) {\\n    d.push({\\n        title: '<p style=\\\"text-align: center;\\\">正在路上，敬请期待（咕咕咕）~</p>',\\n        col_type: 'rich_text'\\n    })\\n}\\n\\nfunction buildControllerUi(d, obj) {\\n    // https://gitee.com/CherishRx/imagewarehouse/raw/master/image/32d29e2fbcdf8d83071deec7f6aa4b7c.png\\n    let cpImgUrl = \\\"https://iconfont.tyrantg.com/api/illustrate.svg?svg_string=%3Csvg%20class%3D%22icon%22%20style%3D%22width%3A%201em%3Bheight%3A%201em%3Bvertical-align%3A%20middle%3Bfill%3A%20currentColor%3Boverflow%3A%20hidden%3B%22%20viewBox%3D%220%200%201024%201024%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M866.133333%20919.466667h-405.333333c-29.866667%200-53.333333-23.466667-53.333333-53.333334v-618.666666c0-29.866667%2023.466667-53.333333%2053.333333-53.333334h405.333333c29.866667%200%2053.333333%2023.466667%2053.333334%2053.333334v618.666666c0%2029.866667-23.466667%2053.333333-53.333334%2053.333334z%22%20fill%3D%22%2369C0FF%22%20%2F%3E%3Cpath%20d%3D%22M770.133333%20428.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333zM770.133333%20556.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333zM770.133333%20684.8h-213.333333c-12.8%200-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333%2021.333333-21.333334h213.333333c12.8%200%2021.333333%208.533333%2021.333334%2021.333334s-10.666667%2021.333333-21.333334%2021.333333z%22%20fill%3D%22%23FFFFFF%22%20%2F%3E%3Cpath%20d%3D%22M567.466667%20834.133333h-405.333334c-29.866667%200-53.333333-23.466667-53.333333-53.333333v-618.666667c0-29.866667%2023.466667-53.333333%2053.333333-53.333333h405.333334c29.866667%200%2053.333333%2023.466667%2053.333333%2053.333333v618.666667c0%2029.866667-23.466667%2053.333333-53.333333%2053.333333z%22%20fill%3D%22%231890FF%22%20%2F%3E%3Cpath%20d%3D%22M471.466667%20343.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334zM471.466667%20471.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334zM471.466667%20599.466667h-213.333334c-12.8%200-21.333333-8.533333-21.333333-21.333334s8.533333-21.333333%2021.333333-21.333333h213.333334c12.8%200%2021.333333%208.533333%2021.333333%2021.333333s-10.666667%2021.333333-21.333333%2021.333334z%22%20fill%3D%22%23FFFFFF%22%20%2F%3E%3C%2Fsvg%3E\\\"\\n    let clearImgUrl = \\\"https://iconfont.tyrantg.com/api/illustrate.svg?svg_string=%3Csvg%20class%3D%22icon%22%20style%3D%22width%3A%201em%3Bheight%3A%201em%3Bvertical-align%3A%20middle%3Bfill%3A%20currentColor%3Boverflow%3A%20hidden%3B%22%20viewBox%3D%220%200%201024%201024%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20d%3D%22M179.2%20588.8h710.4c25.6%200%2032-19.2%2025.6-38.4L832%20364.8c-12.8-19.2-38.4-38.4-64-38.4H620.8V64c0-25.6-19.2-44.8-44.8-44.8H492.8c-19.2%200-38.4%2019.2-38.4%2044.8v262.4H300.8c-25.6%200-51.2%2019.2-57.6%2038.4L153.6%20550.4c-6.4%2019.2%200%2038.4%2025.6%2038.4m691.2%2064H217.6c6.4%2064%200%20147.2-51.2%20198.4-76.8%2064-51.2%20140.8%206.4%20166.4h108.8c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h83.2c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h102.4c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192H704c12.8-12.8%2070.4-102.4%2089.6-192%200-19.2%206.4-32%206.4-32%200%2012.8%200%2019.2-6.4%2032-6.4%2057.6-25.6%20172.8-38.4%20192h102.4s70.4-25.6%2057.6-102.4c-19.2-115.2-25.6-179.2-44.8-262.4%22%20fill%3D%22%237367D1%22%20%2F%3E%3C%2Fsvg%3E\\\"\\n\\n\\n    d.push({\\n        title: '清空输入',\\n        img: clearImgUrl,\\n        url: \\\"hiker://empty#noLoading#\\\" + \\\"@lazyRule=.js:putMyVar('other.encode.text', '');refreshPage();'toast://清空成功'\\\",\\n        col_type: 'icon_2'\\n    });\\n\\n    d.push({\\n        title: '清空输出',\\n        img: clearImgUrl,\\n        url: \\\"hiker://empty#noLoading#\\\" + \\\"@lazyRule=.js:putMyVar('other.decode.text', '');refreshPage();'toast://清空成功'\\\",\\n        col_type: 'icon_2'\\n    });\\n\\n    d.push({\\n        title: '复制输入',\\n        img: cpImgUrl,\\n        url: $(\\\"hiker://empty#noLoading#\\\").lazyRule(() => {\\n            var dec = getMyVar(\\\"other.encode.text\\\");\\n            if (dec) {\\n                return \\\"copy://\\\" + dec;\\n            } else {\\n                return \\\"toast://内容为空！\\\"\\n            }\\n        }),\\n        col_type: 'icon_2'\\n    });\\n\\n    d.push({\\n        title: '复制输出',\\n        img: cpImgUrl,\\n        url: $(\\\"hiker://empty#noLoading#\\\").lazyRule(() => {\\n            var enc = getMyVar(\\\"other.decode.text\\\");\\n            if (enc) {\\n                return \\\"copy://\\\" + enc;\\n            } else {\\n                return \\\"toast://内容为空！\\\"\\n            }\\n        }),\\n        col_type: 'icon_2'\\n    });\\n}\\n\\nfunction buildOtherUi(d, obj) {\\n    if (obj.type.includes(\\\"时间戳\\\")) {\\n        buildEmptyOtherUi(d, obj);\\n        return;\\n    }\\n    if (obj.type.includes(\\\"V6解密\\\")) {\\n        buildDecodeV6UI(d, obj);\\n    } else if (obj.type.includes(\\\"PrivateJS\\\")) {\\n        buildPrivateJsUi(d, obj);\\n    }\\n    if (obj.type.includes(\\\"V6解密\\\") || obj.type.includes(\\\"PrivateJS\\\")) {\\n        buildControllerUi(d, obj);\\n    }\\n}\\n// TODO 添加清除 Var 变量\\nfunction buildDecodeV6UI(d, obj) {\\n    d.push({\\n        title: \\\"解混淆\\\",\\n        desc: \\\"请输入 jiami.com.v6 的密文\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getMyVar(\\\"other.encode.text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putMyVar(\\\"other.encode.text\\\", input)'\\n        },\\n        url: $.toString((obj) => {\\n            // obj.decText = input;\\n            // log(\\\"obj.decText: \\\" + obj.decText)\\n            if (input === '') return 'toast://输入为空，请检查!'\\n            let toastText = \\\"解混淆成功\\\";\\n            let dec_result = \\\"\\\";\\n            try {\\n                let code = (/^http(s*):\\\\/\\\\//.test(input.trim())) ? request(input) : input;\\n                dec_result = fetch(base64Decode(\\\"aHR0cHM6Ly9nYXRzYnktbmluZS1ibHVzaC52ZXJjZWwuYXBwL2FwaS92Ng==\\\"), {\\n                    body: {\\n                        code: code\\n                    },\\n                });\\n                // log(\\\"hash_result: \\\" + hash_result)\\n                if (code === '') toastText = \\\"解混淆失败\\\";\\n            } catch (e) {\\n                dec_result = e.message;\\n                toastText = \\\"解混淆失败\\\";\\n            }\\n            putMyVar(\\\"other.decode.text\\\", dec_result)\\n            refreshPage();\\n            return 'toast://' + toastText;\\n        }, obj),\\n    });\\n    d.push({\\n        title: \\\"代码查看\\\",\\n        desc: \\\"结果输出\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getMyVar(\\\"other.decode.text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putMyVar(\\\"other.decode.text\\\", input)'\\n        },\\n        url: $.toString(() => {\\n            // obj.encText = input;\\n            // log(\\\"obj.encText: \\\" + obj.encText)\\n            if (input) {\\n                let cachePath = 'hiker://files/cache/CryptoTool.cache';\\n                writeFile(cachePath, input);\\n                return 'editFile://' + cachePath;\\n            } else {\\n                return \\\"toast://内容为空！\\\"\\n            }\\n        }),\\n    });\\n}\\n\\nfunction buildPrivateJsUi(d, obj) {\\n    d.push({\\n        title: \\\"加密\\\",\\n        desc: \\\"请输入代码明文\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getMyVar(\\\"other.encode.text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putMyVar(\\\"other.encode.text\\\", input)'\\n        },\\n        url: $.toString((obj) => {\\n            // obj.decText = input;\\n            // log(\\\"obj.decText: \\\" + obj.decText)\\n            if (input === '') return 'toast://输入为空，请检查!'\\n            let toastText = \\\"加密代码成功\\\";\\n            let dec_result = 'evalPrivateJS(\\\\\\\"' + getPrivateJS(input) + '\\\")';\\n            putMyVar(\\\"other.decode.text\\\", dec_result)\\n            refreshPage();\\n            return 'toast://' + toastText;\\n        }, obj),\\n    });\\n    d.push({\\n        title: \\\"代码查看\\\",\\n        desc: \\\"结果输出\\\",\\n        col_type: 'input',\\n        extra: {\\n            // titleVisible: false,\\n            defaultValue: getMyVar(\\\"other.decode.text\\\", \\\"\\\"),\\n            type: \\\"textarea\\\",\\n            onChange: 'putMyVar(\\\"other.decode.text\\\", input)'\\n        },\\n        url: $.toString(() => {\\n            // obj.encText = input;\\n            // log(\\\"obj.encText: \\\" + obj.encText)\\n            if (input) {\\n                let cachePath = 'hiker://files/cache/CryptoTool.cache';\\n                writeFile(cachePath, input);\\n                return 'editFile://' + cachePath;\\n            } else {\\n                return \\\"toast://内容为空！\\\"\\n            }\\n        }),\\n    });\\n}\\n\\n$.exports.buildOtherUi = buildOtherUi\"},{\"col_type\":\"rich_text\",\"name\":\"其他转换页面\",\"path\":\"other\",\"rule\":\"const { buildOtherUi } = $.require(\\\"hiker://page/otherui\\\");\\nfunction setOtherPage(d, obj) {\\n    buildOtherUi(d, obj);\\n}\\n$.exports.setOtherPage = setOtherPage\"},{\"col_type\":\"movie_3\",\"name\":\"佛曰\",\"path\":\"buddha\",\"rule\":\"js:\\nlet buddha = {};\\nbuddha.encode = function(obj) {\\n    // log(\\\"[buddha]obj.decText: \\\" + obj.decText)\\n    let encode = request(\\\"https://www.keyfc.net/bbs/tools/tudou.aspx\\\",{\\n    headers:{\\n        \\\"referer\\\":\\\"https://www.keyfc.net/bbs/tools/tudoucode.aspx\\\",\\n        //\\\"user-agent\\\":\\\"Mozilla/5.0 (Linux; Android 11; Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36\\\",\\n        \\\"content-type\\\":\\\"application/x-www-form-urlencoded\\\",\\n        //\\\"Cookie\\\":\\\"lastolupdate=989792506;ASPSESSIONIDCGRCCCQD=CGIDOGMBMCAJKJNCAGPPGFNP;dnt=referer=showtopic.aspx%3ftopicid%3d23944%26page%3d1%26forumpage%3d1\\\"\\n        },\\n    body:\\\"orignalMsg=\\\"+encodeURI(obj.decText)+\\\"&action=Encode\\\",\\n    method:\\\"POST\\\"\\n    })\\n    // log(\\\"[buddha]encode: \\\" + encode)\\n    return encode.split(\\\"CDATA[\\\")[1].split(\\\"]\\\")[0];\\n}\\nbuddha.decode = function(obj) {\\n    let decode = request(\\\"https://www.keyfc.net/bbs/tools/tudou.aspx\\\",{\\n    headers:{\\n        \\\"referer\\\":\\\"https://www.keyfc.net/bbs/tools/tudoucode.aspx\\\",\\n        //\\\"user-agent\\\":\\\"Mozilla/5.0 (Linux; Android 11; Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36\\\",\\n        \\\"content-type\\\":\\\"application/x-www-form-urlencoded\\\",\\n        //\\\"Cookie\\\":\\\"lastolupdate=989792506;ASPSESSIONIDCGRCCCQD=CGIDOGMBMCAJKJNCAGPPGFNP;dnt=referer=showtopic.aspx%3ftopicid%3d23944%26page%3d1%26forumpage%3d1\\\"\\n        },\\n    body:\\\"orignalMsg=\\\"+encodeURI(obj.encText)+\\\"&action=Decode\\\",\\n    method:\\\"POST\\\"\\n    })\\n    return decode.split(\\\"CDATA[\\\")[1].split(\\\"]\\\")[0];\\n}\\n$.exports.buddha = buddha\"},{\"col_type\":\"rich_text\",\"name\":\"URI\",\"path\":\"uri\",\"rule\":\"js:\\nlet uri = {};\\nuri.encode = function(obj) {\\n    let encode = encodeURI(obj.decText);\\n    return encode;\\n}\\nuri.decode = function(obj) {\\n    let decode = decodeURI(obj.encText);\\n    return decode;\\n}\\n$.exports.uri = uri\"},{\"col_type\":\"rich_text\",\"name\":\"URIComponent\",\"path\":\"uricomponent\",\"rule\":\"js:\\nlet uricomponent = {};\\nuricomponent.encode = function(obj) {\\n    let encode = encodeURIComponent(obj.decText);\\n    return encode;\\n}\\nuricomponent.decode = function(obj) {\\n    let decode = decodeURIComponent(obj.encText);\\n    return decode;\\n}\\n$.exports.uricomponent = uricomponent\"},{\"col_type\":\"movie_3\",\"name\":\"新佛曰\",\"path\":\"newBuddha\",\"rule\":\"js:\\nlet newBuddha = {};\\nnewBuddha.encode = function(obj) {\\n    // log(\\\"[buddha]obj.decText: \\\" + obj.decText)\\n    let encode = request('http://hi.pcmoe.net/bear.php', {\\n        headers: {\\n            'X-Token': '07B97AA644E8',\\n            'Origin': 'http://hi.pcmoe.net',\\n            'X-Requested-With': 'XMLHttpRequest',\\n            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\\n            'Content-type': 'application/x-www-form-urlencoded',\\n            'Referer': 'http://hi.pcmoe.net/buddha.html'\\n        },\\n        body: 'mode=Buddha&code=Encode&txt=' + obj.decText,\\n        method: 'POST'\\n    });\\n    // log(\\\"[buddha]encode: \\\" + encode)\\n    return encode;\\n}\\nnewBuddha.decode = function(obj) {\\n    let decode = request('http://hi.pcmoe.net/bear.php', {\\n        headers: {\\n            'X-Token': '07B97AA644E8',\\n            'Origin': 'http://hi.pcmoe.net',\\n            'X-Requested-With': 'XMLHttpRequest',\\n            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; Note9 Build/QKQ1.191222.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/77.0.3865.120 MQQBrowser/6.2 TBS/045614 Mobile Safari/537.36',\\n            'Content-type': 'application/x-www-form-urlencoded',\\n            'Referer': 'http://hi.pcmoe.net/buddha.html'\\n        },\\n        body: 'mode=Buddha&code=Decode&txt=' + obj.encText,\\n        method: 'POST'\\n    });\\n    return decode;\\n}\\n$.exports.newBuddha = newBuddha\"}]","proxy":"","icon":""}