{"last_chapter_rule":"","pageList":[{"col_type":"text_1","name":"源目录","path":"source","rule":"js:\nvar d = [];\nvar m = MY_PARAMS.rules\nvar baseurl = m.bookSourceUrl\nif (m.ruleExplore.bookList) {\n    var rule = m.ruleExplore\n} else {\n    var rule = m.ruleSearch\n}\nd.push({\n    title: \"搜索\",\n    desc: \"请输入搜索关键词\",\n    url: $.toString(() => {\n        putMyVar(\"kw\", input);\n        return \"hiker://page/search?p=fypage&kw=\" + input\n    }),\n    col_type: \"input\",\n    extra: {\n        \"u\": baseurl + m.searchUrl,\n        \"rules\": m,\n        defaultValue: getMyVar(\"kw\", \"\"),\n        bookSourceName: m.bookSourceName\n    }\n});\ntry {\n    if (m.enabledExplore && m.exploreUrl) {\n        JSON.parse(m.exploreUrl).forEach(item => {\n            d.push({\n                title: item.title,\n                col_type: item.style.layout_flexBasisPercent == 1 ? \"text_center_1\" : \"text_3\",\n                url: item.url == \"\" ? \"hiker://empty\" : \"hiker://page/books?p=fypage\",\n                extra: {\n                    \"all\": m,\n                    \"rules\": rule,\n                    \"u\": baseurl + item.url\n                }\n            })\n        })\n    }\n} catch (e) {\n    log(m.exploreUrl);\n}\nsetResult(d);"},{"col_type":"movie_3","name":"主页","path":"home","rule":"var d = [];\nlet {\n    load,\n    loadRules,\n    getSelect\n} = $.require(\"hiker://page/datat\");\nlet data = load();\nif (data.length > 0) {\n    d.push({\n        title: \"⚙️设置\",\n        url: \"hiker://page/config\",\n        col_type: \"scroll_button\"\n    });\n    let select = getSelect(data);\n    data.forEach(item => {\n        d.push({\n            title: select.url == item.url ? \"““\" + item.name + \"””\" : item.name,\n            url: $().lazyRule((url) => {\n                setItem(\"tab\", url)\n                refreshPage()\n                return \"toast://切换成功\"\n            }, item.url),\n            col_type: \"scroll_button\"\n        })\n    })\n    d.push({\n        title: \"搜索\",\n        url: $.toString(() => {\n            putMyVar(\"kw\", input);\n            return \"hiker://page/ju?p=fypage&kw=\" + input\n        }),\n        col_type: \"input\",\n        desc: \"聚合搜索，请输入关键词\",\n        pic_url: \"\",\n        extra: {\n            defaultValue: getMyVar(\"kw\", \"\"),\n        }\n    });\n    let list = loadRules(select.name);\n    list.forEach(item => {\n        d.push({\n            title: item.bookSourceName + `(${item.bookSourceGroup})`,\n            col_type: \"text_2\",\n            url: \"hiker://page/source?p=fypage\",\n            extra: {\n                \"rules\": item\n            }\n        })\n    })\n} else {\n    setResult([{\n        title: \"你还没有书哦～～点我进入设置\",\n        url: \"hiker://page/config\",\n        col_type: \"text_center_1\"\n    }])\n}\nsetResult(d);"},{"col_type":"movie_1_vertical_pic","name":"列表","path":"books","rule":"js:\nvar d = [];\nvar {\n    convert,\n    parseUrl,\n    getCharset\n} = $.require(\"hiker://page/converter\");\ntry {\n    //log(MY_PARAMS);\n    var m = MY_PARAMS.rules\n    // 阅读=>视界\n    var url = parseUrl(MY_PARAMS.u, MY_PAGE);\n    var listrule = \"body&&\" + convert(m.bookList.split(\"||\")[0]);\n    let author = null;\n    try {\n        author = convert(m.author);\n    } catch (e) {}\n    let cover = null;\n    try {\n        cover = convert(m.coverUrl);\n    } catch (e) {}\n    let name = null;\n    try {\n        name = convert(m.name);\n    } catch (e) {}\n    let bookurl = null;\n    try {\n        bookurl = convert(m.bookUrl);\n    } catch (e) {}\n    let intro = null;\n    try {\n        intro = convert(m.intro);\n    } catch (e) {}\n    let pdfh1 = (a, b) => {\n        try {\n            if (b == null) return \"\";\n            return pdfh(a, b);\n        } catch (e) {\n            return \"\";\n        }\n    }\n    let pd1 = (a, b, c) => {\n        try {\n            if (b == null) return \"\";\n            return pd(a, b, c);\n        } catch (e) {\n            return \"\";\n        }\n    }\n    MY_URL = url;\n    if (MY_PARAMS.all && MY_PARAMS.all.searchUrl) {\n        m.charset = getCharset(MY_PARAMS.all.searchUrl);\n    }\n    let headers = m.charset ? {\n        \"Content-Type\": \"text/html; charset=\" + m.charset\n    } : {};\n    var res = request(url, {\n        headers: headers\n    })\n    let list = pdfa(res, listrule)\n    if (list.length > 0) {\n        list.forEach(item => {\n            let next = MY_PARAMS.all.ruleToc.nextTocUrl;\n            let nexttoc = next && next != \"\";\n            let ac = nexttoc ? \"\": \"#autoCache#\";\n            //let ac = \"#autoCache#\";\n            let u1 = pd1(item, bookurl) + ac + \"#immersiveTheme#\";\n            if (m.charset) {\n                u1 = u1 + \";get;\" + m.charset\n            }\n            d.push({\n                col_type: (cover ? \"movie_1_vertical_pic\" : \"text_1\"),\n                title: pdfh1(item, name),\n                img: (cover ? pd1(item, cover) + \"@Referer=\" : \"hiker://empty\"),\n                url: \"hiker://page/menu\",\n                desc: (author ? pdfh1(item, author) : \"\") + \"\\n\" + (intro ? pdfh1(item, intro) : \"\"),\n                extra: {\n                    \"bookName\": pdfh1(item, name),\n                    \"cover\": (cover ? pd1(item, cover) + \"@Referer=\" : \"hiker://empty\"),\n                    \"Toc\": MY_PARAMS.all.ruleToc,\n                    \"content\": MY_PARAMS.all.ruleContent,\n                    url: nexttoc ? \"hiker://empty#\" + u1 : u1,\n                    u1: nexttoc ? u1 : null,\n                    charset: m.charset,\n                    inheritTitle: false\n                }\n            })\n        })\n    } else {\n        d.push({\n            title: \"列表加载失败：\" + listrule,\n            col_type: \"text_center_1\",\n            url: \"hiker://empty\"\n        })\n    }\n} catch (e) {\n    d.push({\n        title: \"加载失败：\" + e.message,\n        col_type: \"text_center_1\",\n        url: \"hiker://empty\"\n    })\n}\nsetResult(d);"},{"col_type":"text_center_1","name":"设置","path":"config","rule":"js:\nvar d = [];\ntry {\n    d.push({\n        title: \"添加订阅\",\n        url: $(\"\", \"请输入订阅名称，取个名吧（注意不要填地址）\").input(() => {\n            if (input == null || input == \"\") {\n                return \"toast://不填怎么能行呢\"\n            }\n            if (input.includes(\"://\")) {\n                return \"toast://不能填地址哦，傻宝贝\"\n            }\n            return $(\"\", \"请输入订阅地址\").input((name) => {\n                let {\n                    add,\n                    update\n                } = $.require(\"hiker://page/datat\");\n                add(name, input);\n                try {\n                    update(name, input);\n                    refreshPage();\n                    return \"toast://导入成功\"\n                } catch (e) {\n                    return \"toast://导入失败\"\n                }\n            }, input)\n        }),\n        col_type: \"text_2\"\n    })\n    d.push({\n        title: \"添加本地\",\n        url: $(\"\", \"请输入订阅名称，取个名吧（输完点击确定后会跳转选择书源文件界面）\").input(() => {\n            if (input == null || input == \"\") {\n                return \"toast://不填怎么能行呢\"\n            }\n            if (input.includes(\"://\")) {\n                return \"toast://不能填地址哦，傻宝贝\"\n            }\n            return \"fileSelect://\" + $.toString((name) => {\n                let s = input.split(\"/\")\n                let fname = s[s.length - 1].replace(\"_fileSelect_\", \"\");\n                if (!fname.includes(\".json\") && !fname.includes(\".txt\")) {\n                    return \"toast://格式不对，仅支持json或txt格式的书源文件\"\n                }\n                let url = \"hiker://files/yuedu/\" + fname;\n                let c = fetch(\"file://\" + input);\n                if (!c.includes(\"bookSource\")) {\n                    return \"toast://格式不对，仅支持书源文件\"\n                }\n                writeFile(url, c);\n                let {\n                    add,\n                    update\n                } = $.require(\"hiker://page/datat\");\n                add(name, url);\n                try {\n                    update(name, url);\n                    refreshPage();\n                    return \"toast://导入成功\"\n                } catch (e) {\n                    return \"toast://导入失败\"\n                }\n            }, input);\n        }),\n        col_type: \"text_2\"\n    })\n    let list = $.require(\"hiker://page/datat\").load();\n    list.forEach((item, i) => {\n        d.push({\n            title: item.name,\n            desc: item.url,\n            url: $([\"删除订阅\", \"编辑名称\", \"分享订阅\", \"更新数据\"]).select((name, url) => {\n                if (input == \"删除订阅\") {\n                    return $(\"确认删除？\").confirm((name, url) => {\n                        if (url.startsWith(\"hiker://files/\")) {\n                            deleteFile(url);\n                        }\n                        deleteFile(\"hiker://files/yuedu/\" + md5(name) + \".json\")\n                        $.require(\"hiker://page/datat\").remove(url);\n                        refreshPage();\n                        return \"toast://已删除\"\n                    }, name, url)\n                } else if (input == \"编辑名称\") {\n                    return $(\"\").input((name, url) => {\n                        deleteFile(\"hiker://files/yuedu/\" + md5(name) + \".json\")\n                        let {\n                            rename,\n                            update\n                        } = $.require(\"hiker://page/datat\");\n                        update(input, url);\n                        rename(url, input);\n                        refreshPage();\n                        return \"hiker://empty\"\n                    }, name, url)\n                } else if (input == \"分享订阅\") {\n                    if (url.startsWith(\"hiker://files/\")) {\n                        return \"toast://当前订阅为本地文件，无法分享\";\n                    }\n                    return $(\"#noLoading#\").lazyRule((name, url) => {\n                        let {\n                            share\n                        } = $.require(\"hiker://page/datat\");\n                        return share(name, url)\n                    }, name, url)\n                } else {\n                    try {\n                        let {\n                            update\n                        } = $.require(\"hiker://page/datat\");\n                        update(name, url);\n                        return \"toast://更新成功\"\n                    } catch (e) {\n                        return \"toast://更新失败\"\n                    }\n                }\n            }, item.name, item.url),\n            col_type: \"text_1\"\n        })\n    })\n} catch (e) {\n    d.push({\n        title: \"错误：\" + e.message,\n        col_type: \"text_center_1\",\n        url: \"hiker://empty\"\n    })\n}\nsetResult(d);"},{"col_type":"text_1","name":"目录","path":"menu","rule":"js:\nvar d = [];\nvar res = getResCode()\nlet Toc = MY_PARAMS.Toc\nlet {\n    getArray,\n    getText,\n    getUrl0,\n    convert\n} = $.require(\"hiker://page/converter\");\n//log(Toc);\nvar caches = [];\n\nfunction getCache() {\n    let c = readFile(\"chapter.json\") || \"[]\";\n    caches = JSON.parse(c)\n    let url = MY_URL\n    addListener(\"onRefresh\", $.toString((url) => {\n        let c = readFile(\"chapter.json\") || \"[]\";\n        c = JSON.parse(c)\n        let che = {\n            url: url,\n            next: \"\",\n            chapters: []\n        };\n        for (let i = 0; i < c.length; i++) {\n            if (c[i].url == che.url) {\n                c[i] = che;\n                log(\"clear:\" + url)\n                saveFile(\"chapter.json\", JSON.stringify(c))\n                break\n            }\n        }\n    }, url))\n    for (let it of caches) {\n        if (it.url == url) {\n            return it;\n        }\n    }\n    return {\n        url: url,\n        next: \"\",\n        chapters: []\n    }\n}\n\nfunction saveCache(che) {\n    let c = caches\n    if (c.length > 10) {\n        c.shift()\n    }\n    let exist = false\n    for (let i = 0; i < c.length; i++) {\n        if (c[i].url == che.url) {\n            c[i] = che;\n            exist = true;\n            break\n        }\n    }\n    if (!exist) {\n        c.push(che)\n    }\n    saveFile(\"chapter.json\", JSON.stringify(c))\n}\n\n\nlet next = Toc.nextTocUrl;\nlet list = [];\nif (next && next != \"\") {\n    if (next == \"option@value\") {\n        next = \"text.下一页&&href\";\n    }\n    MY_URL = MY_PARAMS.u1 || MY_URL;\n    let headers = MY_PARAMS.charset ? {\n        \"charset\": MY_PARAMS.charset,\n        \"Content-Type\": \"text/html; charset=\" + MY_PARAMS.charset\n    } : {};\n    next = convert(next);\n    //log(next);\n    let cache = getCache();\n    let nurl = cache.next;\n    if (nurl == \"\") {\n        nurl = MY_URL;\n    }\n    let id = MY_URL + \"@@\" + new Date().getTime();\n    let aid = \"a\" + id;\n    putMyVar(aid, \"1\");\n    addListener(\"onClose\", $.toString((aid) => {\n        log(\"clear: \" + aid);\n        clearMyVar(aid);\n    }, aid));\n    let arr = cache.chapters || [];\n    var cc = (a) => {\n        return a.map(item => {\n            var title = getText(item, Toc.chapterName)\n            if (title != \"\") {\n                let u1 = getUrl0(item, Toc.chapterList, Toc.chapterUrl) + \"#autoPage##readTheme#\";\n                if (MY_PARAMS.charset) {\n                    u1 = u1 + \";get;\" + MY_PARAMS.charset;\n                }\n                return {\n                    title: title,\n                    url: \"hiker://page/content\",\n                    extra: {\n                        title: title,\n                        content: MY_PARAMS.content,\n                        url: u1\n                    },\n                    col_type: \"text_1\"\n                };\n            }\n        });\n    }\n    //log(cache.next + \":\" + cache.chapters.length);\n    let d2 = cc(arr);\n    d2.push({\n        title: \"加载中，请稍候...\",\n        url: \"\",\n        col_type: \"text_center_1\",\n        extra: {\n            id: id\n        }\n    });\n    d2.unshift({\n        title: MY_PARAMS.bookName,\n        img: MY_PARAMS.cover,\n        url: MY_URL,\n        col_type: \"movie_1_vertical_pic_blur\"\n    });\n    setResult(d2);\n    headers[\"Referer\"] = MY_URL.split(\"#\")[0];\n    if (nurl != MY_URL) {\n        MY_URL = nurl;\n        res = fetch(MY_URL, {\n            headers: headers\n        });\n    } else if (MY_PARAMS.u1) {\n        res = fetch(MY_URL, {\n            headers: headers\n        });\n    }\n    var urls = [nurl];\n    while (true) {\n        let a = [];\n        for (let it of arr) {\n            a.push(it);\n        }\n        cache.chapters = a;\n        let arr1 = getArray(res, Toc.chapterList);\n        //log(arr1);\n        if (arr1 && arr1.length > 0) {\n            for (let it of arr1) {\n                arr.push(it)\n            }\n        }\n        addItemBefore(id, cc(arr1));\n        try {\n            if (getMyVar(aid, \"0\") != \"1\") {\n                log(\"break: \" + aid);\n                break;\n            }\n            java.lang.Thread.sleep(50);\n            let nurl2 = pd(res, \"body&&\" + next);\n            if (nurl2 && nurl2 != \"\" && !urls.includes(nurl2)) {\n                headers[\"Referer\"] = cache.next.split(\"#\")[0];\n                urls.push(nurl2);\n                cache.next = nurl2;\n                nurl = nurl2;\n                MY_URL = nurl;\n                res = fetch(nurl, {\n                    headers: headers\n                });\n            } else {\n                break;\n            }\n        } catch (e) {\n            break;\n        }\n    }\n    deleteItem(id);\n    //log(cache.next + \":end:\" + cache.chapters.length);\n    saveCache(cache);\n} else {\n    list = getArray(res, Toc.chapterList);\n    list.forEach(item => {\n        //log(item);    \n        var title = getText(item, Toc.chapterName)\n        if (title != \"\") {\n            let u1 = getUrl0(item, Toc.chapterList, Toc.chapterUrl) + \"#autoPage##readTheme#\";\n            if (MY_PARAMS.charset) {\n                u1 = u1 + \";get;\" + MY_PARAMS.charset;\n            }\n            d.push({\n                title: title,\n                url: \"hiker://page/content\",\n                extra: {\n                    title: title,\n                    content: MY_PARAMS.content,\n                    url: u1\n                }\n            })\n        }\n    });\n\n    var cp = d.map(function(item) {\n        return {\n            \"title\": item.title,\n            \"url\": item.extra.url.replace(\"#autoPage##readTheme#\", \"\")\n        }\n    });\n    if (list.length > 0) {\n        d.unshift({\n            title: \"下载\",\n            url: \"hiker://page/download.view#noRecordHistory##noRefresh##noHistory#?rule=本地资源管理\",\n            col_type: \"text_center_1\",\n            extra: {\n                chapterList: cp,\n                defaultView: \"1\",\n                info: {\n                    bookName: MY_PARAMS.bookName,\n                    bookTopPic: MY_PARAMS.cover,\n                    ruleName: \"悦读\",\n                    parseCode: $.toString((MY_PARAMS, r0) => {\n                        let {\n                            convert\n                        } = $.require(\"hiker://page/converter?rule=\" + r0);\n                        var res = request(input);\n                        var rule = MY_PARAMS.content;\n                        let r = convert(rule.content);\n                        let r1 = r.split(\"&&\");\n                        let r2 = r1.slice(0, r1.length - 1).join(\"&&\");\n                        let arr = pdfa(res, \"body&&\" + r2);\n                        //log(arr);\n                        var tt = \"\"\n                        for (let it of arr) {\n                            it = it.replace(new RegExp(\"\\n\", \"g\"), \"--br--\");\n                            //log(it);\n                            var t = pdfh(it, \"Text\");\n                            t = t.replace(new RegExp(\"--br--\", \"g\"), \"<br>\");\n                            if (t == \"\") {\n                                continue\n                            }\n                            let t2 = t.split(\"<br>\");\n                            for (let it2 of t2) {\n                                if (it2 == \"\" || it2.length == 1) {\n                                    continue\n                                }\n                                if (!it2.startsWith(\"　\") && !it2.startsWith(\"&nbsp;&nbsp;\")) {\n                                    it2 = \"&nbsp;&nbsp;&nbsp;&nbsp;\" + it2.trim();\n                                }\n                                if (rule.replaceRegex) {\n                                    it2 = it2.replace(new RegExp(rule.replaceRegex.replace(\"##\", \"\"), \"g\"), \"\")\n                                }\n                                if (it2 == \"\") {\n                                    continue\n                                }\n                                tt += it2 + \"\\n\"\n                            }\n                        }\n                        return tt\n                    }, MY_PARAMS, MY_RULE.title),\n                    type: \"novel\"\n                }\n            }\n        });\n    } else {\n        d.unshift({\n            title: \"未解析到目录列表\",\n            url: MY_URL,\n            col_type: \"text_center_1\",\n        });\n    }\n    d.unshift({\n        title: MY_PARAMS.bookName,\n        img: MY_PARAMS.cover,\n        url: MY_URL,\n        col_type: \"movie_1_vertical_pic_blur\"\n    })\n    setResult(d);\n}"},{"col_type":"movie_3","name":"内容","path":"content","rule":"js:\nvar d = [];\nlet {\n    convert\n} = $.require(\"hiker://page/converter\");\nvar res = getResCode();\nvar rule = MY_PARAMS.content\nlet r = convert(rule.content);\nlet r1 = r.split(\"&&\");\nlet r2 = r1.slice(0, r1.length - 1).join(\"&&\");\nlet arr = pdfa(res, \"body&&\" + r2);\n//log(arr);\nfor (let it of arr) {\n    it = it.replace(new RegExp(\"\\n\", \"g\"), \"--br--\");\n    //log(it);\n    var t = pdfh(it, \"Text\");\n    t = t.replace(new RegExp(\"--br--\", \"g\"), \"<br>\");\n    if (t == \"\") {\n        continue\n    }\n    let t2 = t.split(\"<br>\");\n    for (let it2 of t2) {\n        if (it2 == \"\" || it2.length == 1) {\n            continue\n        }\n        if (!it2.startsWith(\"　\") && !it2.startsWith(\"&nbsp;&nbsp;\")) {\n            it2 = \"&nbsp;&nbsp;&nbsp;&nbsp;\" + it2.trim();\n        }\n        if (rule.replaceRegex) {\n            it2 = it2.replace(new RegExp(rule.replaceRegex.replace(\"##\", \"\"), \"g\"), \"\")\n        }\n        if (it2 == \"\" || it2 == \"&nbsp;&nbsp;&nbsp;&nbsp;\") {\n            continue\n        }\n        d.push({\n            title: it2,\n            url: \"\",\n            col_type: \"rich_text\",\n            desc: \"\",\n            pic_url: \"\"\n        });\n    }\n}\nd.unshift({\n    title: \"<big>\" + MY_PARAMS.title + \"</big>\",\n    col_type: \"rich_text\"\n})\nsetResult(d);"},{"col_type":"movie_1_vertical_pic","name":"搜索","path":"search","rule":"js:\nlet {\n    search\n} = $.require(\"hiker://page/ss\");\nlet d = [];\nlet kw = getParam(\"kw\");\nlet s = kw;\nsetPageTitle(\"搜索\" + kw + \" \" + MY_PARAMS.bookSourceName);\nif (typeof(getSearchMode) == \"undefined\") {\n    confirm({\n        title: \"温馨提示\",\n        content: \"你的软件版本太低，更新到最新版才能使用本规则\"\n    })\n}\nlet matchMust = getSearchMode() == 1;\nlet tip = \"精确匹配：\" + (matchMust ? \"是\" : \"否\");\nif (MY_PAGE == 1) {\n    d.push({\n        title: tip,\n        url: $(\"#noLoading#\").lazyRule(() => {\n            setSearchMode(getSearchMode() == 0 ? 1 : 0);\n            refreshPage();\n            return \"toast://OK\";\n        }),\n        col_type: \"text_1\",\n    });\n}\nlet d2 = search(MY_PARAMS.rules, kw, MY_PAGE);\nfor (let it of d2) {\n    if (!matchMust || searchContains(it.title, s)) {\n        it.title = it.title.includes(\"““””\") ? it.title : \"““””\" + it.title.replace(new RegExp(\"<em>|</em>\", \"g\"), \"\").replace(new RegExp(s, \"g\"), \"<strong><span style=\\\"color: #1E90FF\\\">\" + s + \"</span></strong>\")\n        d.push(it);\n    }\n}\n\nsetResult(d);"},{"col_type":"movie_3","name":"转换","path":"converter","rule":"var convert = (str) => {\n    return str.replace(/@/g, \"&&\")\n        .replace(/\\.[0-9]/g, function(a) {\n            return a.replace(\".\", \",\")\n        })\n        .replace(new RegExp(\" \", \"g\"), \"&&\")\n        .replace(/text\\.(.*?)&&/g, \"*:contains($1),-1&&\")\n        .replace(/-class\\./g, \".\")\n        .replace(/class\\./g, \".\")\n        .replace(/tag\\./g, \"\")\n        .replace(/id\\./g, \"#\")\n        .replace(/##/g, \"!\")\n        .replace(/&&([a-zA-Z\\.\\-]+?)!([0-9])/g, \"--$1,$2&&$1\")\n        .replace(\"text\", \"Text\");\n};\nlet getArray = (html, rule) => {\n    let r1 = rule.split(\"!\")[0].split(\"||\");\n    let c = convert(r1[0]);\n    if (c.includes(\"&&li&&a\") && c[c.length - 1] == \"a\") {\n        c = c.replace(\"&&li&&a\", \"&&li\");\n    }\n    log(c);\n    let arr = pdfa(html, \"body&&\" + c);\n    if (r1.length > 1) {\n        let r2 = r1[1].split(\":\");\n        let r3 = [];\n        for (let it of r2) {\n            try {\n                let i = parseInt(it);\n                if (isNaN(i)) {\n                    continue;\n                }\n                r3.push(i);\n            } catch (e) {}\n        }\n        let arr2 = [];\n        for (let i = 0; i < arr.length; i++) {\n            if (r3.indexOf(i) < 0) {\n                arr2.push(arr[i]);\n            }\n        }\n        return arr2;\n    }\n    log(\"获取失败，失败定位：\" + r1)\n    return arr;\n};\nlet getText = (html, rule) => {\n    var ru = convert(rule)\n    var r = pdfh(html, ru)\n    if (r == \"\") {\n        log(\"返回为空，可能是定位失败：\" + rule)\n    }\n    return r\n};\nlet getUrl0 = (html, parentRule, rule) => {\n    if (parentRule != null) {\n        parentRule = parentRule.split(\"!\")[0];\n    }\n    let p = parentRule != null && parentRule[parentRule.length - 1] == \"a\" ? \"a&&\" : \"\";\n    let r = pd(html, p + convert(rule.split(\"##\")[0]));\n    if (r == \"\") {\n        log(\"返回为空，可能是定位失败：\" + rule)\n    }\n    return r\n};\nlet parseUrl = (url, page) => {\n    url = url.replace(new RegExp(\"{{page}}\", \"g\"), page);\n    let s = url.split(\"<,\");\n    if (s.length > 1) {\n        if (page > 1) {\n            let s2 = s[1].split(\">\");\n            url = s[0] + s2[0] + (s2.length > 1 ? s2[1] : \"\")\n        } else {\n            url = s[0];\n        }\n    }\n    return url;\n}\nlet getCharset = (searchUrl) => {\n    if (searchUrl) {\n        if (searchUrl.includes('\"gbk\"') || searchUrl.includes(\"'gbk'\")) {\n            return \"gbk\"\n        } else if (searchUrl.includes('\"gb2312\"') || searchUrl.includes(\"'gb2312'\")) {\n            return \"gb2312\"\n        }\n    }\n    return null\n}\n$.exports = {\n    getArray: getArray,\n    convert: convert,\n    getText: getText,\n    getUrl0: getUrl0,\n    parseUrl: parseUrl,\n    getCharset: getCharset\n}"},{"col_type":"movie_3","name":"聚搜","path":"ju","rule":"js:\nvar d = [];\nlet {\n    search,\n    listRules\n} = $.require(\"hiker://page/ss\");\nlet {\n    all,\n    use,\n    data\n} = listRules(MY_PAGE);\ndata = data || [];\nlet s = getParam(\"kw\");\nsetPageTitle(\"搜索\" + s);\nif (typeof(getSearchMode) == \"undefined\") {\n    confirm({\n        title: \"温馨提示\",\n        content: \"你的软件版本太低，更新到最新版才能使用本规则\"\n    })\n}\nlet matchMust = getSearchMode() == 1;\nlet tip = \"搜索源：\" + use + \"/\" + all + \"  精确匹配：\" + (matchMust ? \"是\" : \"否\");\nif (MY_PAGE == 1) {\n    d.push({\n        title: tip,\n        url: $(\"#noLoading#\").lazyRule(() => {\n            setSearchMode(getSearchMode() == 0 ? 1 : 0);\n            refreshPage();\n            return \"toast://OK\";\n        }),\n        col_type: \"text_1\",\n        extra: {\n            id: \"yuedu-s-h\"\n        }\n    });\n} else if (data.length > 0) {\n    updateItem(\"yuedu-s-h\", {\n        title: tip\n    });\n}\nlet p = MY_PAGE;\nlet pageid = \"yuedu-page\" + MY_PAGE;\nif (data.length > 0) {\n    d.push({\n        title: \"加载第\" + MY_PAGE + \"页中，进度：1/\" + data.length,\n        url: \"hiker://empty\",\n        col_type: \"text_center_1\",\n        desc: \"\",\n        pic_url: \"\",\n        extra: {\n            id: pageid\n        }\n    });\n}\nsetResult(d);\nif (data.length > 0) {\n    //多线程加载\n    let tasks = data.map(it => {\n        return {\n            func: function(rule) {\n                return search(rule, s, 1);\n            },\n            param: it,\n            id: \"rule@\" + it.name\n        }\n    });\n\n    batchExecute(tasks, {\n        func: function(param, id, error, result) {\n            //log(\"listener: \" + (result || []).length)\n            param.i = param.i + 1;\n            if (result) {\n                try {\n                    for (let it of result) {\n                        param.j = param.j + 1;\n                        if (matchMust) {\n                            if (!searchContains(it.title, s)) {\n                                continue;\n                            }\n                        }\n                        let extra = it.extra || {};\n                        extra.id = \"__app\" + MY_PAGE + \"@\" + param.j;\n                        extra.bookName = it.title\n                        extra.cover = it.pic_url || it.img\n                        addItemBefore(pageid, {\n                            title: it.title.includes(\"““””\") ? it.title : \"““””\" + it.title.replace(new RegExp(\"<em>|</em>\", \"g\"), \"\").replace(new RegExp(s, \"g\"), \"<strong><span style=\\\"color: #1E90FF\\\">\" + s + \"</span></strong>\"),\n                            desc: it.desc,\n                            url: it.url,\n                            pic_url: it.pic_url || it.img,\n                            col_type: it.pic_url || it.img ? 'movie_1_vertical_pic' : \"text_1\",\n                            extra: extra\n                        })\n                    }\n                } catch (e) {}\n\n            }\n            if (param.i >= param.all) {\n                deleteItem(pageid)\n            } else {\n                updateItem({\n                    title: \"加载第\" + MY_PAGE + \"页中，进度：\" + (param.i + 1) + \"/\" + param.all,\n                    url: \"hiker://empty\",\n                    col_type: \"text_center_1\",\n                    desc: \"\",\n                    pic_url: \"\",\n                    extra: {\n                        id: pageid\n                    }\n                })\n            }\n        },\n        param: {\n            all: data.length,\n            i: 0,\n            j: -1\n        }\n    });\n}"},{"col_type":"movie_3","name":"搜索辅助","path":"ss","rule":"var {\n    convert,\n    parseUrl,\n    getCharset\n} = $.require(\"hiker://page/converter\");\nlet search = (rule, kw, page) => {\n    let d = [];\n    let m = rule.ruleSearch\n    // 阅读=>视界\n    let u = rule.searchUrl.startsWith(\"http\") ? rule.searchUrl : rule.bookSourceUrl + rule.searchUrl;\n    //log(m);\n    let url1 = parseUrl(u, page).replace(new RegExp(\"{{key}}\", \"g\"), kw);\n    let url2 = url1.split(\",{\");\n    let url = url2[0];\n    let headers = {};\n    let method = \"get\";\n    let body = null;\n    let c = getCharset(url1);\n    if (c) {\n        headers.charset = c;\n        headers[\"Content-Type\"] = \"text/html; charset=\" + c;\n    }\n    try {\n        if (url2.length > 1 && url1.substring(url1.length - 1, url1.length) == \"}\") {\n            let ext = \"{\" + url1.substring(url1.indexOf(\",{\") + 2, url1.length);\n            //log(ext);\n            try {\n                ext = JSON.parse(ext);\n            } catch (e) {\n                eval(\"ext=\" + ext);\n            }\n            if (ext.method && ext.method != \"\") {\n                method = ext.method;\n            }\n            if (ext.body && ext.body != \"\") {\n                body = ext.body;\n                headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\" + (headers.charset ? \";charset=\" + headers.charset : \"\");\n            }\n        }\n    } catch (e) {\n        if (url1.includes('\"POST\"') || url1.includes('\"post\"')) {\n            method = \"post\";\n        }\n    }\n    if (method == \"post\" || method == \"POST\") {\n        let ct = headers[\"Content-Type\"];\n        headers[\"Content-Type\"] = ct ? ct.replace(\"text/html\", \"application/x-www-form-urlencoded\") : \"application/x-www-form-urlencoded\";\n    }\n\n    let listrule = \"body&&\" + convert(m.bookList).split(\"||\")[0]\n    let author = null;\n    try {\n        author = convert(m.author);\n    } catch (e) {}\n    let cover = null;\n    try {\n        cover = convert(m.coverUrl);\n    } catch (e) {}\n    let name = null;\n    try {\n        name = convert(m.name);\n    } catch (e) {}\n    let bookurl = null;\n    try {\n        bookurl = convert(m.bookUrl);\n    } catch (e) {}\n    let intro = null;\n    try {\n        intro = convert(m.intro);\n    } catch (e) {}\n    //setPageTitle(\"搜索\" + getParam(\"kw\") + \" \" + MY_PARAMS.bookSourceName);\n    //MY_URL = url;\n    let res = request(url, {\n        method: method,\n        headers: headers,\n        body: body\n    });\n    let pdfh1 = (a, b) => {\n        try {\n            if (b == null) return \"\";\n            return pdfh(a, b);\n        } catch (e) {\n            return \"\";\n        }\n    }\n    let pd1 = (a, b, c) => {\n        try {\n            if (b == null) return \"\";\n            return pd(a, b, c);\n        } catch (e) {\n            return \"\";\n        }\n    }\n    listrule = listrule.replace(\"&&tbody--tr,0&&tr\", \"&&table tbody tr:gt(0)\");\n    //log(listrule);\n    let list = pdfa(res, listrule);\n    //log(list);\n    //log(name);\n    list.forEach(item => {\n        let next = rule.ruleToc.nextTocUrl;\n        let nexttoc = next && next != \"\";\n        let ac = nexttoc ? \"\": \"#autoCache#\";\n        //let ac = \"#autoCache#\";\n        let u1 = pd1(item, bookurl, url) + ac + \"#immersiveTheme#\";\n        if (c) {\n            u1 = u1 + \";get;\" + c\n        }\n        d.push({\n            title: pdfh1(item, name),\n            img: pd1(item, cover, url),\n            url: \"hiker://page/menu\",\n            desc: rule.bookSourceName + \"\\n\" + pdfh1(item, author) + \"\\n\" + pdfh1(item, intro),\n            extra: {\n                \"Toc\": rule.ruleToc,\n                \"content\": rule.ruleContent,\n                \"bookName\": parseDomForHtml(item, name),\n                \"cover\": parseDom(item, cover, url),\n                url: nexttoc ? \"hiker://empty#\" + u1 : u1,\n                u1: nexttoc ? u1 : null,\n                inheritTitle: false,\n                charset: c\n            }\n        })\n    });\n    return d;\n}\n$.exports = {\n    convert: convert,\n    search: search,\n    listRules: (page, rule) => {\n        try {\n            //并发数量\n            let size = 16;\n            let {\n                load,\n                loadRules,\n                getSelect\n            } = $.require(\"hiker://page/datat\");\n            let data = load();\n            let select = getSelect(data);\n            let rules = data.length > 0 ? loadRules(select.name) : [];\n            if (!page && !rule) {\n                return rules.map(it => it.name);\n            }\n            if (rule != null) {\n                return rules.filter(i => i.name == rule);\n            }\n            let start = (page - 1) * size;\n            if (rules.length < start + 1) {\n                return [];\n            }\n            let len = size;\n            if (rules.length < page * size) {\n                len = rules.length - start\n            }\n            let all = rules.length;\n            let use = (page - 1) * size + len;\n            return {\n                all: all,\n                use: use,\n                data: rules.slice(start, start + len)\n            };\n        } catch (e) {\n            return {\n                all: 0,\n                use: 0,\n                data: []\n            }\n        }\n    }\n}"},{"col_type":"movie_3","name":"数据","path":"datat","rule":"let load = function() {\n    try {\n        return JSON.parse(fetch(\"hiker://files/yuedu/list.json\")).urls;\n    } catch (e) {\n        return [];\n    }\n}\nlet loadRules = function(name) {\n    try {\n        let list = JSON.parse(fetch(\"hiker://files/yuedu/\" + md5(name) + \".json\"));\n        return list.filter(it => {\n            let s = JSON.stringify(it)\n            if (s.includes(\"<js>\") || s.includes(\"@js:\") || s.includes(\"$.\") || s.includes(\"🔞\")) {\n                return false\n            } else {\n                return true\n            }\n        });\n    } catch (e) {\n        return [];\n    }\n}\nlet remove = function(url) {\n    let data = load();\n    data = data.filter(it => it.url != url);\n    writeFile(\"hiker://files/yuedu/list.json\", JSON.stringify({\n        urls: data\n    }))\n}\nlet rename = function(url, name) {\n    let arr = load();\n    for (let i in arr) {\n        if (arr[i].url == url) {\n            arr[i].name = name;\n        }\n    }\n    writeFile(\"hiker://files/yuedu/list.json\", JSON.stringify({\n        urls: arr\n    }))\n}\nlet add = function(name, url) {\n    let data = load();\n    data = data.filter(it => it.url != url);\n    data.push({\n        name: name,\n        url: url\n    });\n    writeFile(\"hiker://files/yuedu/list.json\", JSON.stringify({\n        urls: data\n    }))\n}\nlet update = function(name, url) {\n    let t = fetch(url)\n    JSON.parse(t)\n    writeFile(\"hiker://files/yuedu/\" + md5(name) + \".json\", t)\n}\nlet share = function(name, url) {\n    return \"copy://悦读订阅数据分享，复制整条口令打开软件即可导入\\n\" + name + \"：\" + url + \"@import=js:$.require('hiker://page/datat?rule=\" + MY_RULE.title + \"').ca()\"\n}\nlet cloudAdd = function() {\n    let s = input.split(\"：\");\n    if (s.length > 1) {\n        add(s[0], s[1]);\n        update(s[0], s[1]);\n    }\n    return \"toast://已导入悦读订阅源“\" + s[0] + \"”\"\n}\nlet getSelect = function(data) {\n    if (data == null) {\n        data = load();\n    }\n    if (data.length == 0) {\n        return {};\n    }\n    let tab = getItem(\"tab\", data[0].url);\n    let select = data.filter(it => it.url == tab);\n    if (select.length <= 0) {\n        return data[0];\n    } else {\n        return select[0];\n    }\n}\n$.exports = {\n    add: add,\n    update: update,\n    remove: remove,\n    rename: rename,\n    load: load,\n    loadRules: loadRules,\n    getSelect: getSelect,\n    share: share,\n    ca: cloudAdd\n}"}],"title":"悦读","author":"Joe&&小棉袄🌞","version":53,"type":"read","url":"hiker://empty","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:$.require(\"hiker://page/home\")","searchFind":"js:\nvar d = [];\nlet kw = getParam(\"kw\")\nsetResult([{\n    title: \"点击开始聚搜\" + kw,\n    url: \"hiker://page/ju?p=fypage&kw=\" + kw\n}])\nsetResult(d);","search_url":"hiker://empty?kw=**","group":"①推荐","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"text_1\",\"name\":\"源目录\",\"path\":\"source\",\"rule\":\"js:\\nvar d = [];\\nvar m = MY_PARAMS.rules\\nvar baseurl = m.bookSourceUrl\\nif (m.ruleExplore.bookList) {\\n    var rule = m.ruleExplore\\n} else {\\n    var rule = m.ruleSearch\\n}\\nd.push({\\n    title: \\\"搜索\\\",\\n    desc: \\\"请输入搜索关键词\\\",\\n    url: $.toString(() => {\\n        putMyVar(\\\"kw\\\", input);\\n        return \\\"hiker://page/search?p=fypage&kw=\\\" + input\\n    }),\\n    col_type: \\\"input\\\",\\n    extra: {\\n        \\\"u\\\": baseurl + m.searchUrl,\\n        \\\"rules\\\": m,\\n        defaultValue: getMyVar(\\\"kw\\\", \\\"\\\"),\\n        bookSourceName: m.bookSourceName\\n    }\\n});\\ntry {\\n    if (m.enabledExplore && m.exploreUrl) {\\n        JSON.parse(m.exploreUrl).forEach(item => {\\n            d.push({\\n                title: item.title,\\n                col_type: item.style.layout_flexBasisPercent == 1 ? \\\"text_center_1\\\" : \\\"text_3\\\",\\n                url: item.url == \\\"\\\" ? \\\"hiker://empty\\\" : \\\"hiker://page/books?p=fypage\\\",\\n                extra: {\\n                    \\\"all\\\": m,\\n                    \\\"rules\\\": rule,\\n                    \\\"u\\\": baseurl + item.url\\n                }\\n            })\\n        })\\n    }\\n} catch (e) {\\n    log(m.exploreUrl);\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"主页\",\"path\":\"home\",\"rule\":\"var d = [];\\nlet {\\n    load,\\n    loadRules,\\n    getSelect\\n} = $.require(\\\"hiker://page/datat\\\");\\nlet data = load();\\nif (data.length > 0) {\\n    d.push({\\n        title: \\\"⚙️设置\\\",\\n        url: \\\"hiker://page/config\\\",\\n        col_type: \\\"scroll_button\\\"\\n    });\\n    let select = getSelect(data);\\n    data.forEach(item => {\\n        d.push({\\n            title: select.url == item.url ? \\\"““\\\" + item.name + \\\"””\\\" : item.name,\\n            url: $().lazyRule((url) => {\\n                setItem(\\\"tab\\\", url)\\n                refreshPage()\\n                return \\\"toast://切换成功\\\"\\n            }, item.url),\\n            col_type: \\\"scroll_button\\\"\\n        })\\n    })\\n    d.push({\\n        title: \\\"搜索\\\",\\n        url: $.toString(() => {\\n            putMyVar(\\\"kw\\\", input);\\n            return \\\"hiker://page/ju?p=fypage&kw=\\\" + input\\n        }),\\n        col_type: \\\"input\\\",\\n        desc: \\\"聚合搜索，请输入关键词\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            defaultValue: getMyVar(\\\"kw\\\", \\\"\\\"),\\n        }\\n    });\\n    let list = loadRules(select.name);\\n    list.forEach(item => {\\n        d.push({\\n            title: item.bookSourceName + `(${item.bookSourceGroup})`,\\n            col_type: \\\"text_2\\\",\\n            url: \\\"hiker://page/source?p=fypage\\\",\\n            extra: {\\n                \\\"rules\\\": item\\n            }\\n        })\\n    })\\n} else {\\n    setResult([{\\n        title: \\\"你还没有书哦～～点我进入设置\\\",\\n        url: \\\"hiker://page/config\\\",\\n        col_type: \\\"text_center_1\\\"\\n    }])\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_1_vertical_pic\",\"name\":\"列表\",\"path\":\"books\",\"rule\":\"js:\\nvar d = [];\\nvar {\\n    convert,\\n    parseUrl,\\n    getCharset\\n} = $.require(\\\"hiker://page/converter\\\");\\ntry {\\n    //log(MY_PARAMS);\\n    var m = MY_PARAMS.rules\\n    // 阅读=>视界\\n    var url = parseUrl(MY_PARAMS.u, MY_PAGE);\\n    var listrule = \\\"body&&\\\" + convert(m.bookList.split(\\\"||\\\")[0]);\\n    let author = null;\\n    try {\\n        author = convert(m.author);\\n    } catch (e) {}\\n    let cover = null;\\n    try {\\n        cover = convert(m.coverUrl);\\n    } catch (e) {}\\n    let name = null;\\n    try {\\n        name = convert(m.name);\\n    } catch (e) {}\\n    let bookurl = null;\\n    try {\\n        bookurl = convert(m.bookUrl);\\n    } catch (e) {}\\n    let intro = null;\\n    try {\\n        intro = convert(m.intro);\\n    } catch (e) {}\\n    let pdfh1 = (a, b) => {\\n        try {\\n            if (b == null) return \\\"\\\";\\n            return pdfh(a, b);\\n        } catch (e) {\\n            return \\\"\\\";\\n        }\\n    }\\n    let pd1 = (a, b, c) => {\\n        try {\\n            if (b == null) return \\\"\\\";\\n            return pd(a, b, c);\\n        } catch (e) {\\n            return \\\"\\\";\\n        }\\n    }\\n    MY_URL = url;\\n    if (MY_PARAMS.all && MY_PARAMS.all.searchUrl) {\\n        m.charset = getCharset(MY_PARAMS.all.searchUrl);\\n    }\\n    let headers = m.charset ? {\\n        \\\"Content-Type\\\": \\\"text/html; charset=\\\" + m.charset\\n    } : {};\\n    var res = request(url, {\\n        headers: headers\\n    })\\n    let list = pdfa(res, listrule)\\n    if (list.length > 0) {\\n        list.forEach(item => {\\n            let next = MY_PARAMS.all.ruleToc.nextTocUrl;\\n            let nexttoc = next && next != \\\"\\\";\\n            let ac = nexttoc ? \\\"\\\": \\\"#autoCache#\\\";\\n            //let ac = \\\"#autoCache#\\\";\\n            let u1 = pd1(item, bookurl) + ac + \\\"#immersiveTheme#\\\";\\n            if (m.charset) {\\n                u1 = u1 + \\\";get;\\\" + m.charset\\n            }\\n            d.push({\\n                col_type: (cover ? \\\"movie_1_vertical_pic\\\" : \\\"text_1\\\"),\\n                title: pdfh1(item, name),\\n                img: (cover ? pd1(item, cover) + \\\"@Referer=\\\" : \\\"hiker://empty\\\"),\\n                url: \\\"hiker://page/menu\\\",\\n                desc: (author ? pdfh1(item, author) : \\\"\\\") + \\\"\\\\n\\\" + (intro ? pdfh1(item, intro) : \\\"\\\"),\\n                extra: {\\n                    \\\"bookName\\\": pdfh1(item, name),\\n                    \\\"cover\\\": (cover ? pd1(item, cover) + \\\"@Referer=\\\" : \\\"hiker://empty\\\"),\\n                    \\\"Toc\\\": MY_PARAMS.all.ruleToc,\\n                    \\\"content\\\": MY_PARAMS.all.ruleContent,\\n                    url: nexttoc ? \\\"hiker://empty#\\\" + u1 : u1,\\n                    u1: nexttoc ? u1 : null,\\n                    charset: m.charset,\\n                    inheritTitle: false\\n                }\\n            })\\n        })\\n    } else {\\n        d.push({\\n            title: \\\"列表加载失败：\\\" + listrule,\\n            col_type: \\\"text_center_1\\\",\\n            url: \\\"hiker://empty\\\"\\n        })\\n    }\\n} catch (e) {\\n    d.push({\\n        title: \\\"加载失败：\\\" + e.message,\\n        col_type: \\\"text_center_1\\\",\\n        url: \\\"hiker://empty\\\"\\n    })\\n}\\nsetResult(d);\"},{\"col_type\":\"text_center_1\",\"name\":\"设置\",\"path\":\"config\",\"rule\":\"js:\\nvar d = [];\\ntry {\\n    d.push({\\n        title: \\\"添加订阅\\\",\\n        url: $(\\\"\\\", \\\"请输入订阅名称，取个名吧（注意不要填地址）\\\").input(() => {\\n            if (input == null || input == \\\"\\\") {\\n                return \\\"toast://不填怎么能行呢\\\"\\n            }\\n            if (input.includes(\\\"://\\\")) {\\n                return \\\"toast://不能填地址哦，傻宝贝\\\"\\n            }\\n            return $(\\\"\\\", \\\"请输入订阅地址\\\").input((name) => {\\n                let {\\n                    add,\\n                    update\\n                } = $.require(\\\"hiker://page/datat\\\");\\n                add(name, input);\\n                try {\\n                    update(name, input);\\n                    refreshPage();\\n                    return \\\"toast://导入成功\\\"\\n                } catch (e) {\\n                    return \\\"toast://导入失败\\\"\\n                }\\n            }, input)\\n        }),\\n        col_type: \\\"text_2\\\"\\n    })\\n    d.push({\\n        title: \\\"添加本地\\\",\\n        url: $(\\\"\\\", \\\"请输入订阅名称，取个名吧（输完点击确定后会跳转选择书源文件界面）\\\").input(() => {\\n            if (input == null || input == \\\"\\\") {\\n                return \\\"toast://不填怎么能行呢\\\"\\n            }\\n            if (input.includes(\\\"://\\\")) {\\n                return \\\"toast://不能填地址哦，傻宝贝\\\"\\n            }\\n            return \\\"fileSelect://\\\" + $.toString((name) => {\\n                let s = input.split(\\\"/\\\")\\n                let fname = s[s.length - 1].replace(\\\"_fileSelect_\\\", \\\"\\\");\\n                if (!fname.includes(\\\".json\\\") && !fname.includes(\\\".txt\\\")) {\\n                    return \\\"toast://格式不对，仅支持json或txt格式的书源文件\\\"\\n                }\\n                let url = \\\"hiker://files/yuedu/\\\" + fname;\\n                let c = fetch(\\\"file://\\\" + input);\\n                if (!c.includes(\\\"bookSource\\\")) {\\n                    return \\\"toast://格式不对，仅支持书源文件\\\"\\n                }\\n                writeFile(url, c);\\n                let {\\n                    add,\\n                    update\\n                } = $.require(\\\"hiker://page/datat\\\");\\n                add(name, url);\\n                try {\\n                    update(name, url);\\n                    refreshPage();\\n                    return \\\"toast://导入成功\\\"\\n                } catch (e) {\\n                    return \\\"toast://导入失败\\\"\\n                }\\n            }, input);\\n        }),\\n        col_type: \\\"text_2\\\"\\n    })\\n    let list = $.require(\\\"hiker://page/datat\\\").load();\\n    list.forEach((item, i) => {\\n        d.push({\\n            title: item.name,\\n            desc: item.url,\\n            url: $([\\\"删除订阅\\\", \\\"编辑名称\\\", \\\"分享订阅\\\", \\\"更新数据\\\"]).select((name, url) => {\\n                if (input == \\\"删除订阅\\\") {\\n                    return $(\\\"确认删除？\\\").confirm((name, url) => {\\n                        if (url.startsWith(\\\"hiker://files/\\\")) {\\n                            deleteFile(url);\\n                        }\\n                        deleteFile(\\\"hiker://files/yuedu/\\\" + md5(name) + \\\".json\\\")\\n                        $.require(\\\"hiker://page/datat\\\").remove(url);\\n                        refreshPage();\\n                        return \\\"toast://已删除\\\"\\n                    }, name, url)\\n                } else if (input == \\\"编辑名称\\\") {\\n                    return $(\\\"\\\").input((name, url) => {\\n                        deleteFile(\\\"hiker://files/yuedu/\\\" + md5(name) + \\\".json\\\")\\n                        let {\\n                            rename,\\n                            update\\n                        } = $.require(\\\"hiker://page/datat\\\");\\n                        update(input, url);\\n                        rename(url, input);\\n                        refreshPage();\\n                        return \\\"hiker://empty\\\"\\n                    }, name, url)\\n                } else if (input == \\\"分享订阅\\\") {\\n                    if (url.startsWith(\\\"hiker://files/\\\")) {\\n                        return \\\"toast://当前订阅为本地文件，无法分享\\\";\\n                    }\\n                    return $(\\\"#noLoading#\\\").lazyRule((name, url) => {\\n                        let {\\n                            share\\n                        } = $.require(\\\"hiker://page/datat\\\");\\n                        return share(name, url)\\n                    }, name, url)\\n                } else {\\n                    try {\\n                        let {\\n                            update\\n                        } = $.require(\\\"hiker://page/datat\\\");\\n                        update(name, url);\\n                        return \\\"toast://更新成功\\\"\\n                    } catch (e) {\\n                        return \\\"toast://更新失败\\\"\\n                    }\\n                }\\n            }, item.name, item.url),\\n            col_type: \\\"text_1\\\"\\n        })\\n    })\\n} catch (e) {\\n    d.push({\\n        title: \\\"错误：\\\" + e.message,\\n        col_type: \\\"text_center_1\\\",\\n        url: \\\"hiker://empty\\\"\\n    })\\n}\\nsetResult(d);\"},{\"col_type\":\"text_1\",\"name\":\"目录\",\"path\":\"menu\",\"rule\":\"js:\\nvar d = [];\\nvar res = getResCode()\\nlet Toc = MY_PARAMS.Toc\\nlet {\\n    getArray,\\n    getText,\\n    getUrl0,\\n    convert\\n} = $.require(\\\"hiker://page/converter\\\");\\n//log(Toc);\\nvar caches = [];\\n\\nfunction getCache() {\\n    let c = readFile(\\\"chapter.json\\\") || \\\"[]\\\";\\n    caches = JSON.parse(c)\\n    let url = MY_URL\\n    addListener(\\\"onRefresh\\\", $.toString((url) => {\\n        let c = readFile(\\\"chapter.json\\\") || \\\"[]\\\";\\n        c = JSON.parse(c)\\n        let che = {\\n            url: url,\\n            next: \\\"\\\",\\n            chapters: []\\n        };\\n        for (let i = 0; i < c.length; i++) {\\n            if (c[i].url == che.url) {\\n                c[i] = che;\\n                log(\\\"clear:\\\" + url)\\n                saveFile(\\\"chapter.json\\\", JSON.stringify(c))\\n                break\\n            }\\n        }\\n    }, url))\\n    for (let it of caches) {\\n        if (it.url == url) {\\n            return it;\\n        }\\n    }\\n    return {\\n        url: url,\\n        next: \\\"\\\",\\n        chapters: []\\n    }\\n}\\n\\nfunction saveCache(che) {\\n    let c = caches\\n    if (c.length > 10) {\\n        c.shift()\\n    }\\n    let exist = false\\n    for (let i = 0; i < c.length; i++) {\\n        if (c[i].url == che.url) {\\n            c[i] = che;\\n            exist = true;\\n            break\\n        }\\n    }\\n    if (!exist) {\\n        c.push(che)\\n    }\\n    saveFile(\\\"chapter.json\\\", JSON.stringify(c))\\n}\\n\\n\\nlet next = Toc.nextTocUrl;\\nlet list = [];\\nif (next && next != \\\"\\\") {\\n    if (next == \\\"option@value\\\") {\\n        next = \\\"text.下一页&&href\\\";\\n    }\\n    MY_URL = MY_PARAMS.u1 || MY_URL;\\n    let headers = MY_PARAMS.charset ? {\\n        \\\"charset\\\": MY_PARAMS.charset,\\n        \\\"Content-Type\\\": \\\"text/html; charset=\\\" + MY_PARAMS.charset\\n    } : {};\\n    next = convert(next);\\n    //log(next);\\n    let cache = getCache();\\n    let nurl = cache.next;\\n    if (nurl == \\\"\\\") {\\n        nurl = MY_URL;\\n    }\\n    let id = MY_URL + \\\"@@\\\" + new Date().getTime();\\n    let aid = \\\"a\\\" + id;\\n    putMyVar(aid, \\\"1\\\");\\n    addListener(\\\"onClose\\\", $.toString((aid) => {\\n        log(\\\"clear: \\\" + aid);\\n        clearMyVar(aid);\\n    }, aid));\\n    let arr = cache.chapters || [];\\n    var cc = (a) => {\\n        return a.map(item => {\\n            var title = getText(item, Toc.chapterName)\\n            if (title != \\\"\\\") {\\n                let u1 = getUrl0(item, Toc.chapterList, Toc.chapterUrl) + \\\"#autoPage##readTheme#\\\";\\n                if (MY_PARAMS.charset) {\\n                    u1 = u1 + \\\";get;\\\" + MY_PARAMS.charset;\\n                }\\n                return {\\n                    title: title,\\n                    url: \\\"hiker://page/content\\\",\\n                    extra: {\\n                        title: title,\\n                        content: MY_PARAMS.content,\\n                        url: u1\\n                    },\\n                    col_type: \\\"text_1\\\"\\n                };\\n            }\\n        });\\n    }\\n    //log(cache.next + \\\":\\\" + cache.chapters.length);\\n    let d2 = cc(arr);\\n    d2.push({\\n        title: \\\"加载中，请稍候...\\\",\\n        url: \\\"\\\",\\n        col_type: \\\"text_center_1\\\",\\n        extra: {\\n            id: id\\n        }\\n    });\\n    d2.unshift({\\n        title: MY_PARAMS.bookName,\\n        img: MY_PARAMS.cover,\\n        url: MY_URL,\\n        col_type: \\\"movie_1_vertical_pic_blur\\\"\\n    });\\n    setResult(d2);\\n    headers[\\\"Referer\\\"] = MY_URL.split(\\\"#\\\")[0];\\n    if (nurl != MY_URL) {\\n        MY_URL = nurl;\\n        res = fetch(MY_URL, {\\n            headers: headers\\n        });\\n    } else if (MY_PARAMS.u1) {\\n        res = fetch(MY_URL, {\\n            headers: headers\\n        });\\n    }\\n    var urls = [nurl];\\n    while (true) {\\n        let a = [];\\n        for (let it of arr) {\\n            a.push(it);\\n        }\\n        cache.chapters = a;\\n        let arr1 = getArray(res, Toc.chapterList);\\n        //log(arr1);\\n        if (arr1 && arr1.length > 0) {\\n            for (let it of arr1) {\\n                arr.push(it)\\n            }\\n        }\\n        addItemBefore(id, cc(arr1));\\n        try {\\n            if (getMyVar(aid, \\\"0\\\") != \\\"1\\\") {\\n                log(\\\"break: \\\" + aid);\\n                break;\\n            }\\n            java.lang.Thread.sleep(50);\\n            let nurl2 = pd(res, \\\"body&&\\\" + next);\\n            if (nurl2 && nurl2 != \\\"\\\" && !urls.includes(nurl2)) {\\n                headers[\\\"Referer\\\"] = cache.next.split(\\\"#\\\")[0];\\n                urls.push(nurl2);\\n                cache.next = nurl2;\\n                nurl = nurl2;\\n                MY_URL = nurl;\\n                res = fetch(nurl, {\\n                    headers: headers\\n                });\\n            } else {\\n                break;\\n            }\\n        } catch (e) {\\n            break;\\n        }\\n    }\\n    deleteItem(id);\\n    //log(cache.next + \\\":end:\\\" + cache.chapters.length);\\n    saveCache(cache);\\n} else {\\n    list = getArray(res, Toc.chapterList);\\n    list.forEach(item => {\\n        //log(item);    \\n        var title = getText(item, Toc.chapterName)\\n        if (title != \\\"\\\") {\\n            let u1 = getUrl0(item, Toc.chapterList, Toc.chapterUrl) + \\\"#autoPage##readTheme#\\\";\\n            if (MY_PARAMS.charset) {\\n                u1 = u1 + \\\";get;\\\" + MY_PARAMS.charset;\\n            }\\n            d.push({\\n                title: title,\\n                url: \\\"hiker://page/content\\\",\\n                extra: {\\n                    title: title,\\n                    content: MY_PARAMS.content,\\n                    url: u1\\n                }\\n            })\\n        }\\n    });\\n\\n    var cp = d.map(function(item) {\\n        return {\\n            \\\"title\\\": item.title,\\n            \\\"url\\\": item.extra.url.replace(\\\"#autoPage##readTheme#\\\", \\\"\\\")\\n        }\\n    });\\n    if (list.length > 0) {\\n        d.unshift({\\n            title: \\\"下载\\\",\\n            url: \\\"hiker://page/download.view#noRecordHistory##noRefresh##noHistory#?rule=本地资源管理\\\",\\n            col_type: \\\"text_center_1\\\",\\n            extra: {\\n                chapterList: cp,\\n                defaultView: \\\"1\\\",\\n                info: {\\n                    bookName: MY_PARAMS.bookName,\\n                    bookTopPic: MY_PARAMS.cover,\\n                    ruleName: \\\"悦读\\\",\\n                    parseCode: $.toString((MY_PARAMS, r0) => {\\n                        let {\\n                            convert\\n                        } = $.require(\\\"hiker://page/converter?rule=\\\" + r0);\\n                        var res = request(input);\\n                        var rule = MY_PARAMS.content;\\n                        let r = convert(rule.content);\\n                        let r1 = r.split(\\\"&&\\\");\\n                        let r2 = r1.slice(0, r1.length - 1).join(\\\"&&\\\");\\n                        let arr = pdfa(res, \\\"body&&\\\" + r2);\\n                        //log(arr);\\n                        var tt = \\\"\\\"\\n                        for (let it of arr) {\\n                            it = it.replace(new RegExp(\\\"\\\\n\\\", \\\"g\\\"), \\\"--br--\\\");\\n                            //log(it);\\n                            var t = pdfh(it, \\\"Text\\\");\\n                            t = t.replace(new RegExp(\\\"--br--\\\", \\\"g\\\"), \\\"<br>\\\");\\n                            if (t == \\\"\\\") {\\n                                continue\\n                            }\\n                            let t2 = t.split(\\\"<br>\\\");\\n                            for (let it2 of t2) {\\n                                if (it2 == \\\"\\\" || it2.length == 1) {\\n                                    continue\\n                                }\\n                                if (!it2.startsWith(\\\"　\\\") && !it2.startsWith(\\\"&nbsp;&nbsp;\\\")) {\\n                                    it2 = \\\"&nbsp;&nbsp;&nbsp;&nbsp;\\\" + it2.trim();\\n                                }\\n                                if (rule.replaceRegex) {\\n                                    it2 = it2.replace(new RegExp(rule.replaceRegex.replace(\\\"##\\\", \\\"\\\"), \\\"g\\\"), \\\"\\\")\\n                                }\\n                                if (it2 == \\\"\\\") {\\n                                    continue\\n                                }\\n                                tt += it2 + \\\"\\\\n\\\"\\n                            }\\n                        }\\n                        return tt\\n                    }, MY_PARAMS, MY_RULE.title),\\n                    type: \\\"novel\\\"\\n                }\\n            }\\n        });\\n    } else {\\n        d.unshift({\\n            title: \\\"未解析到目录列表\\\",\\n            url: MY_URL,\\n            col_type: \\\"text_center_1\\\",\\n        });\\n    }\\n    d.unshift({\\n        title: MY_PARAMS.bookName,\\n        img: MY_PARAMS.cover,\\n        url: MY_URL,\\n        col_type: \\\"movie_1_vertical_pic_blur\\\"\\n    })\\n    setResult(d);\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"内容\",\"path\":\"content\",\"rule\":\"js:\\nvar d = [];\\nlet {\\n    convert\\n} = $.require(\\\"hiker://page/converter\\\");\\nvar res = getResCode();\\nvar rule = MY_PARAMS.content\\nlet r = convert(rule.content);\\nlet r1 = r.split(\\\"&&\\\");\\nlet r2 = r1.slice(0, r1.length - 1).join(\\\"&&\\\");\\nlet arr = pdfa(res, \\\"body&&\\\" + r2);\\n//log(arr);\\nfor (let it of arr) {\\n    it = it.replace(new RegExp(\\\"\\\\n\\\", \\\"g\\\"), \\\"--br--\\\");\\n    //log(it);\\n    var t = pdfh(it, \\\"Text\\\");\\n    t = t.replace(new RegExp(\\\"--br--\\\", \\\"g\\\"), \\\"<br>\\\");\\n    if (t == \\\"\\\") {\\n        continue\\n    }\\n    let t2 = t.split(\\\"<br>\\\");\\n    for (let it2 of t2) {\\n        if (it2 == \\\"\\\" || it2.length == 1) {\\n            continue\\n        }\\n        if (!it2.startsWith(\\\"　\\\") && !it2.startsWith(\\\"&nbsp;&nbsp;\\\")) {\\n            it2 = \\\"&nbsp;&nbsp;&nbsp;&nbsp;\\\" + it2.trim();\\n        }\\n        if (rule.replaceRegex) {\\n            it2 = it2.replace(new RegExp(rule.replaceRegex.replace(\\\"##\\\", \\\"\\\"), \\\"g\\\"), \\\"\\\")\\n        }\\n        if (it2 == \\\"\\\" || it2 == \\\"&nbsp;&nbsp;&nbsp;&nbsp;\\\") {\\n            continue\\n        }\\n        d.push({\\n            title: it2,\\n            url: \\\"\\\",\\n            col_type: \\\"rich_text\\\",\\n            desc: \\\"\\\",\\n            pic_url: \\\"\\\"\\n        });\\n    }\\n}\\nd.unshift({\\n    title: \\\"<big>\\\" + MY_PARAMS.title + \\\"</big>\\\",\\n    col_type: \\\"rich_text\\\"\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_1_vertical_pic\",\"name\":\"搜索\",\"path\":\"search\",\"rule\":\"js:\\nlet {\\n    search\\n} = $.require(\\\"hiker://page/ss\\\");\\nlet d = [];\\nlet kw = getParam(\\\"kw\\\");\\nlet s = kw;\\nsetPageTitle(\\\"搜索\\\" + kw + \\\" \\\" + MY_PARAMS.bookSourceName);\\nif (typeof(getSearchMode) == \\\"undefined\\\") {\\n    confirm({\\n        title: \\\"温馨提示\\\",\\n        content: \\\"你的软件版本太低，更新到最新版才能使用本规则\\\"\\n    })\\n}\\nlet matchMust = getSearchMode() == 1;\\nlet tip = \\\"精确匹配：\\\" + (matchMust ? \\\"是\\\" : \\\"否\\\");\\nif (MY_PAGE == 1) {\\n    d.push({\\n        title: tip,\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            setSearchMode(getSearchMode() == 0 ? 1 : 0);\\n            refreshPage();\\n            return \\\"toast://OK\\\";\\n        }),\\n        col_type: \\\"text_1\\\",\\n    });\\n}\\nlet d2 = search(MY_PARAMS.rules, kw, MY_PAGE);\\nfor (let it of d2) {\\n    if (!matchMust || searchContains(it.title, s)) {\\n        it.title = it.title.includes(\\\"““””\\\") ? it.title : \\\"““””\\\" + it.title.replace(new RegExp(\\\"<em>|</em>\\\", \\\"g\\\"), \\\"\\\").replace(new RegExp(s, \\\"g\\\"), \\\"<strong><span style=\\\\\\\"color: #1E90FF\\\\\\\">\\\" + s + \\\"</span></strong>\\\")\\n        d.push(it);\\n    }\\n}\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"转换\",\"path\":\"converter\",\"rule\":\"var convert = (str) => {\\n    return str.replace(/@/g, \\\"&&\\\")\\n        .replace(/\\\\.[0-9]/g, function(a) {\\n            return a.replace(\\\".\\\", \\\",\\\")\\n        })\\n        .replace(new RegExp(\\\" \\\", \\\"g\\\"), \\\"&&\\\")\\n        .replace(/text\\\\.(.*?)&&/g, \\\"*:contains($1),-1&&\\\")\\n        .replace(/-class\\\\./g, \\\".\\\")\\n        .replace(/class\\\\./g, \\\".\\\")\\n        .replace(/tag\\\\./g, \\\"\\\")\\n        .replace(/id\\\\./g, \\\"#\\\")\\n        .replace(/##/g, \\\"!\\\")\\n        .replace(/&&([a-zA-Z\\\\.\\\\-]+?)!([0-9])/g, \\\"--$1,$2&&$1\\\")\\n        .replace(\\\"text\\\", \\\"Text\\\");\\n};\\nlet getArray = (html, rule) => {\\n    let r1 = rule.split(\\\"!\\\")[0].split(\\\"||\\\");\\n    let c = convert(r1[0]);\\n    if (c.includes(\\\"&&li&&a\\\") && c[c.length - 1] == \\\"a\\\") {\\n        c = c.replace(\\\"&&li&&a\\\", \\\"&&li\\\");\\n    }\\n    log(c);\\n    let arr = pdfa(html, \\\"body&&\\\" + c);\\n    if (r1.length > 1) {\\n        let r2 = r1[1].split(\\\":\\\");\\n        let r3 = [];\\n        for (let it of r2) {\\n            try {\\n                let i = parseInt(it);\\n                if (isNaN(i)) {\\n                    continue;\\n                }\\n                r3.push(i);\\n            } catch (e) {}\\n        }\\n        let arr2 = [];\\n        for (let i = 0; i < arr.length; i++) {\\n            if (r3.indexOf(i) < 0) {\\n                arr2.push(arr[i]);\\n            }\\n        }\\n        return arr2;\\n    }\\n    log(\\\"获取失败，失败定位：\\\" + r1)\\n    return arr;\\n};\\nlet getText = (html, rule) => {\\n    var ru = convert(rule)\\n    var r = pdfh(html, ru)\\n    if (r == \\\"\\\") {\\n        log(\\\"返回为空，可能是定位失败：\\\" + rule)\\n    }\\n    return r\\n};\\nlet getUrl0 = (html, parentRule, rule) => {\\n    if (parentRule != null) {\\n        parentRule = parentRule.split(\\\"!\\\")[0];\\n    }\\n    let p = parentRule != null && parentRule[parentRule.length - 1] == \\\"a\\\" ? \\\"a&&\\\" : \\\"\\\";\\n    let r = pd(html, p + convert(rule.split(\\\"##\\\")[0]));\\n    if (r == \\\"\\\") {\\n        log(\\\"返回为空，可能是定位失败：\\\" + rule)\\n    }\\n    return r\\n};\\nlet parseUrl = (url, page) => {\\n    url = url.replace(new RegExp(\\\"{{page}}\\\", \\\"g\\\"), page);\\n    let s = url.split(\\\"<,\\\");\\n    if (s.length > 1) {\\n        if (page > 1) {\\n            let s2 = s[1].split(\\\">\\\");\\n            url = s[0] + s2[0] + (s2.length > 1 ? s2[1] : \\\"\\\")\\n        } else {\\n            url = s[0];\\n        }\\n    }\\n    return url;\\n}\\nlet getCharset = (searchUrl) => {\\n    if (searchUrl) {\\n        if (searchUrl.includes('\\\"gbk\\\"') || searchUrl.includes(\\\"'gbk'\\\")) {\\n            return \\\"gbk\\\"\\n        } else if (searchUrl.includes('\\\"gb2312\\\"') || searchUrl.includes(\\\"'gb2312'\\\")) {\\n            return \\\"gb2312\\\"\\n        }\\n    }\\n    return null\\n}\\n$.exports = {\\n    getArray: getArray,\\n    convert: convert,\\n    getText: getText,\\n    getUrl0: getUrl0,\\n    parseUrl: parseUrl,\\n    getCharset: getCharset\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"聚搜\",\"path\":\"ju\",\"rule\":\"js:\\nvar d = [];\\nlet {\\n    search,\\n    listRules\\n} = $.require(\\\"hiker://page/ss\\\");\\nlet {\\n    all,\\n    use,\\n    data\\n} = listRules(MY_PAGE);\\ndata = data || [];\\nlet s = getParam(\\\"kw\\\");\\nsetPageTitle(\\\"搜索\\\" + s);\\nif (typeof(getSearchMode) == \\\"undefined\\\") {\\n    confirm({\\n        title: \\\"温馨提示\\\",\\n        content: \\\"你的软件版本太低，更新到最新版才能使用本规则\\\"\\n    })\\n}\\nlet matchMust = getSearchMode() == 1;\\nlet tip = \\\"搜索源：\\\" + use + \\\"/\\\" + all + \\\"  精确匹配：\\\" + (matchMust ? \\\"是\\\" : \\\"否\\\");\\nif (MY_PAGE == 1) {\\n    d.push({\\n        title: tip,\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            setSearchMode(getSearchMode() == 0 ? 1 : 0);\\n            refreshPage();\\n            return \\\"toast://OK\\\";\\n        }),\\n        col_type: \\\"text_1\\\",\\n        extra: {\\n            id: \\\"yuedu-s-h\\\"\\n        }\\n    });\\n} else if (data.length > 0) {\\n    updateItem(\\\"yuedu-s-h\\\", {\\n        title: tip\\n    });\\n}\\nlet p = MY_PAGE;\\nlet pageid = \\\"yuedu-page\\\" + MY_PAGE;\\nif (data.length > 0) {\\n    d.push({\\n        title: \\\"加载第\\\" + MY_PAGE + \\\"页中，进度：1/\\\" + data.length,\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"text_center_1\\\",\\n        desc: \\\"\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            id: pageid\\n        }\\n    });\\n}\\nsetResult(d);\\nif (data.length > 0) {\\n    //多线程加载\\n    let tasks = data.map(it => {\\n        return {\\n            func: function(rule) {\\n                return search(rule, s, 1);\\n            },\\n            param: it,\\n            id: \\\"rule@\\\" + it.name\\n        }\\n    });\\n\\n    batchExecute(tasks, {\\n        func: function(param, id, error, result) {\\n            //log(\\\"listener: \\\" + (result || []).length)\\n            param.i = param.i + 1;\\n            if (result) {\\n                try {\\n                    for (let it of result) {\\n                        param.j = param.j + 1;\\n                        if (matchMust) {\\n                            if (!searchContains(it.title, s)) {\\n                                continue;\\n                            }\\n                        }\\n                        let extra = it.extra || {};\\n                        extra.id = \\\"__app\\\" + MY_PAGE + \\\"@\\\" + param.j;\\n                        extra.bookName = it.title\\n                        extra.cover = it.pic_url || it.img\\n                        addItemBefore(pageid, {\\n                            title: it.title.includes(\\\"““””\\\") ? it.title : \\\"““””\\\" + it.title.replace(new RegExp(\\\"<em>|</em>\\\", \\\"g\\\"), \\\"\\\").replace(new RegExp(s, \\\"g\\\"), \\\"<strong><span style=\\\\\\\"color: #1E90FF\\\\\\\">\\\" + s + \\\"</span></strong>\\\"),\\n                            desc: it.desc,\\n                            url: it.url,\\n                            pic_url: it.pic_url || it.img,\\n                            col_type: it.pic_url || it.img ? 'movie_1_vertical_pic' : \\\"text_1\\\",\\n                            extra: extra\\n                        })\\n                    }\\n                } catch (e) {}\\n\\n            }\\n            if (param.i >= param.all) {\\n                deleteItem(pageid)\\n            } else {\\n                updateItem({\\n                    title: \\\"加载第\\\" + MY_PAGE + \\\"页中，进度：\\\" + (param.i + 1) + \\\"/\\\" + param.all,\\n                    url: \\\"hiker://empty\\\",\\n                    col_type: \\\"text_center_1\\\",\\n                    desc: \\\"\\\",\\n                    pic_url: \\\"\\\",\\n                    extra: {\\n                        id: pageid\\n                    }\\n                })\\n            }\\n        },\\n        param: {\\n            all: data.length,\\n            i: 0,\\n            j: -1\\n        }\\n    });\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"搜索辅助\",\"path\":\"ss\",\"rule\":\"var {\\n    convert,\\n    parseUrl,\\n    getCharset\\n} = $.require(\\\"hiker://page/converter\\\");\\nlet search = (rule, kw, page) => {\\n    let d = [];\\n    let m = rule.ruleSearch\\n    // 阅读=>视界\\n    let u = rule.searchUrl.startsWith(\\\"http\\\") ? rule.searchUrl : rule.bookSourceUrl + rule.searchUrl;\\n    //log(m);\\n    let url1 = parseUrl(u, page).replace(new RegExp(\\\"{{key}}\\\", \\\"g\\\"), kw);\\n    let url2 = url1.split(\\\",{\\\");\\n    let url = url2[0];\\n    let headers = {};\\n    let method = \\\"get\\\";\\n    let body = null;\\n    let c = getCharset(url1);\\n    if (c) {\\n        headers.charset = c;\\n        headers[\\\"Content-Type\\\"] = \\\"text/html; charset=\\\" + c;\\n    }\\n    try {\\n        if (url2.length > 1 && url1.substring(url1.length - 1, url1.length) == \\\"}\\\") {\\n            let ext = \\\"{\\\" + url1.substring(url1.indexOf(\\\",{\\\") + 2, url1.length);\\n            //log(ext);\\n            try {\\n                ext = JSON.parse(ext);\\n            } catch (e) {\\n                eval(\\\"ext=\\\" + ext);\\n            }\\n            if (ext.method && ext.method != \\\"\\\") {\\n                method = ext.method;\\n            }\\n            if (ext.body && ext.body != \\\"\\\") {\\n                body = ext.body;\\n                headers[\\\"Content-Type\\\"] = \\\"application/x-www-form-urlencoded\\\" + (headers.charset ? \\\";charset=\\\" + headers.charset : \\\"\\\");\\n            }\\n        }\\n    } catch (e) {\\n        if (url1.includes('\\\"POST\\\"') || url1.includes('\\\"post\\\"')) {\\n            method = \\\"post\\\";\\n        }\\n    }\\n    if (method == \\\"post\\\" || method == \\\"POST\\\") {\\n        let ct = headers[\\\"Content-Type\\\"];\\n        headers[\\\"Content-Type\\\"] = ct ? ct.replace(\\\"text/html\\\", \\\"application/x-www-form-urlencoded\\\") : \\\"application/x-www-form-urlencoded\\\";\\n    }\\n\\n    let listrule = \\\"body&&\\\" + convert(m.bookList).split(\\\"||\\\")[0]\\n    let author = null;\\n    try {\\n        author = convert(m.author);\\n    } catch (e) {}\\n    let cover = null;\\n    try {\\n        cover = convert(m.coverUrl);\\n    } catch (e) {}\\n    let name = null;\\n    try {\\n        name = convert(m.name);\\n    } catch (e) {}\\n    let bookurl = null;\\n    try {\\n        bookurl = convert(m.bookUrl);\\n    } catch (e) {}\\n    let intro = null;\\n    try {\\n        intro = convert(m.intro);\\n    } catch (e) {}\\n    //setPageTitle(\\\"搜索\\\" + getParam(\\\"kw\\\") + \\\" \\\" + MY_PARAMS.bookSourceName);\\n    //MY_URL = url;\\n    let res = request(url, {\\n        method: method,\\n        headers: headers,\\n        body: body\\n    });\\n    let pdfh1 = (a, b) => {\\n        try {\\n            if (b == null) return \\\"\\\";\\n            return pdfh(a, b);\\n        } catch (e) {\\n            return \\\"\\\";\\n        }\\n    }\\n    let pd1 = (a, b, c) => {\\n        try {\\n            if (b == null) return \\\"\\\";\\n            return pd(a, b, c);\\n        } catch (e) {\\n            return \\\"\\\";\\n        }\\n    }\\n    listrule = listrule.replace(\\\"&&tbody--tr,0&&tr\\\", \\\"&&table tbody tr:gt(0)\\\");\\n    //log(listrule);\\n    let list = pdfa(res, listrule);\\n    //log(list);\\n    //log(name);\\n    list.forEach(item => {\\n        let next = rule.ruleToc.nextTocUrl;\\n        let nexttoc = next && next != \\\"\\\";\\n        let ac = nexttoc ? \\\"\\\": \\\"#autoCache#\\\";\\n        //let ac = \\\"#autoCache#\\\";\\n        let u1 = pd1(item, bookurl, url) + ac + \\\"#immersiveTheme#\\\";\\n        if (c) {\\n            u1 = u1 + \\\";get;\\\" + c\\n        }\\n        d.push({\\n            title: pdfh1(item, name),\\n            img: pd1(item, cover, url),\\n            url: \\\"hiker://page/menu\\\",\\n            desc: rule.bookSourceName + \\\"\\\\n\\\" + pdfh1(item, author) + \\\"\\\\n\\\" + pdfh1(item, intro),\\n            extra: {\\n                \\\"Toc\\\": rule.ruleToc,\\n                \\\"content\\\": rule.ruleContent,\\n                \\\"bookName\\\": parseDomForHtml(item, name),\\n                \\\"cover\\\": parseDom(item, cover, url),\\n                url: nexttoc ? \\\"hiker://empty#\\\" + u1 : u1,\\n                u1: nexttoc ? u1 : null,\\n                inheritTitle: false,\\n                charset: c\\n            }\\n        })\\n    });\\n    return d;\\n}\\n$.exports = {\\n    convert: convert,\\n    search: search,\\n    listRules: (page, rule) => {\\n        try {\\n            //并发数量\\n            let size = 16;\\n            let {\\n                load,\\n                loadRules,\\n                getSelect\\n            } = $.require(\\\"hiker://page/datat\\\");\\n            let data = load();\\n            let select = getSelect(data);\\n            let rules = data.length > 0 ? loadRules(select.name) : [];\\n            if (!page && !rule) {\\n                return rules.map(it => it.name);\\n            }\\n            if (rule != null) {\\n                return rules.filter(i => i.name == rule);\\n            }\\n            let start = (page - 1) * size;\\n            if (rules.length < start + 1) {\\n                return [];\\n            }\\n            let len = size;\\n            if (rules.length < page * size) {\\n                len = rules.length - start\\n            }\\n            let all = rules.length;\\n            let use = (page - 1) * size + len;\\n            return {\\n                all: all,\\n                use: use,\\n                data: rules.slice(start, start + len)\\n            };\\n        } catch (e) {\\n            return {\\n                all: 0,\\n                use: 0,\\n                data: []\\n            }\\n        }\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"数据\",\"path\":\"datat\",\"rule\":\"let load = function() {\\n    try {\\n        return JSON.parse(fetch(\\\"hiker://files/yuedu/list.json\\\")).urls;\\n    } catch (e) {\\n        return [];\\n    }\\n}\\nlet loadRules = function(name) {\\n    try {\\n        let list = JSON.parse(fetch(\\\"hiker://files/yuedu/\\\" + md5(name) + \\\".json\\\"));\\n        return list.filter(it => {\\n            let s = JSON.stringify(it)\\n            if (s.includes(\\\"<js>\\\") || s.includes(\\\"@js:\\\") || s.includes(\\\"$.\\\") || s.includes(\\\"🔞\\\")) {\\n                return false\\n            } else {\\n                return true\\n            }\\n        });\\n    } catch (e) {\\n        return [];\\n    }\\n}\\nlet remove = function(url) {\\n    let data = load();\\n    data = data.filter(it => it.url != url);\\n    writeFile(\\\"hiker://files/yuedu/list.json\\\", JSON.stringify({\\n        urls: data\\n    }))\\n}\\nlet rename = function(url, name) {\\n    let arr = load();\\n    for (let i in arr) {\\n        if (arr[i].url == url) {\\n            arr[i].name = name;\\n        }\\n    }\\n    writeFile(\\\"hiker://files/yuedu/list.json\\\", JSON.stringify({\\n        urls: arr\\n    }))\\n}\\nlet add = function(name, url) {\\n    let data = load();\\n    data = data.filter(it => it.url != url);\\n    data.push({\\n        name: name,\\n        url: url\\n    });\\n    writeFile(\\\"hiker://files/yuedu/list.json\\\", JSON.stringify({\\n        urls: data\\n    }))\\n}\\nlet update = function(name, url) {\\n    let t = fetch(url)\\n    JSON.parse(t)\\n    writeFile(\\\"hiker://files/yuedu/\\\" + md5(name) + \\\".json\\\", t)\\n}\\nlet share = function(name, url) {\\n    return \\\"copy://悦读订阅数据分享，复制整条口令打开软件即可导入\\\\n\\\" + name + \\\"：\\\" + url + \\\"@import=js:$.require('hiker://page/datat?rule=\\\" + MY_RULE.title + \\\"').ca()\\\"\\n}\\nlet cloudAdd = function() {\\n    let s = input.split(\\\"：\\\");\\n    if (s.length > 1) {\\n        add(s[0], s[1]);\\n        update(s[0], s[1]);\\n    }\\n    return \\\"toast://已导入悦读订阅源“\\\" + s[0] + \\\"”\\\"\\n}\\nlet getSelect = function(data) {\\n    if (data == null) {\\n        data = load();\\n    }\\n    if (data.length == 0) {\\n        return {};\\n    }\\n    let tab = getItem(\\\"tab\\\", data[0].url);\\n    let select = data.filter(it => it.url == tab);\\n    if (select.length <= 0) {\\n        return data[0];\\n    } else {\\n        return select[0];\\n    }\\n}\\n$.exports = {\\n    add: add,\\n    update: update,\\n    remove: remove,\\n    rename: rename,\\n    load: load,\\n    loadRules: loadRules,\\n    getSelect: getSelect,\\n    share: share,\\n    ca: cloudAdd\\n}\"}]","proxy":"","icon":"https://s3.bmp.ovh/imgs/2022/10/02/9248af2624d64904.png"}