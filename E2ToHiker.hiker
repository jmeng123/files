{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"E2Rex","path":"E2Rex","rule":"js:\nconst getE2Rex = $.require(\"hiker://page/getE2Rex?rule=E2ToHiker\");\nconst E2Hiker = $.require(\"hiker://page/E2ToHiker?rule=E2ToHiker\")\nfunction e2Rex(t,r){\n    return getE2Rex(E2Hiker,t,r);\n}\n$.exports = e2Rex;"},{"col_type":"movie_3","name":"E2ToHiker","path":"E2ToHiker","rule":"js:\nconst E2Error = $.require(\"hiker://page/E2Error?rule=E2ToHiker\");\n\nfunction E2Hiker(value) {\n    if (typeof value === \"string\") {\n        this.source = value;\n        this.value = value;\n        this.xuArr = [];\n        this.xObj = [];\n    } else {\n        throw new E2Error(\"E2Hiker需要一个string参数\",\"初始化错误\",value);\n    }\n}\n\nfunction split(text, target, count) {\n    count = count === undefined ? 1 : count;\n    let array = [text];\n    for (let i = 0; i < count; i++) {\n        text = array[i];\n        let index = text.indexOf(target);\n        if (index === -1) {\n            break;\n        }\n        array[i] = text.slice(0, index);\n        array[i + 1] = text.slice(index + target.length);\n    }\n    return array;\n}\n\nfunction rsplit(text, target, count) {\n    count = count === undefined ? 1 : count;\n    let array = [text];\n    for (let i = 0; i < count; i++) {\n        text = array[0];\n        let index = text.lastIndexOf(target);\n        if (index === -1) {\n            break;\n        }\n        array[0] = text.slice(0, index);\n        array.splice(1, 0, text.slice(index + target.length));\n    }\n    return array;\n}\nE2Hiker.prototype = {\n    constructor: E2Hiker,\n    getValue(type) {\n        let Ttype = Object.prototype.toString.call(this.value);\n        type = \"[object \" + type + \"]\";\n        \n        if (Ttype === type) {\n            return this.value;\n        } else {\n            throw new E2Error(\"函数需要\"+type+\"类型，而真实类型为\"+Ttype,undefined,this.value,\"dataType\");\n        }\n    },\n    getValue2(arr) {\n        let typeArr = arr.map(item => \"[object \" + item + \"]\");\n        let Ttype = Object.prototype.toString.call(this.value);\n        if (typeArr.includes(Ttype)) {\n            return this.value;\n        } else {\n            throw new E2Error(\"函数需要\"+typeArr.join(\"|\")+\"类型，而真实类型为\"+Ttype,undefined,this.value,\"dataType\");\n        }\n    },\n    setValue(data) {\n        if (typeof data === \"number\") {\n            data = data + \"\";\n        }\n        this.value = data;\n    },\n    valueOf() {\n        if (this.xuArr.length !== 0) {\n            if (Array.isArray(this.value)) {\n                return this.xuArr.concat(this.value);\n            } else if (typeof this.value === \"object\") {\n                this.xuArr.push(JSON.stringify(this.value));\n                return this.xuArr;\n            } else {\n                this.xuArr.push(this.value);\n                return this.xuArr;\n            }\n        } else {\n            if (!Array.isArray(this.value) && typeof this.value === \"object\") {\n                return JSON.stringify(this.value);\n            } else {\n                return this.value;\n            }\n        }\n    },\n    ty(target) {\n        let data = this.getValue(\"String\");\n        this.setValue(split(data, target)[1] || \"\");\n    },\n    ty2(target) {\n        let data = this.getValue(\"String\");\n        this.setValue(rsplit(data, target)[1] || \"\");\n    },\n    tz(target) {\n        let data = this.getValue(\"String\");\n        this.setValue(split(data, target)[0] || \"\");\n    },\n    tz2(target) {\n        let data = this.getValue(\"String\");\n        this.setValue(rsplit(data, target)[0] || \"\");\n    },\n    t() {\n        let data = this.getValue(\"String\");\n        this.setValue(data.replace(/<[^>]+>/g, \"\"));\n    },\n    tj(target) {\n        this.setValue(this.getValue(\"String\") + target);\n    },\n    tzc(target) {\n        let index = Number(target);\n        this.setValue(this.getValue(\"String\").substring(0,index));\n    },\n    tsk() {\n        this.setValue(this.getValue(\"String\").trim());\n    },\n    th(target) {\n        let targetArr = split(target, \"##\");\n        if (targetArr.length === 1) {\n            return this.tz(target);\n        }\n        let reg = new RegExp(targetArr[0], \"g\");\n        this.setValue(this.getValue(\"String\").replace(reg, targetArr[1]));\n    },\n    th2(target){\n        let targetArr = split(target, \"##\");\n        if (targetArr.length === 1) {\n            return this.tz(target);\n        }\n        this.setValue(this.getValue(\"String\").split(targetArr[0]).join(targetArr[1]));\n    },\n    /*tvar(target) {\n        let data = this.getValue(\"String\");\n        this.xObj[target]=data;\n        this.setValue(this.source);\n    },\n    trl(target) {\n        let data = this.getValue(\"String\");\n        let y = this.xObj[target]||\"\";\n        this.setValue(data+y);\n    },\n    tll(target) {\n        let data = this.getValue(\"String\");\n        let y = this.xObj[target]||\"\";\n        this.setValue(y+data);\n    },*/\n    tx(){\n        let data = this.getValue(\"String\");\n        if(data.indexOf(this.source)+this.source.length!==data.length){\n            this.setValue((this.xuArr.pop()||\"\")+data+this.source);\n        }\n    },\n    byt(target) {\n        parseDomForArray(this.getValue(\"String\"), \"html&&*:contains(\" + target + \")\");\n    },\n    fg(target) {\n        let reg = new RegExp(target);\n        this.setValue(this.getValue(\"String\").split(reg));\n    },\n    en64() {\n        this.setValue(base64Encode(this.getValue(\"String\")));\n    },\n    dn64() {\n        this.setValue(base64Decode(this.getValue(\"String\")));\n    },\n    d(v) {\n        this.setValue(decodeStr(this.getValue(\"String\"), v));\n    },\n    en(v) {\n        this.setValue(encodeStr(this.getValue(\"String\"), v));\n    },\n    tot() {\n        this.setValue(JSON.stringify(this.getValue(\"String\")));\n    },\n    toij() {\n        this.setValue(JSON.parse(this.getValue(\"String\")));\n    },\n    type() {\n        this.setValue(Object.prototype.toString.call(this.value));\n    },\n    i(target) {\n        let data = this.getValue2([\"String\", \"Array\"]);\n        let [s, e] = split(target, \",\");\n        if (e === undefined) {\n            s=Number(s);\n            if(s>=0){\n                this.setValue(data[s] || data);\n            }else if(s<0){\n                this.setValue(data[data.length+s] || data);\n            }\n        } else {\n            this.setValue(data.slice(s, e));\n        }\n    },\n    ij(target) {\n        let data = this.getValue(\"Array\");\n        data.push(target);\n        this.setValue(data);\n    },\n    is(target) {\n        let reg = new RegExp(target);\n        let data = this.getValue(\"Array\");\n        let newData = data.filter(item => !item.test(reg));\n        this.setValue(newData);\n    },\n    il(target) {\n        let reg = new RegExp(target);\n        let data = this.getValue(\"Array\");\n        let newData = data.filter(item => item.test(reg));\n        this.setValue(newData);\n    },\n    it(target) {\n        let data = this.getValue(\"Array\");\n        this.setValue(data.join(target));\n    },\n    ix(){\n        let data = this.getValue(\"Array\");\n        this.xuArr=this.xuArr.concat(data);\n        this.setValue(this.source);\n    },\n    dx(){\n        let data = this.getValue(\"Array\");\n        data.reverse();\n    },\n    get(target) {\n        let data = this.getValue(\"String\");\n        try {\n            this.setValue(parseDomForHtml(data, target));\n        } catch (e) {\n            this.setValue(\"\");\n        }\n    },\n    geta(target) {\n        let data = this.getValue(\"String\");\n        try {\n            this.setValue(parseDomForArray(data, target));\n        } catch (e) {\n            this.setValue([]);\n        }\n    },\n    getp(target){\n        let data = this.getValue(\"Array\");\n        data=data.map(item=>parseDomForHtml(item, target));\n        this.setValue(data);\n    },\n    json(target) {\n        let data = this.getValue2([\"Object\",\"Array\"])[target];\n        this.setValue(data === undefined ? \"\" : data);\n    },\n    c(target) {\n        let data = this.value;\n        if (Array.isArray(data)) {\n            data = data[0] === undefined ? \"\" : data[0];\n        } else if (typeof data === \"object\") {\n            data = JSON.stringify(data);\n        }\n        this.setValue(data + target + this.source);\n    },\n    ct(target) {\n        let data = this.value;\n        if (Array.isArray(data)) {\n            data = data[0] === undefined ? \"\" : data[0];\n        } else if (typeof data === \"object\") {\n            data = JSON.stringify(data);\n        }\n        this.setValue(data + target);\n    },\n    or() {\n        if (this.value !== \"\" && this.value !== undefined) {\n            return true;\n        } else {\n            this.setValue(this.source);\n            return false;\n        }\n    },\n    xu() {\n        let data = this.value;\n        if (Array.isArray(data)) {\n            for (let v of data) {\n                this.xuArr.push(v);\n            }\n        } else if (typeof data === \"object\") {\n            this.xuArr.push(JSON.stringify(data));\n        } else {\n            this.xuArr.push(data);\n        }\n        this.setValue(this.source);\n    },\n    st(target){\n        this.it(target);\n    },\n    z(target){\n        let data = this.getValue(\"String\");\n        let reg = new RegExp(target,\"g\");\n        let newdata = data.match(reg)||[];\n        this.setValue(newdata);\n    },\n    z2(target){\n        let data = this.getValue(\"String\");\n        let reg = new RegExp(target);\n        let newdata = data.match(reg)||[];\n        if(newdata.length>0){\n            newdata.splice(0,1);\n        }\n        this.setValue(newdata);\n    }\n}\n$.exports = E2Hiker;"},{"col_type":"movie_3","name":"E2Error","path":"E2Error","rule":"js:\nfunction E2Error(message, rule,context,type) {\n    this.message = message || \"\";\n    this.rule = rule;\n    this.context = context;\n    this.name = \"E2Error\";\n    this.type = type||\"error\";\n}\nE2Error.prototype = new Error();\nE2Error.prototype.constructor = E2Error;\n\n$.exports = E2Error;"},{"col_type":"movie_3","name":"正则参考","path":"正则参考","rule":"<code>.</code> - 除换行符以外的所有字符。<br>\n<code>^</code> - 字符串开头。<br>\n<code>$</code> - 字符串结尾。<br>\n<code>\\d,\\w,\\s</code> - 匹配数字、字符、空格。<br>\n<code>\\D,\\W,\\S</code> - 匹配非数字、非字符、非空格。<br>\n<code>[abc]</code> - 匹配 a、b 或 c 中的一个字母。<br>\n<code>[a-z]</code> - 匹配 a 到 z 中的一个字母。<br>\n<code>[^abc]</code> - 匹配除了 a、b 或 c 中的其他字母。<br>\n<code>aa|bb</code> - 匹配 aa 或 bb。<br>\n<code>?</code> - 0 次或 1 次匹配。<br>\n<code>*</code> - 匹配 0 次或多次。<br>\n<code>+</code> - 匹配 1 次或多次。<br>\n<code>{n}</code> - 匹配 n次。<br>\n<code>{n,}</code> - 匹配 n次以上。<br>\n<code>{m,n}</code> - 最少 m 次，最多 n 次匹配。<br>\n<code>(expr)</code> - 捕获 expr 子模式,以 \\1 使用它。<br>\n<s><code>(?:expr)</code> - 忽略捕获的子模式。</s><br>\n<s><code>(?=expr)</code> - 正向预查模式 expr。</s><br>\n<s><code>(?!expr)</code> - 负向预查模式 expr。</s><br>"},{"col_type":"movie_3","name":"E2参考","path":"E2参考","rule":"<h3>E2 表达式： <h3>\n<p>用于处理文本的表达式，比如获取\"文本\"前的几个字，可以使用  .tz(文本)  获取到 \"用于处理\"  四个字。 E2函数名使用中文拼音首字命名，对不懂开发的人群也能轻松操作。</p>\n\n \n\n<p>为了更容易了解并使用函数，一般处理文本的函数均以 t 开头，比如取文本左边的 tz ， t = 文本，z 是左的拼音头，然后就能知道取文本右边函数为 ty  了。 处理数组的函数 以 i 开头，如 .ij(aaa)  ，j = 加， 往数据中加入一行数组，值为 aaa 。</p>\n\n \n\n<h3>文本操作类：</h3>\n \n\n<p>&nbsp;&nbsp;&nbsp;.tz()&nbsp;&nbsp;.ty()&nbsp;&nbsp;取文本左、右数据。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.tz2()&nbsp;&nbsp;.ty2()&nbsp;&nbsp;从后读取判断值文本并取判断值左、右（前、后）数据。 若内容为  abbacc  时使用  .ty(a)  取得值为 bbacc ， 使用  .ty2(a)  取得值 为  cc 。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.t()&nbsp;&nbsp;删除HTML标识，无需提供参数，如内容为 &lt;p&gt;a&lt;/p&gt;b&lt;p&gt;  时去除html代码获取正文， 直接使用  .t()  即可，最终得到   ab 。</p>\n\n  \n\n<p>&nbsp;&nbsp;&nbsp;.tj()&nbsp;&nbsp;添加内容，如已有 ab 获取 abcd ： .tj(cd) </p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.tzc()&nbsp;&nbsp;参数为数字，如 tzc(5) 如果当前操作值字数大于 5 就取前5个字，少于则取全部。所以这里 zc 记最长。若操作值为 ABCDE  使用  .tzc(3) 得到 AB 。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.tsk()&nbsp;&nbsp;无参数，去首尾空，qswk 再加上 t 太长了不好记，就首空，意思就去首尾空，就是去掉操作首尾的空格字符。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.th()&nbsp;&nbsp;替换，参数为 欲被替换文本##替换文本。如内容为   ABC 时 需将 B 改成 2 ，可以使用 .th(B##2) 。 欲需将其置空不要，可以直接使用 .th(B) ，将得到  AB 。 同时 th 中欲被替换文本是支持正则表达式的，如果要替换的内容和正则通配符冲突的话，就需要写转义了。 比如相对复杂的内容  111ADGDGS333 将中间的英文字替换为333，可用  .th([A-Z]+##333)  。 如果你并不知道哪些是正则匹配符，建议使用 .th2()  唯一不同的是 th2 中欲被替换文本是不支持正则匹配的。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.tx()&nbsp;&nbsp;x 意思是 新，新的概念在下面的数组里也有相应的函数。 M浏览器扩展使用E2时都是要先定义源内容的，比如数据源爬虫就是读取到的网络内容，文本就是定义的文本。 这里假设源内容是  xByyEzz ， 需要获取  E 后面的值和 B 前面的值（其中内容 x y z 会动态变化），注意是E后面+B前面。 新的概念就是存储之前操作的值不变让后面操作的函数处理的是源内容。理解这句话应该知道怎么做了，分三步走，获取 E 的后面值 ty2(E)  ->  存储并将当前操作内容定义为源内容 tx()  -> 获取 B 前面值 .tz(B)。\n<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;快速捋一篇， 源内容 xByyEzz 在使用 E2 时会自动将其转为操作值，跟着使用 ty2(E) ，取E后面就是将操作值置为 zz ， 接着使用 .tx() 存储操作值并将操作值设为源文本 xByyEzz ， 跟着 tz(B) 得到 x  。后面没有函数了，就将前面存储的值和操作值输出，最终得到   xyyzz 。 </p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.byt()&nbsp;&nbsp;用于HTML，匹配标签值数据，返回整个标签项目列表\n<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;&lt;h2&gt;我是标题&lt;/h2&gt;&lt;/div&gt;<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h3&gt;/CCCC&lt;/h3&gt;<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;标题BBBB&lt;/p&gt;<br>\n&nbsp;&nbsp;&nbsp;&nbsp;取第1及第3行：.byt(标题)；获取 “&lt;p&gt;标题BBBB&lt;/p&gt;”  ：.byt(标题BBBB)  或者  .byt(标题).i(1)。</p>\n\n\n\n<h3>数组操作类：</h3>\n \n\n<p>&nbsp;&nbsp;&nbsp;.i(正数)&nbsp;&nbsp;获取数组中第一个内容，从0开始，如获取第一个值 就 .i(0) ，第三个值 .i(2) 以此类推。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.i(负数)&nbsp;&nbsp;从数组尾部开始寻找，-1 即，数组倒数第一个值。 -2 数组倒数第二值，以此类推。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.i(数,数)&nbsp;&nbsp;取数组范围，理解了正数负数的用法这里的数可以自由填正数也可以负数，怎么好判断怎么来， 如有数组 [ab,ac,ad,ae] ，获取   ac,ad,ae ，即排除第一个： .i(1,-1)  ，排除最后一个：  .i(0,-2)。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.ij(添加的文本)&nbsp;&nbsp;将\"添加的文本\" 加入到数组中，比如数组已经有  [aa,bb,cc]  操作之后就等于  [aa,bb,cc,添加的文本]。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.is()&nbsp;&nbsp;正则匹配通过的数组会被删掉。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.il()&nbsp;&nbsp;正则匹配通过的数组会被保留。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.ix()&nbsp;&nbsp;存储数组，接着和 tx 类似，将操作值改为原文本。 注意数组操作时接着操作其它函数。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.it(分割符)&nbsp;&nbsp;E2里，i 表示数组，t 表示文本。将数组合并为文本且中间以参数分隔符作填充，若不填入参数则无分隔符。</p>\n\n \n\n \n\n<h3>正则表达式：</h3>\n \n\n<p>&nbsp;&nbsp;&nbsp;.z()&nbsp;&nbsp;参数中若含括号必须添加转义给E2识别，若正则表达式中括号比较多在E2里看起来比较费眼，可在参数前后添加两个@标识内容为参数。 比如正则为   (a\\(b\\)c)|(x\\(y\\)z)  ，就是匹配  a(b)c 或 x(y) z， 在E2里必须给括号再添加一个转义符 \\ ，即 .z(\\(a\\\\(b\\\\)c\\)|\\(x\\\\(y\\\\)z\\))  这样就看起来很乱，那如果在参数两则加双@ 就可以写成  .z(@@(a\\(b\\)c)|(x\\(y\\)z)@@) 看起来相对会比较和谐。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.z2()&nbsp;&nbsp;匹配子表达式，同上一些编写，子表达式即为 正则中()里面的值，匹配后可以使用  .i() 获取指定括号内容。<br>\n\n&nbsp;&nbsp;&nbsp;&nbsp;注意若不使用@@全文转义符时，记得在内容括号前加 转义符 右斜杠！！！<br>\n<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;明明18岁<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;丽丽17岁<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;李娜娜19岁<br>\n<br>\n&nbsp;&nbsp;a 获取 “明明18岁”：.z(.{2,3}\\d{2}岁)<br>\n   \n\n&nbsp;&nbsp;b 获取娜娜几岁(19)：.z(.{2,3}\\d{2}岁).i(2).z2(.{2,3}\\(\\d{2}\\)岁)<br>\n\n&nbsp;&nbsp;a中若接口为返回文本，则相当与后方自动加了  .i(0) 函数，即取数组的第一个文本（数组计次从0开始）<br>\n\n&nbsp;&nbsp;b中先是用 .z() 全局匹配取得第3条数据，后用 .z2() 取子表达式的年龄数字</p>\n\n<h3>CSS选择器：</h3>\n\n<p>&nbsp;&nbsp;&nbsp;.get()&nbsp;&nbsp;使用海阔规则语法语法。xml也可以用。</p>\n\n<p>&nbsp;&nbsp;&nbsp;.geta()&nbsp;&nbsp;同上，但可以获取列表。</p>\n\n<p>&nbsp;&nbsp;&nbsp;.getp()&nbsp;&nbsp;功能与.get()一样，但是用于处理数组。</p>\n\n<h3>JSON解析器：</h3>\n\n<p>&nbsp;&nbsp;&nbsp;.toij()&nbsp;&nbsp;将字符串转为json对象。</p>\n\n<p>&nbsp;&nbsp;&nbsp;.json(参数名)&nbsp;&nbsp;用于读取json对象的子级。<p>\n<p>\n{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;\"name\": \"BeJson\",<br>\n&nbsp;&nbsp;&nbsp;&nbsp;\"es\": {<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"a\": \"科技园路.\",<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"b\": \"中国\"<br>\n&nbsp;&nbsp;&nbsp;&nbsp;},<br>\n&nbsp;&nbsp;&nbsp;&nbsp;\"arr\": [<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"name\": \"Baidu\",<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"url\": \"http://www.baidu.com\"<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"name\": \"Google\",<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"url\": \"http://www.google.com\"<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\n&nbsp;&nbsp;&nbsp;&nbsp;]<br>\n}<br>\n&nbsp;&nbsp;&nbsp;&nbsp;获取 中国：.toij().json(es).json(b)；也可以匹配 函数 .i(v) 获取数组中的数据，获取 Google 的 url： .toij().json(arr).i(1).json(url)。</p>\n\n<h3>高级命令：</h3>\n<p>&nbsp;&nbsp;&nbsp;.d(v)&nbsp;&nbsp;将文本进行URL解码，v == utf8、gbk等。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.en(v)&nbsp;&nbsp;将文本进行URL加密，v == utf8、gbk等。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.dn64()&nbsp;&nbsp;将文本进行Base64解码。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.en64()&nbsp;&nbsp;将文本进行Base64加密。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.c()&nbsp;&nbsp;取回源码，可选带参，带参则先将参数加入文本，后取回源码。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.ct()&nbsp;&nbsp;即连接该文本。类似上面 .c 带参，但不取回源数据。</p>    \n\n \n\n<p>&nbsp;&nbsp;&nbsp;.or()&nbsp;&nbsp;若前面规则已读到数据则不执行右边规则，否则重置执行位置继续执行规则。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.xu()&nbsp;&nbsp;不返回任何数据，继续以列表方式存入右则读到的数据。即左右两则数据均取。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.st(参数)&nbsp;&nbsp;将数组合并为文本，数组之间填充参数值。</p>\n\n \n\n<p>&nbsp;&nbsp;&nbsp;.fg(参数)&nbsp;&nbsp;分割文本返回数组，若参数为空则默认分割换行。</p>\n\n<p>&nbsp;&nbsp;&nbsp;.type()&nbsp;&nbsp;返回当前操作值的类型。</p>\n   \n<h2><big>\n不同的操作类型函数不可以混用。\n改自<a href=\"https://7cc7cc.com/thread-120.htm?type=last\">原文<a>\n</big></h2>"},{"col_type":"movie_3","name":"E2还原版","path":"E2ToHiker2","rule":"js:\nconst E2Error = $.require(\"hiker://page/E2Error?rule=E2ToHiker\");\nlet Jsoup = org.jsoup.Jsoup;\n\nfunction E2Hiker(value) {\n    if (typeof value === \"string\") {\n        this.source = value;\n        this.value = value;\n        this.xuArr = [];\n        this.xObj = [];\n    } else {\n        throw new E2Error(\"E2Hiker需要一个string参数\", \"初始化错误\", value);\n    }\n}\n\nfunction split(text, target, count) {\n    count = count === undefined ? 1 : count;\n    let array = [text];\n    for (let i = 0; i < count; i++) {\n        text = array[i];\n        let index = text.indexOf(target);\n        if (index === -1) {\n            break;\n        }\n        array[i] = text.slice(0, index);\n        array[i + 1] = text.slice(index + target.length);\n    }\n    return array;\n}\n\nfunction rsplit(text, target, count) {\n    count = count === undefined ? 1 : count;\n    let array = [text];\n    for (let i = 0; i < count; i++) {\n        text = array[0];\n        let index = text.lastIndexOf(target);\n        if (index === -1) {\n            break;\n        }\n        array[0] = text.slice(0, index);\n        array.splice(1, 0, text.slice(index + target.length));\n    }\n    return array;\n}\nE2Hiker.prototype = {\n    constructor: E2Hiker,\n    getValue(type) {\n        let Ttype = Object.prototype.toString.call(this.value);\n        type = \"[object \" + type + \"]\";\n\n        if (Ttype === type) {\n            return this.value;\n        } else if (type === \"[object String]\" && Ttype === \"[object Array]\") {\n            return this.value[0] || \"\";\n        } else if (Ttype === \"[object String]\" && type === \"[object Array]\") {\n            return [this.value];\n        } else {\n            throw new E2Error(\"函数需要\" + type + \"类型，而真实类型为\" + Ttype, undefined, this.value, \"dataType\");\n        }\n    },\n    setValue(data) {\n        if (typeof data === \"number\") {\n            data = data + \"\";\n        }\n        this.value = data;\n    },\n    valueOf() {\n        if (this.xuArr.length !== 0) {\n            if (Array.isArray(this.value)) {\n                return this.xuArr.concat(this.value);\n            } else if (typeof this.value === \"object\") {\n                this.xuArr.push(JSON.stringify(this.value));\n                return this.xuArr;\n            } else {\n                this.xuArr.push(this.value);\n                return this.xuArr;\n            }\n        } else {\n            if (!Array.isArray(this.value) && typeof this.value === \"object\") {\n                return JSON.stringify(this.value);\n            } else {\n                return this.value;\n            }\n        }\n    },\n    ty(target) {\n        let data = this.getValue(\"String\");\n        this.setValue(split(data, target)[1] || \"\");\n    },\n    ty2(target) {\n        let data = this.getValue(\"String\");\n        this.setValue(rsplit(data, target)[1] || \"\");\n    },\n    tz(target) {\n        let data = this.getValue(\"String\");\n        this.setValue(split(data, target)[0] || \"\");\n    },\n    tz2(target) {\n        let data = this.getValue(\"String\");\n        this.setValue(rsplit(data, target)[0] || \"\");\n    },\n    t() {\n        let data = this.getValue(\"String\");\n        this.setValue(data.replace(/<[^>]+>/g, \"\"));\n    },\n    tj(target) {\n        this.setValue(this.getValue(\"String\") + target);\n    },\n    tzc(target) {\n        let index = Number(target);\n        this.setValue(this.getValue(\"String\").substring(0, index));\n    },\n    tsk() {\n        this.setValue(this.getValue(\"String\").trim());\n    },\n    th(target) {\n        let targetArr = split(target, \"##\");\n        if (targetArr.length === 1) {\n            return this.tz(target);\n        }\n        let reg = new RegExp(targetArr[0], \"g\");\n        this.setValue(this.getValue(\"String\").replace(reg, targetArr[1]));\n    },\n    th2(target) {\n        let targetArr = split(target, \"##\");\n        if (targetArr.length === 1) {\n            return this.tz(target);\n        }\n        this.setValue(this.getValue(\"String\").split(targetArr[0]).join(targetArr[1]));\n    },\n    /*tvar(target) {\n        let data = this.getValue(\"String\");\n        this.xObj[target]=data;\n        this.setValue(this.source);\n    },\n    trl(target) {\n        let data = this.getValue(\"String\");\n        let y = this.xObj[target]||\"\";\n        this.setValue(data+y);\n    },\n    tll(target) {\n        let data = this.getValue(\"String\");\n        let y = this.xObj[target]||\"\";\n        this.setValue(y+data);\n    },*/\n    tx() {\n        let data = this.getValue(\"String\");\n        if (data.indexOf(this.source) + this.source.length !== data.length) {\n            this.setValue((this.xuArr.pop() || \"\") + data + this.source);\n\n        }\n    },\n    byt(target) {\n        parseDomForArray(this.getValue(\"String\"), \"html&&*:contains(\" + target + \")\");\n    },\n    fg(target) {\n        let reg = new RegExp(target);\n        this.setValue(this.getValue(\"String\").split(reg));\n    },\n    en64() {\n        this.setValue(base64Encode(this.getValue(\"String\")));\n    },\n    dn64() {\n        this.setValue(base64Decode(this.getValue(\"String\")));\n    },\n    d(v) {\n        this.setValue(decodeStr(this.getValue(\"String\"), v));\n    },\n    en(v) {\n        this.setValue(encodeStr(this.getValue(\"String\"), v));\n    },\n    tot() {\n        this.setValue(JSON.stringify(this.getValue(\"String\")));\n    },\n    /*toij() {\n        this.setValue(JSON.parse(this.getValue(\"String\")));\n    },*/\n    type() {\n        this.setValue(Object.prototype.toString.call(this.value));\n    },\n    i(target) {\n        let data = this.value;\n        let [s, e] = split(target, \",\");\n        if (e === undefined) {\n            s = Number(s);\n            if (s >= 0 && s < data.length) {\n                this.setValue(data[s]);\n            } else if (s < 0 && data.length + s >= 0) {\n                this.setValue(data[data.length + s]);\n            }\n        } else {\n            this.setValue(data.slice(s, e));\n        }\n    },\n    ij(target) {\n        let data = this.getValue(\"Array\");\n        data.push(target);\n        this.setValue(data);\n    },\n    is(target) {\n        let reg = new RegExp(target);\n        let data = this.getValue(\"Array\");\n        let newData = data.filter(item => !item.test(reg));\n        this.setValue(newData);\n    },\n    il(target) {\n        let reg = new RegExp(target);\n        let data = this.getValue(\"Array\");\n        let newData = data.filter(item => item.test(reg));\n        this.setValue(newData);\n    },\n    it(target) {\n        let data = this.getValue(\"Array\");\n        this.setValue(data.join(target));\n    },\n    ix() {\n        let data = this.getValue(\"Array\");\n        this.xuArr = this.xuArr.concat(data);\n        this.setValue(this.source);\n    },\n    dx() {\n        let data = this.getValue(\"Array\");\n        data.reverse();\n    },\n    get(target) {\n        try {\n            let data = this.getValue(\"String\");\n            let doc = Jsoup.parseBodyFragment(data);\n            let select = doc.select(target);\n            select = select.toArray();\n            let newdata = [];\n            for (let item of select) {\n                newdata.push(String(item.outerHtml()));\n            }\n            this.setValue(newdata);\n        } catch (e) {\n            this.setValue(\"\");\n        }\n\n    },\n    a(target) {\n        try {\n            let data = this.getValue(\"String\");\n            let doc = Jsoup.parse(data);\n            let attr = \"\";\n            let body = doc.body().select(\"*\").eq(1);\n            if (body.hasAttr(target)) {\n                attr = String(body.attr(target));\n            }\n            this.setValue(attr);\n        } catch (e) {\n            this.setValue(\"\");\n        }\n    },\n    json(target) {\n        if (target != \"\") {\n            try {\n                let data = JSON.parse(this.getValue(\"String\"))[target];\n                this.setValue(data === undefined ? \"\" : typeof data === \"string\" ? data : JSON.stringify(data));\n            } catch (e) {\n                throw new E2Error(\"无法将其转换为 JSON对象:\" + target + \"\\n\" + e.message, undefined, this.value, \"dataType\");\n            }\n        } else {\n            try {\n                let data = JSON.parse(this.getValue(\"String\"));\n                if (Array.isArray(data)) {\n                    this.setValue(data);\n                } else {\n                    this.setValue(\"\");\n                }\n            } catch (e) {\n                this.setValue(\"\");\n            }\n        }\n    },\n    c(target) {\n        let data = this.value;\n        if (Array.isArray(data)) {\n            data = data[0] === undefined ? \"\" : data[0];\n        } else if (typeof data === \"object\") {\n            data = JSON.stringify(data);\n        }\n        this.setValue(data + target + this.source);\n    },\n    ct(target) {\n        let data = this.value;\n        if (Array.isArray(data)) {\n            data = data[0] === undefined ? \"\" : data[0];\n        } else if (typeof data === \"object\") {\n            data = JSON.stringify(data);\n        }\n        this.setValue(data + target);\n    },\n    or() {\n        if (this.value !== \"\" && this.value !== undefined) {\n            return true;\n        } else {\n            this.setValue(this.source);\n            return false;\n        }\n    },\n    xu() {\n        let data = this.value;\n        if (Array.isArray(data)) {\n            for (let v of data) {\n                this.xuArr.push(v);\n            }\n        } else if (typeof data === \"object\") {\n            this.xuArr.push(JSON.stringify(data));\n        } else {\n            this.xuArr.push(data);\n        }\n        this.setValue(this.source);\n    },\n    st(target) {\n        this.it(target);\n    },\n    z(target) {\n        let data = this.getValue(\"String\");\n        let reg = new RegExp(target, \"g\");\n        let newdata = data.match(reg) || [];\n        this.setValue(newdata);\n    },\n    z2(target) {\n        let data = this.getValue(\"String\");\n        let reg = new RegExp(target);\n        let newdata = data.match(reg) || [];\n        if (newdata.length > 0) {\n            newdata.splice(0, 1);\n        }\n        this.setValue(newdata);\n    }\n}\n$.exports = E2Hiker;"},{"col_type":"movie_3","name":"get e2Rex","path":"getE2Rex","rule":"js:\n//const E2Hiker = $.require(\"hiker://page/E2ToHiker?rule=E2ToHiker\");\n//const E2Hiker = $.require(\"hiker://page/E2ToHiker2?rule=E2ToHiker\");\nconst E2Error = $.require(\"hiker://page/E2Error?rule=E2ToHiker\");\nfunction getE2Rex(E2Hiker,t,r) {\n    let arr = [];\n    let funcName = \"\",\n        funcParam = \"\";\n    let status = 0;\n    let tran = false;\n    for (let i = 0; i < r.length; i++) {\n        let k = r[i],\n            s = i > 0 ? r[i - 1] : \"\",\n            x = i + 1 < r.length ? r[i + 1] : \"\";\n        if (k === \".\" && status === 0) {\n            status = 1;\n            continue;\n        } else if (status === 1 && k !== \"(\") {\n            funcName += k;\n            continue;\n        } else if (status === 1 && k === \"(\") {\n            if (k + r[i + 1] + r[i + 2] === \"(@@\") {\n                i++, i++;\n                status = 3;\n            } else {\n                status = 2;\n            }\n            continue;\n        } else if (status === 3 && k + r[i + 1] + r[i + 2] !== \"@@)\") {\n            funcParam += k;\n            continue;\n        } else if (status === 3 && k + r[i + 1] + r[i + 2] === \"@@)\") {\n            i++, i++;\n            arr.push([funcName, funcParam]);\n            status = 0, funcName = \"\", funcParam = \"\";\n            continue;\n        } else if (status === 2 && tran) {\n            tran = false;\n            funcParam += k;\n            continue;\n        } else if (status === 2 && k === \"\\\\\") {\n            tran = true;\n            funcParam += k;\n            continue;\n        } else if (status === 2 && k !== \")\" && k !== \"\\\\\") {\n            funcParam += k;\n            continue;\n        } else if (status === 2 && k === \")\") {\n            if ([\"z\", \"z2\", \"th\", \"fg\"].includes(funcName)) {\n                funcParam = funcParam.replace(/\\\\\\)/g, \")\").replace(/\\\\\\(/g, \"(\");\n            }\n            arr.push([funcName, funcParam]);\n            status = 0, funcName = \"\", funcParam = \"\";\n            continue;\n        } else {\n            throw new E2Error(\"未发现函数起始符[.]:)\",r,t);\n        }\n    }\n    if (status !== 0) {\n        throw new E2Error(\"找不到结束符[)]\",r,t);\n    }\n    let e2Hiker = new E2Hiker(t);\n    var target;\n    try {\n        for (target of arr) {\n            let y = e2Hiker[target[0]](target[1]);\n            if (target[0] === \"or\" && y === true) {\n                break;\n            }\n        }\n    } catch (e) {\n        if(e.type===\"dataType\"){\n            e.rule=target[0];\n            throw e;\n        }else if(/Cannot find function (.*?) /.test(e.message)){\n            throw new E2Error(\"未知的函数\"+RegExp.$1,r,t);\n        }else{\n            throw e;\n        }\n    }\n    return e2Hiker.valueOf();\n}\n\n$.exports = getE2Rex;"},{"col_type":"movie_3","name":"E2Rex2","path":"E2Rex2","rule":"js:\nconst getE2Rex = $.require(\"hiker://page/getE2Rex?rule=E2ToHiker\");\nconst E2Hiker = $.require(\"hiker://page/E2ToHiker2?rule=E2ToHiker\")\nfunction e2Rex(t,r){\n    return getE2Rex(E2Hiker,t,r);\n}\n$.exports = e2Rex;"},{"col_type":"movie_3","name":"完整查看","path":"ViewText","rule":"js:\nvar {title,text}=MY_PARAMS;\nsetPageTitle(\"查看完整:\" + title);\nlet mark = getVar(\"e2.Mark\");\n\nvar d = [];\nd.push({\n    title: \"转为源文本\",\n    url: $(\"#noLoading#\").lazyRule(text => {\n        putVar(\"e2.Source\", text);\n        back();\n        return \"hiker://empty\";\n    }, text),\n    col_type: \"text_2\"\n}, {\n    title: \"复制内容\",\n    url: \"copy://\" + text,\n    col_type: \"text_2\"\n});\n/*\nif ((typeof getAppVersion === \"function\") && (getAppVersion() >= 1863)) {\n    addListener('onClose', 'putVar(\"e2.Mark\",\"\")');\n}\nd.push({\n    title: \"标记\",\n    url: \"putVar('e2.Mark',input);refreshPage(false)\",\n    col_type: \"input\",\n    desc: \"输入需要标红的字符\",\n    extra: {\n        defaultValue: mark\n    }\n});\n\n// 字符过滤器\nconst matchList  = {\n  \"<\":\"&lt;\",\n  \">\": \"&gt;\",\n  \"&\": \"&amp;\",\n  '\"': \"&quot;\",\n  \"'\": \"acute;\",\n  \" \": \"&nbsp;\",\n  \"\\n\":\"<br>\"\n}\n// 字符过滤器\nfunction htmlEscape(text){\n  let regStr = '(' + Object.keys(matchList).toString() + ')'\n  regStr = regStr.replace(/,/g, ')|(')  \n  const regExp = new RegExp(regStr, 'g')\n  return text.replace(regExp, match => matchList[match])\n}\n\ntext=htmlEscape(text);\nif(mark!==\"\"){\n    mark=htmlEscape(mark);\n    let markz=new RegExp(mark,\"g\");\n    text=text.replace(markz,t=>\"<font color='red'>\"+t+\"</font>\");\n}\n*/\nd.push({\n    col_type: \"line_blank\"\n}, {\n    title: text,\n    col_type: \"long_text\"\n}, {\n    col_type: \"line_blank\"\n});\nsetResult(d);"}],"title":"E2ToHiker","author":"@LoyDgIk","version":2,"type":"tool","url":"hiker://empty","col_type":"text_1","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js: \n\nlet d = [];\n//是否开启关闭规则重置页面\nconst ResetPage = fetch(\"hiker://files/e2ResetPage\") || \"0\";\nlet rex = getVar(\"e2.Rex\");\nlet rex2 = getVar(\"e2.Rex2\");\nlet start = getVar(\"e2.Start\", \"0\");\nlet source = getVar(\"e2.Source\");\nlet method = getItem(\"e2.Method\", \"0\");\nlet regExpMethod = getVar(\"e2.regExpMethod\", \"g\");\nlet strict = getVar(\"e2.Strict\", \"1\");\nif ((typeof getAppVersion === \"function\") && (getAppVersion() >= 1863) && (ResetPage === \"0\")) {\n    addListener('onClose', $.toString(() => {\n        clearVar(\"e2.Rex\");\n        clearVar(\"e2.Rex2\");\n        clearVar(\"e2.Start\");\n        clearVar(\"e2.OutputCache\");\n        clearVar(\"e2.Source\");\n        clearVar(\"e2.Method\");\n        clearVar(\"e2.regExpMethod\");\n        clearVar(\"e2.Strict\");\n    }));\n}\n\nfunction setMethod(item) {\n    return $(\"#noLoading#\").lazyRule((method, item) => {\n        setItem(\"e2.Method\", item);\n        if (method !== item) {\n            putVar(\"e2.Rex\", \"\");\n            putVar(\"e2.Rex2\", \"\");\n            //putVar(\"e2.OutputCache\",\"\");\n            refreshPage(false);\n        }\n        return \"hiker://empty\";\n    }, method, item);\n}\n\nfunction setReference(title, pageUrl) {\n    return $().rule((title, pageUrl) => {\n        setPageTitle(title);\n        setResult([{\n            title: JSON.parse(fetch(pageUrl)).rule,\n            col_type: \"rich_text\"\n        }]);\n    }, title, pageUrl);\n}\nd.push({\n    title: [\"◉\", \"○\", \"○\"][method] + \"E2\",\n    url: method !== \"0\" ? setMethod(\"0\") : setReference(\"E2语法\", \"hiker://page/E2参考\"),\n    col_type: \"text_3\"\n});\nd.push({\n    title: [\"○\", \"◉\", \"○\"][method] + \"正则\",\n    url: method !== \"1\" ? setMethod(\"1\") : setReference(\"参考语法\", \"hiker://page/正则参考\"),\n    col_type: \"text_3\"\n});\nd.push({\n    title: [\"○\", \"○\", \"◉\"][method] + \"海阔\",\n    url: setMethod(\"2\"),\n    col_type: \"text_3\"\n});\nd.push({\n    col_type: \"line\"\n});\nd.push({\n    title: \"执行\",\n    url: \"putVar('e2.Start', '1');refreshPage(false);\",\n    col_type: \"input\",\n    desc: [\"E2规则\", \"正则表达式\", \"列表规则(如body&&li)\"][method],\n    extra: {\n        defaultValue: rex,\n        onChange: \"putVar('e2.Rex',input);\"\n    }\n});\nif (method === \"1\") {\n    function setModifier(modifier) {\n        return $(\"#noLoading#\").lazyRule((regExpMethod, modifier) => {\n            if (regExpMethod.includes(modifier)) {\n                regExpMethod = regExpMethod.replace(modifier, \"\");\n            } else {\n                regExpMethod += modifier;\n            }\n            putVar(\"e2.regExpMethod\", regExpMethod);\n            refreshPage(false);\n            return \"hiker://empty\";\n        }, regExpMethod, modifier)\n    }\n    d.push({\n        title: \"““””<font color='#23AE6D'>修饰符：</font>\",\n        url: \"hiker://empty\",\n        col_type: \"scroll_button\"\n    }, {\n        title: regExpMethod.includes(\"g\") ? \"““g””\" : \"g\",\n        url: setModifier(\"g\"),\n        col_type: \"scroll_button\"\n    }, {\n        title: regExpMethod.includes(\"m\") ? \"““m””\" : \"m\",\n        url: setModifier(\"m\"),\n        col_type: \"scroll_button\"\n    }, {\n        title: regExpMethod.includes(\"i\") ? \"““i””\" : \"i\",\n        url: setModifier(\"i\"),\n        col_type: \"scroll_button\"\n    }, {\n        title: \"““””<font color='#23AE6D'>||</font>\",\n        url: \"hiker://empty\",\n        col_type: \"scroll_button\"\n    });\n} else if (method === \"0\") {\n    d.push({\n        title: \"““””<font color='#23AE6D'>严格模式：</font>\",\n        url: \"hiker://empty\",\n        col_type: \"scroll_button\"\n    }, {\n        title: [\"☑\", \"☒\"][strict],\n        url: $(\"#noLoading#\").lazyRule(strict => {\n            if (strict === \"0\") {\n                putVar(\"e2.Strict\", \"1\")\n            } else {\n                putVar(\"e2.Strict\", \"0\")\n            }\n            putVar(\"e2.Rex\", \"\");\n            refreshPage(false);\n            return \"hiker://empty\";\n        }, strict),\n        col_type: \"scroll_button\"\n    }, {\n        title: \"““””<font color='#23AE6D'>||</font>\",\n        url: \"hiker://empty\",\n        col_type: \"scroll_button\"\n    });\n} else if (method === \"2\") {\n    d.push({\n        title: \"执行\",\n        url: \"putVar('e2.Start', '2');refreshPage(false);\",\n        col_type: \"input\",\n        desc: \"节点规则(如a&&href)\",\n        extra: {\n            defaultValue: rex2,\n            onChange: \"putVar('e2.Rex2',input);\"\n        }\n    }, {\n        title: \"↸\",\n        url: \"hiker://page/ViewText\",\n        col_type: \"scroll_button\",\n        extra: {\n            title: \"规则2\",\n            text: rex2\n        }\n    });\n}\nd.push({\n    title: \"⇧\",\n    url: \"hiker://page/ViewText\",\n    col_type: \"scroll_button\",\n    extra: {\n        title: \"规则\",\n        text: rex\n    }\n}, {\n    title: \"⇩\",\n    url: \"hiker://page/ViewText\",\n    col_type: \"scroll_button\",\n    extra: {\n        title: \"源文本\",\n        text: source\n    }\n}, {\n    title: [\"▣\", \"□\"][ResetPage],\n    url: $(\"#noLoading#\").lazyRule(ResetPage => {\n        if (ResetPage === \"0\") {\n            writeFile(\"hiker://files/e2ResetPage\", \"1\");\n        } else {\n            writeFile(\"hiker://files/e2ResetPage\", \"0\");\n        }\n        refreshPage(false);\n        return \"hiker://empty\";\n    }, ResetPage),\n    col_type: \"scroll_button\"\n}, {\n    title: \"🔗\",\n    url: $(\"#noLoading#\").lazyRule(() => {\n        let url = getVar(\"e2.Request\").split(\";\")[0];\n        if (url === \"\") {\n            return \"toast://没有访问链接\";\n        } else {\n            return url;\n        }\n    }),\n    col_type: \"scroll_button\"\n});\nd.push({\n    title: \"⚡\",\n    url: $.toString(() => $(getVar(\"e2.Request\"), \"支持海阔格式url\").input(() => {\n        showLoading(\"正在获取源码\");\n        let h = {};\n        let url;\n        let ht = input.split(\";\");\n        for (let i = 0; i < ht.length; i++) {\n            let item = ht[i];\n            if (item.search(/http|hiker|file/) === 0) {\n                url = item;\n            } else if (/get|post/i.test(item)) {\n                h.method = item;\n            } else if (item.indexOf(\"{\") === 0 && item.lastIndexOf(\"}\") === item.length - 1) {\n                let hr = item.substring(1, item.length - 1).split(\"&&\");\n                h.headers = {}\n                hr.forEach(it => {\n                    let hri = it.split(\"@\");\n                    h.headers[hri[0]] = hri[1].replace(/；；/g, \";\");\n                });\n            }\n        }\n        putVar(\"e2.Request\", input);\n        let html = request(url, h);\n        putVar(\"e2.Source\", html);\n        hideLoading();\n        refreshPage(false);\n    })),\n    col_type: \"input\",\n    desc: \"源文本\",\n    extra: {\n        type: \"textarea\",\n        //titleVisible: false,\n        onChange: \"putVar('e2.Source',input)\",\n        defaultValue: source\n    }\n});\n\nd.push({\n    col_type: \"line_blank\"\n});\n/*\nd.push({\n    title: \"<strong><big>输出</big></strong>\",\n    col_type: \"rich_text\"\n});\nd.push({\n    col_type: \"line\"\n});\n*/\nfunction error(msg, r, c) {\n    setError(\"\\n\\n\" +\n        \"errorMessage：\" + msg + \"\\n\\n\" +\n        \"处理规则：\" + r + \"\\n\\n\" +\n        \"处理内容：\" + c + \"\\n\");\n}\n\nfunction onE2() {\n\n    let e2Rex;\n    if (strict === \"0\") {\n        e2Rex = $.require(\"hiker://page/E2Rex\");\n    } else {\n        e2Rex = $.require(\"hiker://page/E2Rex2\");\n    }\n    try {\n        return e2Rex(source, rex);\n    } catch (e) {\n        putVar('e2.Start', '0');\n        if (e.name === \"E2Error\") {\n            error(e.message, e.rule, e.context);\n        } else {\n            throw e;\n        }\n    }\n}\n\nfunction onMatch() {\n    let reg = new RegExp(rex, regExpMethod);\n    if (regExpMethod.includes(\"g\")) {\n        return source.match(reg) || [];\n    } else {\n        let result = source.match(reg);\n        if (null == result || 0 == result.length) {\n            return \"\";\n        } else {\n            return result;\n        }\n    }\n}\nfunction split(text, target, count) {\n    count = count === undefined ? 1 : count;\n    let array = [text];\n    for (let i = 0; i < count; i++) {\n        text = array[i];\n        let index = text.indexOf(target);\n        if (index === -1) {\n            break;\n        }\n        array[i] = text.slice(0, index);\n        array[i + 1] = text.slice(index + target.length);\n    }\n    return array;\n}\nfunction onHiker() {\n    try {\n        if (start === \"1\") {\n            if (!rex && !source) return;\n            return parseDomForArray(source, rex);\n        } else if (start === \"2\") {\n            let data = JSON.parse(getVar(\"e2.OutputCache\") || \"[]\");\n            if (data.length === 0) return;\n            let arrA=split(rex2,\".js:\");\n            let result=parseDomForHtml(data[0],arrA[0]);\n            if(arrA.length===1){\n                return result;\n            }else{\n                let func=new Function(\"input\",\"return \"+arrA[1]);\n                return func(result);\n            }\n        }\n    } catch (e) {\n        putVar('e2.Start', '0');\n        if (start === \"1\") {\n            error(e.message, rex, source);\n        } else if (start === \"2\") {\n            error(e.message, rex2, getVar(\"e2.OutputCache\"));\n        }\n    }\n}\n\nfunction renderOutput(data) {\n    if (start !== \"0\") {\n        if (!Array.isArray(data)) {\n            data = [data];\n        } else if (data === undefined) {\n            return;\n        }\n        putVar(\"e2.OutputCache\", JSON.stringify(data));\n    } else {\n        data = JSON.parse(getVar(\"e2.OutputCache\") || \"[]\");\n    }\n\n    for (let tf of data) {\n        d.push({\n            title: tf,\n            url: \"hiker://page/ViewText\",\n            col_type: \"text_1\",\n            extra: {\n                title: \"输出\",\n                text: tf\n            }\n        }, {\n            col_type: \"big_blank_block\"\n        }, {\n            col_type: \"line\"\n        });\n\n    }\n}\nswitch (method) {\n    case \"0\":\n        if (!rex && !source) break;\n        renderOutput(onE2());\n        break;\n    case \"1\":\n        if (!rex && !source) break;\n        renderOutput(onMatch());\n        break;\n    case \"2\":\n        renderOutput(onHiker());\n        break;\n}\nputVar('e2.Start', '0');\nsetResult(d);","searchFind":"","search_url":"","group":"⑧工具","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"E2Rex\",\"path\":\"E2Rex\",\"rule\":\"js:\\nconst getE2Rex = $.require(\\\"hiker://page/getE2Rex?rule=E2ToHiker\\\");\\nconst E2Hiker = $.require(\\\"hiker://page/E2ToHiker?rule=E2ToHiker\\\")\\nfunction e2Rex(t,r){\\n    return getE2Rex(E2Hiker,t,r);\\n}\\n$.exports = e2Rex;\"},{\"col_type\":\"movie_3\",\"name\":\"E2ToHiker\",\"path\":\"E2ToHiker\",\"rule\":\"js:\\nconst E2Error = $.require(\\\"hiker://page/E2Error?rule=E2ToHiker\\\");\\n\\nfunction E2Hiker(value) {\\n    if (typeof value === \\\"string\\\") {\\n        this.source = value;\\n        this.value = value;\\n        this.xuArr = [];\\n        this.xObj = [];\\n    } else {\\n        throw new E2Error(\\\"E2Hiker需要一个string参数\\\",\\\"初始化错误\\\",value);\\n    }\\n}\\n\\nfunction split(text, target, count) {\\n    count = count === undefined ? 1 : count;\\n    let array = [text];\\n    for (let i = 0; i < count; i++) {\\n        text = array[i];\\n        let index = text.indexOf(target);\\n        if (index === -1) {\\n            break;\\n        }\\n        array[i] = text.slice(0, index);\\n        array[i + 1] = text.slice(index + target.length);\\n    }\\n    return array;\\n}\\n\\nfunction rsplit(text, target, count) {\\n    count = count === undefined ? 1 : count;\\n    let array = [text];\\n    for (let i = 0; i < count; i++) {\\n        text = array[0];\\n        let index = text.lastIndexOf(target);\\n        if (index === -1) {\\n            break;\\n        }\\n        array[0] = text.slice(0, index);\\n        array.splice(1, 0, text.slice(index + target.length));\\n    }\\n    return array;\\n}\\nE2Hiker.prototype = {\\n    constructor: E2Hiker,\\n    getValue(type) {\\n        let Ttype = Object.prototype.toString.call(this.value);\\n        type = \\\"[object \\\" + type + \\\"]\\\";\\n        \\n        if (Ttype === type) {\\n            return this.value;\\n        } else {\\n            throw new E2Error(\\\"函数需要\\\"+type+\\\"类型，而真实类型为\\\"+Ttype,undefined,this.value,\\\"dataType\\\");\\n        }\\n    },\\n    getValue2(arr) {\\n        let typeArr = arr.map(item => \\\"[object \\\" + item + \\\"]\\\");\\n        let Ttype = Object.prototype.toString.call(this.value);\\n        if (typeArr.includes(Ttype)) {\\n            return this.value;\\n        } else {\\n            throw new E2Error(\\\"函数需要\\\"+typeArr.join(\\\"|\\\")+\\\"类型，而真实类型为\\\"+Ttype,undefined,this.value,\\\"dataType\\\");\\n        }\\n    },\\n    setValue(data) {\\n        if (typeof data === \\\"number\\\") {\\n            data = data + \\\"\\\";\\n        }\\n        this.value = data;\\n    },\\n    valueOf() {\\n        if (this.xuArr.length !== 0) {\\n            if (Array.isArray(this.value)) {\\n                return this.xuArr.concat(this.value);\\n            } else if (typeof this.value === \\\"object\\\") {\\n                this.xuArr.push(JSON.stringify(this.value));\\n                return this.xuArr;\\n            } else {\\n                this.xuArr.push(this.value);\\n                return this.xuArr;\\n            }\\n        } else {\\n            if (!Array.isArray(this.value) && typeof this.value === \\\"object\\\") {\\n                return JSON.stringify(this.value);\\n            } else {\\n                return this.value;\\n            }\\n        }\\n    },\\n    ty(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        this.setValue(split(data, target)[1] || \\\"\\\");\\n    },\\n    ty2(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        this.setValue(rsplit(data, target)[1] || \\\"\\\");\\n    },\\n    tz(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        this.setValue(split(data, target)[0] || \\\"\\\");\\n    },\\n    tz2(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        this.setValue(rsplit(data, target)[0] || \\\"\\\");\\n    },\\n    t() {\\n        let data = this.getValue(\\\"String\\\");\\n        this.setValue(data.replace(/<[^>]+>/g, \\\"\\\"));\\n    },\\n    tj(target) {\\n        this.setValue(this.getValue(\\\"String\\\") + target);\\n    },\\n    tzc(target) {\\n        let index = Number(target);\\n        this.setValue(this.getValue(\\\"String\\\").substring(0,index));\\n    },\\n    tsk() {\\n        this.setValue(this.getValue(\\\"String\\\").trim());\\n    },\\n    th(target) {\\n        let targetArr = split(target, \\\"##\\\");\\n        if (targetArr.length === 1) {\\n            return this.tz(target);\\n        }\\n        let reg = new RegExp(targetArr[0], \\\"g\\\");\\n        this.setValue(this.getValue(\\\"String\\\").replace(reg, targetArr[1]));\\n    },\\n    th2(target){\\n        let targetArr = split(target, \\\"##\\\");\\n        if (targetArr.length === 1) {\\n            return this.tz(target);\\n        }\\n        this.setValue(this.getValue(\\\"String\\\").split(targetArr[0]).join(targetArr[1]));\\n    },\\n    /*tvar(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        this.xObj[target]=data;\\n        this.setValue(this.source);\\n    },\\n    trl(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        let y = this.xObj[target]||\\\"\\\";\\n        this.setValue(data+y);\\n    },\\n    tll(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        let y = this.xObj[target]||\\\"\\\";\\n        this.setValue(y+data);\\n    },*/\\n    tx(){\\n        let data = this.getValue(\\\"String\\\");\\n        if(data.indexOf(this.source)+this.source.length!==data.length){\\n            this.setValue((this.xuArr.pop()||\\\"\\\")+data+this.source);\\n        }\\n    },\\n    byt(target) {\\n        parseDomForArray(this.getValue(\\\"String\\\"), \\\"html&&*:contains(\\\" + target + \\\")\\\");\\n    },\\n    fg(target) {\\n        let reg = new RegExp(target);\\n        this.setValue(this.getValue(\\\"String\\\").split(reg));\\n    },\\n    en64() {\\n        this.setValue(base64Encode(this.getValue(\\\"String\\\")));\\n    },\\n    dn64() {\\n        this.setValue(base64Decode(this.getValue(\\\"String\\\")));\\n    },\\n    d(v) {\\n        this.setValue(decodeStr(this.getValue(\\\"String\\\"), v));\\n    },\\n    en(v) {\\n        this.setValue(encodeStr(this.getValue(\\\"String\\\"), v));\\n    },\\n    tot() {\\n        this.setValue(JSON.stringify(this.getValue(\\\"String\\\")));\\n    },\\n    toij() {\\n        this.setValue(JSON.parse(this.getValue(\\\"String\\\")));\\n    },\\n    type() {\\n        this.setValue(Object.prototype.toString.call(this.value));\\n    },\\n    i(target) {\\n        let data = this.getValue2([\\\"String\\\", \\\"Array\\\"]);\\n        let [s, e] = split(target, \\\",\\\");\\n        if (e === undefined) {\\n            s=Number(s);\\n            if(s>=0){\\n                this.setValue(data[s] || data);\\n            }else if(s<0){\\n                this.setValue(data[data.length+s] || data);\\n            }\\n        } else {\\n            this.setValue(data.slice(s, e));\\n        }\\n    },\\n    ij(target) {\\n        let data = this.getValue(\\\"Array\\\");\\n        data.push(target);\\n        this.setValue(data);\\n    },\\n    is(target) {\\n        let reg = new RegExp(target);\\n        let data = this.getValue(\\\"Array\\\");\\n        let newData = data.filter(item => !item.test(reg));\\n        this.setValue(newData);\\n    },\\n    il(target) {\\n        let reg = new RegExp(target);\\n        let data = this.getValue(\\\"Array\\\");\\n        let newData = data.filter(item => item.test(reg));\\n        this.setValue(newData);\\n    },\\n    it(target) {\\n        let data = this.getValue(\\\"Array\\\");\\n        this.setValue(data.join(target));\\n    },\\n    ix(){\\n        let data = this.getValue(\\\"Array\\\");\\n        this.xuArr=this.xuArr.concat(data);\\n        this.setValue(this.source);\\n    },\\n    dx(){\\n        let data = this.getValue(\\\"Array\\\");\\n        data.reverse();\\n    },\\n    get(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        try {\\n            this.setValue(parseDomForHtml(data, target));\\n        } catch (e) {\\n            this.setValue(\\\"\\\");\\n        }\\n    },\\n    geta(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        try {\\n            this.setValue(parseDomForArray(data, target));\\n        } catch (e) {\\n            this.setValue([]);\\n        }\\n    },\\n    getp(target){\\n        let data = this.getValue(\\\"Array\\\");\\n        data=data.map(item=>parseDomForHtml(item, target));\\n        this.setValue(data);\\n    },\\n    json(target) {\\n        let data = this.getValue2([\\\"Object\\\",\\\"Array\\\"])[target];\\n        this.setValue(data === undefined ? \\\"\\\" : data);\\n    },\\n    c(target) {\\n        let data = this.value;\\n        if (Array.isArray(data)) {\\n            data = data[0] === undefined ? \\\"\\\" : data[0];\\n        } else if (typeof data === \\\"object\\\") {\\n            data = JSON.stringify(data);\\n        }\\n        this.setValue(data + target + this.source);\\n    },\\n    ct(target) {\\n        let data = this.value;\\n        if (Array.isArray(data)) {\\n            data = data[0] === undefined ? \\\"\\\" : data[0];\\n        } else if (typeof data === \\\"object\\\") {\\n            data = JSON.stringify(data);\\n        }\\n        this.setValue(data + target);\\n    },\\n    or() {\\n        if (this.value !== \\\"\\\" && this.value !== undefined) {\\n            return true;\\n        } else {\\n            this.setValue(this.source);\\n            return false;\\n        }\\n    },\\n    xu() {\\n        let data = this.value;\\n        if (Array.isArray(data)) {\\n            for (let v of data) {\\n                this.xuArr.push(v);\\n            }\\n        } else if (typeof data === \\\"object\\\") {\\n            this.xuArr.push(JSON.stringify(data));\\n        } else {\\n            this.xuArr.push(data);\\n        }\\n        this.setValue(this.source);\\n    },\\n    st(target){\\n        this.it(target);\\n    },\\n    z(target){\\n        let data = this.getValue(\\\"String\\\");\\n        let reg = new RegExp(target,\\\"g\\\");\\n        let newdata = data.match(reg)||[];\\n        this.setValue(newdata);\\n    },\\n    z2(target){\\n        let data = this.getValue(\\\"String\\\");\\n        let reg = new RegExp(target);\\n        let newdata = data.match(reg)||[];\\n        if(newdata.length>0){\\n            newdata.splice(0,1);\\n        }\\n        this.setValue(newdata);\\n    }\\n}\\n$.exports = E2Hiker;\"},{\"col_type\":\"movie_3\",\"name\":\"E2Error\",\"path\":\"E2Error\",\"rule\":\"js:\\nfunction E2Error(message, rule,context,type) {\\n    this.message = message || \\\"\\\";\\n    this.rule = rule;\\n    this.context = context;\\n    this.name = \\\"E2Error\\\";\\n    this.type = type||\\\"error\\\";\\n}\\nE2Error.prototype = new Error();\\nE2Error.prototype.constructor = E2Error;\\n\\n$.exports = E2Error;\"},{\"col_type\":\"movie_3\",\"name\":\"正则参考\",\"path\":\"正则参考\",\"rule\":\"<code>.</code> - 除换行符以外的所有字符。<br>\\n<code>^</code> - 字符串开头。<br>\\n<code>$</code> - 字符串结尾。<br>\\n<code>\\\\d,\\\\w,\\\\s</code> - 匹配数字、字符、空格。<br>\\n<code>\\\\D,\\\\W,\\\\S</code> - 匹配非数字、非字符、非空格。<br>\\n<code>[abc]</code> - 匹配 a、b 或 c 中的一个字母。<br>\\n<code>[a-z]</code> - 匹配 a 到 z 中的一个字母。<br>\\n<code>[^abc]</code> - 匹配除了 a、b 或 c 中的其他字母。<br>\\n<code>aa|bb</code> - 匹配 aa 或 bb。<br>\\n<code>?</code> - 0 次或 1 次匹配。<br>\\n<code>*</code> - 匹配 0 次或多次。<br>\\n<code>+</code> - 匹配 1 次或多次。<br>\\n<code>{n}</code> - 匹配 n次。<br>\\n<code>{n,}</code> - 匹配 n次以上。<br>\\n<code>{m,n}</code> - 最少 m 次，最多 n 次匹配。<br>\\n<code>(expr)</code> - 捕获 expr 子模式,以 \\\\1 使用它。<br>\\n<s><code>(?:expr)</code> - 忽略捕获的子模式。</s><br>\\n<s><code>(?=expr)</code> - 正向预查模式 expr。</s><br>\\n<s><code>(?!expr)</code> - 负向预查模式 expr。</s><br>\"},{\"col_type\":\"movie_3\",\"name\":\"E2参考\",\"path\":\"E2参考\",\"rule\":\"<h3>E2 表达式： <h3>\\n<p>用于处理文本的表达式，比如获取\\\"文本\\\"前的几个字，可以使用  .tz(文本)  获取到 \\\"用于处理\\\"  四个字。 E2函数名使用中文拼音首字命名，对不懂开发的人群也能轻松操作。</p>\\n\\n \\n\\n<p>为了更容易了解并使用函数，一般处理文本的函数均以 t 开头，比如取文本左边的 tz ， t = 文本，z 是左的拼音头，然后就能知道取文本右边函数为 ty  了。 处理数组的函数 以 i 开头，如 .ij(aaa)  ，j = 加， 往数据中加入一行数组，值为 aaa 。</p>\\n\\n \\n\\n<h3>文本操作类：</h3>\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.tz()&nbsp;&nbsp;.ty()&nbsp;&nbsp;取文本左、右数据。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.tz2()&nbsp;&nbsp;.ty2()&nbsp;&nbsp;从后读取判断值文本并取判断值左、右（前、后）数据。 若内容为  abbacc  时使用  .ty(a)  取得值为 bbacc ， 使用  .ty2(a)  取得值 为  cc 。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.t()&nbsp;&nbsp;删除HTML标识，无需提供参数，如内容为 &lt;p&gt;a&lt;/p&gt;b&lt;p&gt;  时去除html代码获取正文， 直接使用  .t()  即可，最终得到   ab 。</p>\\n\\n  \\n\\n<p>&nbsp;&nbsp;&nbsp;.tj()&nbsp;&nbsp;添加内容，如已有 ab 获取 abcd ： .tj(cd) </p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.tzc()&nbsp;&nbsp;参数为数字，如 tzc(5) 如果当前操作值字数大于 5 就取前5个字，少于则取全部。所以这里 zc 记最长。若操作值为 ABCDE  使用  .tzc(3) 得到 AB 。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.tsk()&nbsp;&nbsp;无参数，去首尾空，qswk 再加上 t 太长了不好记，就首空，意思就去首尾空，就是去掉操作首尾的空格字符。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.th()&nbsp;&nbsp;替换，参数为 欲被替换文本##替换文本。如内容为   ABC 时 需将 B 改成 2 ，可以使用 .th(B##2) 。 欲需将其置空不要，可以直接使用 .th(B) ，将得到  AB 。 同时 th 中欲被替换文本是支持正则表达式的，如果要替换的内容和正则通配符冲突的话，就需要写转义了。 比如相对复杂的内容  111ADGDGS333 将中间的英文字替换为333，可用  .th([A-Z]+##333)  。 如果你并不知道哪些是正则匹配符，建议使用 .th2()  唯一不同的是 th2 中欲被替换文本是不支持正则匹配的。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.tx()&nbsp;&nbsp;x 意思是 新，新的概念在下面的数组里也有相应的函数。 M浏览器扩展使用E2时都是要先定义源内容的，比如数据源爬虫就是读取到的网络内容，文本就是定义的文本。 这里假设源内容是  xByyEzz ， 需要获取  E 后面的值和 B 前面的值（其中内容 x y z 会动态变化），注意是E后面+B前面。 新的概念就是存储之前操作的值不变让后面操作的函数处理的是源内容。理解这句话应该知道怎么做了，分三步走，获取 E 的后面值 ty2(E)  ->  存储并将当前操作内容定义为源内容 tx()  -> 获取 B 前面值 .tz(B)。\\n<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;快速捋一篇， 源内容 xByyEzz 在使用 E2 时会自动将其转为操作值，跟着使用 ty2(E) ，取E后面就是将操作值置为 zz ， 接着使用 .tx() 存储操作值并将操作值设为源文本 xByyEzz ， 跟着 tz(B) 得到 x  。后面没有函数了，就将前面存储的值和操作值输出，最终得到   xyyzz 。 </p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.byt()&nbsp;&nbsp;用于HTML，匹配标签值数据，返回整个标签项目列表\\n<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;&lt;h2&gt;我是标题&lt;/h2&gt;&lt;/div&gt;<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;h3&gt;/CCCC&lt;/h3&gt;<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;标题BBBB&lt;/p&gt;<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;取第1及第3行：.byt(标题)；获取 “&lt;p&gt;标题BBBB&lt;/p&gt;”  ：.byt(标题BBBB)  或者  .byt(标题).i(1)。</p>\\n\\n\\n\\n<h3>数组操作类：</h3>\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.i(正数)&nbsp;&nbsp;获取数组中第一个内容，从0开始，如获取第一个值 就 .i(0) ，第三个值 .i(2) 以此类推。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.i(负数)&nbsp;&nbsp;从数组尾部开始寻找，-1 即，数组倒数第一个值。 -2 数组倒数第二值，以此类推。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.i(数,数)&nbsp;&nbsp;取数组范围，理解了正数负数的用法这里的数可以自由填正数也可以负数，怎么好判断怎么来， 如有数组 [ab,ac,ad,ae] ，获取   ac,ad,ae ，即排除第一个： .i(1,-1)  ，排除最后一个：  .i(0,-2)。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.ij(添加的文本)&nbsp;&nbsp;将\\\"添加的文本\\\" 加入到数组中，比如数组已经有  [aa,bb,cc]  操作之后就等于  [aa,bb,cc,添加的文本]。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.is()&nbsp;&nbsp;正则匹配通过的数组会被删掉。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.il()&nbsp;&nbsp;正则匹配通过的数组会被保留。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.ix()&nbsp;&nbsp;存储数组，接着和 tx 类似，将操作值改为原文本。 注意数组操作时接着操作其它函数。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.it(分割符)&nbsp;&nbsp;E2里，i 表示数组，t 表示文本。将数组合并为文本且中间以参数分隔符作填充，若不填入参数则无分隔符。</p>\\n\\n \\n\\n \\n\\n<h3>正则表达式：</h3>\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.z()&nbsp;&nbsp;参数中若含括号必须添加转义给E2识别，若正则表达式中括号比较多在E2里看起来比较费眼，可在参数前后添加两个@标识内容为参数。 比如正则为   (a\\\\(b\\\\)c)|(x\\\\(y\\\\)z)  ，就是匹配  a(b)c 或 x(y) z， 在E2里必须给括号再添加一个转义符 \\\\ ，即 .z(\\\\(a\\\\\\\\(b\\\\\\\\)c\\\\)|\\\\(x\\\\\\\\(y\\\\\\\\)z\\\\))  这样就看起来很乱，那如果在参数两则加双@ 就可以写成  .z(@@(a\\\\(b\\\\)c)|(x\\\\(y\\\\)z)@@) 看起来相对会比较和谐。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.z2()&nbsp;&nbsp;匹配子表达式，同上一些编写，子表达式即为 正则中()里面的值，匹配后可以使用  .i() 获取指定括号内容。<br>\\n\\n&nbsp;&nbsp;&nbsp;&nbsp;注意若不使用@@全文转义符时，记得在内容括号前加 转义符 右斜杠！！！<br>\\n<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;明明18岁<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;丽丽17岁<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;李娜娜19岁<br>\\n<br>\\n&nbsp;&nbsp;a 获取 “明明18岁”：.z(.{2,3}\\\\d{2}岁)<br>\\n   \\n\\n&nbsp;&nbsp;b 获取娜娜几岁(19)：.z(.{2,3}\\\\d{2}岁).i(2).z2(.{2,3}\\\\(\\\\d{2}\\\\)岁)<br>\\n\\n&nbsp;&nbsp;a中若接口为返回文本，则相当与后方自动加了  .i(0) 函数，即取数组的第一个文本（数组计次从0开始）<br>\\n\\n&nbsp;&nbsp;b中先是用 .z() 全局匹配取得第3条数据，后用 .z2() 取子表达式的年龄数字</p>\\n\\n<h3>CSS选择器：</h3>\\n\\n<p>&nbsp;&nbsp;&nbsp;.get()&nbsp;&nbsp;使用海阔规则语法语法。xml也可以用。</p>\\n\\n<p>&nbsp;&nbsp;&nbsp;.geta()&nbsp;&nbsp;同上，但可以获取列表。</p>\\n\\n<p>&nbsp;&nbsp;&nbsp;.getp()&nbsp;&nbsp;功能与.get()一样，但是用于处理数组。</p>\\n\\n<h3>JSON解析器：</h3>\\n\\n<p>&nbsp;&nbsp;&nbsp;.toij()&nbsp;&nbsp;将字符串转为json对象。</p>\\n\\n<p>&nbsp;&nbsp;&nbsp;.json(参数名)&nbsp;&nbsp;用于读取json对象的子级。<p>\\n<p>\\n{<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;\\\"name\\\": \\\"BeJson\\\",<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;\\\"es\\\": {<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\"a\\\": \\\"科技园路.\\\",<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\"b\\\": \\\"中国\\\"<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;},<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;\\\"arr\\\": [<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\"name\\\": \\\"Baidu\\\",<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\"url\\\": \\\"http://www.baidu.com\\\"<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},{<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\"name\\\": \\\"Google\\\",<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\"url\\\": \\\"http://www.google.com\\\"<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;]<br>\\n}<br>\\n&nbsp;&nbsp;&nbsp;&nbsp;获取 中国：.toij().json(es).json(b)；也可以匹配 函数 .i(v) 获取数组中的数据，获取 Google 的 url： .toij().json(arr).i(1).json(url)。</p>\\n\\n<h3>高级命令：</h3>\\n<p>&nbsp;&nbsp;&nbsp;.d(v)&nbsp;&nbsp;将文本进行URL解码，v == utf8、gbk等。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.en(v)&nbsp;&nbsp;将文本进行URL加密，v == utf8、gbk等。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.dn64()&nbsp;&nbsp;将文本进行Base64解码。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.en64()&nbsp;&nbsp;将文本进行Base64加密。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.c()&nbsp;&nbsp;取回源码，可选带参，带参则先将参数加入文本，后取回源码。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.ct()&nbsp;&nbsp;即连接该文本。类似上面 .c 带参，但不取回源数据。</p>    \\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.or()&nbsp;&nbsp;若前面规则已读到数据则不执行右边规则，否则重置执行位置继续执行规则。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.xu()&nbsp;&nbsp;不返回任何数据，继续以列表方式存入右则读到的数据。即左右两则数据均取。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.st(参数)&nbsp;&nbsp;将数组合并为文本，数组之间填充参数值。</p>\\n\\n \\n\\n<p>&nbsp;&nbsp;&nbsp;.fg(参数)&nbsp;&nbsp;分割文本返回数组，若参数为空则默认分割换行。</p>\\n\\n<p>&nbsp;&nbsp;&nbsp;.type()&nbsp;&nbsp;返回当前操作值的类型。</p>\\n   \\n<h2><big>\\n不同的操作类型函数不可以混用。\\n改自<a href=\\\"https://7cc7cc.com/thread-120.htm?type=last\\\">原文<a>\\n</big></h2>\"},{\"col_type\":\"movie_3\",\"name\":\"E2还原版\",\"path\":\"E2ToHiker2\",\"rule\":\"js:\\nconst E2Error = $.require(\\\"hiker://page/E2Error?rule=E2ToHiker\\\");\\nlet Jsoup = org.jsoup.Jsoup;\\n\\nfunction E2Hiker(value) {\\n    if (typeof value === \\\"string\\\") {\\n        this.source = value;\\n        this.value = value;\\n        this.xuArr = [];\\n        this.xObj = [];\\n    } else {\\n        throw new E2Error(\\\"E2Hiker需要一个string参数\\\", \\\"初始化错误\\\", value);\\n    }\\n}\\n\\nfunction split(text, target, count) {\\n    count = count === undefined ? 1 : count;\\n    let array = [text];\\n    for (let i = 0; i < count; i++) {\\n        text = array[i];\\n        let index = text.indexOf(target);\\n        if (index === -1) {\\n            break;\\n        }\\n        array[i] = text.slice(0, index);\\n        array[i + 1] = text.slice(index + target.length);\\n    }\\n    return array;\\n}\\n\\nfunction rsplit(text, target, count) {\\n    count = count === undefined ? 1 : count;\\n    let array = [text];\\n    for (let i = 0; i < count; i++) {\\n        text = array[0];\\n        let index = text.lastIndexOf(target);\\n        if (index === -1) {\\n            break;\\n        }\\n        array[0] = text.slice(0, index);\\n        array.splice(1, 0, text.slice(index + target.length));\\n    }\\n    return array;\\n}\\nE2Hiker.prototype = {\\n    constructor: E2Hiker,\\n    getValue(type) {\\n        let Ttype = Object.prototype.toString.call(this.value);\\n        type = \\\"[object \\\" + type + \\\"]\\\";\\n\\n        if (Ttype === type) {\\n            return this.value;\\n        } else if (type === \\\"[object String]\\\" && Ttype === \\\"[object Array]\\\") {\\n            return this.value[0] || \\\"\\\";\\n        } else if (Ttype === \\\"[object String]\\\" && type === \\\"[object Array]\\\") {\\n            return [this.value];\\n        } else {\\n            throw new E2Error(\\\"函数需要\\\" + type + \\\"类型，而真实类型为\\\" + Ttype, undefined, this.value, \\\"dataType\\\");\\n        }\\n    },\\n    setValue(data) {\\n        if (typeof data === \\\"number\\\") {\\n            data = data + \\\"\\\";\\n        }\\n        this.value = data;\\n    },\\n    valueOf() {\\n        if (this.xuArr.length !== 0) {\\n            if (Array.isArray(this.value)) {\\n                return this.xuArr.concat(this.value);\\n            } else if (typeof this.value === \\\"object\\\") {\\n                this.xuArr.push(JSON.stringify(this.value));\\n                return this.xuArr;\\n            } else {\\n                this.xuArr.push(this.value);\\n                return this.xuArr;\\n            }\\n        } else {\\n            if (!Array.isArray(this.value) && typeof this.value === \\\"object\\\") {\\n                return JSON.stringify(this.value);\\n            } else {\\n                return this.value;\\n            }\\n        }\\n    },\\n    ty(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        this.setValue(split(data, target)[1] || \\\"\\\");\\n    },\\n    ty2(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        this.setValue(rsplit(data, target)[1] || \\\"\\\");\\n    },\\n    tz(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        this.setValue(split(data, target)[0] || \\\"\\\");\\n    },\\n    tz2(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        this.setValue(rsplit(data, target)[0] || \\\"\\\");\\n    },\\n    t() {\\n        let data = this.getValue(\\\"String\\\");\\n        this.setValue(data.replace(/<[^>]+>/g, \\\"\\\"));\\n    },\\n    tj(target) {\\n        this.setValue(this.getValue(\\\"String\\\") + target);\\n    },\\n    tzc(target) {\\n        let index = Number(target);\\n        this.setValue(this.getValue(\\\"String\\\").substring(0, index));\\n    },\\n    tsk() {\\n        this.setValue(this.getValue(\\\"String\\\").trim());\\n    },\\n    th(target) {\\n        let targetArr = split(target, \\\"##\\\");\\n        if (targetArr.length === 1) {\\n            return this.tz(target);\\n        }\\n        let reg = new RegExp(targetArr[0], \\\"g\\\");\\n        this.setValue(this.getValue(\\\"String\\\").replace(reg, targetArr[1]));\\n    },\\n    th2(target) {\\n        let targetArr = split(target, \\\"##\\\");\\n        if (targetArr.length === 1) {\\n            return this.tz(target);\\n        }\\n        this.setValue(this.getValue(\\\"String\\\").split(targetArr[0]).join(targetArr[1]));\\n    },\\n    /*tvar(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        this.xObj[target]=data;\\n        this.setValue(this.source);\\n    },\\n    trl(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        let y = this.xObj[target]||\\\"\\\";\\n        this.setValue(data+y);\\n    },\\n    tll(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        let y = this.xObj[target]||\\\"\\\";\\n        this.setValue(y+data);\\n    },*/\\n    tx() {\\n        let data = this.getValue(\\\"String\\\");\\n        if (data.indexOf(this.source) + this.source.length !== data.length) {\\n            this.setValue((this.xuArr.pop() || \\\"\\\") + data + this.source);\\n\\n        }\\n    },\\n    byt(target) {\\n        parseDomForArray(this.getValue(\\\"String\\\"), \\\"html&&*:contains(\\\" + target + \\\")\\\");\\n    },\\n    fg(target) {\\n        let reg = new RegExp(target);\\n        this.setValue(this.getValue(\\\"String\\\").split(reg));\\n    },\\n    en64() {\\n        this.setValue(base64Encode(this.getValue(\\\"String\\\")));\\n    },\\n    dn64() {\\n        this.setValue(base64Decode(this.getValue(\\\"String\\\")));\\n    },\\n    d(v) {\\n        this.setValue(decodeStr(this.getValue(\\\"String\\\"), v));\\n    },\\n    en(v) {\\n        this.setValue(encodeStr(this.getValue(\\\"String\\\"), v));\\n    },\\n    tot() {\\n        this.setValue(JSON.stringify(this.getValue(\\\"String\\\")));\\n    },\\n    /*toij() {\\n        this.setValue(JSON.parse(this.getValue(\\\"String\\\")));\\n    },*/\\n    type() {\\n        this.setValue(Object.prototype.toString.call(this.value));\\n    },\\n    i(target) {\\n        let data = this.value;\\n        let [s, e] = split(target, \\\",\\\");\\n        if (e === undefined) {\\n            s = Number(s);\\n            if (s >= 0 && s < data.length) {\\n                this.setValue(data[s]);\\n            } else if (s < 0 && data.length + s >= 0) {\\n                this.setValue(data[data.length + s]);\\n            }\\n        } else {\\n            this.setValue(data.slice(s, e));\\n        }\\n    },\\n    ij(target) {\\n        let data = this.getValue(\\\"Array\\\");\\n        data.push(target);\\n        this.setValue(data);\\n    },\\n    is(target) {\\n        let reg = new RegExp(target);\\n        let data = this.getValue(\\\"Array\\\");\\n        let newData = data.filter(item => !item.test(reg));\\n        this.setValue(newData);\\n    },\\n    il(target) {\\n        let reg = new RegExp(target);\\n        let data = this.getValue(\\\"Array\\\");\\n        let newData = data.filter(item => item.test(reg));\\n        this.setValue(newData);\\n    },\\n    it(target) {\\n        let data = this.getValue(\\\"Array\\\");\\n        this.setValue(data.join(target));\\n    },\\n    ix() {\\n        let data = this.getValue(\\\"Array\\\");\\n        this.xuArr = this.xuArr.concat(data);\\n        this.setValue(this.source);\\n    },\\n    dx() {\\n        let data = this.getValue(\\\"Array\\\");\\n        data.reverse();\\n    },\\n    get(target) {\\n        try {\\n            let data = this.getValue(\\\"String\\\");\\n            let doc = Jsoup.parseBodyFragment(data);\\n            let select = doc.select(target);\\n            select = select.toArray();\\n            let newdata = [];\\n            for (let item of select) {\\n                newdata.push(String(item.outerHtml()));\\n            }\\n            this.setValue(newdata);\\n        } catch (e) {\\n            this.setValue(\\\"\\\");\\n        }\\n\\n    },\\n    a(target) {\\n        try {\\n            let data = this.getValue(\\\"String\\\");\\n            let doc = Jsoup.parse(data);\\n            let attr = \\\"\\\";\\n            let body = doc.body().select(\\\"*\\\").eq(1);\\n            if (body.hasAttr(target)) {\\n                attr = String(body.attr(target));\\n            }\\n            this.setValue(attr);\\n        } catch (e) {\\n            this.setValue(\\\"\\\");\\n        }\\n    },\\n    json(target) {\\n        if (target != \\\"\\\") {\\n            try {\\n                let data = JSON.parse(this.getValue(\\\"String\\\"))[target];\\n                this.setValue(data === undefined ? \\\"\\\" : typeof data === \\\"string\\\" ? data : JSON.stringify(data));\\n            } catch (e) {\\n                throw new E2Error(\\\"无法将其转换为 JSON对象:\\\" + target + \\\"\\\\n\\\" + e.message, undefined, this.value, \\\"dataType\\\");\\n            }\\n        } else {\\n            try {\\n                let data = JSON.parse(this.getValue(\\\"String\\\"));\\n                if (Array.isArray(data)) {\\n                    this.setValue(data);\\n                } else {\\n                    this.setValue(\\\"\\\");\\n                }\\n            } catch (e) {\\n                this.setValue(\\\"\\\");\\n            }\\n        }\\n    },\\n    c(target) {\\n        let data = this.value;\\n        if (Array.isArray(data)) {\\n            data = data[0] === undefined ? \\\"\\\" : data[0];\\n        } else if (typeof data === \\\"object\\\") {\\n            data = JSON.stringify(data);\\n        }\\n        this.setValue(data + target + this.source);\\n    },\\n    ct(target) {\\n        let data = this.value;\\n        if (Array.isArray(data)) {\\n            data = data[0] === undefined ? \\\"\\\" : data[0];\\n        } else if (typeof data === \\\"object\\\") {\\n            data = JSON.stringify(data);\\n        }\\n        this.setValue(data + target);\\n    },\\n    or() {\\n        if (this.value !== \\\"\\\" && this.value !== undefined) {\\n            return true;\\n        } else {\\n            this.setValue(this.source);\\n            return false;\\n        }\\n    },\\n    xu() {\\n        let data = this.value;\\n        if (Array.isArray(data)) {\\n            for (let v of data) {\\n                this.xuArr.push(v);\\n            }\\n        } else if (typeof data === \\\"object\\\") {\\n            this.xuArr.push(JSON.stringify(data));\\n        } else {\\n            this.xuArr.push(data);\\n        }\\n        this.setValue(this.source);\\n    },\\n    st(target) {\\n        this.it(target);\\n    },\\n    z(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        let reg = new RegExp(target, \\\"g\\\");\\n        let newdata = data.match(reg) || [];\\n        this.setValue(newdata);\\n    },\\n    z2(target) {\\n        let data = this.getValue(\\\"String\\\");\\n        let reg = new RegExp(target);\\n        let newdata = data.match(reg) || [];\\n        if (newdata.length > 0) {\\n            newdata.splice(0, 1);\\n        }\\n        this.setValue(newdata);\\n    }\\n}\\n$.exports = E2Hiker;\"},{\"col_type\":\"movie_3\",\"name\":\"get e2Rex\",\"path\":\"getE2Rex\",\"rule\":\"js:\\n//const E2Hiker = $.require(\\\"hiker://page/E2ToHiker?rule=E2ToHiker\\\");\\n//const E2Hiker = $.require(\\\"hiker://page/E2ToHiker2?rule=E2ToHiker\\\");\\nconst E2Error = $.require(\\\"hiker://page/E2Error?rule=E2ToHiker\\\");\\nfunction getE2Rex(E2Hiker,t,r) {\\n    let arr = [];\\n    let funcName = \\\"\\\",\\n        funcParam = \\\"\\\";\\n    let status = 0;\\n    let tran = false;\\n    for (let i = 0; i < r.length; i++) {\\n        let k = r[i],\\n            s = i > 0 ? r[i - 1] : \\\"\\\",\\n            x = i + 1 < r.length ? r[i + 1] : \\\"\\\";\\n        if (k === \\\".\\\" && status === 0) {\\n            status = 1;\\n            continue;\\n        } else if (status === 1 && k !== \\\"(\\\") {\\n            funcName += k;\\n            continue;\\n        } else if (status === 1 && k === \\\"(\\\") {\\n            if (k + r[i + 1] + r[i + 2] === \\\"(@@\\\") {\\n                i++, i++;\\n                status = 3;\\n            } else {\\n                status = 2;\\n            }\\n            continue;\\n        } else if (status === 3 && k + r[i + 1] + r[i + 2] !== \\\"@@)\\\") {\\n            funcParam += k;\\n            continue;\\n        } else if (status === 3 && k + r[i + 1] + r[i + 2] === \\\"@@)\\\") {\\n            i++, i++;\\n            arr.push([funcName, funcParam]);\\n            status = 0, funcName = \\\"\\\", funcParam = \\\"\\\";\\n            continue;\\n        } else if (status === 2 && tran) {\\n            tran = false;\\n            funcParam += k;\\n            continue;\\n        } else if (status === 2 && k === \\\"\\\\\\\\\\\") {\\n            tran = true;\\n            funcParam += k;\\n            continue;\\n        } else if (status === 2 && k !== \\\")\\\" && k !== \\\"\\\\\\\\\\\") {\\n            funcParam += k;\\n            continue;\\n        } else if (status === 2 && k === \\\")\\\") {\\n            if ([\\\"z\\\", \\\"z2\\\", \\\"th\\\", \\\"fg\\\"].includes(funcName)) {\\n                funcParam = funcParam.replace(/\\\\\\\\\\\\)/g, \\\")\\\").replace(/\\\\\\\\\\\\(/g, \\\"(\\\");\\n            }\\n            arr.push([funcName, funcParam]);\\n            status = 0, funcName = \\\"\\\", funcParam = \\\"\\\";\\n            continue;\\n        } else {\\n            throw new E2Error(\\\"未发现函数起始符[.]:)\\\",r,t);\\n        }\\n    }\\n    if (status !== 0) {\\n        throw new E2Error(\\\"找不到结束符[)]\\\",r,t);\\n    }\\n    let e2Hiker = new E2Hiker(t);\\n    var target;\\n    try {\\n        for (target of arr) {\\n            let y = e2Hiker[target[0]](target[1]);\\n            if (target[0] === \\\"or\\\" && y === true) {\\n                break;\\n            }\\n        }\\n    } catch (e) {\\n        if(e.type===\\\"dataType\\\"){\\n            e.rule=target[0];\\n            throw e;\\n        }else if(/Cannot find function (.*?) /.test(e.message)){\\n            throw new E2Error(\\\"未知的函数\\\"+RegExp.$1,r,t);\\n        }else{\\n            throw e;\\n        }\\n    }\\n    return e2Hiker.valueOf();\\n}\\n\\n$.exports = getE2Rex;\"},{\"col_type\":\"movie_3\",\"name\":\"E2Rex2\",\"path\":\"E2Rex2\",\"rule\":\"js:\\nconst getE2Rex = $.require(\\\"hiker://page/getE2Rex?rule=E2ToHiker\\\");\\nconst E2Hiker = $.require(\\\"hiker://page/E2ToHiker2?rule=E2ToHiker\\\")\\nfunction e2Rex(t,r){\\n    return getE2Rex(E2Hiker,t,r);\\n}\\n$.exports = e2Rex;\"},{\"col_type\":\"movie_3\",\"name\":\"完整查看\",\"path\":\"ViewText\",\"rule\":\"js:\\nvar {title,text}=MY_PARAMS;\\nsetPageTitle(\\\"查看完整:\\\" + title);\\nlet mark = getVar(\\\"e2.Mark\\\");\\n\\nvar d = [];\\nd.push({\\n    title: \\\"转为源文本\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(text => {\\n        putVar(\\\"e2.Source\\\", text);\\n        back();\\n        return \\\"hiker://empty\\\";\\n    }, text),\\n    col_type: \\\"text_2\\\"\\n}, {\\n    title: \\\"复制内容\\\",\\n    url: \\\"copy://\\\" + text,\\n    col_type: \\\"text_2\\\"\\n});\\n/*\\nif ((typeof getAppVersion === \\\"function\\\") && (getAppVersion() >= 1863)) {\\n    addListener('onClose', 'putVar(\\\"e2.Mark\\\",\\\"\\\")');\\n}\\nd.push({\\n    title: \\\"标记\\\",\\n    url: \\\"putVar('e2.Mark',input);refreshPage(false)\\\",\\n    col_type: \\\"input\\\",\\n    desc: \\\"输入需要标红的字符\\\",\\n    extra: {\\n        defaultValue: mark\\n    }\\n});\\n\\n// 字符过滤器\\nconst matchList  = {\\n  \\\"<\\\":\\\"&lt;\\\",\\n  \\\">\\\": \\\"&gt;\\\",\\n  \\\"&\\\": \\\"&amp;\\\",\\n  '\\\"': \\\"&quot;\\\",\\n  \\\"'\\\": \\\"acute;\\\",\\n  \\\" \\\": \\\"&nbsp;\\\",\\n  \\\"\\\\n\\\":\\\"<br>\\\"\\n}\\n// 字符过滤器\\nfunction htmlEscape(text){\\n  let regStr = '(' + Object.keys(matchList).toString() + ')'\\n  regStr = regStr.replace(/,/g, ')|(')  \\n  const regExp = new RegExp(regStr, 'g')\\n  return text.replace(regExp, match => matchList[match])\\n}\\n\\ntext=htmlEscape(text);\\nif(mark!==\\\"\\\"){\\n    mark=htmlEscape(mark);\\n    let markz=new RegExp(mark,\\\"g\\\");\\n    text=text.replace(markz,t=>\\\"<font color='red'>\\\"+t+\\\"</font>\\\");\\n}\\n*/\\nd.push({\\n    col_type: \\\"line_blank\\\"\\n}, {\\n    title: text,\\n    col_type: \\\"long_text\\\"\\n}, {\\n    col_type: \\\"line_blank\\\"\\n});\\nsetResult(d);\"}]","proxy":"","icon":""}