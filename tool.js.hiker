{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"图片解密","path":"toInputStream.js","rule":"/* @mode  什么类型的加解密\n *  例如  AES/CBC/PKCS7Padding\n *  @type  key iv 类型\n *  例如  UTF8 Base64 Hex\n *  @enData  去除多余部分\n *  默认去除  data:image/jpeg;base64,\n *  一般调用  true false\n *  特殊调用一  custom:/9j/\n *  自定义去除\n *  特殊调用二  public:/9j/\n *  这是没有相同多余的部分，先去掉多余的部分，再加回来/9j/\n *  @enText  textData类型\n *  例如  UTF8 Base64 Hex\n */\n$.exports = (mode, type, str_key, str_iv, enData, enText) => {\n    const CryptoUtil = $.require(\"hiker://assets/crypto-java.js\");\n    const functionUtil = $.require(\"functionName.js?rule=tool.js\");\n    let keyData = functionUtil.parseStr(str_key, type);\n    let textData = CryptoUtil.Data.parseInputStream(input);\n    if (enText) textData = functionUtil.parseStr(textData, enText);\n    let encryptedData = str_iv ? {\n        mode: mode,\n        iv: functionUtil.parseStr(str_iv, type)\n    } : {\n        mode: mode\n    };\n    let encrypted = CryptoUtil.AES.decrypt(textData, keyData, encryptedData);\n    if (enData) {\n        encrypted = functionUtil.toStr(encrypted, \"Base64\");\n        if (String(enData).startsWith(\"public:\")) {\n            splitStr = enData.split(\":\")[1];\n            base64Text = encrypted.toString().split(splitStr)[1];\n            base64Text = splitStr + base64Text;\n        } else if (String(enData).startsWith(\"custom:\")) {\n            splitStr = enData.split(\":\")[1];\n            base64Text = encrypted.toString().split(splitStr)[1];\n        } else {\n            base64Text = encrypted.toString().split(\",\")[1];\n        };\n        encrypted = functionUtil.parseStr(base64Text, \"Base64\");\n    };\n    return encrypted.toInputStream();\n};"},{"col_type":"movie_3","name":"文本加解密","path":"javacryptText.js","rule":"/* @textData  文本\n *  @mode  什么类型的加解密\n *  例如  AES/CBC/PKCS7Padding\n *  @type  key iv 类型\n *  例如  UTF8 Base64 Hex\n *  @enText  textData类型\n *  例如  UTF8 Base64 Hex\n *  @crypted  加密或解密\n *  调用  true false\n *  @textType  最终文本类型\n *  例如  UTF8 Base64 Hex\n */\n$.exports = (textData, mode, type, str_key, str_iv, enText, crypted, textType) => {\n    const CryptoUtil = $.require(\"hiker://assets/crypto-java.js\");\n    const functionUtil = $.require(\"functionName.js?rule=tool.js\");\n    let keyData = functionUtil.parseStr(str_key, type);\n    if (enText) textData = functionUtil.parseStr(textData, enText);\n    let encryptedData = str_iv ? {\n        mode: mode,\n        iv: functionUtil.parseStr(str_iv, type)\n    } : {\n        mode: mode\n    };\n    if (crypted)\n        encrypted = CryptoUtil.AES.encrypt(textData, keyData, encryptedData);\n    else\n        encrypted = CryptoUtil.AES.decrypt(textData, keyData, encryptedData);\n    return functionUtil.toStr(encrypted, textType);\n};"},{"col_type":"movie_3","name":"公用函数","path":"functionName.js","rule":"const CryptoUtil = $.require(\"hiker://assets/crypto-java.js\");\n$.exports = {\n    parseStr: (str, textType) => {\n        switch (textType) {\n            case \"Hex\":\n                return CryptoUtil.Data.parseHex(str);\n                break;\n            case \"Base64\":\n                return CryptoUtil.Data.parseBase64(str);\n                break;\n            case \"UTF8\":\n            default:\n                return CryptoUtil.Data.parseUTF8(str);\n                break;\n        };\n    },\n    toStr: (encrypted, textType) => {\n        switch (textType) {\n            case \"Hex\":\n                return encrypted.toHex().toUpperCase();\n                break;\n            case \"Base64\":\n                return encrypted.toBase64(_base64.NO_WRAP);\n                break;\n            case \"UTF8\":\n            default:\n                return encrypted.toString();\n                break;\n        };\n    }\n};"},{"col_type":"movie_3","name":"base64图解","path":"base64Image.js","rule":"js:\n/*  @enData  去除多余部分\n *  默认去除  data:image/jpeg;base64,\n *  一般调用  true false\n *  特殊调用一  custom:/9j/\n *  自定义去除\n *  特殊调用二  public:/9j/\n *  这是没有相同多余的部分，先去掉多余的部分，再加回来/9j/\n */\n$.exports = (enData) => {\n    const CryptoUtil = $.require(\"hiker://assets/crypto-java.js\");\n    const functionUtil = $.require(\"functionName.js?rule=tool.js\");\n    let textData = CryptoUtil.Data.parseInputStream(input);\n    if (enData) {\n        if (String(enData).startsWith(\"public:\")) {\n            splitStr = enData.split(\":\")[1];\n            textData = textData.toString().split(splitStr)[1];\n            textData = splitStr + textData;\n        } else if (String(enData).startsWith(\"custom:\")) {\n            splitStr = enData.split(\":\")[1];\n            textData = textData.toString().split(splitStr)[1];\n        } else {\n            textData = textData.toString().split(\",\")[1];\n        };\n    };\n    textData = functionUtil.parseStr(textData, \"Base64\");\n    return textData.toInputStream();\n};"}],"title":"tool.js","author":"旧巷陌人","version":2,"type":"video","url":"hiker://empty##","col_type":"rich_text","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nsetResult([{\n    title: '<h1 style=\"text-align: center;\"><big><font color=\"#ff461f\">这只是一个调用工具</font></big><br><small><font color=\"#2e4e7e\">子页面有方法</font></small></h1>'\n}]);\n\n/*\n““——↓调用文档↓——””\n\n快捷解密模板，建议加入代码块 \n2024.2.19 \n1、添加常用base64图解 \n2、优化@enData方法 \n\n文本加解密\n\n@textData 文本 \n@mode 什么类型的加解密 \n例如 AES/CBC/PKCS7Padding \n@type key iv 类型 \n例如 UTF8 Base64 Hex \n@enText textData类型 \n例如 UTF8 Base64 Hex \n@crypted 加密或解密 \n调用 true false \n@textType 最终文本类型 \n例如 UTF8 Base64 Hex \n\n$.require(\"javacryptText.js?rule=tool.js\")(textData, mode, type, str_key, str_iv, enText, crypted, textType); \n\n图片解密\n\n@mode 什么类型的加解密 \n例如 AES/CBC/PKCS7Padding \n@type key iv 类型 \n例如 UTF8 Base64 Hex \n@enData 去除多余部分 \n默认去除 data:image/jpeg;base64, \n一般调用 true false \n特殊调用一 custom:/9j/ \n自定义去除 \n特殊调用二 public:/9j/ \n这是没有相同多余的部分，先去掉多余的部分，再加回来/9j/ \n@enText textData类型 \n例如 UTF8 Base64 Hex \n\n$().image(() => { return $.require(\"toInputStream.js?rule=tool.js\")(mode, type, str_key, str_iv, enData, enText); }); \n\nBase64图解\n\n@enData 去除多余部分 \n默认去除 data:image/jpeg;base64, \n一般调用 true false \n特殊调用一 custom:/9j/ \n自定义去除 \n特殊调用二 public:/9j/ \n这是没有相同多余的部分，先去掉多余的部分，再加回来/9j/ \n\n$().image(() => { return $.require(\"base64Image.js?rule=tool.js\")(true); });\n*/","searchFind":"","search_url":"","group":"⑧工具","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"图片解密\",\"path\":\"toInputStream.js\",\"rule\":\"/* @mode  什么类型的加解密\\n *  例如  AES/CBC/PKCS7Padding\\n *  @type  key iv 类型\\n *  例如  UTF8 Base64 Hex\\n *  @enData  去除多余部分\\n *  默认去除  data:image/jpeg;base64,\\n *  一般调用  true false\\n *  特殊调用一  custom:/9j/\\n *  自定义去除\\n *  特殊调用二  public:/9j/\\n *  这是没有相同多余的部分，先去掉多余的部分，再加回来/9j/\\n *  @enText  textData类型\\n *  例如  UTF8 Base64 Hex\\n */\\n$.exports = (mode, type, str_key, str_iv, enData, enText) => {\\n    const CryptoUtil = $.require(\\\"hiker://assets/crypto-java.js\\\");\\n    const functionUtil = $.require(\\\"functionName.js?rule=tool.js\\\");\\n    let keyData = functionUtil.parseStr(str_key, type);\\n    let textData = CryptoUtil.Data.parseInputStream(input);\\n    if (enText) textData = functionUtil.parseStr(textData, enText);\\n    let encryptedData = str_iv ? {\\n        mode: mode,\\n        iv: functionUtil.parseStr(str_iv, type)\\n    } : {\\n        mode: mode\\n    };\\n    let encrypted = CryptoUtil.AES.decrypt(textData, keyData, encryptedData);\\n    if (enData) {\\n        encrypted = functionUtil.toStr(encrypted, \\\"Base64\\\");\\n        if (String(enData).startsWith(\\\"public:\\\")) {\\n            splitStr = enData.split(\\\":\\\")[1];\\n            base64Text = encrypted.toString().split(splitStr)[1];\\n            base64Text = splitStr + base64Text;\\n        } else if (String(enData).startsWith(\\\"custom:\\\")) {\\n            splitStr = enData.split(\\\":\\\")[1];\\n            base64Text = encrypted.toString().split(splitStr)[1];\\n        } else {\\n            base64Text = encrypted.toString().split(\\\",\\\")[1];\\n        };\\n        encrypted = functionUtil.parseStr(base64Text, \\\"Base64\\\");\\n    };\\n    return encrypted.toInputStream();\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"文本加解密\",\"path\":\"javacryptText.js\",\"rule\":\"/* @textData  文本\\n *  @mode  什么类型的加解密\\n *  例如  AES/CBC/PKCS7Padding\\n *  @type  key iv 类型\\n *  例如  UTF8 Base64 Hex\\n *  @enText  textData类型\\n *  例如  UTF8 Base64 Hex\\n *  @crypted  加密或解密\\n *  调用  true false\\n *  @textType  最终文本类型\\n *  例如  UTF8 Base64 Hex\\n */\\n$.exports = (textData, mode, type, str_key, str_iv, enText, crypted, textType) => {\\n    const CryptoUtil = $.require(\\\"hiker://assets/crypto-java.js\\\");\\n    const functionUtil = $.require(\\\"functionName.js?rule=tool.js\\\");\\n    let keyData = functionUtil.parseStr(str_key, type);\\n    if (enText) textData = functionUtil.parseStr(textData, enText);\\n    let encryptedData = str_iv ? {\\n        mode: mode,\\n        iv: functionUtil.parseStr(str_iv, type)\\n    } : {\\n        mode: mode\\n    };\\n    if (crypted)\\n        encrypted = CryptoUtil.AES.encrypt(textData, keyData, encryptedData);\\n    else\\n        encrypted = CryptoUtil.AES.decrypt(textData, keyData, encryptedData);\\n    return functionUtil.toStr(encrypted, textType);\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"公用函数\",\"path\":\"functionName.js\",\"rule\":\"const CryptoUtil = $.require(\\\"hiker://assets/crypto-java.js\\\");\\n$.exports = {\\n    parseStr: (str, textType) => {\\n        switch (textType) {\\n            case \\\"Hex\\\":\\n                return CryptoUtil.Data.parseHex(str);\\n                break;\\n            case \\\"Base64\\\":\\n                return CryptoUtil.Data.parseBase64(str);\\n                break;\\n            case \\\"UTF8\\\":\\n            default:\\n                return CryptoUtil.Data.parseUTF8(str);\\n                break;\\n        };\\n    },\\n    toStr: (encrypted, textType) => {\\n        switch (textType) {\\n            case \\\"Hex\\\":\\n                return encrypted.toHex().toUpperCase();\\n                break;\\n            case \\\"Base64\\\":\\n                return encrypted.toBase64(_base64.NO_WRAP);\\n                break;\\n            case \\\"UTF8\\\":\\n            default:\\n                return encrypted.toString();\\n                break;\\n        };\\n    }\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"base64图解\",\"path\":\"base64Image.js\",\"rule\":\"js:\\n/*  @enData  去除多余部分\\n *  默认去除  data:image/jpeg;base64,\\n *  一般调用  true false\\n *  特殊调用一  custom:/9j/\\n *  自定义去除\\n *  特殊调用二  public:/9j/\\n *  这是没有相同多余的部分，先去掉多余的部分，再加回来/9j/\\n */\\n$.exports = (enData) => {\\n    const CryptoUtil = $.require(\\\"hiker://assets/crypto-java.js\\\");\\n    const functionUtil = $.require(\\\"functionName.js?rule=tool.js\\\");\\n    let textData = CryptoUtil.Data.parseInputStream(input);\\n    if (enData) {\\n        if (String(enData).startsWith(\\\"public:\\\")) {\\n            splitStr = enData.split(\\\":\\\")[1];\\n            textData = textData.toString().split(splitStr)[1];\\n            textData = splitStr + textData;\\n        } else if (String(enData).startsWith(\\\"custom:\\\")) {\\n            splitStr = enData.split(\\\":\\\")[1];\\n            textData = textData.toString().split(splitStr)[1];\\n        } else {\\n            textData = textData.toString().split(\\\",\\\")[1];\\n        };\\n    };\\n    textData = functionUtil.parseStr(textData, \\\"Base64\\\");\\n    return textData.toInputStream();\\n};\"}]","proxy":"","icon":""}