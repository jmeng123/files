{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"夸克列表API","path":"QuarkShareApi","rule":"js:\n//@author LoyDgIk\nlet httpRequest = $.require(\"httpRequest\");\nconst baseUrl = \"https://pan.quark.cn\";\n\nfunction QuarkShareApi(shareId, sharePwd) {\n    this.shareId = shareId;\n    this.sharePwd = sharePwd;\n    this.refreshCallBack = (() => void 0);\n    //this.shareToken = shareToken || this.getShareToken();\n}\nObject.assign(QuarkShareApi.prototype, {\n    setRefresh(refreshCallBack) {\n        this.refreshCallBack = refreshCallBack;\n        return this;\n    },\n    setToken(shareToken) {\n        this.shareToken = shareToken;\n        return this;\n    },\n    requestHttp(api) {\n        return new httpRequest(baseUrl+api).success((body) => {\n            if (body.status !== 200) {\n                throw new Error(body.message);\n            }\n            return body;\n        });\n    },\n    getToken() {\n        return this.shareToken || this.getShareToken();\n    },\n\n    getShareToken() {\n        let result = this.requestHttp(\"/1/clouddrive/share/sharepage/token\").body({\n            \"pwd_id\": this.shareId,\n            \"passcode\": this.sharePwd,\n        }).bodyToString(true).setStartRequestFunc(post).start(true);\n        this.shareToken = result.data.stoken;\n        this.refreshCallBack(result.data.stoken, this);\n        return this.shareToken;\n    },\n    getListFile(fileId, page, orderBy) {\n        let result = this.requestHttp(\"/1/clouddrive/share/sharepage/detail?pr=ucpro&fr=pc\").buildUrl({\n            pwd_id: this.shareId || \"\",\n            stoken: encodeURIComponent(this.getToken() || \"\"),\n            pdir_fid: fileId || \"\",\n            force: 0,\n            _page: page,\n            _size: 50,\n            _fetch_banner: 1,\n            _fetch_share: 1,\n            _fetch_total: 1,\n            _sort: \"file_type:asc,\" + orderBy\n        }).errorWithRetry((err, res, http) => {\n            if (JSON.parse(res.body).message.includes('stoken')) {\n                http.mergeHeadAndBody({\n                    buildUrl: {\n                        stoken: encodeURIComponent(this.getShareToken()||\"\")\n                    }\n                });\n                return true;\n            }\n        }).start(true);\n        return result;\n    }\n});\n$.exports = QuarkShareApi;"},{"col_type":"movie_3","name":"httpRequest","path":"httpRequest","rule":"function httpRequest(url, options) {\n    this.retryCount = 0;\n    this.url = url;\n    this.options = Object.assign({}, options, {\n        withHeaders: true\n    });\n    this.errorCallback = (err, res) => {throw err};\n    this.errorCallbackWithRetry = (err, res, tryRestart) => false;\n    this.successCallback = (body, statusCode, headers) => body;\n    this.errorTypeCallback = (err, res) => err;\n    this.startRequest = fetch;\n    this._bodyToString = false;\n    this.buildParam = void(0);\n}\n\nObject.assign(httpRequest.prototype, {\n    bodyToString(flag) {\n        this._bodyToString = !!flag;\n        return this;\n    },\n    body(body) {\n        this.options.body = body || void 0;\n        return this;\n    },\n    buildUrl(buildParam) {\n        this.buildParam = buildParam || {};\n        return this;\n    },\n    setStartRequestFunc(func) {\n        this.startRequest = func;\n        return this;\n    },\n    headers(headers) {\n        this.options.headers = headers || void 0;\n        return this;\n    },\n    success(successCallback) {\n        if (typeof successCallback !== \"function\") return this;\n        this.successCallback = successCallback;\n        return this;\n    },\n    error(errorCallback) {\n        if (typeof errorCallback !== \"function\") return this;\n        this.errorCallback = errorCallback;\n        return this;\n    },\n    errorType(errorTypeCallback) {\n        if (typeof errorTypeCallback !== \"function\") return this;\n        this.errorTypeCallback = errorTypeCallback;\n        return this;\n    },\n    errorWithRetry(retryCount, errorCallbackWithRetry) {\n        if (typeof retryCount === \"function\" && typeof errorCallbackWithRetry === \"undefined\") {\n            errorCallbackWithRetry = retryCount;\n            retryCount = 1;\n        }\n        if (typeof errorCallbackWithRetry !== \"function\") {\n            return this;\n        }\n        this.retryCount = Number(retryCount);\n        this.errorCallbackWithRetry = errorCallbackWithRetry;\n        return this;\n    },\n    start(toJson) {\n        let options = Object.assign({}, this.options);\n        if (typeof options.body === \"object\" && this._bodyToString) {\n            options.body = JSON.stringify(options.body);\n        }\n        var res = JSON.parse(this.startRequest(this.buildParam?buildUrl(this.url, this.buildParam):this.url, options));\n        try {\n            if (res.statusCode >= 200 && res.statusCode <= 300) {\n                let body = res.body;\n                if (toJson) {\n                    body = JSON.parse(body);\n                }\n                return this.successCallback(body, res);\n            } else {\n                throw new Error(String(res.statusCode));\n            }\n        } catch (err) {\n            try {\n                err = this.errorTypeCallback(err, res);\n            } catch (e) {\n\n            }\n            if (this.retryCount) {\n                let tryResult = this.errorCallbackWithRetry(err, res, this);\n                if (tryResult) {\n                    this.retryCount--;\n                    return this.start(toJson);\n                } else {\n                    this.retryCount = 0;\n                    return this.errorCallback(err, res);\n                }\n            } else {\n                return this.errorCallback(err, res);\n            }\n        }\n    },\n    setOptions(options) {\n        this.options = Object.assign({}, options, {\n            withHeaders: true\n        });\n        return this;\n    },\n    mergeHeadAndBody(options) {\n        options = options || {};\n        Object.assign(this.options.headers||{}, options.headers);\n        if (typeof this.options.body === \"object\" && typeof options.body === \"object\") {\n            Object.assign(this.options.body||{}, options.body);\n        }\n        if (typeof options.buildUrl === \"object\") {\n            Object.assign(this.buildParam||{}, options.buildUrl);\n        }\n        return this;\n    }\n});\n\nObject.assign(httpRequest, {\n    fetch(url, options) {\n        return new httpRequest(url, options);\n    },\n    post(url, options) {\n        return new httpRequest(url, options).setStartRequestFunc(post);\n    },\n    request(url, options) {\n        return new httpRequest(url, options).setStartRequestFunc(request);\n    },\n    postRequest(url, options) {\n        return new httpRequest(url, options).setStartRequestFunc(postRequest);\n    },\n    fetchCookie(url, options) {\n        return new httpRequest(url, options).setStartRequestFunc(fetchCookie);\n    }\n});\n$.exports = httpRequest;"},{"col_type":"movie_3","name":"夸克列表","path":"quarkList","rule":"js:\nlet d = [];\n\naddListener(\"onClose\", () => clearMyVar(\"playUrlCache\"));\naddListener(\"onRefresh\", () => clearMyVar(\"playUrlCache\"));\nlet soUrl = decodeURIComponent(getParam(\"realurl\", \"\"));\nlet realurl = soUrl.split(\"?\")[0];\nlet urlData = realurl.split(\"/\");\n\nlet shareId = MY_PARAMS.shareId || urlData[4].replace(\"#\", \"\");\nlet sharePwd = getParam(\"sharePwd\", MY_PARAMS.sharePwd || getParam(\"passcode\", \"\", soUrl) || \"\");\nlet shareToken = getParam(\"shareToken\", MY_PARAMS.shareToken || \"\");\n\nlet fileId = MY_PARAMS.fileId;\n\nlet sort = {\n    \"名称正序\": \"file_name:asc\",\n    \"名称倒序\": \"file_name:desc\",\n    \"时间正序\": \"updated_at:asc\",\n    \"时间倒序\": \"updated_at:desc\"\n};\nlet styles = [\"text_1\", \"avatar\"];\n\nlet sortValue = sort[getItem(\"sortKey\", \"名称正序\")];\nlet style = getItem(\"style\", styles[0]);\nif (MY_PAGE == 1) {\n    d.push({\n        title: style,\n        url: $(styles, 1, '请选择').select(() => {\n            setItem('style', input);\n            refreshPage();\n        }),\n        pic_url: \"https://hikerfans.com/img/ali_icon.svg\",\n        col_type: \"icon_small_4\"\n    });\n    d.push({\n        title: getItem(\"sortKey\", \"名称正序\"),\n        url: $(Object.keys(sort), 1, '请选择').select(() => {\n            setItem(\"sortKey\", input)\n            refreshPage();\n        }),\n        pic_url: \"https://hikerfans.com/img/ali_sort.svg\",\n        col_type: \"icon_small_4\"\n    });\n    d.push({\n        title: getItem(\"quark_playMode\", \"转码\"),\n        url: $([\"转码\", \"原画\"], 2, \"播放模式\").select(() => {\n            setItem(\"quark_playMode\", input);\n            refreshPage();\n            return \"toast://切换成功\";\n        }),\n        col_type: \"icon_small_4\",\n        pic_url: \"https://hikerfans.com/img/ali_play.svg\",\n    });\n    d.push({\n        title: \"功能\",\n        url: $([\"跳转夸克APP\", \"复制分享链接\", \"个人账号管理\", \"原画下载线程\"], 2).select((shareId, sharePwd) => {\n            if (input === \"跳转夸克APP\") {\n                return \"qklink://www.uc.cn/b20b84fd735a8dd3f7541129bacc4e9a?action=open_url&url=https://pan.quark.cn/s/\" + shareId;\n            } else if (input === \"个人账号管理\") {\n                return $.require(\"account\");\n            } else if (input === \"原画下载线程\") {\n                return $(getItem(\"speedThread\", \"10\"), \"请输入3-32之间的整数\").input(() => {\n                    let speedThread = parseInt(input);\n                    if (speedThread < 3 || speedThread > 32) {\n                        return \"toast://设置不合法\";\n                    }\n                    setItem(\"speedThread\", String(speedThread));\n                    return \"toast://设置成功\";\n                });\n            } else if (input === \"复制分享链接\") {\n                return \"copy://\" + buildUrl(\"https://pan.quark.cn/s/\" + shareId, {\n                    passcode: sharePwd\n                });\n            }\n        }, shareId, sharePwd),\n        col_type: \"icon_small_4\",\n        pic_url: \"https://hikerfans.com/img/ali_fileinto.svg\",\n    });\n    d.push({\n        col_type: 'line_blank'\n    });\n}\n\n\nlet QuarkShareApi = $.require(\"QuarkShareApi\");\nlet quarkShareApi = new QuarkShareApi(shareId, sharePwd).setToken(shareToken).setRefresh((shareToken) => {\n    MY_PARAMS.shareToken = shareToken;\n    setPageParams(MY_PARAMS);\n});\n\nfunction formatSize(size) {\n    if (!size) {\n        return '';\n    }\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    let i = 0;\n    while (size >= 1024) {\n        size /= 1024;\n        i++;\n    }\n    size = i ? Number(size.toFixed(2)) : size;\n    return `${size} ${units[i]}`;\n}\n\nlet subExts = [\"vtt\", \"srt\", \"ass\"];\nlet titleHead = {\n    video: \"🎬\",\n    audio: \"🎵\",\n    doc: \"📑\",\n    image: \"🖼\",\n    archive: \"📦\",\n    \"default\": \"❓\"\n};\n\nfunction getHead(type, ext) {\n    let head = titleHead[type];\n    /*if (subExts.includes(ext)) {\n        head = \"🕸\";\n    }*/\n    return head || \"❓\";\n}\ntry {\n    var res = quarkShareApi.getListFile(fileId, MY_PAGE, sortValue);\n    //设置标题\n    setPageTitle(res.data.share.title);\n    var list = res.data.list || [];\n    if (list.length === 0 && !fileId) {\n        res = quarkShareApi.getListFile(res.data.share.first_fid, MY_PAGE, sortValue);\n        setPageTitle(res.data.share.title);\n        var list = res.data.list || [];\n    }\n    list.forEach(item => {\n        //判断是否文件夹\n        if (item.dir) {\n            d.push({\n                title: \"📂\" + item.file_name,\n                desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + item.include_items + '项  ',\n                pic_url: \"https://hikerfans.com/tubiao/messy/27.svg\",\n                url: \"hiker://page/quarkList?page=fypage\",\n                col_type: style,\n                extra: {\n                    shareId,\n                    sharePwd,\n                    shareToken: quarkShareApi.getToken(),\n                    fileId: item.fid,\n                    inheritTitle: false\n                }\n            });\n        } else {\n            d.push({\n                title: getHead(item.obj_category) + item.file_name,\n                desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + formatSize(item.size),\n                pic_url: item.thumbnail,\n                url: $().lazyRule((fid, fid_token, pwd_id, stoken, category) => {\n                    let playUrlCache = storage0.getMyVar(\"playUrlCache\", {});\n                    if (playUrlCache[fid]) {\n                        return playUrlCache[fid];\n                    } else {\n                        let url = $.require(\"play\").getPlayUrl(fid, fid_token, pwd_id, stoken, category);\n                        playUrlCache[fid] = url;\n                        storage0.putMyVar(\"playUrlCache\", playUrlCache);\n                        return url;\n                    }\n                }, item.fid, item.share_fid_token, shareId, quarkShareApi.getToken(), item.obj_category),\n                col_type: style,\n                extra: {\n                    id: item.fid,\n                    inheritTitle: false,\n                    cls: 'playlist ' + item.obj_category\n                }\n            })\n        }\n        d.push({\n            col_type: 'line'\n        });\n    });\n} catch (e) {\n    d.push({\n        title: e.message,\n        url: 'hiker://empty',\n        col_type: 'text_center_1',\n        extra: {\n            lineVisible: false\n        }\n    });\n    if (e.message.includes(\"提取码\")) {\n        d.push({\n            title: \"输入提取码\",\n            url: $().input((MY_PARAMS) => {\n                setPageParams(Object.assign({}, MY_PARAMS, {\n                    sharePwd: input\n                }));\n                refreshPage();\n            }, MY_PARAMS),\n            col_type: \"text_center_1\"\n        });\n    }\n}\nsetResult(d);"},{"col_type":"movie_3","name":"play","path":"play","rule":"js:\nconst cookie = getItem(\"quarkCookie\", \"\");\nlet httpRequest = $.require(\"httpRequest\");\n\nfunction CookieManage(cookie) {\n    this.cookie = {};\n    this.add(cookie);\n}\nObject.assign(CookieManage.prototype, {\n    add(cookie) {\n        let cookies = [];\n        if (typeof cookie === \"string\") {\n            cookies = cookie.split(\";\");\n        } else if (Array.isArray(cookie)) {\n            cookies = cookie;\n        }\n        cookies.forEach(v => {\n            v = v.split(\"=\");\n            if (v.length < 2) return;\n            this.cookie[v[0].trim()] = v[1].trim();\n        });\n    },\n    get() {\n        return Object.entries(this.cookie).map(v => v[0] + \"=\" + v[1]).join(\";\");\n    }\n});\nconst cookieManage = new CookieManage(cookie);\n\nfunction waitSleep(time) {\n    java.lang.Thread.sleep(time || 600);\n}\n\nfunction requestHttp(url) {\n    return new httpRequest(url)\n        .success((body, res) => {\n            if (body.status !== 200) {\n                throw new Error(body.message);\n            }\n            cookieManage.add(res.headers[\"set-cookie\"]);\n            return body;\n        })\n        .errorType((err, res) => {\n            return new Error(JSON.parse(res.body).message);\n        })\n        .bodyToString(true)\n        .headers({\n            cookie: cookieManage.get(),\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) quark-cloud-drive/2.5.20 Chrome/100.0.4896.160 Electron/18.3.5.4-b478491100 Safari/537.36 Channel/pckk_other_ch\",\n            \"referer\": \"https://drive.quark.cn/\"\n        });\n}\n\nfunction getDriveInfo() {\n    return requestHttp(\"https://drive.quark.cn/1/clouddrive/share/sharepage/dir?pr=ucpro&fr=pc&aver=1\").start(true);\n}\n\nfunction createSaveTask(fid, fid_token, pwd_id, stoken) {\n    let driveInfo = getDriveInfo();\n    return requestHttp(\"https://drive.quark.cn/1/clouddrive/share/sharepage/save?pr=ucpro&fr=pc\").setStartRequestFunc(post).body({\n        \"fid_list\": [\n            fid\n        ],\n        \"fid_token_list\": [\n            fid_token\n        ],\n        \"to_pdir_fid\": driveInfo.data.dir.fid,\n        \"pwd_id\": pwd_id,\n        \"stoken\": stoken,\n        \"pdir_fid\": driveInfo.data.dir.pdir_fid\n    }).start(true);\n}\n\nfunction createDeleteTask(fid) {\n    let driveInfo = getDriveInfo();\n    return requestHttp(\"https://drive.quark.cn/1/clouddrive/file/delete?pr=ucpro&fr=pc\").setStartRequestFunc(post).body({\n        \"action_type\": 2,\n        \"filelist\": [\n            fid\n        ],\n        \"exclude_fids\": []\n    }).start(true);\n}\n\nfunction task(task_id, retry_index) {\n    return requestHttp(\"https://drive.quark.cn/1/clouddrive/task\").buildUrl({\n        pr: \"ucpro\",\n        fr: \"pc\",\n        task_id: task_id,\n        retry_index: retry_index\n    }).start(true);\n}\n\nfunction queryTask(task_id) {\n    for (let i = 0; i < 9; i++) {\n        try {\n            let res = task(task_id, i + \"\");\n            if (res.data.status === 2) {\n                waitSleep(1000);\n                return res.data.save_as.save_as_top_fids[0];\n            }\n            waitSleep(300*(i+1));\n        } catch (e) {}\n    }\n    return void(0);\n}\n\nfunction queryTaskStatus(task_id) {\n    for (let i = 0; i < 6; i++) {\n        try {\n            let res = task(task_id, i + \"\");\n            if (res.data.status === 2) {\n                waitSleep(1000);\n                return true;\n            }\n            waitSleep(300);\n        } catch (e) {}\n    }\n    return false;\n}\n\nfunction getPreviewVideo(fid) {\n    return requestHttp(\"https://drive.quark.cn/1/clouddrive/file/v2/play?pr=ucpro&fr=pc\").body({\n        \"fid\": fid,\n        \"resolutions\": \"normal,low,high,super,2k,4k\",\n        \"supports\": \"fmp4,m3u8\"\n    }).setStartRequestFunc(post).start(true);\n}\n\nfunction getDownloadUrl(fid) {\n    return requestHttp(\"https://drive.quark.cn/1/clouddrive/file/download?pr=ucpro&fr=pc\").body({\n        \"fids\": [fid]\n    }).setStartRequestFunc(post).start(true);\n}\n\nfunction getPlayUrl(fid, fid_token, pwd_id, stoken, category) {\n    try {\n        if (!cookie) return \"toast://请登录账号\";\n        let taskId = createSaveTask(fid, fid_token, pwd_id, stoken).data.task_id;\n        let asfid = queryTask(taskId);\n        if (!asfid) {\n            return \"toast://获取失败\";\n        }\n        let playCookie = cookieManage.get();\n        let playHeader = {\n            Referer: \"http://pan.quark.cn/\",\n            cookie: playCookie,\n            \"User-Agent\": \"com.stub.StubApp/1.3.0 (Linux;Android 14) AndroidXMedia3/1.1.1\"\n        };\n        if (category == \"video\") {\n            let playMode = getItem(\"quark_playMode\", \"转码\");\n            if (playMode === \"转码\") {\n                let videoRes = getPreviewVideo(asfid);\n                let videoList = videoRes.data.video_list;\n                let playList = {\n                    names: [],\n                    urls: [],\n                    headers: []\n                };\n                videoList.filter(v => v.accessable).forEach(v => {\n                    playList.names.push(v.resolution);\n                    playList.urls.push(v.video_info.url + \"#isVideo=true#\");\n                    playList.headers.push(playHeader);\n                });\n                createDeleteTask(asfid);\n                return JSON.stringify(playList);\n            } else {\n                let playUrl = getDownloadUrl(asfid).data[0].download_url;\n                let playList = {\n                    names: [\"原画\"],\n                    urls: [playUrl + \"#isVideo=true##fastPlayMode##threads=\" + getItem(\"speedThread\", \"10\") + \"#\"],\n                    headers: [playHeader]\n                }\n                createDeleteTask(asfid);\n                return JSON.stringify(playList);\n            }\n        } else {\n            let playUrl = getDownloadUrl(asfid).data[0].download_url;\n            createDeleteTask(asfid);\n            if (category === 'audio') {\n                let playList = {\n                    names: [\"音频\"],\n                    urls: [playUrl + \"#isVideo=true#\"],\n                    headers: [playHeader],\n                    lyric: \"\"\n                }\n                return JSON.stringify(playList);\n            } else if (category === 'image') {\n                return $(playUrl, playHeader).image();\n            } else {\n                playHeader = Object.keys(playHeader).map(key => key + \"@\" + String(playHeader[key]).replace(/;/g, \"；；\"));\n                return \"download://\" + playUrl + \";{\" + playHeader.join(\"&&\") + \"}\";\n            }\n        }\n    } catch (e) {\n        if (e.message.includes(\"require login\")) {\n            toast(\"未登录或登录过期，请重新登录\");\n            return \"hiker://page/login\";\n        }\n        return \"toast://\" + e.toString();\n    }\n}\n\n$.exports = {\n    getPlayUrl\n};"},{"col_type":"movie_3","name":"登录账号","path":"login","rule":"js:\nlet d = [];\nsetPageTitle(\"登录夸克账号\");\nd.push({\n    title: \"““确认登录””\",\n    url: $(\"#noLoading#\").lazyRule(() => {\n        let cm = android.webkit.CookieManager.getInstance();\n        let cookie = String(cm.getCookie(\"https://pan.quark.cn\") || \"\");\n        if ($.require(\"tool\").isLoginCookie(cookie)) {\n            setItem(\"quarkCookie\", cookie);\n            back();\n            return \"toast://登录成功\";\n        }\n        return \"toast://未登录\";\n    }),\n    desc: \"““””<small>点击头像可以退出账号重新登录</small>\",\n    col_type: \"text_center_1\"\n});\nd.push({\n    col_type: \"line_blank\"\n});\nd.push({\n    col_type: \"x5_webview_single\",\n    url: \"https://pan.quark.cn\",\n    desc: \"list&&screen-150\",\n    extra: {\n        ua: PC_UA,\n    }\n});\nsetResult(d)"},{"col_type":"movie_3","name":"工具","path":"tool","rule":"js:\n\n$.exports={\n    isLoginCookie(cookie){\n        return !!(cookie  && cookie.includes(\"__uid=\") && cookie.includes(\"__puus=\"));\n    }\n};"},{"col_type":"movie_3","name":"个人账号设置","path":"account","rule":"$.exports = $([\"Cookie登录\", \"网页登录\", \"从获取TVBOX本地Cookie\", \"复制Cookie\", \"清除Cookie\"]).select((isr) => {\n    if (input === \"网页登录\") {\n        return \"hiker://page/login#noRecordHistory##noHistory#\";\n    } else if (input === \"Cookie登录\") {\n        return $(\"\", \"请输入Cookie\").input((isr) => {\n            if ($.require(\"tool\").isLoginCookie(input)) {\n                setItem(\"quarkCookie\", input.replace(/\\s/g, \"\"));\n                isr && refreshPage();\n                return \"toast://设置成功\";\n            } else {\n                return \"toast://Cookie格式错误\";\n            }\n        }, isr);\n    } else if (input === \"从获取TVBOX本地Cookie\") {\n        let path = \"/storage/emulated/0/TV/.quark_user\";\n        if (fileExist(\"file://\" + path)) {\n            if (!new java.io.File(path).canRead()) {\n                return $(\"没有权限读取Cookie文件，请打开所有文件权限\\n海阔设置->更多功能->内部文件管理->右上角\").confirm(() => {});\n            }\n            try {\n                let json = JSON.parse(fetch(\"file://\" + path));\n                let cookie = json.cookie;\n                if ($.require(\"tool\").isLoginCookie(cookie)) {\n                    setItem(\"quarkCookie\", cookie);\n                    isr && refreshPage();\n                    return \"toast://设置成功\";\n                } else {\n                    return \"toast://Cookie格式错误\";\n                }\n            } catch (e) {\n                return \"toast://获取失败共享文件损坏\";\n            }\n        } else {\n            return $(\"未检测到TVBOX的Cookie文件\\n请使用过后再尝试\").confirm(() => {});\n        }\n    } else if (input === \"复制Cookie\") {\n        let cookie = getItem(\"quarkCookie\", \"\");\n        if (cookie) {\n            return \"copy://\" + cookie;\n        } else {\n            return \"toast://未登录\";\n        }\n    } else {\n        clearItem(\"quarkCookie\");\n        isr && refreshPage();\n        return \"toast://退出登录\";\n    }\n}, $.importParam);"}],"title":"Quark.简","author":"@LoyDgIk","version":14,"type":"video","url":"hiker://empty##","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nlet d = [];\n\nlet cookie = getItem(\"quarkCookie\", \"\");\n\nif (!$.require(\"tool\").isLoginCookie(cookie)) {\n    clearItem(\"quarkCookie\");\n    d.push({\n        title: '<font color=\"#13B61B\">▐ </font><b>温馨提示<b>',\n        col_type: \"rich_text\",\n    });\n    d.push({\n        url: $.require(\"account\", true),\n        col_type: \"text_1\",\n        title: \"未检测到登录信息，点我跳转登录账号页面，获取Quark Cookie后方可使用\",\n        extra: {\n            pageTitle: \"登录夸克云盘\"\n        }\n    });\n}\nd.push({\n    title: \"云简\",\n    url: \"hiker://home@云盘君.简\",\n    pic_url: \"hiker://images/icon_left6\",\n    col_type: \"icon_round_small_4\"\n});\nd.push({\n    title: \"收藏\",\n    url: \"hiker://collection?rule=\"+MY_RULE.title,\n    pic_url: \"hiker://images/icon_good6\",\n    col_type: \"icon_round_small_4\"\n});\nd.push({\n    title: \"历史\",\n    url: \"hiker://history?rule=\"+MY_RULE.title,\n    pic_url: \"hiker://images/icon_time6\",\n    col_type: \"icon_round_small_4\"\n});\nd.push({\n    title: \"账号\",\n    url: $.require(\"account\", true),\n    pic_url: \"hiker://images/icon_setting6\",\n    col_type: \"icon_round_small_4\"\n});\nd.push({\n    title: '打开',\n    desc: '请输入链接/搜索关键词',\n    col_type: 'input',\n    url: $.toString(() => {\n        if(!input) return \"toast://请输入内容\";\n        if (!input.startsWith(\"https://pan.quark.cn/s/\")){\n            return \"hiker://page/sou#noHistory#?rule=云盘君.简&p=fypage&searchTerms=\"+encodeURIComponent(input);\n        }\n        return \"hiker://page/quarkList?realurl=\" + encodeURIComponent(input) + \"&sharePwd=\";\n    }),\n    extra:{\n        hideSetting: true,\n        pageTitle: \"搜索\"\n    }\n});\nsetResult(d);","searchFind":"","search_url":"","group":"③网盘","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"夸克列表API\",\"path\":\"QuarkShareApi\",\"rule\":\"js:\\n//@author LoyDgIk\\nlet httpRequest = $.require(\\\"httpRequest\\\");\\nconst baseUrl = \\\"https://pan.quark.cn\\\";\\n\\nfunction QuarkShareApi(shareId, sharePwd) {\\n    this.shareId = shareId;\\n    this.sharePwd = sharePwd;\\n    this.refreshCallBack = (() => void 0);\\n    //this.shareToken = shareToken || this.getShareToken();\\n}\\nObject.assign(QuarkShareApi.prototype, {\\n    setRefresh(refreshCallBack) {\\n        this.refreshCallBack = refreshCallBack;\\n        return this;\\n    },\\n    setToken(shareToken) {\\n        this.shareToken = shareToken;\\n        return this;\\n    },\\n    requestHttp(api) {\\n        return new httpRequest(baseUrl+api).success((body) => {\\n            if (body.status !== 200) {\\n                throw new Error(body.message);\\n            }\\n            return body;\\n        });\\n    },\\n    getToken() {\\n        return this.shareToken || this.getShareToken();\\n    },\\n\\n    getShareToken() {\\n        let result = this.requestHttp(\\\"/1/clouddrive/share/sharepage/token\\\").body({\\n            \\\"pwd_id\\\": this.shareId,\\n            \\\"passcode\\\": this.sharePwd,\\n        }).bodyToString(true).setStartRequestFunc(post).start(true);\\n        this.shareToken = result.data.stoken;\\n        this.refreshCallBack(result.data.stoken, this);\\n        return this.shareToken;\\n    },\\n    getListFile(fileId, page, orderBy) {\\n        let result = this.requestHttp(\\\"/1/clouddrive/share/sharepage/detail?pr=ucpro&fr=pc\\\").buildUrl({\\n            pwd_id: this.shareId || \\\"\\\",\\n            stoken: encodeURIComponent(this.getToken() || \\\"\\\"),\\n            pdir_fid: fileId || \\\"\\\",\\n            force: 0,\\n            _page: page,\\n            _size: 50,\\n            _fetch_banner: 1,\\n            _fetch_share: 1,\\n            _fetch_total: 1,\\n            _sort: \\\"file_type:asc,\\\" + orderBy\\n        }).errorWithRetry((err, res, http) => {\\n            if (JSON.parse(res.body).message.includes('stoken')) {\\n                http.mergeHeadAndBody({\\n                    buildUrl: {\\n                        stoken: encodeURIComponent(this.getShareToken()||\\\"\\\")\\n                    }\\n                });\\n                return true;\\n            }\\n        }).start(true);\\n        return result;\\n    }\\n});\\n$.exports = QuarkShareApi;\"},{\"col_type\":\"movie_3\",\"name\":\"httpRequest\",\"path\":\"httpRequest\",\"rule\":\"function httpRequest(url, options) {\\n    this.retryCount = 0;\\n    this.url = url;\\n    this.options = Object.assign({}, options, {\\n        withHeaders: true\\n    });\\n    this.errorCallback = (err, res) => {throw err};\\n    this.errorCallbackWithRetry = (err, res, tryRestart) => false;\\n    this.successCallback = (body, statusCode, headers) => body;\\n    this.errorTypeCallback = (err, res) => err;\\n    this.startRequest = fetch;\\n    this._bodyToString = false;\\n    this.buildParam = void(0);\\n}\\n\\nObject.assign(httpRequest.prototype, {\\n    bodyToString(flag) {\\n        this._bodyToString = !!flag;\\n        return this;\\n    },\\n    body(body) {\\n        this.options.body = body || void 0;\\n        return this;\\n    },\\n    buildUrl(buildParam) {\\n        this.buildParam = buildParam || {};\\n        return this;\\n    },\\n    setStartRequestFunc(func) {\\n        this.startRequest = func;\\n        return this;\\n    },\\n    headers(headers) {\\n        this.options.headers = headers || void 0;\\n        return this;\\n    },\\n    success(successCallback) {\\n        if (typeof successCallback !== \\\"function\\\") return this;\\n        this.successCallback = successCallback;\\n        return this;\\n    },\\n    error(errorCallback) {\\n        if (typeof errorCallback !== \\\"function\\\") return this;\\n        this.errorCallback = errorCallback;\\n        return this;\\n    },\\n    errorType(errorTypeCallback) {\\n        if (typeof errorTypeCallback !== \\\"function\\\") return this;\\n        this.errorTypeCallback = errorTypeCallback;\\n        return this;\\n    },\\n    errorWithRetry(retryCount, errorCallbackWithRetry) {\\n        if (typeof retryCount === \\\"function\\\" && typeof errorCallbackWithRetry === \\\"undefined\\\") {\\n            errorCallbackWithRetry = retryCount;\\n            retryCount = 1;\\n        }\\n        if (typeof errorCallbackWithRetry !== \\\"function\\\") {\\n            return this;\\n        }\\n        this.retryCount = Number(retryCount);\\n        this.errorCallbackWithRetry = errorCallbackWithRetry;\\n        return this;\\n    },\\n    start(toJson) {\\n        let options = Object.assign({}, this.options);\\n        if (typeof options.body === \\\"object\\\" && this._bodyToString) {\\n            options.body = JSON.stringify(options.body);\\n        }\\n        var res = JSON.parse(this.startRequest(this.buildParam?buildUrl(this.url, this.buildParam):this.url, options));\\n        try {\\n            if (res.statusCode >= 200 && res.statusCode <= 300) {\\n                let body = res.body;\\n                if (toJson) {\\n                    body = JSON.parse(body);\\n                }\\n                return this.successCallback(body, res);\\n            } else {\\n                throw new Error(String(res.statusCode));\\n            }\\n        } catch (err) {\\n            try {\\n                err = this.errorTypeCallback(err, res);\\n            } catch (e) {\\n\\n            }\\n            if (this.retryCount) {\\n                let tryResult = this.errorCallbackWithRetry(err, res, this);\\n                if (tryResult) {\\n                    this.retryCount--;\\n                    return this.start(toJson);\\n                } else {\\n                    this.retryCount = 0;\\n                    return this.errorCallback(err, res);\\n                }\\n            } else {\\n                return this.errorCallback(err, res);\\n            }\\n        }\\n    },\\n    setOptions(options) {\\n        this.options = Object.assign({}, options, {\\n            withHeaders: true\\n        });\\n        return this;\\n    },\\n    mergeHeadAndBody(options) {\\n        options = options || {};\\n        Object.assign(this.options.headers||{}, options.headers);\\n        if (typeof this.options.body === \\\"object\\\" && typeof options.body === \\\"object\\\") {\\n            Object.assign(this.options.body||{}, options.body);\\n        }\\n        if (typeof options.buildUrl === \\\"object\\\") {\\n            Object.assign(this.buildParam||{}, options.buildUrl);\\n        }\\n        return this;\\n    }\\n});\\n\\nObject.assign(httpRequest, {\\n    fetch(url, options) {\\n        return new httpRequest(url, options);\\n    },\\n    post(url, options) {\\n        return new httpRequest(url, options).setStartRequestFunc(post);\\n    },\\n    request(url, options) {\\n        return new httpRequest(url, options).setStartRequestFunc(request);\\n    },\\n    postRequest(url, options) {\\n        return new httpRequest(url, options).setStartRequestFunc(postRequest);\\n    },\\n    fetchCookie(url, options) {\\n        return new httpRequest(url, options).setStartRequestFunc(fetchCookie);\\n    }\\n});\\n$.exports = httpRequest;\"},{\"col_type\":\"movie_3\",\"name\":\"夸克列表\",\"path\":\"quarkList\",\"rule\":\"js:\\nlet d = [];\\n\\naddListener(\\\"onClose\\\", () => clearMyVar(\\\"playUrlCache\\\"));\\naddListener(\\\"onRefresh\\\", () => clearMyVar(\\\"playUrlCache\\\"));\\nlet soUrl = decodeURIComponent(getParam(\\\"realurl\\\", \\\"\\\"));\\nlet realurl = soUrl.split(\\\"?\\\")[0];\\nlet urlData = realurl.split(\\\"/\\\");\\n\\nlet shareId = MY_PARAMS.shareId || urlData[4].replace(\\\"#\\\", \\\"\\\");\\nlet sharePwd = getParam(\\\"sharePwd\\\", MY_PARAMS.sharePwd || getParam(\\\"passcode\\\", \\\"\\\", soUrl) || \\\"\\\");\\nlet shareToken = getParam(\\\"shareToken\\\", MY_PARAMS.shareToken || \\\"\\\");\\n\\nlet fileId = MY_PARAMS.fileId;\\n\\nlet sort = {\\n    \\\"名称正序\\\": \\\"file_name:asc\\\",\\n    \\\"名称倒序\\\": \\\"file_name:desc\\\",\\n    \\\"时间正序\\\": \\\"updated_at:asc\\\",\\n    \\\"时间倒序\\\": \\\"updated_at:desc\\\"\\n};\\nlet styles = [\\\"text_1\\\", \\\"avatar\\\"];\\n\\nlet sortValue = sort[getItem(\\\"sortKey\\\", \\\"名称正序\\\")];\\nlet style = getItem(\\\"style\\\", styles[0]);\\nif (MY_PAGE == 1) {\\n    d.push({\\n        title: style,\\n        url: $(styles, 1, '请选择').select(() => {\\n            setItem('style', input);\\n            refreshPage();\\n        }),\\n        pic_url: \\\"https://hikerfans.com/img/ali_icon.svg\\\",\\n        col_type: \\\"icon_small_4\\\"\\n    });\\n    d.push({\\n        title: getItem(\\\"sortKey\\\", \\\"名称正序\\\"),\\n        url: $(Object.keys(sort), 1, '请选择').select(() => {\\n            setItem(\\\"sortKey\\\", input)\\n            refreshPage();\\n        }),\\n        pic_url: \\\"https://hikerfans.com/img/ali_sort.svg\\\",\\n        col_type: \\\"icon_small_4\\\"\\n    });\\n    d.push({\\n        title: getItem(\\\"quark_playMode\\\", \\\"转码\\\"),\\n        url: $([\\\"转码\\\", \\\"原画\\\"], 2, \\\"播放模式\\\").select(() => {\\n            setItem(\\\"quark_playMode\\\", input);\\n            refreshPage();\\n            return \\\"toast://切换成功\\\";\\n        }),\\n        col_type: \\\"icon_small_4\\\",\\n        pic_url: \\\"https://hikerfans.com/img/ali_play.svg\\\",\\n    });\\n    d.push({\\n        title: \\\"功能\\\",\\n        url: $([\\\"跳转夸克APP\\\", \\\"复制分享链接\\\", \\\"个人账号管理\\\", \\\"原画下载线程\\\"], 2).select((shareId, sharePwd) => {\\n            if (input === \\\"跳转夸克APP\\\") {\\n                return \\\"qklink://www.uc.cn/b20b84fd735a8dd3f7541129bacc4e9a?action=open_url&url=https://pan.quark.cn/s/\\\" + shareId;\\n            } else if (input === \\\"个人账号管理\\\") {\\n                return $.require(\\\"account\\\");\\n            } else if (input === \\\"原画下载线程\\\") {\\n                return $(getItem(\\\"speedThread\\\", \\\"10\\\"), \\\"请输入3-32之间的整数\\\").input(() => {\\n                    let speedThread = parseInt(input);\\n                    if (speedThread < 3 || speedThread > 32) {\\n                        return \\\"toast://设置不合法\\\";\\n                    }\\n                    setItem(\\\"speedThread\\\", String(speedThread));\\n                    return \\\"toast://设置成功\\\";\\n                });\\n            } else if (input === \\\"复制分享链接\\\") {\\n                return \\\"copy://\\\" + buildUrl(\\\"https://pan.quark.cn/s/\\\" + shareId, {\\n                    passcode: sharePwd\\n                });\\n            }\\n        }, shareId, sharePwd),\\n        col_type: \\\"icon_small_4\\\",\\n        pic_url: \\\"https://hikerfans.com/img/ali_fileinto.svg\\\",\\n    });\\n    d.push({\\n        col_type: 'line_blank'\\n    });\\n}\\n\\n\\nlet QuarkShareApi = $.require(\\\"QuarkShareApi\\\");\\nlet quarkShareApi = new QuarkShareApi(shareId, sharePwd).setToken(shareToken).setRefresh((shareToken) => {\\n    MY_PARAMS.shareToken = shareToken;\\n    setPageParams(MY_PARAMS);\\n});\\n\\nfunction formatSize(size) {\\n    if (!size) {\\n        return '';\\n    }\\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\\n    let i = 0;\\n    while (size >= 1024) {\\n        size /= 1024;\\n        i++;\\n    }\\n    size = i ? Number(size.toFixed(2)) : size;\\n    return `${size} ${units[i]}`;\\n}\\n\\nlet subExts = [\\\"vtt\\\", \\\"srt\\\", \\\"ass\\\"];\\nlet titleHead = {\\n    video: \\\"🎬\\\",\\n    audio: \\\"🎵\\\",\\n    doc: \\\"📑\\\",\\n    image: \\\"🖼\\\",\\n    archive: \\\"📦\\\",\\n    \\\"default\\\": \\\"❓\\\"\\n};\\n\\nfunction getHead(type, ext) {\\n    let head = titleHead[type];\\n    /*if (subExts.includes(ext)) {\\n        head = \\\"🕸\\\";\\n    }*/\\n    return head || \\\"❓\\\";\\n}\\ntry {\\n    var res = quarkShareApi.getListFile(fileId, MY_PAGE, sortValue);\\n    //设置标题\\n    setPageTitle(res.data.share.title);\\n    var list = res.data.list || [];\\n    if (list.length === 0 && !fileId) {\\n        res = quarkShareApi.getListFile(res.data.share.first_fid, MY_PAGE, sortValue);\\n        setPageTitle(res.data.share.title);\\n        var list = res.data.list || [];\\n    }\\n    list.forEach(item => {\\n        //判断是否文件夹\\n        if (item.dir) {\\n            d.push({\\n                title: \\\"📂\\\" + item.file_name,\\n                desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + item.include_items + '项  ',\\n                pic_url: \\\"https://hikerfans.com/tubiao/messy/27.svg\\\",\\n                url: \\\"hiker://page/quarkList?page=fypage\\\",\\n                col_type: style,\\n                extra: {\\n                    shareId,\\n                    sharePwd,\\n                    shareToken: quarkShareApi.getToken(),\\n                    fileId: item.fid,\\n                    inheritTitle: false\\n                }\\n            });\\n        } else {\\n            d.push({\\n                title: getHead(item.obj_category) + item.file_name,\\n                desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + formatSize(item.size),\\n                pic_url: item.thumbnail,\\n                url: $().lazyRule((fid, fid_token, pwd_id, stoken, category) => {\\n                    let playUrlCache = storage0.getMyVar(\\\"playUrlCache\\\", {});\\n                    if (playUrlCache[fid]) {\\n                        return playUrlCache[fid];\\n                    } else {\\n                        let url = $.require(\\\"play\\\").getPlayUrl(fid, fid_token, pwd_id, stoken, category);\\n                        playUrlCache[fid] = url;\\n                        storage0.putMyVar(\\\"playUrlCache\\\", playUrlCache);\\n                        return url;\\n                    }\\n                }, item.fid, item.share_fid_token, shareId, quarkShareApi.getToken(), item.obj_category),\\n                col_type: style,\\n                extra: {\\n                    id: item.fid,\\n                    inheritTitle: false,\\n                    cls: 'playlist ' + item.obj_category\\n                }\\n            })\\n        }\\n        d.push({\\n            col_type: 'line'\\n        });\\n    });\\n} catch (e) {\\n    d.push({\\n        title: e.message,\\n        url: 'hiker://empty',\\n        col_type: 'text_center_1',\\n        extra: {\\n            lineVisible: false\\n        }\\n    });\\n    if (e.message.includes(\\\"提取码\\\")) {\\n        d.push({\\n            title: \\\"输入提取码\\\",\\n            url: $().input((MY_PARAMS) => {\\n                setPageParams(Object.assign({}, MY_PARAMS, {\\n                    sharePwd: input\\n                }));\\n                refreshPage();\\n            }, MY_PARAMS),\\n            col_type: \\\"text_center_1\\\"\\n        });\\n    }\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"play\",\"path\":\"play\",\"rule\":\"js:\\nconst cookie = getItem(\\\"quarkCookie\\\", \\\"\\\");\\nlet httpRequest = $.require(\\\"httpRequest\\\");\\n\\nfunction CookieManage(cookie) {\\n    this.cookie = {};\\n    this.add(cookie);\\n}\\nObject.assign(CookieManage.prototype, {\\n    add(cookie) {\\n        let cookies = [];\\n        if (typeof cookie === \\\"string\\\") {\\n            cookies = cookie.split(\\\";\\\");\\n        } else if (Array.isArray(cookie)) {\\n            cookies = cookie;\\n        }\\n        cookies.forEach(v => {\\n            v = v.split(\\\"=\\\");\\n            if (v.length < 2) return;\\n            this.cookie[v[0].trim()] = v[1].trim();\\n        });\\n    },\\n    get() {\\n        return Object.entries(this.cookie).map(v => v[0] + \\\"=\\\" + v[1]).join(\\\";\\\");\\n    }\\n});\\nconst cookieManage = new CookieManage(cookie);\\n\\nfunction waitSleep(time) {\\n    java.lang.Thread.sleep(time || 600);\\n}\\n\\nfunction requestHttp(url) {\\n    return new httpRequest(url)\\n        .success((body, res) => {\\n            if (body.status !== 200) {\\n                throw new Error(body.message);\\n            }\\n            cookieManage.add(res.headers[\\\"set-cookie\\\"]);\\n            return body;\\n        })\\n        .errorType((err, res) => {\\n            return new Error(JSON.parse(res.body).message);\\n        })\\n        .bodyToString(true)\\n        .headers({\\n            cookie: cookieManage.get(),\\n            \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) quark-cloud-drive/2.5.20 Chrome/100.0.4896.160 Electron/18.3.5.4-b478491100 Safari/537.36 Channel/pckk_other_ch\\\",\\n            \\\"referer\\\": \\\"https://drive.quark.cn/\\\"\\n        });\\n}\\n\\nfunction getDriveInfo() {\\n    return requestHttp(\\\"https://drive.quark.cn/1/clouddrive/share/sharepage/dir?pr=ucpro&fr=pc&aver=1\\\").start(true);\\n}\\n\\nfunction createSaveTask(fid, fid_token, pwd_id, stoken) {\\n    let driveInfo = getDriveInfo();\\n    return requestHttp(\\\"https://drive.quark.cn/1/clouddrive/share/sharepage/save?pr=ucpro&fr=pc\\\").setStartRequestFunc(post).body({\\n        \\\"fid_list\\\": [\\n            fid\\n        ],\\n        \\\"fid_token_list\\\": [\\n            fid_token\\n        ],\\n        \\\"to_pdir_fid\\\": driveInfo.data.dir.fid,\\n        \\\"pwd_id\\\": pwd_id,\\n        \\\"stoken\\\": stoken,\\n        \\\"pdir_fid\\\": driveInfo.data.dir.pdir_fid\\n    }).start(true);\\n}\\n\\nfunction createDeleteTask(fid) {\\n    let driveInfo = getDriveInfo();\\n    return requestHttp(\\\"https://drive.quark.cn/1/clouddrive/file/delete?pr=ucpro&fr=pc\\\").setStartRequestFunc(post).body({\\n        \\\"action_type\\\": 2,\\n        \\\"filelist\\\": [\\n            fid\\n        ],\\n        \\\"exclude_fids\\\": []\\n    }).start(true);\\n}\\n\\nfunction task(task_id, retry_index) {\\n    return requestHttp(\\\"https://drive.quark.cn/1/clouddrive/task\\\").buildUrl({\\n        pr: \\\"ucpro\\\",\\n        fr: \\\"pc\\\",\\n        task_id: task_id,\\n        retry_index: retry_index\\n    }).start(true);\\n}\\n\\nfunction queryTask(task_id) {\\n    for (let i = 0; i < 9; i++) {\\n        try {\\n            let res = task(task_id, i + \\\"\\\");\\n            if (res.data.status === 2) {\\n                waitSleep(1000);\\n                return res.data.save_as.save_as_top_fids[0];\\n            }\\n            waitSleep(300*(i+1));\\n        } catch (e) {}\\n    }\\n    return void(0);\\n}\\n\\nfunction queryTaskStatus(task_id) {\\n    for (let i = 0; i < 6; i++) {\\n        try {\\n            let res = task(task_id, i + \\\"\\\");\\n            if (res.data.status === 2) {\\n                waitSleep(1000);\\n                return true;\\n            }\\n            waitSleep(300);\\n        } catch (e) {}\\n    }\\n    return false;\\n}\\n\\nfunction getPreviewVideo(fid) {\\n    return requestHttp(\\\"https://drive.quark.cn/1/clouddrive/file/v2/play?pr=ucpro&fr=pc\\\").body({\\n        \\\"fid\\\": fid,\\n        \\\"resolutions\\\": \\\"normal,low,high,super,2k,4k\\\",\\n        \\\"supports\\\": \\\"fmp4,m3u8\\\"\\n    }).setStartRequestFunc(post).start(true);\\n}\\n\\nfunction getDownloadUrl(fid) {\\n    return requestHttp(\\\"https://drive.quark.cn/1/clouddrive/file/download?pr=ucpro&fr=pc\\\").body({\\n        \\\"fids\\\": [fid]\\n    }).setStartRequestFunc(post).start(true);\\n}\\n\\nfunction getPlayUrl(fid, fid_token, pwd_id, stoken, category) {\\n    try {\\n        if (!cookie) return \\\"toast://请登录账号\\\";\\n        let taskId = createSaveTask(fid, fid_token, pwd_id, stoken).data.task_id;\\n        let asfid = queryTask(taskId);\\n        if (!asfid) {\\n            return \\\"toast://获取失败\\\";\\n        }\\n        let playCookie = cookieManage.get();\\n        let playHeader = {\\n            Referer: \\\"http://pan.quark.cn/\\\",\\n            cookie: playCookie,\\n            \\\"User-Agent\\\": \\\"com.stub.StubApp/1.3.0 (Linux;Android 14) AndroidXMedia3/1.1.1\\\"\\n        };\\n        if (category == \\\"video\\\") {\\n            let playMode = getItem(\\\"quark_playMode\\\", \\\"转码\\\");\\n            if (playMode === \\\"转码\\\") {\\n                let videoRes = getPreviewVideo(asfid);\\n                let videoList = videoRes.data.video_list;\\n                let playList = {\\n                    names: [],\\n                    urls: [],\\n                    headers: []\\n                };\\n                videoList.filter(v => v.accessable).forEach(v => {\\n                    playList.names.push(v.resolution);\\n                    playList.urls.push(v.video_info.url + \\\"#isVideo=true#\\\");\\n                    playList.headers.push(playHeader);\\n                });\\n                createDeleteTask(asfid);\\n                return JSON.stringify(playList);\\n            } else {\\n                let playUrl = getDownloadUrl(asfid).data[0].download_url;\\n                let playList = {\\n                    names: [\\\"原画\\\"],\\n                    urls: [playUrl + \\\"#isVideo=true##fastPlayMode##threads=\\\" + getItem(\\\"speedThread\\\", \\\"10\\\") + \\\"#\\\"],\\n                    headers: [playHeader]\\n                }\\n                createDeleteTask(asfid);\\n                return JSON.stringify(playList);\\n            }\\n        } else {\\n            let playUrl = getDownloadUrl(asfid).data[0].download_url;\\n            createDeleteTask(asfid);\\n            if (category === 'audio') {\\n                let playList = {\\n                    names: [\\\"音频\\\"],\\n                    urls: [playUrl + \\\"#isVideo=true#\\\"],\\n                    headers: [playHeader],\\n                    lyric: \\\"\\\"\\n                }\\n                return JSON.stringify(playList);\\n            } else if (category === 'image') {\\n                return $(playUrl, playHeader).image();\\n            } else {\\n                playHeader = Object.keys(playHeader).map(key => key + \\\"@\\\" + String(playHeader[key]).replace(/;/g, \\\"；；\\\"));\\n                return \\\"download://\\\" + playUrl + \\\";{\\\" + playHeader.join(\\\"&&\\\") + \\\"}\\\";\\n            }\\n        }\\n    } catch (e) {\\n        if (e.message.includes(\\\"require login\\\")) {\\n            toast(\\\"未登录或登录过期，请重新登录\\\");\\n            return \\\"hiker://page/login\\\";\\n        }\\n        return \\\"toast://\\\" + e.toString();\\n    }\\n}\\n\\n$.exports = {\\n    getPlayUrl\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"登录账号\",\"path\":\"login\",\"rule\":\"js:\\nlet d = [];\\nsetPageTitle(\\\"登录夸克账号\\\");\\nd.push({\\n    title: \\\"““确认登录””\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        let cm = android.webkit.CookieManager.getInstance();\\n        let cookie = String(cm.getCookie(\\\"https://pan.quark.cn\\\") || \\\"\\\");\\n        if ($.require(\\\"tool\\\").isLoginCookie(cookie)) {\\n            setItem(\\\"quarkCookie\\\", cookie);\\n            back();\\n            return \\\"toast://登录成功\\\";\\n        }\\n        return \\\"toast://未登录\\\";\\n    }),\\n    desc: \\\"““””<small>点击头像可以退出账号重新登录</small>\\\",\\n    col_type: \\\"text_center_1\\\"\\n});\\nd.push({\\n    col_type: \\\"line_blank\\\"\\n});\\nd.push({\\n    col_type: \\\"x5_webview_single\\\",\\n    url: \\\"https://pan.quark.cn\\\",\\n    desc: \\\"list&&screen-150\\\",\\n    extra: {\\n        ua: PC_UA,\\n    }\\n});\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"tool\",\"rule\":\"js:\\n\\n$.exports={\\n    isLoginCookie(cookie){\\n        return !!(cookie  && cookie.includes(\\\"__uid=\\\") && cookie.includes(\\\"__puus=\\\"));\\n    }\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"个人账号设置\",\"path\":\"account\",\"rule\":\"$.exports = $([\\\"Cookie登录\\\", \\\"网页登录\\\", \\\"从获取TVBOX本地Cookie\\\", \\\"复制Cookie\\\", \\\"清除Cookie\\\"]).select((isr) => {\\n    if (input === \\\"网页登录\\\") {\\n        return \\\"hiker://page/login#noRecordHistory##noHistory#\\\";\\n    } else if (input === \\\"Cookie登录\\\") {\\n        return $(\\\"\\\", \\\"请输入Cookie\\\").input((isr) => {\\n            if ($.require(\\\"tool\\\").isLoginCookie(input)) {\\n                setItem(\\\"quarkCookie\\\", input.replace(/\\\\s/g, \\\"\\\"));\\n                isr && refreshPage();\\n                return \\\"toast://设置成功\\\";\\n            } else {\\n                return \\\"toast://Cookie格式错误\\\";\\n            }\\n        }, isr);\\n    } else if (input === \\\"从获取TVBOX本地Cookie\\\") {\\n        let path = \\\"/storage/emulated/0/TV/.quark_user\\\";\\n        if (fileExist(\\\"file://\\\" + path)) {\\n            if (!new java.io.File(path).canRead()) {\\n                return $(\\\"没有权限读取Cookie文件，请打开所有文件权限\\\\n海阔设置->更多功能->内部文件管理->右上角\\\").confirm(() => {});\\n            }\\n            try {\\n                let json = JSON.parse(fetch(\\\"file://\\\" + path));\\n                let cookie = json.cookie;\\n                if ($.require(\\\"tool\\\").isLoginCookie(cookie)) {\\n                    setItem(\\\"quarkCookie\\\", cookie);\\n                    isr && refreshPage();\\n                    return \\\"toast://设置成功\\\";\\n                } else {\\n                    return \\\"toast://Cookie格式错误\\\";\\n                }\\n            } catch (e) {\\n                return \\\"toast://获取失败共享文件损坏\\\";\\n            }\\n        } else {\\n            return $(\\\"未检测到TVBOX的Cookie文件\\\\n请使用过后再尝试\\\").confirm(() => {});\\n        }\\n    } else if (input === \\\"复制Cookie\\\") {\\n        let cookie = getItem(\\\"quarkCookie\\\", \\\"\\\");\\n        if (cookie) {\\n            return \\\"copy://\\\" + cookie;\\n        } else {\\n            return \\\"toast://未登录\\\";\\n        }\\n    } else {\\n        clearItem(\\\"quarkCookie\\\");\\n        isr && refreshPage();\\n        return \\\"toast://退出登录\\\";\\n    }\\n}, $.importParam);\"}]","proxy":"","icon":""}