{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"audioSingle","path":"audio","rule":"js:\nconst MediaPlayer = android.media.MediaPlayer;\nlet mediaPlayer = null;\nlet isPrepare = false;\nlet currentUrl = null;\nlet errorListener = () => {};\nlet completionListener = () => {};\nlet startListener = () => {};\nlet stateListener = () => {};\nlet endListener = () => {};\nlet playSpeed = null;\n\nfunction release() {\n    if (hasPlayer()) {\n        mediaPlayer.release();\n        mediaPlayer = null;\n        isPrepare = false;\n        currentUrl = null;\n        runEndListener();\n    }\n}\n\nfunction setErrorListener(func) {\n    if (typeof func !== \"function\") return;\n    errorListener = func;\n}\n\nfunction setCompletionListener(func) {\n    if (typeof func !== \"function\") return;\n    completionListener = func;\n}\n\nfunction setStartListener(func) {\n    if (typeof func !== \"function\") return;\n    startListener = func;\n}\n\nfunction setEndListener(func) {\n    if (typeof func !== \"function\") return;\n    endListener = func;\n}\n\nfunction setStateListener(func) {\n    if (typeof func !== \"function\") return;\n    stateListener = func;\n}\n\nfunction runCompletionListener() {\n    tryCallBack(completionListener);\n}\n\nfunction runErrorListener(e) {\n    tryCallBack(errorListener, [e]);\n}\n\nfunction runStartListener() {\n    tryCallBack(() => {\n        startListener();\n        stateListener(true);\n    });\n}\n\nfunction runStateListener(isPlaying) {\n    tryCallBack(stateListener, [isPlaying]);\n}\n\nfunction runEndListener() {\n    tryCallBack(() => {\n        endListener();\n        stateListener(false);\n    });\n}\n\nfunction tryCallBack(callBack, args) {\n    if (typeof callBack !== \"function\") {\n        return;\n    }\n    new java.lang.Thread(new java.lang.Runnable({\n        run() {\n            try {\n                args = args || [];\n                callBack.apply(null, args);\n            } catch (e) {\n                let message = \"\",\n                    lineNumber = -1;\n                if (e instanceof Error) {\n                    message = e.message;\n                    lineNumber = e.lineNumber;\n                } else {\n                    message = String(e);\n                }\n                log(message);\n                setError(\"\\n行数：\" + lineNumber + \"\\n详情：\" + message);\n            }\n        }\n    })).start();\n}\n\nfunction toMap(object) {\n    let map = new java.util.HashMap();\n    for (let [key, value] of Object.entries(object)) {\n        if (typeof value !== \"string\") continue;\n        map.put(key, value);\n    }\n    return map;\n}\n\nfunction play(url, headers, callBack) {\n    try {\n        release();\n        mediaPlayer = new MediaPlayer();\n        if ($.type(headers) === \"object\") {\n            mediaPlayer.setDataSource(url, toMap(headers));\n        } else {\n            mediaPlayer.setDataSource(url);\n        }\n        setPlayerSpeed(playSpeed);\n        mediaPlayer.setOnCompletionListener(() => {\n            release();\n            runCompletionListener();\n        });\n        mediaPlayer.setOnErrorListener((e) => {\n            // 当发生错误时，将 MediaPlayer 设置为 null\n            mediaPlayer = null;\n            isPrepare = false;\n            currentUrl = null;\n            runErrorListener(e);\n            return false;\n        });\n        mediaPlayer.prepare();\n        isPrepare = true;\n        currentUrl = url;\n        mediaPlayer.start();\n        runStartListener();\n        tryCallBack(callBack);\n        return mediaPlayer;\n    } catch (e) {\n        release();\n        runErrorListener(e);\n        //log(e.toString());\n    }\n}\n\nfunction playAsync(url, headers, callBack) {\n    try {\n        release();\n        let asyncMediaPlayer = new MediaPlayer();\n        if ($.type(headers) === \"object\") {\n            asyncMediaPlayer.setDataSource(url, toMap(headers));\n        } else {\n            asyncMediaPlayer.setDataSource(url);\n        }\n        asyncMediaPlayer.setOnCompletionListener(() => {\n            release();\n            runCompletionListener();\n        });\n        asyncMediaPlayer.setOnErrorListener((e) => {\n            // 当发生错误时，将 MediaPlayer 设置为 null\n            //mediaPlayer = null;\n            asyncMediaPlayer = null;\n            isPrepare = false;\n            currentUrl = null;\n            runErrorListener(e);\n            return false;\n        });\n        asyncMediaPlayer.setOnPreparedListener(() => {\n            if (asyncMediaPlayer === mediaPlayer && asyncMediaPlayer != null) {\n                isPrepare = true;\n                currentUrl = url;\n                asyncMediaPlayer.start();\n                runStartListener();\n                tryCallBack(callBack);\n            } else {\n                asyncMediaPlayer = null;\n            }\n        });\n        asyncMediaPlayer.prepareAsync();\n        mediaPlayer = asyncMediaPlayer;\n        setPlayerSpeed(playSpeed);\n        return asyncMediaPlayer;\n    } catch (e) {\n        release();\n        runErrorListener(e);\n        //log(e.toString());\n    }\n}\n//直接播放网络音频链接，有可能播放失败还没有缓存，还是下载一下比较稳妥\nfunction playNetwor(url, headers, callBack) {\n    release();\n    let path = getLocalUrl(url);\n    tryCallBack(() => {\n        try {\n            requireDownload(url, path, headers);\n            if (fileExist(\"file://\" + path)) {\n                play(path, void 0, callBack);\n            } else {\n                throw new Error(\"下载失败\");\n            }\n        } catch (e) {\n            errorListener(e);\n        }\n    });\n}\n\nfunction startOrPause(isPause) {\n    if (hasPlayer()) {\n        if (isPause || mediaPlayer.isPlaying()) {\n            mediaPlayer.pause();\n        } else {\n            mediaPlayer.start();\n        }\n        runStateListener(mediaPlayer.isPlaying());\n    }\n}\n\nfunction seekTo(msec) {\n    if (hasPlayer()) {\n        mediaPlayer.seekTo(msec);\n    }\n}\n\nfunction getDuration() {\n    if (hasPlayer()) {\n        return mediaPlayer.getDuration();\n    }\n    return null;\n}\n\nfunction getCurrentPosition() {\n    if (hasPlayer()) {\n        return mediaPlayer.getCurrentPosition();\n    }\n    return null;\n}\n\nfunction isPlaying() {\n    return hasPlayer() && mediaPlayer.isPlaying();\n}\n\nfunction hasPlayer() {\n    return mediaPlayer != null && isPrepare;\n}\n\nfunction getCurrentUrl() {\n    return currentUrl;\n}\n\nfunction getLocalUrl(url) {\n    return getPath(\"hiker://files/_cache/\" + md5(url)).slice(7);\n}\n\nfunction setPlayerSpeed(speed) {\n    if (speed > 0 && mediaPlayer != null && android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {\n        let playbackParams = mediaPlayer.getPlaybackParams();\n        playbackParams.setSpeed(speed);\n        mediaPlayer.setPlaybackParams(playbackParams);\n    }\n}\n\nfunction setSpeed(speed) {\n    if (speed <= 0) return;\n    playSpeed = speed;\n    setPlayerSpeed(speed);\n}\n\nfunction getSpeed() {\n    return playSpeed || 1;\n}\n$.exports = {\n    play,\n    playAsync,\n    playNetwor,\n    release,\n    startOrPause,\n    seekTo,\n    getDuration,\n    getCurrentPosition,\n    isPlaying,\n    hasPlayer,\n    getCurrentUrl,\n    getLocalUrl,\n    setErrorListener,\n    setCompletionListener,\n    setStateListener,\n    setStartListener,\n    setEndListener,\n    setSpeed,\n    getSpeed\n};"},{"col_type":"movie_3","name":"playPage","path":"play","rule":"js:\n\nlet isnew = getMyVar(\"isnew\", \"\");\naddListener(\"onClose\", $.toString((isnew) => {\n    let isnews = getMyVar(\"isnew\", \"\");\n    if (isnews === isnew) {\n        clearMyVar(\"isnew\");\n        GM.clear(\"audioSingle\", audioSingle => audioSingle.release());\n        unRegisterTask(\"simplePlayer:seek\");\n        unRegisterTask(\"simplePlayer:lrc\");\n    }\n}, isnew));\nlet audioSingle = GM.defineModule(\"audioSingle\", \"audio\");\nlet LrcParser = $.require(\"LrcParser\");\n\nfunction setTimeTask(pos, total) {\n    let nowDate = Date.now();\n    registerTask(\"simplePlayer:seek\", 965, $.toString((nowDate, pos, total) => {\n        function formatSeconds(totalSeconds) {\n            const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, \"0\");\n            const seconds = String(Math.floor(totalSeconds % 60)).padStart(2, \"0\");\n            return `${minutes}:${seconds}`;\n        }\n        let trueNowDate = Date.now() - nowDate;\n        let currentPosition = pos + trueNowDate;\n        if (currentPosition > total) {\n            currentPosition = total;\n            unRegisterTask(\"simplePlayer:seek\");\n        }\n        let rateNumber = 50;\n        let symbol = \"-\";\n        let per = Math.round((currentPosition / total) * rateNumber);\n        updateItem(\"simplePlayer:seek\", {\n            title: formatSeconds(currentPosition / 1000) + \"/\" + formatSeconds(total / 1000),\n            desc: \"““””\" + (symbol.repeat(per).fontcolor(\"#13B66A\") + symbol.repeat(rateNumber - per)).small()\n        });\n    }, nowDate, pos, total));\n    if (!audioSingle.id) return;\n    let songId = audioSingle.id;\n    let lrc = LrcParser.parserNeteaseLyrics(songId);\n    if (lrc.length === 0) return;\n    registerTask(\"simplePlayer:lrc\", 100, $.toString((nowDate, pos, total, lrcList) => {\n        try {\n            function formatSeconds(totalSeconds) {\n                const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, \"0\");\n                const seconds = String(Math.floor(totalSeconds % 60)).padStart(2, \"0\");\n                return `${minutes}:${seconds}`;\n            }\n            let trueNowDate = Date.now() - nowDate;\n            let currentPosition = pos + trueNowDate;\n            if (currentPosition > total) {\n                currentPosition = total;\n                unRegisterTask(\"simplePlayer:lrc\");\n            }\n            let index = 0;\n            for (let i = 0; i < lrcList.length; i++) {\n                if (i < lrcList.length - 1) {\n                    if (currentPosition < lrcList[i].timestamp && i == 0) {\n                        index = i;\n                    }\n                    if (currentPosition > lrcList[i].timestamp &&\n                        currentPosition < lrcList[i + 1].timestamp) {\n                        index = i;\n                    }\n                }\n                if (i == lrcList.length - 1 &&\n                    currentPosition > lrcList[i].timestamp) {\n                    index = i;\n                }\n            }\n            let symbol = \"　\";\n            let lrcText = findItem(\"simplePlayer:lrc\") || {};\n            let lrcContent = lrcText.desc || \"\";\n            let a = String(lrcList[index].text || symbol);\n            let b = index < lrcList.length - 1 ? (lrcList[index + 1].text || symbol) : symbol;\n            let c = index - 1 > 0 ? (lrcList[index - 1].text || symbol) : symbol;\n            let desc = c + a + b;\n            if (desc === lrcContent) return;\n            updateItem(\"simplePlayer:lrc\", {\n                title: '<br><h4 style=\"text-align: center;\">' +\n                    c.small().small().fontcolor(\"grey\") + \"<br>\" +\n                    a.fontcolor(\"#13B66A\") + \"<br>\" +\n                    b.small().small().fontcolor(\"grey\") + \"<br>\" +\n                    '</h4>',\n                desc: desc\n            });\n        } catch (e) {\n            //log(e.toString());\n            unRegisterTask(\"simplePlayer:lrc\");\n        }\n    }, nowDate, pos, total, lrc));\n}\n\nfunction clearTimeTask() {\n    unRegisterTask(\"simplePlayer:seek\");\n    unRegisterTask(\"simplePlayer:lrc\");\n}\n\nif (!audioSingle.hasPlayer()) {\n    audioSingle.setStateListener((isPlaying) => {\n        updateItem(\"simplePlayer:zx\", {\n            pic_url: isPlaying ? \"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/stop.png\" : \"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/play.png\",\n            // title: isPlaying ? \"暂停\" : \"继续\"\n        });\n        if (isPlaying) {\n            setTimeTask(audioSingle.getCurrentPosition(), audioSingle.getDuration());\n        } else {\n            clearTimeTask();\n        }\n    });\n    audioSingle.setStartListener(() => {\n        setTimeTask(0, audioSingle.getDuration());\n    });\n    audioSingle.setEndListener(() => {\n        resetLrc();\n        //setHead();\n        clearTimeTask();\n        updateItem(\"simplePlayer:seek\", {\n            title: \"00:00/00:00\",\n        });\n    });\n}\n\nfunction setHead(pic, text, desc, playUrl) {\n    updateItem(\"simplePlayer:pic\", {\n        pic_url: pic || \"hiker://images/home_pic4\",\n        url: pic || \"hiker://empty\"\n    });\n    updateItem(\"simplePlayer:headText\", {\n        title: \"““””\" + (text || \"　\").small().sub(),\n        desc: \"““””\" + (desc || \"　\").small(),\n        pic_url: playUrl\n    });\n\n}\n\nfunction setComment(name, avatar, comment, id) {\n    updateItem(\"simplePlayer:avatar\", {\n        title: name,\n        pic_url: avatar,\n        col_type: (name || avatar) ? \"avatar\" : \"blank_block\"\n    });\n    updateItem(\"simplePlayer:comment\", {\n        title: comment,\n        col_type: ((name || avatar) && comment) ? \"text_1\" : \"blank_block\",\n        url: id ? \"hiker://page/comment?page=fypage&id=\" + id : \"hiker://empty\"\n    });\n}\n\nfunction resetLrc() {\n    updateItem(\"simplePlayer:lrc\", {\n        title: '<br><h4 style=\"text-align: center;\">　<br>聆听美好<br>　</h4>',\n    });\n}\n\n\n\nlet d = [];\nd.push({\n    col_type: \"big_blank_block\"\n});\nd.push({\n    col_type: \"big_blank_block\"\n});\nd.push({\n    title: \"““””\" + \"　\".small(),\n    desc: \"““””\" + \"　\".small(),\n    col_type: \"text_center_1\",\n    url: \"hiker://empty\",\n    extra: {\n        id: \"simplePlayer:headText\",\n        lineVisible: false\n    }\n});\nd.push({\n    url: $(\"#noLoading#\").lazyRule(() => {\n        let item = findItem(\"simplePlayer:headText\") || {};\n        if (!item.pic) return \"toast://还没有播放\";\n        updateItem(\"simplePlayer:download\", {\n            extra: {\n                pageTitle: (item.title + \"-\" + item.desc).replace(/<.*?>|““””/g, \"\")\n            }\n        });\n        return \"download://\" + item.pic;\n    }),\n    col_type: \"card_pic_3_center\",\n    extra: {\n        id: \"simplePlayer:download\",\n        //pageTitle:\"\",\n    }\n});\nd.push({\n    pic_url: \"hiker://images/home_pic4\",\n    url: \"hiker://empty\",\n    col_type: \"card_pic_3_center\",\n    extra: {\n        id: \"simplePlayer:pic\"\n    }\n});\nif (!isnew) {\n    d.push({\n        url: $(\"#noLoading#\").lazyRule(() => {\n            putMyVar(\"isnew\", \"1\");\n            GM.clear(\"audioSingle\", audioSingle => audioSingle.release());\n            refreshPage();\n            return \"hiker://page/play#gameTheme##noRefresh#\";\n        }),\n        col_type: \"card_pic_3_center\",\n        extra: {\n            pageTitle: \"音乐播放器\",\n            newWindow: true,\n            windowId: MY_RULE.title,\n            //lineVisible: false\n        }\n    });\n} else {\n    d.push({\n        url: \"func://background\",\n        col_type: \"card_pic_3_center\",\n        extra: {\n            //lineVisible: false\n        }\n    });\n}\nd.push({\n    col_type: \"blank_block\",\n});\n\n\nd.push({\n    title: '<br><h4 style=\"text-align: center;\">　<br>聆听美好<br>　</h4>',\n    col_type: \"rich_text\",\n    extra: {\n        id: \"simplePlayer:lrc\",\n    }\n});\nd.push({\n    title: \"00:00/00:00\",\n    desc: \"““””\" + \"-\".repeat(50).small(),\n    url: $(\"#noLoading#\").lazyRule(() => {\n        let audioSingle = GM.defineModule(\"audioSingle\", \"audio\");\n        if (!audioSingle.hasPlayer()) return \"hiker://empty\";\n        audioSingle.startOrPause(true);\n        const hikerPop = $.require(\"https://hikerfans.com/weisyr/js/hikerPop.js\");\n\n        function formatSeconds(totalSeconds) {\n            const minutes = Math.floor(totalSeconds / 60);\n            const seconds = totalSeconds % 60;\n            return `${minutes}分${seconds}秒`;\n        }\n\n        hikerPop.seekCenter({\n            title: \"进度\",\n            max: Math.floor(audioSingle.getDuration() / 1000),\n            pos: Math.floor(audioSingle.getCurrentPosition() / 1000),\n            onChange(pos, max, fromHtml) {\n                return \"当前:\" + formatSeconds(pos) + \"/\" + formatSeconds(max);\n            },\n            rightClick(pos, max) {\n                audioSingle.seekTo(pos * 1000);\n                audioSingle.startOrPause();\n            },\n            centerTitle: \"继续\",\n            centerClick: () => audioSingle.startOrPause()\n        });\n        return \"hiker://empty\";\n    }),\n    col_type: \"text_center_1\",\n    extra: {\n        lineVisible: false,\n        id: \"simplePlayer:seek\"\n    }\n});\n\n\n\n\nlet playMode = getItem(\"playMode\", \"0\");\nd.push({\n    img: 'https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/' + [\"sj\", \"one\", \"all\"][playMode] + '.png',\n    col_type: 'icon_5',\n    url: $('#noLoading#').lazyRule((setHead, setComment) => {\n        let playMode = getItem(\"playMode\", \"0\") === \"0\" ? \"1\" : \"0\";\n        updateItem(\"simplePlayer:right\", {\n            img: 'https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/' + [\"sj\", \"one\", \"all\"][playMode] + '.png',\n        });\n        setItem(\"playMode\", playMode);\n        return \"hiker://empty\";\n    }),\n    extra: {\n        id: \"simplePlayer:right\"\n    }\n});\n\n\n\nd.push({\n    url: \"toast://完善中~\",\n    img: \"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/back.png\",\n    col_type: \"icon_5\",\n    extra: {\n        id: \"simplePlayer:back\",\n        //pageTitle:\"\",\n    }\n});\n\n\nd.push({\n    url: $(\"#noLoading#\").lazyRule(() => {\n        let audioSingle = GM.defineModule(\"audioSingle\", \"audio\");\n        audioSingle.startOrPause();\n        return \"hiker://empty\";\n    }),\n    pic_url: \"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/play.png\",\n    col_type: \"icon_5\",\n    extra: {\n        id: \"simplePlayer:zx\"\n    }\n});\n\n\n\nd.push({\n    url: $('#noLoading#').lazyRule((setHead, setComment) => {\n        let audioSingle = GM.defineModule(\"audioSingle\", \"audio\");\n        let music163 = GM.defineModule(\"music163\", \"music163\");\n        let mode = getItem(\"mode\", \"热歌榜\");\n        let mid = getItem(\"mid\", \"\");\n        let songInfo = {};\n        let id = \"\";\n        let curl = \"\";\n\n        function playAudio(url, info) {\n            let cid = id;\n            curl = url;\n            audioSingle.playNetwor(url, void 0, () => {\n                //setHead(info.picurl, info.name, info.artistsname, info.nickname, info.avatarurl, info.content, url);\n                setHead(info.picurl, info.name, info.artistsname, url);\n                toast(\"正在播放：\" + info.name);\n                try {\n                    if (cid !== id) return;\n                    let comm = music163.getRandomComment(cid);\n                    if (cid === id) {\n                        setComment(comm.nickname, comm.avatarurl, comm.content, cid);\n                    }\n                } catch (e) {\n                    setComment();\n                    //log(e.toString());\n                }\n            });\n        }\n\n        function getSong() {\n            if (mode === \"自定义歌单ID\") {\n                return music163.getRandomListSong(mid);\n            } else {\n                return music163.getRandomSong(mode);\n            }\n        }\n\n        function playVip() {\n            try {\n                if (id) {\n                    let json = JSON.parse(fetch(\"https://api.xingzhige.com/API/NetEase_CloudMusic_new/?songid=\" + id + \"&br=2\"));\n                    playAudio(json.data.src, songInfo);\n                    return true;\n                }\n            } catch (e) {\n                return false;\n            }\n            return false;\n        }\n\n        function play() {\n            try {\n                songInfo = getSong();\n                id = songInfo.id;\n                audioSingle.id = songInfo.id;\n            } catch (e) {\n                clearItem(\"mid\");\n                clearItem(\"mode\");\n                toast(e.toString());\n                return;\n            }\n            playAudio(songInfo.url, songInfo);\n        }\n        audioSingle.setCompletionListener(() => {\n            if (getItem(\"playMode\", \"0\") === \"0\") {\n                play();\n            } else {\n                playAudio(curl, songInfo);\n            }\n        });\n        audioSingle.setErrorListener(() => {\n            //toast(\"播放失败正在重新随机\");\n            if (!playVip()) {\n                play();\n            }\n        });\n        play();\n        return \"hiker://empty\";\n    }, setHead, setComment),\n    img: \"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/next.png\",\n    col_type: \"icon_5\",\n    extra: {\n        id: \"simplePlayer:next\",\n        //pageTitle:\"\",\n    }\n});\nd.push({\n    url: $(\"#noLoading#\").lazyRule(() => {\n        return $([\"热歌榜\", \"新歌榜\", \"飙升榜\", \"抖音榜\", \"电音榜\", \"自定义歌单ID\"], 1, getItem(\"mode\", \"热歌榜\")).select(() => {\n            if (input === \"自定义歌单ID\") {\n                return $(getItem(\"mid\", \"\")).input(() => {\n                    if (!input) return \"toast://不能为空\";\n                    if (Number.isNaN(Number(input))) return \"toast://id为应纯数字\";\n                    setItem(\"mid\", input);\n                    setItem(\"mode\", \"自定义歌单ID\");\n                    return \"toast://设置完成切换下一首即可\";\n                });\n            } else {\n                setItem(\"mode\", input);\n            }\n            return \"toast://设置完成切换下一首即可\";\n        });\n    }),\n    img: \"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/list.png\",\n    col_type: \"icon_5\",\n    extra: {\n        id: \"simplePlayer:list\",\n        //pageTitle:\"\",\n    }\n});\n\n\nd.push({\n    col_type: \"blank_block\",\n});\n\n\n// 评论\nd.push({\n    col_type: \"blank_block\",\n    url: \"hiker://empty\",\n    extra: {\n        id: \"simplePlayer:avatar\"\n    }\n});\nd.push({\n    col_type: \"blank_block\",\n    url: \"hiker://empty\",\n    extra: {\n        id: \"simplePlayer:comment\",\n        lineVisible: false\n    }\n});\n\n\n\nsetResult(d);"},{"col_type":"movie_3","name":"LrcParser","path":"LrcParser","rule":"function parser(lrc) {\n    lrc = lrc.split(\"\\n\");\n    let lyrics = [];\n    for (let line of lrc) {\n        if (line.startsWith(\"[\") && line.includes(\"]\")) {\n            let timestamps = [];\n            while (true) {\n                let startIndex = line.indexOf(\"[\");\n                let endIndex = line.indexOf(\"]\");\n                if (startIndex < 0 || endIndex < 0) {\n                    break;\n                }\n                let timeStr = line.substring(startIndex + 1, endIndex);\n                timeStr = timeStr.replace(\".\", \":\").replace(\"-\", \":\");\n                let timeArr = timeStr.split(\":\");\n                let minute = Number(timeArr[0]);\n                let second = Number(timeArr[1]);\n                let millisecond = Number(timeArr[2]) || 0;\n                /*if (millisecond < 100) {\n                    millisecond = millisecond * 10;\n                }*/\n                let timestamp = (minute * 60 + second) * 1000 + millisecond;\n\n                line = line.substring(endIndex + 1);\n                if (Number.isNaN(timestamp)) continue;\n                timestamps.push(timestamp);\n            }\n            timestamps.forEach(v => {\n                lyrics.push({\n                    timestamp: v,\n                    text: line\n                });\n            });\n        }\n    }\n\n    return lyrics.sort((a, b) => a.timestamp - b.timestamp);\n}\n\nfunction downNeteaseLyrics(id, path) {\n    try {\n        let lyrics = JSON.parse(fetch(\"http://music.163.com/api/song/lyric?id=\" + id + \"&lv=-1&kv=-1&tv=-1\", {\n            headers: {\n                'Referer': 'http://music.163.com/',\n                'Host': 'music.163.com',\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36',\n                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\n            }\n        }));\n        let lrc = parser(lyrics.lrc.lyric);\n        writeFile(path, JSON.stringify(lrc));\n        return lrc;\n    } catch (e) {\n        return [];\n    }\n}\n\nfunction parserNeteaseLyrics(id) {\n    let path = \"hiker://files/_cache/lrc_\" + id;\n    if (fileExist(path)) {\n        return JSON.parse(fetch(path));\n    } else {\n        return downNeteaseLyrics(id, path);\n    }\n}\n$.exports = {\n    parserNeteaseLyrics\n}"},{"col_type":"text_1","name":"music163","path":"music163","rule":"let baseUrl = \"http://music.163.com\";\nlet headers = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36\",\n    \"Cookie\": \"os=pc; MUSIC_U=00B4C1E3FD77410780EF1C0840D08F3F5E7030E2D052CA8EC98A7368F7A7F6649B216E9533A1A174D72CCADF99554228E852DE46BBD2EA2A6B2A1433A3DF48B62EAA76FC18CD59256FEF6E76D39FB42DF76CE5068C69E3944E3A6E8E3C26135DBE0D9791FCE0BD524BD27F6226FD6460B05646A549A5C429F5E01EBA4E2D8D615BD715A7D245B13D9E570E87D0ADA608A607F2FAEF22AF8EE94F827AF150E9E1C517CB0F1588EF8F1D61947C43784985CF74F69458748960CE92053CA72B5FEF92C93F12F36714F0B346C2EAF89FAA516A8974E8CF53D5492DE95ED8591CCCF45AEB627C93B0CD370AEFB656EADAD031F688A6BB2CE3C9FA31BD6166A16ABEBEDADFCFEFBDCED5D4E12FFF1403C4F2B5A3F2422EF9D0878C0B52D08967D58E2E9DACE754404E2D6E1F81F52A1F1735CA9FBB85D758F81E0A7CBA41C5739D29E284F68430EB13E4F493890840031D3BD27E\"\n}\n\n/*\nname,\nurl,\npicurl,\nartistsname,\nnickname,\navatarurl,\ncontent\n*/\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getPlaylist(mid) {\n    let json = JSON.parse(fetch(baseUrl + \"/api/v6/playlist/detail?id=\" + mid + \"&n=99999\", {\n        headers\n    }));\n    if (json.code !== 200) {\n        throw new Error(json.msg);\n    }\n    let list = json.playlist.tracks;\n    let playlist = [];\n\n    for (let it of list) {\n        playlist.push({\n            name: it.name,\n            id: it.id,\n            picurl: it.al.picUrl,\n            artistsname: it.ar.name,\n            url: \"http://music.163.com/song/media/outer/url?id=\" + it.id + \".mp3\"\n        });\n    }\n    return playlist;\n}\n\nfunction getComments(id, limit, offset) {\n    let json = JSON.parse(fetch(baseUrl + `/api/v1/resource/comments/R_SO_4_${id}?limit=${limit||15}&offset=${offset||0}`, {\n        headers\n    }));\n    if (json.code !== 200) {\n        throw new Error(json.msg);\n    }\n    let comments = [];\n    let commentsjson = json.hotComments || json.comments;\n    for (let it of commentsjson) {\n        comments.push({\n            nickname: it.user.nickname,\n            avatarurl: it.user.avatarUrl,\n            content: it.content,\n        });\n    }\n    return comments;\n}\nlet cPlaylist = null;\nlet cmid = null;\n\nfunction getRandomListSong(mid) {\n    if (!cPlaylist || mid !== cmid) {\n        cPlaylist = getPlaylist(mid);\n        cmid = mid;\n    }\n    let song = cPlaylist[getRandomInt(0, cPlaylist.length)];\n    return song;\n}\n\nfunction getRandomComment(id) {\n    let comm = getComments(id, 16);\n    return comm[getRandomInt(0, comm.length)] || {};\n}\n\nfunction getRandomSong(sort) {\n    let json = JSON.parse(fetch(buildUrl(\"https://api.uomg.com/api/rand.music\", {\n        format: \"json\",\n        sort,\n    })));\n\n    if (json.code !== 1) {\n        throw new Error(json.msg);\n    }\n    let song = json.data;\n    let id = getParam(\"id\", \"\", song.url).split(\".\")[0];\n    song.id = id;\n    return song;\n}\n$.exports = {\n    getRandomListSong,\n    getRandomSong,\n    getRandomComment,\n    getComments\n}"},{"col_type":"movie_3","name":"评论","path":"comment","rule":"js:\ntry {\n    let music163 = $.require(\"music163\");\n    let id = getParam(\"id\", \"\");\n    let comments = music163.getComments(id, 15, (MY_PAGE - 1) * 15 + (MY_PAGE > 1 ? 1 : 0));\n    let d = [];\n    for (let it of comments) {\n        d.push({\n            col_type: \"avatar\",\n            pic_url: it.avatarurl,\n            title: it.nickname,\n            url: \"hiker://empty\"\n        });\n        d.push({\n            col_type: \"text_1\",\n            title: it.content,\n            url: \"hiker://empty\"\n        });\n    }\n    setPageTitle(\"网抑评论\");\n    setResult(d);\n} catch (e) {\n    log(e.toString())\n    setResult([]);\n}"},{"col_type":"movie_3","name":"AudioController","path":"AudioController","rule":"js:\n\n\n"},{"col_type":"movie_3","name":"全局变量3","path":"G3","rule":"const JavaMap = java.util.HashMap;\nconst globalMapSymbol = Symbol(\"globalMap\");\nconst mapSymbol = Symbol(\"myJavaMap\");\nconst selfSymbol = Symbol(\"selfKey\");\n\nfunction getTypeName(obj) {\n    return Object.prototype.toString.call(obj);\n}\n\nconst protoDic = new Map([\n    [\"[object Array]\", Array],\n    [\"[object Date]\", Date],\n    [\"[object Object]\", Object],\n    [\"[object Promise]\", Promise],\n    [\"[object Map]\", Map],\n    [\"[object Symbol]\", Symbol],\n    [\"[object Array]\", Array],\n    [\"[object Function]\", Function],\n    [\"Error\", Error],\n    [\"TypeError\", TypeError],\n    [\"EvalError\", EvalError],\n    [\"SyntaxError\", SyntaxError],\n    [\"ReferenceError\", ReferenceError],\n    [\"RangeError\", RangeError]\n]);\n\nfunction dealWithVal(val) {\n    let typeName = getTypeName(val);\n    let errorName;\n    if (val instanceof java.lang.String) {\n        return String(val);\n    } else if (val instanceof java.lang.Double) {\n        return Number(val);\n    } else if (val instanceof java.lang.Boolean) {\n        if (String(val) === \"true\") {\n            val = true;\n        } else {\n            val = false;\n        }\n        return val;\n    } else if (typeName === \"[object Error]\" && protoDic.has((errorName = val.toString()))) {\n        val.__proto__ = val.__proto__ && Object.assign(Object.create(protoDic.get(typeName).prototype), val.__proto__);\n        return val;\n    } else if (typeName !== \"[object javaObject]\" && protoDic.has(typeName)) {\n        val.__proto__ = val.__proto__ && Object.assign(Object.create(protoDic.get(typeName).prototype), val.__proto__);\n        return val;\n    }\n    return val;\n}\n\nfunction isString(str) {\n    return typeof(str) === \"string\" || str instanceof java.lang.String;\n}\n\nfunction GlobalVar(javaMap, selfKey) {\n    this[globalMapSymbol] = javaMap;\n    this[selfSymbol] = selfKey;\n    this.raw = false;\n}\nObject.assign(GlobalVar.prototype, {\n    getHashMap(symbol) {\n        if (symbol !== mapSymbol) return null;\n        if (this[mapSymbol]) return this[mapSymbol];\n        let selfKey = this[selfSymbol];\n        if (!selfKey) {\n            throw Error(\"当前没有全局环境，请使用setSelfKey指定规则名\");\n        }\n        this[mapSymbol] = this[globalMapSymbol];\n        return this[mapSymbol];\n    },\n    setSelfKey(key) {\n        if (!this[selfSymbol]) this[selfSymbol] = key;\n    },\n    getMapKey(key) {\n        return String(this[selfSymbol] + key);\n    },\n    get(key, def) {\n        key = this.getMapKey(key);\n        let hashMap = this.getHashMap(mapSymbol);\n        if (!hashMap.containsKey(key)) return def;\n        let val = hashMap.get(key);\n        if (this.raw) {\n            return val;\n        } else {\n            return dealWithVal(val);\n        }\n    },\n    getRaw(key, def) {\n        key = this.getMapKey(key);\n        let hashMap = this.getHashMap(mapSymbol);\n        if (!hashMap.containsKey(key)) return def;\n        return hashMap.get(key);\n    },\n    useRaw(noUseRaw) {\n        this.raw = !noUseRaw;\n        return this;\n    },\n    put(key, val) {\n        if (val === void 0) return;\n        let hashMap = this.getHashMap(mapSymbol);\n        hashMap.put(this.getMapKey(key), val);\n        return val;\n    },\n    clearAll() {\n        let self = this[selfSymbol];\n        let hashMap = this.getHashMap(mapSymbol);\n        this.getHashMap(mapSymbol).forEach((key, value) => {\n            if (isString(key) && String(key).startsWith(self)) {\n                hashMap.remove(key);\n            }\n        });\n    },\n    clear(key, call) {\n        if (this.hasButNoCall(key)) {\n            let hashMap = this.getHashMap(mapSymbol);\n            if (typeof call === \"function\") {\n                call(this.get(key));\n            }\n            hashMap.remove(this.getMapKey(key));\n        }\n    },\n    has(key, call) {\n        let mapKey = this.getMapKey(key);\n        let hashMap = this.getHashMap(mapSymbol);\n        let res = !!hashMap.containsKey(mapKey);\n        if (res && typeof call === \"function\") {\n            call(this.get(key));\n        }\n        return res;\n    },\n    hasButNoCall(key) {\n        let mapKey = this.getMapKey(key);\n        let hashMap = this.getHashMap(mapSymbol);\n        return !!hashMap.containsKey(mapKey);\n    },\n    define(key, val) {\n        if (this.hasButNoCall(key)) {\n            return this.get(key);\n        }\n        return this.put(key, val);\n    },\n    defineLazy(key, lazy) {\n        if (this.hasButNoCall(key)) {\n            return this.get(key);\n        }\n        return this.put(key, lazy());\n    },\n    defineModule(key, path, isNew) {\n        if (isNew) return this.put(key, $.require(path, key));\n        return this.defineLazy(key, () => $.require(path, key));\n    },\n    listKeys() {\n        let entrySet = this.getHashMap(mapSymbol).entrySet();\n        let selfKey = this[selfSymbol];\n        let keys = [];\n\n        for (let entry of entrySet) {\n            let key = entry.getKey();\n            if (isString(key) && key.startsWith(selfKey)) {\n                keys.push(String(key).replace(selfKey, \"\"));\n            }\n        }\n        return keys;\n    },\n    toJSON() {\n        let object = {};\n        let hashMap = this.getHashMap(mapSymbol);\n        let selfKey = this[selfSymbol];\n        hashMap.forEach((key, value) => {\n            if (!isString(key)) {\n                return;\n            }\n            let keyString = String(key);\n            if (keyString.startsWith(selfKey)) {\n                object[keyString.replace(selfKey, \"\")] = hashMap.get(key);\n            }\n        });\n        return object;\n    }\n});\nGlobalVar.prototype[Symbol.iterator] = function() {\n    let hashMap = this.getHashMap(mapSymbol);\n    let selfKey = this[selfSymbol];\n    let iterator = hashMap.entrySet().iterator();\n    return (function*() {\n        while (iterator.hasNext()) {\n            let me = iterator.next();\n            let key = me.getKey();\n            if (!isString(key)) {\n                continue;\n            }\n            key = String(key);\n            if (key.startsWith(selfKey)) {\n                yield [key.replace(selfKey, \"\"), dealWithVal(me.getValue())];\n            }\n        }\n    })();\n}\n\nconst GlobalMap = _globalMap;\n_globalMap = void 0;\nlet RuleGlobalMapKey = typeof MY_RULE !== \"undefined\" ? MY_RULE.title : \"\";\nlet AppGlobalMapKey = \"AppGlobalMap\";\nif (RuleGlobalMapKey === AppGlobalMapKey) {\n    let randomKey = \"\";\n    if (GlobalMap.containsKey(0)) {\n        randomKey = String(GlobalMap.get(0));\n    } else {\n        randomKey = String(Date.now());\n        GlobalMap.put(0, randomKey);\n    }\n    RuleGlobalMapKey = RuleGlobalMapKey + randomKey;\n}\n$.exports = {\n    GA: new GlobalVar(GlobalMap, AppGlobalMapKey),\n    GM: new GlobalVar(GlobalMap, RuleGlobalMapKey)\n}"}],"title":"简易播放器","author":"@LoyDgIk","version":6,"type":"video","url":"hiker://empty#noRefresh#","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nlet isnew = getMyVar(\"isnew\", \"\");\n$.require(\"hiker://page/music163\")\nif (isnew) {\n    setResult([{\n        title: \"播放页面\",\n        url: $(\"#noLoading#\").lazyRule(() => {\n            putMyVar(\"isnew\", \"1\");\n            return \"hiker://page/play#gameTheme##noRefresh#\";\n        }),\n        col_type: \"text_center_1\",\n        extra: {\n            newWindow: true,\n            pageTitle: \"音乐播放器\",\n            windowId: MY_RULE.title\n        }\n    }]);\n} else {\n    $.require(\"play\");\n}","searchFind":"","search_url":"","group":"⑧工具","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"/*<$>@include startG3@include end<$>*/\n","pages":"[{\"col_type\":\"movie_3\",\"name\":\"audioSingle\",\"path\":\"audio\",\"rule\":\"js:\\nconst MediaPlayer = android.media.MediaPlayer;\\nlet mediaPlayer = null;\\nlet isPrepare = false;\\nlet currentUrl = null;\\nlet errorListener = () => {};\\nlet completionListener = () => {};\\nlet startListener = () => {};\\nlet stateListener = () => {};\\nlet endListener = () => {};\\nlet playSpeed = null;\\n\\nfunction release() {\\n    if (hasPlayer()) {\\n        mediaPlayer.release();\\n        mediaPlayer = null;\\n        isPrepare = false;\\n        currentUrl = null;\\n        runEndListener();\\n    }\\n}\\n\\nfunction setErrorListener(func) {\\n    if (typeof func !== \\\"function\\\") return;\\n    errorListener = func;\\n}\\n\\nfunction setCompletionListener(func) {\\n    if (typeof func !== \\\"function\\\") return;\\n    completionListener = func;\\n}\\n\\nfunction setStartListener(func) {\\n    if (typeof func !== \\\"function\\\") return;\\n    startListener = func;\\n}\\n\\nfunction setEndListener(func) {\\n    if (typeof func !== \\\"function\\\") return;\\n    endListener = func;\\n}\\n\\nfunction setStateListener(func) {\\n    if (typeof func !== \\\"function\\\") return;\\n    stateListener = func;\\n}\\n\\nfunction runCompletionListener() {\\n    tryCallBack(completionListener);\\n}\\n\\nfunction runErrorListener(e) {\\n    tryCallBack(errorListener, [e]);\\n}\\n\\nfunction runStartListener() {\\n    tryCallBack(() => {\\n        startListener();\\n        stateListener(true);\\n    });\\n}\\n\\nfunction runStateListener(isPlaying) {\\n    tryCallBack(stateListener, [isPlaying]);\\n}\\n\\nfunction runEndListener() {\\n    tryCallBack(() => {\\n        endListener();\\n        stateListener(false);\\n    });\\n}\\n\\nfunction tryCallBack(callBack, args) {\\n    if (typeof callBack !== \\\"function\\\") {\\n        return;\\n    }\\n    new java.lang.Thread(new java.lang.Runnable({\\n        run() {\\n            try {\\n                args = args || [];\\n                callBack.apply(null, args);\\n            } catch (e) {\\n                let message = \\\"\\\",\\n                    lineNumber = -1;\\n                if (e instanceof Error) {\\n                    message = e.message;\\n                    lineNumber = e.lineNumber;\\n                } else {\\n                    message = String(e);\\n                }\\n                log(message);\\n                setError(\\\"\\\\n行数：\\\" + lineNumber + \\\"\\\\n详情：\\\" + message);\\n            }\\n        }\\n    })).start();\\n}\\n\\nfunction toMap(object) {\\n    let map = new java.util.HashMap();\\n    for (let [key, value] of Object.entries(object)) {\\n        if (typeof value !== \\\"string\\\") continue;\\n        map.put(key, value);\\n    }\\n    return map;\\n}\\n\\nfunction play(url, headers, callBack) {\\n    try {\\n        release();\\n        mediaPlayer = new MediaPlayer();\\n        if ($.type(headers) === \\\"object\\\") {\\n            mediaPlayer.setDataSource(url, toMap(headers));\\n        } else {\\n            mediaPlayer.setDataSource(url);\\n        }\\n        setPlayerSpeed(playSpeed);\\n        mediaPlayer.setOnCompletionListener(() => {\\n            release();\\n            runCompletionListener();\\n        });\\n        mediaPlayer.setOnErrorListener((e) => {\\n            // 当发生错误时，将 MediaPlayer 设置为 null\\n            mediaPlayer = null;\\n            isPrepare = false;\\n            currentUrl = null;\\n            runErrorListener(e);\\n            return false;\\n        });\\n        mediaPlayer.prepare();\\n        isPrepare = true;\\n        currentUrl = url;\\n        mediaPlayer.start();\\n        runStartListener();\\n        tryCallBack(callBack);\\n        return mediaPlayer;\\n    } catch (e) {\\n        release();\\n        runErrorListener(e);\\n        //log(e.toString());\\n    }\\n}\\n\\nfunction playAsync(url, headers, callBack) {\\n    try {\\n        release();\\n        let asyncMediaPlayer = new MediaPlayer();\\n        if ($.type(headers) === \\\"object\\\") {\\n            asyncMediaPlayer.setDataSource(url, toMap(headers));\\n        } else {\\n            asyncMediaPlayer.setDataSource(url);\\n        }\\n        asyncMediaPlayer.setOnCompletionListener(() => {\\n            release();\\n            runCompletionListener();\\n        });\\n        asyncMediaPlayer.setOnErrorListener((e) => {\\n            // 当发生错误时，将 MediaPlayer 设置为 null\\n            //mediaPlayer = null;\\n            asyncMediaPlayer = null;\\n            isPrepare = false;\\n            currentUrl = null;\\n            runErrorListener(e);\\n            return false;\\n        });\\n        asyncMediaPlayer.setOnPreparedListener(() => {\\n            if (asyncMediaPlayer === mediaPlayer && asyncMediaPlayer != null) {\\n                isPrepare = true;\\n                currentUrl = url;\\n                asyncMediaPlayer.start();\\n                runStartListener();\\n                tryCallBack(callBack);\\n            } else {\\n                asyncMediaPlayer = null;\\n            }\\n        });\\n        asyncMediaPlayer.prepareAsync();\\n        mediaPlayer = asyncMediaPlayer;\\n        setPlayerSpeed(playSpeed);\\n        return asyncMediaPlayer;\\n    } catch (e) {\\n        release();\\n        runErrorListener(e);\\n        //log(e.toString());\\n    }\\n}\\n//直接播放网络音频链接，有可能播放失败还没有缓存，还是下载一下比较稳妥\\nfunction playNetwor(url, headers, callBack) {\\n    release();\\n    let path = getLocalUrl(url);\\n    tryCallBack(() => {\\n        try {\\n            requireDownload(url, path, headers);\\n            if (fileExist(\\\"file://\\\" + path)) {\\n                play(path, void 0, callBack);\\n            } else {\\n                throw new Error(\\\"下载失败\\\");\\n            }\\n        } catch (e) {\\n            errorListener(e);\\n        }\\n    });\\n}\\n\\nfunction startOrPause(isPause) {\\n    if (hasPlayer()) {\\n        if (isPause || mediaPlayer.isPlaying()) {\\n            mediaPlayer.pause();\\n        } else {\\n            mediaPlayer.start();\\n        }\\n        runStateListener(mediaPlayer.isPlaying());\\n    }\\n}\\n\\nfunction seekTo(msec) {\\n    if (hasPlayer()) {\\n        mediaPlayer.seekTo(msec);\\n    }\\n}\\n\\nfunction getDuration() {\\n    if (hasPlayer()) {\\n        return mediaPlayer.getDuration();\\n    }\\n    return null;\\n}\\n\\nfunction getCurrentPosition() {\\n    if (hasPlayer()) {\\n        return mediaPlayer.getCurrentPosition();\\n    }\\n    return null;\\n}\\n\\nfunction isPlaying() {\\n    return hasPlayer() && mediaPlayer.isPlaying();\\n}\\n\\nfunction hasPlayer() {\\n    return mediaPlayer != null && isPrepare;\\n}\\n\\nfunction getCurrentUrl() {\\n    return currentUrl;\\n}\\n\\nfunction getLocalUrl(url) {\\n    return getPath(\\\"hiker://files/_cache/\\\" + md5(url)).slice(7);\\n}\\n\\nfunction setPlayerSpeed(speed) {\\n    if (speed > 0 && mediaPlayer != null && android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {\\n        let playbackParams = mediaPlayer.getPlaybackParams();\\n        playbackParams.setSpeed(speed);\\n        mediaPlayer.setPlaybackParams(playbackParams);\\n    }\\n}\\n\\nfunction setSpeed(speed) {\\n    if (speed <= 0) return;\\n    playSpeed = speed;\\n    setPlayerSpeed(speed);\\n}\\n\\nfunction getSpeed() {\\n    return playSpeed || 1;\\n}\\n$.exports = {\\n    play,\\n    playAsync,\\n    playNetwor,\\n    release,\\n    startOrPause,\\n    seekTo,\\n    getDuration,\\n    getCurrentPosition,\\n    isPlaying,\\n    hasPlayer,\\n    getCurrentUrl,\\n    getLocalUrl,\\n    setErrorListener,\\n    setCompletionListener,\\n    setStateListener,\\n    setStartListener,\\n    setEndListener,\\n    setSpeed,\\n    getSpeed\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"playPage\",\"path\":\"play\",\"rule\":\"js:\\n\\nlet isnew = getMyVar(\\\"isnew\\\", \\\"\\\");\\naddListener(\\\"onClose\\\", $.toString((isnew) => {\\n    let isnews = getMyVar(\\\"isnew\\\", \\\"\\\");\\n    if (isnews === isnew) {\\n        clearMyVar(\\\"isnew\\\");\\n        GM.clear(\\\"audioSingle\\\", audioSingle => audioSingle.release());\\n        unRegisterTask(\\\"simplePlayer:seek\\\");\\n        unRegisterTask(\\\"simplePlayer:lrc\\\");\\n    }\\n}, isnew));\\nlet audioSingle = GM.defineModule(\\\"audioSingle\\\", \\\"audio\\\");\\nlet LrcParser = $.require(\\\"LrcParser\\\");\\n\\nfunction setTimeTask(pos, total) {\\n    let nowDate = Date.now();\\n    registerTask(\\\"simplePlayer:seek\\\", 965, $.toString((nowDate, pos, total) => {\\n        function formatSeconds(totalSeconds) {\\n            const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, \\\"0\\\");\\n            const seconds = String(Math.floor(totalSeconds % 60)).padStart(2, \\\"0\\\");\\n            return `${minutes}:${seconds}`;\\n        }\\n        let trueNowDate = Date.now() - nowDate;\\n        let currentPosition = pos + trueNowDate;\\n        if (currentPosition > total) {\\n            currentPosition = total;\\n            unRegisterTask(\\\"simplePlayer:seek\\\");\\n        }\\n        let rateNumber = 50;\\n        let symbol = \\\"-\\\";\\n        let per = Math.round((currentPosition / total) * rateNumber);\\n        updateItem(\\\"simplePlayer:seek\\\", {\\n            title: formatSeconds(currentPosition / 1000) + \\\"/\\\" + formatSeconds(total / 1000),\\n            desc: \\\"““””\\\" + (symbol.repeat(per).fontcolor(\\\"#13B66A\\\") + symbol.repeat(rateNumber - per)).small()\\n        });\\n    }, nowDate, pos, total));\\n    if (!audioSingle.id) return;\\n    let songId = audioSingle.id;\\n    let lrc = LrcParser.parserNeteaseLyrics(songId);\\n    if (lrc.length === 0) return;\\n    registerTask(\\\"simplePlayer:lrc\\\", 100, $.toString((nowDate, pos, total, lrcList) => {\\n        try {\\n            function formatSeconds(totalSeconds) {\\n                const minutes = String(Math.floor(totalSeconds / 60)).padStart(2, \\\"0\\\");\\n                const seconds = String(Math.floor(totalSeconds % 60)).padStart(2, \\\"0\\\");\\n                return `${minutes}:${seconds}`;\\n            }\\n            let trueNowDate = Date.now() - nowDate;\\n            let currentPosition = pos + trueNowDate;\\n            if (currentPosition > total) {\\n                currentPosition = total;\\n                unRegisterTask(\\\"simplePlayer:lrc\\\");\\n            }\\n            let index = 0;\\n            for (let i = 0; i < lrcList.length; i++) {\\n                if (i < lrcList.length - 1) {\\n                    if (currentPosition < lrcList[i].timestamp && i == 0) {\\n                        index = i;\\n                    }\\n                    if (currentPosition > lrcList[i].timestamp &&\\n                        currentPosition < lrcList[i + 1].timestamp) {\\n                        index = i;\\n                    }\\n                }\\n                if (i == lrcList.length - 1 &&\\n                    currentPosition > lrcList[i].timestamp) {\\n                    index = i;\\n                }\\n            }\\n            let symbol = \\\"　\\\";\\n            let lrcText = findItem(\\\"simplePlayer:lrc\\\") || {};\\n            let lrcContent = lrcText.desc || \\\"\\\";\\n            let a = String(lrcList[index].text || symbol);\\n            let b = index < lrcList.length - 1 ? (lrcList[index + 1].text || symbol) : symbol;\\n            let c = index - 1 > 0 ? (lrcList[index - 1].text || symbol) : symbol;\\n            let desc = c + a + b;\\n            if (desc === lrcContent) return;\\n            updateItem(\\\"simplePlayer:lrc\\\", {\\n                title: '<br><h4 style=\\\"text-align: center;\\\">' +\\n                    c.small().small().fontcolor(\\\"grey\\\") + \\\"<br>\\\" +\\n                    a.fontcolor(\\\"#13B66A\\\") + \\\"<br>\\\" +\\n                    b.small().small().fontcolor(\\\"grey\\\") + \\\"<br>\\\" +\\n                    '</h4>',\\n                desc: desc\\n            });\\n        } catch (e) {\\n            //log(e.toString());\\n            unRegisterTask(\\\"simplePlayer:lrc\\\");\\n        }\\n    }, nowDate, pos, total, lrc));\\n}\\n\\nfunction clearTimeTask() {\\n    unRegisterTask(\\\"simplePlayer:seek\\\");\\n    unRegisterTask(\\\"simplePlayer:lrc\\\");\\n}\\n\\nif (!audioSingle.hasPlayer()) {\\n    audioSingle.setStateListener((isPlaying) => {\\n        updateItem(\\\"simplePlayer:zx\\\", {\\n            pic_url: isPlaying ? \\\"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/stop.png\\\" : \\\"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/play.png\\\",\\n            // title: isPlaying ? \\\"暂停\\\" : \\\"继续\\\"\\n        });\\n        if (isPlaying) {\\n            setTimeTask(audioSingle.getCurrentPosition(), audioSingle.getDuration());\\n        } else {\\n            clearTimeTask();\\n        }\\n    });\\n    audioSingle.setStartListener(() => {\\n        setTimeTask(0, audioSingle.getDuration());\\n    });\\n    audioSingle.setEndListener(() => {\\n        resetLrc();\\n        //setHead();\\n        clearTimeTask();\\n        updateItem(\\\"simplePlayer:seek\\\", {\\n            title: \\\"00:00/00:00\\\",\\n        });\\n    });\\n}\\n\\nfunction setHead(pic, text, desc, playUrl) {\\n    updateItem(\\\"simplePlayer:pic\\\", {\\n        pic_url: pic || \\\"hiker://images/home_pic4\\\",\\n        url: pic || \\\"hiker://empty\\\"\\n    });\\n    updateItem(\\\"simplePlayer:headText\\\", {\\n        title: \\\"““””\\\" + (text || \\\"　\\\").small().sub(),\\n        desc: \\\"““””\\\" + (desc || \\\"　\\\").small(),\\n        pic_url: playUrl\\n    });\\n\\n}\\n\\nfunction setComment(name, avatar, comment, id) {\\n    updateItem(\\\"simplePlayer:avatar\\\", {\\n        title: name,\\n        pic_url: avatar,\\n        col_type: (name || avatar) ? \\\"avatar\\\" : \\\"blank_block\\\"\\n    });\\n    updateItem(\\\"simplePlayer:comment\\\", {\\n        title: comment,\\n        col_type: ((name || avatar) && comment) ? \\\"text_1\\\" : \\\"blank_block\\\",\\n        url: id ? \\\"hiker://page/comment?page=fypage&id=\\\" + id : \\\"hiker://empty\\\"\\n    });\\n}\\n\\nfunction resetLrc() {\\n    updateItem(\\\"simplePlayer:lrc\\\", {\\n        title: '<br><h4 style=\\\"text-align: center;\\\">　<br>聆听美好<br>　</h4>',\\n    });\\n}\\n\\n\\n\\nlet d = [];\\nd.push({\\n    col_type: \\\"big_blank_block\\\"\\n});\\nd.push({\\n    col_type: \\\"big_blank_block\\\"\\n});\\nd.push({\\n    title: \\\"““””\\\" + \\\"　\\\".small(),\\n    desc: \\\"““””\\\" + \\\"　\\\".small(),\\n    col_type: \\\"text_center_1\\\",\\n    url: \\\"hiker://empty\\\",\\n    extra: {\\n        id: \\\"simplePlayer:headText\\\",\\n        lineVisible: false\\n    }\\n});\\nd.push({\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        let item = findItem(\\\"simplePlayer:headText\\\") || {};\\n        if (!item.pic) return \\\"toast://还没有播放\\\";\\n        updateItem(\\\"simplePlayer:download\\\", {\\n            extra: {\\n                pageTitle: (item.title + \\\"-\\\" + item.desc).replace(/<.*?>|““””/g, \\\"\\\")\\n            }\\n        });\\n        return \\\"download://\\\" + item.pic;\\n    }),\\n    col_type: \\\"card_pic_3_center\\\",\\n    extra: {\\n        id: \\\"simplePlayer:download\\\",\\n        //pageTitle:\\\"\\\",\\n    }\\n});\\nd.push({\\n    pic_url: \\\"hiker://images/home_pic4\\\",\\n    url: \\\"hiker://empty\\\",\\n    col_type: \\\"card_pic_3_center\\\",\\n    extra: {\\n        id: \\\"simplePlayer:pic\\\"\\n    }\\n});\\nif (!isnew) {\\n    d.push({\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            putMyVar(\\\"isnew\\\", \\\"1\\\");\\n            GM.clear(\\\"audioSingle\\\", audioSingle => audioSingle.release());\\n            refreshPage();\\n            return \\\"hiker://page/play#gameTheme##noRefresh#\\\";\\n        }),\\n        col_type: \\\"card_pic_3_center\\\",\\n        extra: {\\n            pageTitle: \\\"音乐播放器\\\",\\n            newWindow: true,\\n            windowId: MY_RULE.title,\\n            //lineVisible: false\\n        }\\n    });\\n} else {\\n    d.push({\\n        url: \\\"func://background\\\",\\n        col_type: \\\"card_pic_3_center\\\",\\n        extra: {\\n            //lineVisible: false\\n        }\\n    });\\n}\\nd.push({\\n    col_type: \\\"blank_block\\\",\\n});\\n\\n\\nd.push({\\n    title: '<br><h4 style=\\\"text-align: center;\\\">　<br>聆听美好<br>　</h4>',\\n    col_type: \\\"rich_text\\\",\\n    extra: {\\n        id: \\\"simplePlayer:lrc\\\",\\n    }\\n});\\nd.push({\\n    title: \\\"00:00/00:00\\\",\\n    desc: \\\"““””\\\" + \\\"-\\\".repeat(50).small(),\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        let audioSingle = GM.defineModule(\\\"audioSingle\\\", \\\"audio\\\");\\n        if (!audioSingle.hasPlayer()) return \\\"hiker://empty\\\";\\n        audioSingle.startOrPause(true);\\n        const hikerPop = $.require(\\\"https://hikerfans.com/weisyr/js/hikerPop.js\\\");\\n\\n        function formatSeconds(totalSeconds) {\\n            const minutes = Math.floor(totalSeconds / 60);\\n            const seconds = totalSeconds % 60;\\n            return `${minutes}分${seconds}秒`;\\n        }\\n\\n        hikerPop.seekCenter({\\n            title: \\\"进度\\\",\\n            max: Math.floor(audioSingle.getDuration() / 1000),\\n            pos: Math.floor(audioSingle.getCurrentPosition() / 1000),\\n            onChange(pos, max, fromHtml) {\\n                return \\\"当前:\\\" + formatSeconds(pos) + \\\"/\\\" + formatSeconds(max);\\n            },\\n            rightClick(pos, max) {\\n                audioSingle.seekTo(pos * 1000);\\n                audioSingle.startOrPause();\\n            },\\n            centerTitle: \\\"继续\\\",\\n            centerClick: () => audioSingle.startOrPause()\\n        });\\n        return \\\"hiker://empty\\\";\\n    }),\\n    col_type: \\\"text_center_1\\\",\\n    extra: {\\n        lineVisible: false,\\n        id: \\\"simplePlayer:seek\\\"\\n    }\\n});\\n\\n\\n\\n\\nlet playMode = getItem(\\\"playMode\\\", \\\"0\\\");\\nd.push({\\n    img: 'https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/' + [\\\"sj\\\", \\\"one\\\", \\\"all\\\"][playMode] + '.png',\\n    col_type: 'icon_5',\\n    url: $('#noLoading#').lazyRule((setHead, setComment) => {\\n        let playMode = getItem(\\\"playMode\\\", \\\"0\\\") === \\\"0\\\" ? \\\"1\\\" : \\\"0\\\";\\n        updateItem(\\\"simplePlayer:right\\\", {\\n            img: 'https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/' + [\\\"sj\\\", \\\"one\\\", \\\"all\\\"][playMode] + '.png',\\n        });\\n        setItem(\\\"playMode\\\", playMode);\\n        return \\\"hiker://empty\\\";\\n    }),\\n    extra: {\\n        id: \\\"simplePlayer:right\\\"\\n    }\\n});\\n\\n\\n\\nd.push({\\n    url: \\\"toast://完善中~\\\",\\n    img: \\\"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/back.png\\\",\\n    col_type: \\\"icon_5\\\",\\n    extra: {\\n        id: \\\"simplePlayer:back\\\",\\n        //pageTitle:\\\"\\\",\\n    }\\n});\\n\\n\\nd.push({\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        let audioSingle = GM.defineModule(\\\"audioSingle\\\", \\\"audio\\\");\\n        audioSingle.startOrPause();\\n        return \\\"hiker://empty\\\";\\n    }),\\n    pic_url: \\\"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/play.png\\\",\\n    col_type: \\\"icon_5\\\",\\n    extra: {\\n        id: \\\"simplePlayer:zx\\\"\\n    }\\n});\\n\\n\\n\\nd.push({\\n    url: $('#noLoading#').lazyRule((setHead, setComment) => {\\n        let audioSingle = GM.defineModule(\\\"audioSingle\\\", \\\"audio\\\");\\n        let music163 = GM.defineModule(\\\"music163\\\", \\\"music163\\\");\\n        let mode = getItem(\\\"mode\\\", \\\"热歌榜\\\");\\n        let mid = getItem(\\\"mid\\\", \\\"\\\");\\n        let songInfo = {};\\n        let id = \\\"\\\";\\n        let curl = \\\"\\\";\\n\\n        function playAudio(url, info) {\\n            let cid = id;\\n            curl = url;\\n            audioSingle.playNetwor(url, void 0, () => {\\n                //setHead(info.picurl, info.name, info.artistsname, info.nickname, info.avatarurl, info.content, url);\\n                setHead(info.picurl, info.name, info.artistsname, url);\\n                toast(\\\"正在播放：\\\" + info.name);\\n                try {\\n                    if (cid !== id) return;\\n                    let comm = music163.getRandomComment(cid);\\n                    if (cid === id) {\\n                        setComment(comm.nickname, comm.avatarurl, comm.content, cid);\\n                    }\\n                } catch (e) {\\n                    setComment();\\n                    //log(e.toString());\\n                }\\n            });\\n        }\\n\\n        function getSong() {\\n            if (mode === \\\"自定义歌单ID\\\") {\\n                return music163.getRandomListSong(mid);\\n            } else {\\n                return music163.getRandomSong(mode);\\n            }\\n        }\\n\\n        function playVip() {\\n            try {\\n                if (id) {\\n                    let json = JSON.parse(fetch(\\\"https://api.xingzhige.com/API/NetEase_CloudMusic_new/?songid=\\\" + id + \\\"&br=2\\\"));\\n                    playAudio(json.data.src, songInfo);\\n                    return true;\\n                }\\n            } catch (e) {\\n                return false;\\n            }\\n            return false;\\n        }\\n\\n        function play() {\\n            try {\\n                songInfo = getSong();\\n                id = songInfo.id;\\n                audioSingle.id = songInfo.id;\\n            } catch (e) {\\n                clearItem(\\\"mid\\\");\\n                clearItem(\\\"mode\\\");\\n                toast(e.toString());\\n                return;\\n            }\\n            playAudio(songInfo.url, songInfo);\\n        }\\n        audioSingle.setCompletionListener(() => {\\n            if (getItem(\\\"playMode\\\", \\\"0\\\") === \\\"0\\\") {\\n                play();\\n            } else {\\n                playAudio(curl, songInfo);\\n            }\\n        });\\n        audioSingle.setErrorListener(() => {\\n            //toast(\\\"播放失败正在重新随机\\\");\\n            if (!playVip()) {\\n                play();\\n            }\\n        });\\n        play();\\n        return \\\"hiker://empty\\\";\\n    }, setHead, setComment),\\n    img: \\\"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/next.png\\\",\\n    col_type: \\\"icon_5\\\",\\n    extra: {\\n        id: \\\"simplePlayer:next\\\",\\n        //pageTitle:\\\"\\\",\\n    }\\n});\\nd.push({\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        return $([\\\"热歌榜\\\", \\\"新歌榜\\\", \\\"飙升榜\\\", \\\"抖音榜\\\", \\\"电音榜\\\", \\\"自定义歌单ID\\\"], 1, getItem(\\\"mode\\\", \\\"热歌榜\\\")).select(() => {\\n            if (input === \\\"自定义歌单ID\\\") {\\n                return $(getItem(\\\"mid\\\", \\\"\\\")).input(() => {\\n                    if (!input) return \\\"toast://不能为空\\\";\\n                    if (Number.isNaN(Number(input))) return \\\"toast://id为应纯数字\\\";\\n                    setItem(\\\"mid\\\", input);\\n                    setItem(\\\"mode\\\", \\\"自定义歌单ID\\\");\\n                    return \\\"toast://设置完成切换下一首即可\\\";\\n                });\\n            } else {\\n                setItem(\\\"mode\\\", input);\\n            }\\n            return \\\"toast://设置完成切换下一首即可\\\";\\n        });\\n    }),\\n    img: \\\"https://gitee.com/ThomasYou/haikuo/raw/master/gcsp1999/list.png\\\",\\n    col_type: \\\"icon_5\\\",\\n    extra: {\\n        id: \\\"simplePlayer:list\\\",\\n        //pageTitle:\\\"\\\",\\n    }\\n});\\n\\n\\nd.push({\\n    col_type: \\\"blank_block\\\",\\n});\\n\\n\\n// 评论\\nd.push({\\n    col_type: \\\"blank_block\\\",\\n    url: \\\"hiker://empty\\\",\\n    extra: {\\n        id: \\\"simplePlayer:avatar\\\"\\n    }\\n});\\nd.push({\\n    col_type: \\\"blank_block\\\",\\n    url: \\\"hiker://empty\\\",\\n    extra: {\\n        id: \\\"simplePlayer:comment\\\",\\n        lineVisible: false\\n    }\\n});\\n\\n\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"LrcParser\",\"path\":\"LrcParser\",\"rule\":\"function parser(lrc) {\\n    lrc = lrc.split(\\\"\\\\n\\\");\\n    let lyrics = [];\\n    for (let line of lrc) {\\n        if (line.startsWith(\\\"[\\\") && line.includes(\\\"]\\\")) {\\n            let timestamps = [];\\n            while (true) {\\n                let startIndex = line.indexOf(\\\"[\\\");\\n                let endIndex = line.indexOf(\\\"]\\\");\\n                if (startIndex < 0 || endIndex < 0) {\\n                    break;\\n                }\\n                let timeStr = line.substring(startIndex + 1, endIndex);\\n                timeStr = timeStr.replace(\\\".\\\", \\\":\\\").replace(\\\"-\\\", \\\":\\\");\\n                let timeArr = timeStr.split(\\\":\\\");\\n                let minute = Number(timeArr[0]);\\n                let second = Number(timeArr[1]);\\n                let millisecond = Number(timeArr[2]) || 0;\\n                /*if (millisecond < 100) {\\n                    millisecond = millisecond * 10;\\n                }*/\\n                let timestamp = (minute * 60 + second) * 1000 + millisecond;\\n\\n                line = line.substring(endIndex + 1);\\n                if (Number.isNaN(timestamp)) continue;\\n                timestamps.push(timestamp);\\n            }\\n            timestamps.forEach(v => {\\n                lyrics.push({\\n                    timestamp: v,\\n                    text: line\\n                });\\n            });\\n        }\\n    }\\n\\n    return lyrics.sort((a, b) => a.timestamp - b.timestamp);\\n}\\n\\nfunction downNeteaseLyrics(id, path) {\\n    try {\\n        let lyrics = JSON.parse(fetch(\\\"http://music.163.com/api/song/lyric?id=\\\" + id + \\\"&lv=-1&kv=-1&tv=-1\\\", {\\n            headers: {\\n                'Referer': 'http://music.163.com/',\\n                'Host': 'music.163.com',\\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.75 Safari/537.36',\\n                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',\\n            }\\n        }));\\n        let lrc = parser(lyrics.lrc.lyric);\\n        writeFile(path, JSON.stringify(lrc));\\n        return lrc;\\n    } catch (e) {\\n        return [];\\n    }\\n}\\n\\nfunction parserNeteaseLyrics(id) {\\n    let path = \\\"hiker://files/_cache/lrc_\\\" + id;\\n    if (fileExist(path)) {\\n        return JSON.parse(fetch(path));\\n    } else {\\n        return downNeteaseLyrics(id, path);\\n    }\\n}\\n$.exports = {\\n    parserNeteaseLyrics\\n}\"},{\"col_type\":\"text_1\",\"name\":\"music163\",\"path\":\"music163\",\"rule\":\"let baseUrl = \\\"http://music.163.com\\\";\\nlet headers = {\\n    \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36\\\",\\n    \\\"Cookie\\\": \\\"os=pc; MUSIC_U=00B4C1E3FD77410780EF1C0840D08F3F5E7030E2D052CA8EC98A7368F7A7F6649B216E9533A1A174D72CCADF99554228E852DE46BBD2EA2A6B2A1433A3DF48B62EAA76FC18CD59256FEF6E76D39FB42DF76CE5068C69E3944E3A6E8E3C26135DBE0D9791FCE0BD524BD27F6226FD6460B05646A549A5C429F5E01EBA4E2D8D615BD715A7D245B13D9E570E87D0ADA608A607F2FAEF22AF8EE94F827AF150E9E1C517CB0F1588EF8F1D61947C43784985CF74F69458748960CE92053CA72B5FEF92C93F12F36714F0B346C2EAF89FAA516A8974E8CF53D5492DE95ED8591CCCF45AEB627C93B0CD370AEFB656EADAD031F688A6BB2CE3C9FA31BD6166A16ABEBEDADFCFEFBDCED5D4E12FFF1403C4F2B5A3F2422EF9D0878C0B52D08967D58E2E9DACE754404E2D6E1F81F52A1F1735CA9FBB85D758F81E0A7CBA41C5739D29E284F68430EB13E4F493890840031D3BD27E\\\"\\n}\\n\\n/*\\nname,\\nurl,\\npicurl,\\nartistsname,\\nnickname,\\navatarurl,\\ncontent\\n*/\\nfunction getRandomInt(min, max) {\\n    min = Math.ceil(min);\\n    max = Math.floor(max);\\n    return Math.floor(Math.random() * (max - min + 1)) + min;\\n}\\n\\nfunction getPlaylist(mid) {\\n    let json = JSON.parse(fetch(baseUrl + \\\"/api/v6/playlist/detail?id=\\\" + mid + \\\"&n=99999\\\", {\\n        headers\\n    }));\\n    if (json.code !== 200) {\\n        throw new Error(json.msg);\\n    }\\n    let list = json.playlist.tracks;\\n    let playlist = [];\\n\\n    for (let it of list) {\\n        playlist.push({\\n            name: it.name,\\n            id: it.id,\\n            picurl: it.al.picUrl,\\n            artistsname: it.ar.name,\\n            url: \\\"http://music.163.com/song/media/outer/url?id=\\\" + it.id + \\\".mp3\\\"\\n        });\\n    }\\n    return playlist;\\n}\\n\\nfunction getComments(id, limit, offset) {\\n    let json = JSON.parse(fetch(baseUrl + `/api/v1/resource/comments/R_SO_4_${id}?limit=${limit||15}&offset=${offset||0}`, {\\n        headers\\n    }));\\n    if (json.code !== 200) {\\n        throw new Error(json.msg);\\n    }\\n    let comments = [];\\n    let commentsjson = json.hotComments || json.comments;\\n    for (let it of commentsjson) {\\n        comments.push({\\n            nickname: it.user.nickname,\\n            avatarurl: it.user.avatarUrl,\\n            content: it.content,\\n        });\\n    }\\n    return comments;\\n}\\nlet cPlaylist = null;\\nlet cmid = null;\\n\\nfunction getRandomListSong(mid) {\\n    if (!cPlaylist || mid !== cmid) {\\n        cPlaylist = getPlaylist(mid);\\n        cmid = mid;\\n    }\\n    let song = cPlaylist[getRandomInt(0, cPlaylist.length)];\\n    return song;\\n}\\n\\nfunction getRandomComment(id) {\\n    let comm = getComments(id, 16);\\n    return comm[getRandomInt(0, comm.length)] || {};\\n}\\n\\nfunction getRandomSong(sort) {\\n    let json = JSON.parse(fetch(buildUrl(\\\"https://api.uomg.com/api/rand.music\\\", {\\n        format: \\\"json\\\",\\n        sort,\\n    })));\\n\\n    if (json.code !== 1) {\\n        throw new Error(json.msg);\\n    }\\n    let song = json.data;\\n    let id = getParam(\\\"id\\\", \\\"\\\", song.url).split(\\\".\\\")[0];\\n    song.id = id;\\n    return song;\\n}\\n$.exports = {\\n    getRandomListSong,\\n    getRandomSong,\\n    getRandomComment,\\n    getComments\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"评论\",\"path\":\"comment\",\"rule\":\"js:\\ntry {\\n    let music163 = $.require(\\\"music163\\\");\\n    let id = getParam(\\\"id\\\", \\\"\\\");\\n    let comments = music163.getComments(id, 15, (MY_PAGE - 1) * 15 + (MY_PAGE > 1 ? 1 : 0));\\n    let d = [];\\n    for (let it of comments) {\\n        d.push({\\n            col_type: \\\"avatar\\\",\\n            pic_url: it.avatarurl,\\n            title: it.nickname,\\n            url: \\\"hiker://empty\\\"\\n        });\\n        d.push({\\n            col_type: \\\"text_1\\\",\\n            title: it.content,\\n            url: \\\"hiker://empty\\\"\\n        });\\n    }\\n    setPageTitle(\\\"网抑评论\\\");\\n    setResult(d);\\n} catch (e) {\\n    log(e.toString())\\n    setResult([]);\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"AudioController\",\"path\":\"AudioController\",\"rule\":\"js:\\n\\n\\n\"},{\"col_type\":\"movie_3\",\"name\":\"全局变量3\",\"path\":\"G3\",\"rule\":\"const JavaMap = java.util.HashMap;\\nconst globalMapSymbol = Symbol(\\\"globalMap\\\");\\nconst mapSymbol = Symbol(\\\"myJavaMap\\\");\\nconst selfSymbol = Symbol(\\\"selfKey\\\");\\n\\nfunction getTypeName(obj) {\\n    return Object.prototype.toString.call(obj);\\n}\\n\\nconst protoDic = new Map([\\n    [\\\"[object Array]\\\", Array],\\n    [\\\"[object Date]\\\", Date],\\n    [\\\"[object Object]\\\", Object],\\n    [\\\"[object Promise]\\\", Promise],\\n    [\\\"[object Map]\\\", Map],\\n    [\\\"[object Symbol]\\\", Symbol],\\n    [\\\"[object Array]\\\", Array],\\n    [\\\"[object Function]\\\", Function],\\n    [\\\"Error\\\", Error],\\n    [\\\"TypeError\\\", TypeError],\\n    [\\\"EvalError\\\", EvalError],\\n    [\\\"SyntaxError\\\", SyntaxError],\\n    [\\\"ReferenceError\\\", ReferenceError],\\n    [\\\"RangeError\\\", RangeError]\\n]);\\n\\nfunction dealWithVal(val) {\\n    let typeName = getTypeName(val);\\n    let errorName;\\n    if (val instanceof java.lang.String) {\\n        return String(val);\\n    } else if (val instanceof java.lang.Double) {\\n        return Number(val);\\n    } else if (val instanceof java.lang.Boolean) {\\n        if (String(val) === \\\"true\\\") {\\n            val = true;\\n        } else {\\n            val = false;\\n        }\\n        return val;\\n    } else if (typeName === \\\"[object Error]\\\" && protoDic.has((errorName = val.toString()))) {\\n        val.__proto__ = val.__proto__ && Object.assign(Object.create(protoDic.get(typeName).prototype), val.__proto__);\\n        return val;\\n    } else if (typeName !== \\\"[object javaObject]\\\" && protoDic.has(typeName)) {\\n        val.__proto__ = val.__proto__ && Object.assign(Object.create(protoDic.get(typeName).prototype), val.__proto__);\\n        return val;\\n    }\\n    return val;\\n}\\n\\nfunction isString(str) {\\n    return typeof(str) === \\\"string\\\" || str instanceof java.lang.String;\\n}\\n\\nfunction GlobalVar(javaMap, selfKey) {\\n    this[globalMapSymbol] = javaMap;\\n    this[selfSymbol] = selfKey;\\n    this.raw = false;\\n}\\nObject.assign(GlobalVar.prototype, {\\n    getHashMap(symbol) {\\n        if (symbol !== mapSymbol) return null;\\n        if (this[mapSymbol]) return this[mapSymbol];\\n        let selfKey = this[selfSymbol];\\n        if (!selfKey) {\\n            throw Error(\\\"当前没有全局环境，请使用setSelfKey指定规则名\\\");\\n        }\\n        this[mapSymbol] = this[globalMapSymbol];\\n        return this[mapSymbol];\\n    },\\n    setSelfKey(key) {\\n        if (!this[selfSymbol]) this[selfSymbol] = key;\\n    },\\n    getMapKey(key) {\\n        return String(this[selfSymbol] + key);\\n    },\\n    get(key, def) {\\n        key = this.getMapKey(key);\\n        let hashMap = this.getHashMap(mapSymbol);\\n        if (!hashMap.containsKey(key)) return def;\\n        let val = hashMap.get(key);\\n        if (this.raw) {\\n            return val;\\n        } else {\\n            return dealWithVal(val);\\n        }\\n    },\\n    getRaw(key, def) {\\n        key = this.getMapKey(key);\\n        let hashMap = this.getHashMap(mapSymbol);\\n        if (!hashMap.containsKey(key)) return def;\\n        return hashMap.get(key);\\n    },\\n    useRaw(noUseRaw) {\\n        this.raw = !noUseRaw;\\n        return this;\\n    },\\n    put(key, val) {\\n        if (val === void 0) return;\\n        let hashMap = this.getHashMap(mapSymbol);\\n        hashMap.put(this.getMapKey(key), val);\\n        return val;\\n    },\\n    clearAll() {\\n        let self = this[selfSymbol];\\n        let hashMap = this.getHashMap(mapSymbol);\\n        this.getHashMap(mapSymbol).forEach((key, value) => {\\n            if (isString(key) && String(key).startsWith(self)) {\\n                hashMap.remove(key);\\n            }\\n        });\\n    },\\n    clear(key, call) {\\n        if (this.hasButNoCall(key)) {\\n            let hashMap = this.getHashMap(mapSymbol);\\n            if (typeof call === \\\"function\\\") {\\n                call(this.get(key));\\n            }\\n            hashMap.remove(this.getMapKey(key));\\n        }\\n    },\\n    has(key, call) {\\n        let mapKey = this.getMapKey(key);\\n        let hashMap = this.getHashMap(mapSymbol);\\n        let res = !!hashMap.containsKey(mapKey);\\n        if (res && typeof call === \\\"function\\\") {\\n            call(this.get(key));\\n        }\\n        return res;\\n    },\\n    hasButNoCall(key) {\\n        let mapKey = this.getMapKey(key);\\n        let hashMap = this.getHashMap(mapSymbol);\\n        return !!hashMap.containsKey(mapKey);\\n    },\\n    define(key, val) {\\n        if (this.hasButNoCall(key)) {\\n            return this.get(key);\\n        }\\n        return this.put(key, val);\\n    },\\n    defineLazy(key, lazy) {\\n        if (this.hasButNoCall(key)) {\\n            return this.get(key);\\n        }\\n        return this.put(key, lazy());\\n    },\\n    defineModule(key, path, isNew) {\\n        if (isNew) return this.put(key, $.require(path, key));\\n        return this.defineLazy(key, () => $.require(path, key));\\n    },\\n    listKeys() {\\n        let entrySet = this.getHashMap(mapSymbol).entrySet();\\n        let selfKey = this[selfSymbol];\\n        let keys = [];\\n\\n        for (let entry of entrySet) {\\n            let key = entry.getKey();\\n            if (isString(key) && key.startsWith(selfKey)) {\\n                keys.push(String(key).replace(selfKey, \\\"\\\"));\\n            }\\n        }\\n        return keys;\\n    },\\n    toJSON() {\\n        let object = {};\\n        let hashMap = this.getHashMap(mapSymbol);\\n        let selfKey = this[selfSymbol];\\n        hashMap.forEach((key, value) => {\\n            if (!isString(key)) {\\n                return;\\n            }\\n            let keyString = String(key);\\n            if (keyString.startsWith(selfKey)) {\\n                object[keyString.replace(selfKey, \\\"\\\")] = hashMap.get(key);\\n            }\\n        });\\n        return object;\\n    }\\n});\\nGlobalVar.prototype[Symbol.iterator] = function() {\\n    let hashMap = this.getHashMap(mapSymbol);\\n    let selfKey = this[selfSymbol];\\n    let iterator = hashMap.entrySet().iterator();\\n    return (function*() {\\n        while (iterator.hasNext()) {\\n            let me = iterator.next();\\n            let key = me.getKey();\\n            if (!isString(key)) {\\n                continue;\\n            }\\n            key = String(key);\\n            if (key.startsWith(selfKey)) {\\n                yield [key.replace(selfKey, \\\"\\\"), dealWithVal(me.getValue())];\\n            }\\n        }\\n    })();\\n}\\n\\nconst GlobalMap = _globalMap;\\n_globalMap = void 0;\\nlet RuleGlobalMapKey = typeof MY_RULE !== \\\"undefined\\\" ? MY_RULE.title : \\\"\\\";\\nlet AppGlobalMapKey = \\\"AppGlobalMap\\\";\\nif (RuleGlobalMapKey === AppGlobalMapKey) {\\n    let randomKey = \\\"\\\";\\n    if (GlobalMap.containsKey(0)) {\\n        randomKey = String(GlobalMap.get(0));\\n    } else {\\n        randomKey = String(Date.now());\\n        GlobalMap.put(0, randomKey);\\n    }\\n    RuleGlobalMapKey = RuleGlobalMapKey + randomKey;\\n}\\n$.exports = {\\n    GA: new GlobalVar(GlobalMap, AppGlobalMapKey),\\n    GM: new GlobalVar(GlobalMap, RuleGlobalMapKey)\\n}\"}]","proxy":"","icon":""}