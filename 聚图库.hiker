{"firstHeader":"class","last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"加载数据","path":"config","rule":"function getConfig() {\n    try {\n        let config = fetch(\"hiker://files/rules/ApolloImg/config.json\");\n        if (!config || config == \"\") {\n            return {\n                data: [],\n                version: 0\n            }\n        } else {\n            return JSON.parse(config)\n        }\n    } catch (e) {\n        try {\n            toast(\"配置文件格式有误\")\n        } catch (e) {}\n        return {\n            data: [],\n            version: 0\n        }\n    }\n}"},{"col_type":"movie_3","name":"批量导入","path":"batchIm","rule":"function batchImport(input, rule) {\n    input = input.trim();\n    if (input.length < 3 || input[0] != \"{\") {\n        return \"toast://请输入正确的格式\"\n    }\n    let im = JSON.parse(input);\n    if (im.data == null || im.data.length < 1) {\n        return \"toast://请输入正确的格式\"\n    }\n    eval(JSON.parse(request(\"hiker://page/config?rule=\" + rule)).rule);\n    let config = getConfig();\n    let count = 0;\n    let all = config.data.map(it => it.url + \"&&&\").join();\n    for (let i of im.data) {\n        if (all.indexOf(i.url + \"&&&\") >= 0) {\n            //重复的不要\n            continue;\n        }\n        count++;\n        config.data.push(i)\n    }\n    writeFile(\"hiker://files/rules/ApolloImg/config.json\", JSON.stringify(config));\n    refreshPage();\n    return \"toast://已导入\" + count + \"条订阅源\";\n}"},{"col_type":"movie_3","name":"直播数据","path":"renderData","rule":"function renderLiveData(url,ua) {\n    let m3u = \"\";\n    if (url.startsWith('hiker://') || url.startsWith('file://')) {\n        m3u = fetch(url);\n    } else {\n        let interval = Number(getItem('interval', '24')),\n            oldData = fetch('hiker://files/libs/' + md5(url) + '.js'),\n            remoteData = '';\n        try {\n            remoteData = fetchCache(url, interval, {\n                headers:{\n                    'User-Agent' : ua || MOBILE_UA\n                },\n                timeout: 50000\n            });\n        } catch (e) {}\n        if (!remoteData.includes('http') || remoteData.includes('<body>')) { \n            log('更新失败');\n            if (oldData) writeFile('hiker://files/libs/' + md5(url) + '.js', oldData);\n            m3u = oldData;\n        } else {\n            m3u = remoteData;\n        }\n    }\n\n    let mode =  m3u.indexOf('#EXTM3U') == 0 , re;\n    if(mode){\n        re = /(.*),(.*)\\s*?((?:http|rtmp)[^#\\s]*)/g;\n    }else{\n        re = /()(?:\\B\\$c_start|\\B#{1,2})?(.*?),?(##|头#|\\$c_end|,?#genre#|(?:http|rtmp|magnet)[^\\s]*)/g;\n    }\n        \n    let items = {},\n        group = '未分组';\n    for (let i = re.exec(m3u); i != null; i = re.exec(m3u)) {\n        if (mode) {\n            group = (i[1].match(/group-title=\"(.*?)\"/) || [null, group])[1];\n            ref = (i[1].match(/tvg-logo=\"(.*?)\"/) || [null, group])[1];\n        } else if (['#genre#','##','头#','$c_end'].includes(i[3])) {\n            group = i[2];\n            continue;\n        }\n        let title = i[2],\n            url = i[3].includes('#') ? i[3].split('#') : [i[3].split(',')[0]]\n           ref = (i[1].match(/tvg-logo=\"(.*?)\"/) || [null, i[3].split(',')[1] ? i[3].split(',')[1] : ''])[1] \n            headers = [];\n        if(!url[url.length-1]) url.pop();\n        url.forEach((v,index,array)=>{\n            if(/;\\{(.*)\\}/.test(v)){\n                let obj = {},\n                     con = v.match(/;\\{(.*)\\}/)[1],\n                     arr = con.split('&&');\n                arr.forEach((i)=>{\n                    let [key,value] = i.split('@');\n                    obj[key] = value.replace(/;/g,'；；');\n                })\n                array[index] = v.match(/^([^;]*);\\{/)[1]\n                headers.push(obj);\n            }else{\n                headers.push({'User-Agent' : MOBILE_UA.replace(/;/g,'；；')});\n            }\n            array[index] = array[index].replace(/;/g,'；；');\n        });\n        if (items[group]) {\n            if (items[group][title]) {\n                items[group][title].img = items[group][title].img;\n                items[group][title].url = items[group][title].url.concat(url);\n                items[group][title].headers = items[group][title].headers.concat(headers);\n            } else {\n                items[group][title] = {ref:ref,url:url,headers:headers};\n            }\n        } else {\n            items[group] = {};\n            items[group][title] = {ref:ref,url:url,headers:headers};\n        };\n    }\n    return items;\n}\n\n$.exports = {\n    renderLiveData: renderLiveData\n}\n"},{"col_type":"movie_3","name":"设置页","path":"renderSetting","rule":"function renderSetting() {\n    function getColoredText(text) {\n        return '““””<span style=\"color: #19B89D\">' + text + '</span>'\n    }\n    const d = []\n    /*\n    var file = new java.io.File(\"/storage/emulated/0/Android/data/com.exampIe.hikerview/files/Documents/tu/pic/\");\n    var fileList = file.listFiles().filter(h=>h.isFile() && /\\.(jpg|jpeg|png|gif|webp)/.test(h));\n    var i = Math.floor(Math.random() * fileList.length);\n    var img = fileList[i];\n    d.push({\n        title: \"\",\n        col_type: \"card_pic_1\",\n        desc: \"0\",\n        pic_url: img,\n        url: $(\"hiker://empty#noLoading#\").rule(() => {\n            \n        })\n    })\n*/\n    let interval = getItem('interval', '24')\n    d.push({\n        title:\n            interval == -1\n                ? '已禁止自动更新'.fontcolor('#19B89D').bold()\n                : ('更新间隔:' + interval + '小时').fontcolor('#19B89D').bold(),\n        url: $(interval, '输入n为正整数时，每隔n小时自动更新\\n为0时，每次打开都会更新\\n为-1时，禁止自动更新').input(\n            () => {\n                if (parseInt(input) >= -1) {\n                    setItem('interval', input)\n                }\n                refreshPage()\n                return 'hiker://empty'\n            }\n        ),\n        pic_url: 'https://thumbsnap.com/i/JrinF33j.jpg',\n        col_type: 'avatar',\n    })\n\n    d.push({\n        col_type: 'big_blank_block',\n    })\n\n    d.push({\n        title: getColoredText('新建订阅'),\n        col_type: 'scroll_button',\n        desc: '请输入直播源订阅地址',\n        url: $('', '请输入订阅地址\\n可以在地址后加ua\\n(使用$$$分割)').input((rule) => {\n            if (input == '') {\n                return 'toast://不能为空'\n            } else if (input.indexOf('http') != 0 && input.indexOf('file') != 0 && input.indexOf('hiker') != 0) {\n                return 'toast://链接格式有误'\n            } else {\n                let [url, ua] = input.split('$$$')\n                return $('', '请输入订阅标题').input(\n                    (url, rule, ua) => {\n                        eval(JSON.parse(request('hiker://page/config?rule=' + rule)).rule)\n                        let config = getConfig()\n                        config.data.push({\n                            name: input,\n                            url: url,\n                            ua: ua || '',\n                        })\n                        writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\n                        refreshPage()\n                        return 'toast://已保存'\n                    },\n                    url,\n                    rule,\n                    ua\n                )\n            }\n        }, getMyVar('title')),\n    })\n\n    d.push({\n        title: getColoredText('导入订阅'),\n        col_type: 'scroll_button',\n        url: $('', '支持原始数据和云剪贴板分享链接').input((rule) => {\n            eval(JSON.parse(request('hiker://page/batchIm?rule=' + rule)).rule)\n            if (input.startsWith('聚图库分享##')) {\n                input = parsePaste(input.split('##\\n')[1])\n            }\n            return batchImport(input, rule)\n        }, getMyVar('title')),\n    })\n    d.push({\n        title: getColoredText('导入本地源'),\n        col_type: 'scroll_button',\n        desc: '请输入直播源名称',\n        url: $('', '请输入直播源名称').input((rule) => {\n            if (input == '') {\n                return 'toast://不能为空'\n            } else {\n                return (\n                    'fileSelect://' +\n                    $.toString((name) => {\n                        let s = input.split('/')\n                        var url = 'hiker://files/rules/ApolloImg/' + name + '.m3u'\n                        var c = fetch('hiker://files/cache/' + s[s.length - 1])\n                        if (!c.includes('http')) {\n                            return 'toast://非法文件'\n                        }\n                        writeFile(url, c)\n                        eval(JSON.parse(request('hiker://page/config?rule=聚图库')).rule)\n                        let config = getConfig()\n                        config.data.push({\n                            name: name,\n                            url: url,\n                        })\n                        writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\n                        refreshPage()\n                        return 'toast://已保存'\n                    }, input)\n                )\n            }\n        }),\n    })\n    d.push({\n        title: getColoredText('分享订阅'),\n        col_type: 'scroll_button',\n        url: $(['原始数据', '云剪贴板', '云口令'], 3).select(() => {\n            return $('确定导出？\\n(禁用订阅不会导出)').confirm((type) => {\n                eval(JSON.parse(request('hiker://page/config')).rule)\n                config = getConfig()\n                config.data = config.data.filter((v) => !v.inVisible)\n                if (type == '云剪贴板') {\n                    var data = '聚图库分享##\\n' + sharePaste(JSON.stringify(config))\n                } else if (type == '云口令') {\n                    var data =\n                        '聚图库分享,复制后打开软件即可导入\\n' +\n                        sharePaste(JSON.stringify(config)) +\n                        '@import=js:eval(JSON.parse(fetch(\"hiker://page/cloud?rule=聚图库\")).rule)'\n                } else {\n                    var data = JSON.stringify(config)\n                }\n                return 'copy://' + data\n            }, input)\n        }),\n    })\n    d.push({\n        title: getColoredText('编辑全部'),\n        col_type: 'scroll_button',\n        url: 'editFile://hiker://files/rules/ApolloImg/config.json',\n    })\n\n    d.push({\n        col_type: 'blank_block',\n    })\n\n    eval(JSON.parse(request('hiker://page/config')).rule)\n    config = getConfig()\n    let editMode = getMyVar('editMode', '启用禁用')\n    ;['启用禁用', '删除订阅', '重新排序', '编辑订阅', '清除缓存'].forEach((v) => {\n        d.push({\n            title: v == editMode ? '““””' + v.bold().fontcolor('#19B89D') : v,\n            url:\n                v == editMode\n                    ? 'hiker://empty'\n                    : $('#noLoading#').lazyRule((v) => {\n                          putMyVar('editMode', v)\n                          refreshPage(false)\n                          return 'hiker://empty'\n                      }, v),\n            col_type: 'scroll_button',\n        })\n    })\n    config.data.forEach((v, i) => {\n        let el = {\n            title: v.name,\n            col_type: 'text_2',\n        }\n        switch (editMode) {\n            case '启用禁用':\n                el.title = (v.inVisible ? '🔴 ' : '🟢 ') + el.title\n                el.url = $('#noLoading#').lazyRule((i) => {\n                    eval(JSON.parse(request('hiker://page/config')).rule)\n                    config = getConfig()\n                    config.data[i].inVisible = !config.data[i].inVisible\n                    writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\n                    refreshPage(false)\n                    return 'hiker://empty'\n                }, i)\n                break\n            case '删除订阅':\n                el.url =\n                    'confirm://确认删除“' +\n                    v.name +\n                    '”订阅？.js:' +\n                    $.toString((i) => {\n                        eval(JSON.parse(request('hiker://page/config')).rule)\n                        config = getConfig()\n                        config.data.splice(i, 1)\n                        writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\n                        refreshPage(false)\n                        return 'toast://已删除'\n                    }, i)\n                break\n            case '重新排序':\n                let sortFlag = parseInt(getMyVar('sortFlag', '-1'))\n                el.title = (sortFlag == i ? '🔃  ' : '') + el.title\n                if (sortFlag == -1)\n                    el.url = $('#noLoading#').lazyRule((i) => {\n                        putMyVar('sortFlag', i.toString())\n                        refreshPage(false)\n                        return 'toast://选择要移动到的位置'\n                    }, i)\n                else\n                    el.url = $('#noLoading#').lazyRule(\n                        (oldIndex, newIndex) => {\n                            eval(JSON.parse(request('hiker://page/config')).rule)\n                            config = getConfig()\n                            config.data.splice(newIndex, 0, config.data.splice(oldIndex, 1)[0])\n                            writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\n                            putMyVar('sortFlag', '-1')\n                            refreshPage(false)\n                            return 'hiker://empty'\n                        },\n                        sortFlag,\n                        i\n                    )\n                break\n            case '编辑订阅':\n                let arr = ['编辑名称', '编辑地址', '编辑内容', '选择样式']\n                el.url = $(arr, 3).select(\n                    (v, i) => {\n                        if (input == '编辑名称') {\n                            return $(v.name, '输入新名称').input((i) => {\n                                eval(JSON.parse(request('hiker://page/config')).rule)\n                                config = getConfig()\n                                if (input) {\n                                    config.data[i].name = input\n                                    writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\n                                    refreshPage(false)\n                                    return 'toast://修改成功'\n                                } else {\n                                    return 'toast://不能为空'\n                                }\n                            }, i)\n                        } else if (input == '编辑地址') {\n                            return $(v.ua ? v.url + '$$$' + v.ua : v.url, '输入新地址').input((i) => {\n                                eval(JSON.parse(request('hiker://page/config')).rule)\n                                config = getConfig()\n                                if (input == '') {\n                                    return 'toast://不能为空'\n                                } else if (\n                                    input.indexOf('http') != 0 &&\n                                    input.indexOf('file') != 0 &&\n                                    input.indexOf('hiker') != 0\n                                ) {\n                                    return 'toast://链接格式有误'\n                                } else {\n                                    let [url, ua] = input.split('$$$')\n                                    config.data[i].url = url\n                                    config.data[i].ua = ua\n                                    writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\n                                    refreshPage(false)\n                                    return 'toast://修改成功'\n                                }\n                            }, i)\n                        } else if (input == '编辑内容') {\n                            if (v.url.startsWith('file://') || v.url.startsWith('hiker://files')) {\n                                return 'editFile://' + v.url\n                            }\n                            return 'editFile://hiker://files/libs/' + md5(v.url) + '.js'\n                        } else if (input == '选择样式') {\n                            return $([\"movie_2\",\"movie_3\",\"pic_1\",\"pic_1_full\",\"pic_1_card\",\"pic_2\",\"pic_2_card\",\"pic_3\",\"pic_3_square\",\"icon_2\",\"icon_2_round\",\"icon_small_3\",\"icon_3_fill\",\"icon_3_round_fill\",\"icon_4\",\"icon_4_card\",\"icon_small_4\",\"icon_round_4\",\"icon_round_small_4\",\"icon_5\",\"card_pic_1\",\"card_pic_2\",\"card_pic_2_2\",\"card_pic_2_2_left\",\"card_pic_3\",\"card_pic_3_center\",\"pic_1_center\",\"text_1\",\"text_2\",\"text_3\",\"text_4\",\"text_5\",\"text_center_1\",\"text_icon\",\"avatar\"], 2, '请选择').select(() => {\n                                setItem(\"sub_style\", input)\n                            })\n                        }\n                    },\n                    v,\n                    i\n                )\n                break\n            case '清除缓存':\n                el.url = $('确定清除“' + v.name + '”订阅缓存？\\n(可立即更新)').confirm((url) => {\n                    deleteCache(url)\n                    return 'toast://清除成功'\n                }, v.url)\n                break\n        }\n        d.push(el)\n    })\n    return d\n}\n\n$.exports = {\n    renderSetting: renderSetting,\n}\n"},{"col_type":"movie_3","name":"云口令","path":"cloud","rule":"eval(JSON.parse(request(\"hiker://page/batchIm?rule=聚图库\")).rule);\nlet content = parsePaste(input);\nbatchImport(content, \"聚图库\");"}],"title":"聚图库","author":"小棉袄🌞&Joker[聚直播改图库]","version":10,"type":"picture","url":"hiker://empty","col_type":"icon_4","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(JSON.parse(request('hiker://page/config')).rule) //getConfig\n\nlet data = [],\n    config = getConfig()\nconfig.data = config.data.filter((v) => !v.inVisible)\nif (config.data.length <= 0) {\n    data = $.require('hiker://page/renderSetting').renderSetting()\n} else {\n    let select = getItem('live-select', config.data[0].name),\n        has = config.data.map((i) => i.name).includes(select)\n    if (!has) {\n        select = config.data[0].name\n    }\n\n    data.push({\n        title: '聚集 • 图库'.bold() + ' &nbsp &nbsp ' + '⚙ 设置 ⚙'.small(),\n        col_type: 'avatar',\n        pic_url: MY_RULE.icon,\n        url: $('hiker://empty#noLoading#').rule(() => {\n            addListener('onClose', 'refreshPage()')\n            setResult($.require('hiker://page/renderSetting').renderSetting())\n        }),\n    })\n    /*\n    //var img = fetch('https://wanghun.top/api/meinvtu.php?m=1');\n    var file = new java.io.File(\"/storage/emulated/0/Android/data/com.exampIe.hikerview/files/Documents/tu/pic/\");\n    var fileList = file.listFiles().filter(h=>h.isFile() && /\\.(jpg|jpeg|png|gif|webp)/.test(h));\n    var i = Math.floor(Math.random() * fileList.length);\n    var img = fileList[i];\n    data.push({\n        title: \"\",\n        col_type: \"card_pic_1\",\n        desc: \"0\",\n        pic_url: img,\n        url: $(\"hiker://empty#noLoading#\").rule(() => {\n            addListener('onClose', 'refreshPage()')\n            setResult($.require('hiker://page/renderSetting').renderSetting())\n        })\n    })\n*/\n    data.push({\n        title: '搜索',\n        desc: '请输入搜索关键词',\n        extra: {\n            defaultValue: getVar('search_key', ''),\n            onChange: 'putVar(\"search_key\",input)',\n        },\n        col_type: 'input',\n        url: $.toString(() => {\n            return 'hiker://search?rule=' + getMyVar('title') + '&s=' + getVar('search_key', '')\n        }),\n    })\n\n    for (source of config.data) {\n        data.push({\n            title: source.name == select ? \"““””<span style='color: #19B89D'>\" + select + '</span>' : source.name,\n            col_type: 'scroll_button',\n            url: $('#noLoading#').lazyRule((a) => {\n                setItem('live-select', a)\n                setItem('selectGroup', '')\n                refreshPage()\n                return 'hiker://empty'\n            }, source.name),\n        })\n    }\n\n    data.push({\n        col_type: 'blank_block',\n    })\n\n    for (source of config.data) {\n        if (source.name == select) {\n            var col\n            try {\n                let items = $.require('hiker://page/renderData').renderLiveData(source.url, source.ua)\n                let groups = Object.keys(items)\n                //groups.push(groups.splice(groups.indexOf(0), 1)[0]);\n\n                let selectGroup = getItem('selectGroup', groups[0])\n                if (selectGroup == '' || !groups.includes(selectGroup)) selectGroup = groups[0]\n                var desc = ''\n                var copy = ''\n                if (selectGroup.includes('竖')) {\n                    col = 'pic_2_card'\n                } else if (selectGroup.includes('横')) {\n                    col = 'card_pic_1'\n                    desc = '0'\n                } else if (select.includes('图标')) {\n                    col = 'icon_4_card'\n                    copy = 'copy://'\n                } else {\n                    col = getItem('sub_style', 'pic_3_square')\n                    if([\"icon_2\",\"icon_2_round\",\"icon_small_3\",\"icon_3_fill\",\"icon_3_round_fill\",\"icon_4\",\"icon_4_card\",\"icon_small_4\",\"icon_round_4\",\"icon_round_small_4\",\"icon_5\"].includes(col)) {\n                       copy = \"copy://\"\n                                        } \n                }\n                groups.forEach((group) => {\n                    if (group) {\n                        data.push({\n                            title:\n                                group == selectGroup ? \"““””<span style='color: #19B89D'>\" + group + '</span>' : group,\n                            url: $('#noLoading#').lazyRule((group) => {\n                                setItem('selectGroup', group)\n                                refreshPage()\n                                return 'hiker://empty'\n                            }, group),\n                            col_type: 'scroll_button',\n                            extra: {\n                                lineVisible: false,\n                            },\n                        })\n                    }\n                })\n\n                for (let title in items[selectGroup]) {\n                    ref = items[selectGroup][title].ref\n                    let surls = items[selectGroup][title].url\n                    let proxy = 'https://mirror.ghproxy.com/'\n                    for (var i = 0; i < surls.length; i++) {\n                        surls[i] = surls[i].startsWith('https://raw.githubusercontent.com')\n                            ? proxy + surls[i]\n                            : surls[i]\n                        data.push({\n                            title: title,\n                            desc: desc,\n                            img: surls[i],\n                            url: copy + surls[i],\n                            col_type: col,\n                            extra: {\n                                longClick: [\n                                    { title: '查看大图', js: JSON.stringify(surls[i]) },\n                                    { title: '复制图标', js: JSON.stringify('copy://' + surls[i]) },\n                                    { title: '下载图标', js: JSON.stringify('download://' + surls[i]) },\n                                ],\n                            },\n                        })\n                    }\n                }\n            } catch (e) {\n                data.push({\n                    title: '数据加载失败\\n' + JSON.stringify(e),\n                    col_type: 'long_text',\n                })\n            }\n            break\n        }\n    }\n}\nsetResult(data)\n","searchFind":"js:\neval(JSON.parse(request(\"hiker://page/config\")).rule);\nlet config = getConfig();\nlet rules = config.data.map((source) => {\n    return {\n        title: source.name,\n        search_url: 'hiker://empty?key=**',\n        searchFind: 'js:' + $.toString((url, rule_title) => {\n            let d = [],\n                key = getParam('key');\n            let items = $.require('hiker://page/renderData?rule=' + rule_title).renderLiveData(url);\n            for (let group in items) {\n                for (let title in items[group]) {\n                    if (title.indexOf(key) >= 0 || title.toLowerCase().indexOf(key) >= 0) {\n                  let surls = items[group][title].url;\n                  let proxy = \"https://mirror.ghproxy.com/\";\n         for(var i=0;i<surls.length;i++){\n                  surls[i] = surls[i].startsWith(\"https://raw.githubusercontent.com\") ? (proxy + surls[i]) : surls[i];\n                        d.push({\n                            title: title,\n                            img: surls[i],\n                            url: surls[i],\n                        })\n                    }}\n                }\n            }\n            setResult(d);\n        }, source.url, getMyVar('title'))\n    };\n})\nsetResult([{\n    title: \"点我开始聚搜\",\n    url: \"hiker://search?s=\" + getParam(\"key\"),\n    extra: {\n        rules: $.toString((rules) => {\n            return JSON.stringify(rules)\n        }, rules)\n    }\n}])","search_url":"hiker://empty?key=**","group":"⑧工具","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"putMyVar('title',MY_RULE.title);","pages":"[{\"col_type\":\"movie_3\",\"name\":\"加载数据\",\"path\":\"config\",\"rule\":\"function getConfig() {\\n    try {\\n        let config = fetch(\\\"hiker://files/rules/ApolloImg/config.json\\\");\\n        if (!config || config == \\\"\\\") {\\n            return {\\n                data: [],\\n                version: 0\\n            }\\n        } else {\\n            return JSON.parse(config)\\n        }\\n    } catch (e) {\\n        try {\\n            toast(\\\"配置文件格式有误\\\")\\n        } catch (e) {}\\n        return {\\n            data: [],\\n            version: 0\\n        }\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"批量导入\",\"path\":\"batchIm\",\"rule\":\"function batchImport(input, rule) {\\n    input = input.trim();\\n    if (input.length < 3 || input[0] != \\\"{\\\") {\\n        return \\\"toast://请输入正确的格式\\\"\\n    }\\n    let im = JSON.parse(input);\\n    if (im.data == null || im.data.length < 1) {\\n        return \\\"toast://请输入正确的格式\\\"\\n    }\\n    eval(JSON.parse(request(\\\"hiker://page/config?rule=\\\" + rule)).rule);\\n    let config = getConfig();\\n    let count = 0;\\n    let all = config.data.map(it => it.url + \\\"&&&\\\").join();\\n    for (let i of im.data) {\\n        if (all.indexOf(i.url + \\\"&&&\\\") >= 0) {\\n            //重复的不要\\n            continue;\\n        }\\n        count++;\\n        config.data.push(i)\\n    }\\n    writeFile(\\\"hiker://files/rules/ApolloImg/config.json\\\", JSON.stringify(config));\\n    refreshPage();\\n    return \\\"toast://已导入\\\" + count + \\\"条订阅源\\\";\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"直播数据\",\"path\":\"renderData\",\"rule\":\"function renderLiveData(url,ua) {\\n    let m3u = \\\"\\\";\\n    if (url.startsWith('hiker://') || url.startsWith('file://')) {\\n        m3u = fetch(url);\\n    } else {\\n        let interval = Number(getItem('interval', '24')),\\n            oldData = fetch('hiker://files/libs/' + md5(url) + '.js'),\\n            remoteData = '';\\n        try {\\n            remoteData = fetchCache(url, interval, {\\n                headers:{\\n                    'User-Agent' : ua || MOBILE_UA\\n                },\\n                timeout: 50000\\n            });\\n        } catch (e) {}\\n        if (!remoteData.includes('http') || remoteData.includes('<body>')) { \\n            log('更新失败');\\n            if (oldData) writeFile('hiker://files/libs/' + md5(url) + '.js', oldData);\\n            m3u = oldData;\\n        } else {\\n            m3u = remoteData;\\n        }\\n    }\\n\\n    let mode =  m3u.indexOf('#EXTM3U') == 0 , re;\\n    if(mode){\\n        re = /(.*),(.*)\\\\s*?((?:http|rtmp)[^#\\\\s]*)/g;\\n    }else{\\n        re = /()(?:\\\\B\\\\$c_start|\\\\B#{1,2})?(.*?),?(##|头#|\\\\$c_end|,?#genre#|(?:http|rtmp|magnet)[^\\\\s]*)/g;\\n    }\\n        \\n    let items = {},\\n        group = '未分组';\\n    for (let i = re.exec(m3u); i != null; i = re.exec(m3u)) {\\n        if (mode) {\\n            group = (i[1].match(/group-title=\\\"(.*?)\\\"/) || [null, group])[1];\\n            ref = (i[1].match(/tvg-logo=\\\"(.*?)\\\"/) || [null, group])[1];\\n        } else if (['#genre#','##','头#','$c_end'].includes(i[3])) {\\n            group = i[2];\\n            continue;\\n        }\\n        let title = i[2],\\n            url = i[3].includes('#') ? i[3].split('#') : [i[3].split(',')[0]]\\n           ref = (i[1].match(/tvg-logo=\\\"(.*?)\\\"/) || [null, i[3].split(',')[1] ? i[3].split(',')[1] : ''])[1] \\n            headers = [];\\n        if(!url[url.length-1]) url.pop();\\n        url.forEach((v,index,array)=>{\\n            if(/;\\\\{(.*)\\\\}/.test(v)){\\n                let obj = {},\\n                     con = v.match(/;\\\\{(.*)\\\\}/)[1],\\n                     arr = con.split('&&');\\n                arr.forEach((i)=>{\\n                    let [key,value] = i.split('@');\\n                    obj[key] = value.replace(/;/g,'；；');\\n                })\\n                array[index] = v.match(/^([^;]*);\\\\{/)[1]\\n                headers.push(obj);\\n            }else{\\n                headers.push({'User-Agent' : MOBILE_UA.replace(/;/g,'；；')});\\n            }\\n            array[index] = array[index].replace(/;/g,'；；');\\n        });\\n        if (items[group]) {\\n            if (items[group][title]) {\\n                items[group][title].img = items[group][title].img;\\n                items[group][title].url = items[group][title].url.concat(url);\\n                items[group][title].headers = items[group][title].headers.concat(headers);\\n            } else {\\n                items[group][title] = {ref:ref,url:url,headers:headers};\\n            }\\n        } else {\\n            items[group] = {};\\n            items[group][title] = {ref:ref,url:url,headers:headers};\\n        };\\n    }\\n    return items;\\n}\\n\\n$.exports = {\\n    renderLiveData: renderLiveData\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"设置页\",\"path\":\"renderSetting\",\"rule\":\"function renderSetting() {\\n    function getColoredText(text) {\\n        return '““””<span style=\\\"color: #19B89D\\\">' + text + '</span>'\\n    }\\n    const d = []\\n    /*\\n    var file = new java.io.File(\\\"/storage/emulated/0/Android/data/com.exampIe.hikerview/files/Documents/tu/pic/\\\");\\n    var fileList = file.listFiles().filter(h=>h.isFile() && /\\\\.(jpg|jpeg|png|gif|webp)/.test(h));\\n    var i = Math.floor(Math.random() * fileList.length);\\n    var img = fileList[i];\\n    d.push({\\n        title: \\\"\\\",\\n        col_type: \\\"card_pic_1\\\",\\n        desc: \\\"0\\\",\\n        pic_url: img,\\n        url: $(\\\"hiker://empty#noLoading#\\\").rule(() => {\\n            \\n        })\\n    })\\n*/\\n    let interval = getItem('interval', '24')\\n    d.push({\\n        title:\\n            interval == -1\\n                ? '已禁止自动更新'.fontcolor('#19B89D').bold()\\n                : ('更新间隔:' + interval + '小时').fontcolor('#19B89D').bold(),\\n        url: $(interval, '输入n为正整数时，每隔n小时自动更新\\\\n为0时，每次打开都会更新\\\\n为-1时，禁止自动更新').input(\\n            () => {\\n                if (parseInt(input) >= -1) {\\n                    setItem('interval', input)\\n                }\\n                refreshPage()\\n                return 'hiker://empty'\\n            }\\n        ),\\n        pic_url: 'https://thumbsnap.com/i/JrinF33j.jpg',\\n        col_type: 'avatar',\\n    })\\n\\n    d.push({\\n        col_type: 'big_blank_block',\\n    })\\n\\n    d.push({\\n        title: getColoredText('新建订阅'),\\n        col_type: 'scroll_button',\\n        desc: '请输入直播源订阅地址',\\n        url: $('', '请输入订阅地址\\\\n可以在地址后加ua\\\\n(使用$$$分割)').input((rule) => {\\n            if (input == '') {\\n                return 'toast://不能为空'\\n            } else if (input.indexOf('http') != 0 && input.indexOf('file') != 0 && input.indexOf('hiker') != 0) {\\n                return 'toast://链接格式有误'\\n            } else {\\n                let [url, ua] = input.split('$$$')\\n                return $('', '请输入订阅标题').input(\\n                    (url, rule, ua) => {\\n                        eval(JSON.parse(request('hiker://page/config?rule=' + rule)).rule)\\n                        let config = getConfig()\\n                        config.data.push({\\n                            name: input,\\n                            url: url,\\n                            ua: ua || '',\\n                        })\\n                        writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\\n                        refreshPage()\\n                        return 'toast://已保存'\\n                    },\\n                    url,\\n                    rule,\\n                    ua\\n                )\\n            }\\n        }, getMyVar('title')),\\n    })\\n\\n    d.push({\\n        title: getColoredText('导入订阅'),\\n        col_type: 'scroll_button',\\n        url: $('', '支持原始数据和云剪贴板分享链接').input((rule) => {\\n            eval(JSON.parse(request('hiker://page/batchIm?rule=' + rule)).rule)\\n            if (input.startsWith('聚图库分享##')) {\\n                input = parsePaste(input.split('##\\\\n')[1])\\n            }\\n            return batchImport(input, rule)\\n        }, getMyVar('title')),\\n    })\\n    d.push({\\n        title: getColoredText('导入本地源'),\\n        col_type: 'scroll_button',\\n        desc: '请输入直播源名称',\\n        url: $('', '请输入直播源名称').input((rule) => {\\n            if (input == '') {\\n                return 'toast://不能为空'\\n            } else {\\n                return (\\n                    'fileSelect://' +\\n                    $.toString((name) => {\\n                        let s = input.split('/')\\n                        var url = 'hiker://files/rules/ApolloImg/' + name + '.m3u'\\n                        var c = fetch('hiker://files/cache/' + s[s.length - 1])\\n                        if (!c.includes('http')) {\\n                            return 'toast://非法文件'\\n                        }\\n                        writeFile(url, c)\\n                        eval(JSON.parse(request('hiker://page/config?rule=聚图库')).rule)\\n                        let config = getConfig()\\n                        config.data.push({\\n                            name: name,\\n                            url: url,\\n                        })\\n                        writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\\n                        refreshPage()\\n                        return 'toast://已保存'\\n                    }, input)\\n                )\\n            }\\n        }),\\n    })\\n    d.push({\\n        title: getColoredText('分享订阅'),\\n        col_type: 'scroll_button',\\n        url: $(['原始数据', '云剪贴板', '云口令'], 3).select(() => {\\n            return $('确定导出？\\\\n(禁用订阅不会导出)').confirm((type) => {\\n                eval(JSON.parse(request('hiker://page/config')).rule)\\n                config = getConfig()\\n                config.data = config.data.filter((v) => !v.inVisible)\\n                if (type == '云剪贴板') {\\n                    var data = '聚图库分享##\\\\n' + sharePaste(JSON.stringify(config))\\n                } else if (type == '云口令') {\\n                    var data =\\n                        '聚图库分享,复制后打开软件即可导入\\\\n' +\\n                        sharePaste(JSON.stringify(config)) +\\n                        '@import=js:eval(JSON.parse(fetch(\\\"hiker://page/cloud?rule=聚图库\\\")).rule)'\\n                } else {\\n                    var data = JSON.stringify(config)\\n                }\\n                return 'copy://' + data\\n            }, input)\\n        }),\\n    })\\n    d.push({\\n        title: getColoredText('编辑全部'),\\n        col_type: 'scroll_button',\\n        url: 'editFile://hiker://files/rules/ApolloImg/config.json',\\n    })\\n\\n    d.push({\\n        col_type: 'blank_block',\\n    })\\n\\n    eval(JSON.parse(request('hiker://page/config')).rule)\\n    config = getConfig()\\n    let editMode = getMyVar('editMode', '启用禁用')\\n    ;['启用禁用', '删除订阅', '重新排序', '编辑订阅', '清除缓存'].forEach((v) => {\\n        d.push({\\n            title: v == editMode ? '““””' + v.bold().fontcolor('#19B89D') : v,\\n            url:\\n                v == editMode\\n                    ? 'hiker://empty'\\n                    : $('#noLoading#').lazyRule((v) => {\\n                          putMyVar('editMode', v)\\n                          refreshPage(false)\\n                          return 'hiker://empty'\\n                      }, v),\\n            col_type: 'scroll_button',\\n        })\\n    })\\n    config.data.forEach((v, i) => {\\n        let el = {\\n            title: v.name,\\n            col_type: 'text_2',\\n        }\\n        switch (editMode) {\\n            case '启用禁用':\\n                el.title = (v.inVisible ? '🔴 ' : '🟢 ') + el.title\\n                el.url = $('#noLoading#').lazyRule((i) => {\\n                    eval(JSON.parse(request('hiker://page/config')).rule)\\n                    config = getConfig()\\n                    config.data[i].inVisible = !config.data[i].inVisible\\n                    writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\\n                    refreshPage(false)\\n                    return 'hiker://empty'\\n                }, i)\\n                break\\n            case '删除订阅':\\n                el.url =\\n                    'confirm://确认删除“' +\\n                    v.name +\\n                    '”订阅？.js:' +\\n                    $.toString((i) => {\\n                        eval(JSON.parse(request('hiker://page/config')).rule)\\n                        config = getConfig()\\n                        config.data.splice(i, 1)\\n                        writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\\n                        refreshPage(false)\\n                        return 'toast://已删除'\\n                    }, i)\\n                break\\n            case '重新排序':\\n                let sortFlag = parseInt(getMyVar('sortFlag', '-1'))\\n                el.title = (sortFlag == i ? '🔃  ' : '') + el.title\\n                if (sortFlag == -1)\\n                    el.url = $('#noLoading#').lazyRule((i) => {\\n                        putMyVar('sortFlag', i.toString())\\n                        refreshPage(false)\\n                        return 'toast://选择要移动到的位置'\\n                    }, i)\\n                else\\n                    el.url = $('#noLoading#').lazyRule(\\n                        (oldIndex, newIndex) => {\\n                            eval(JSON.parse(request('hiker://page/config')).rule)\\n                            config = getConfig()\\n                            config.data.splice(newIndex, 0, config.data.splice(oldIndex, 1)[0])\\n                            writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\\n                            putMyVar('sortFlag', '-1')\\n                            refreshPage(false)\\n                            return 'hiker://empty'\\n                        },\\n                        sortFlag,\\n                        i\\n                    )\\n                break\\n            case '编辑订阅':\\n                let arr = ['编辑名称', '编辑地址', '编辑内容', '选择样式']\\n                el.url = $(arr, 3).select(\\n                    (v, i) => {\\n                        if (input == '编辑名称') {\\n                            return $(v.name, '输入新名称').input((i) => {\\n                                eval(JSON.parse(request('hiker://page/config')).rule)\\n                                config = getConfig()\\n                                if (input) {\\n                                    config.data[i].name = input\\n                                    writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\\n                                    refreshPage(false)\\n                                    return 'toast://修改成功'\\n                                } else {\\n                                    return 'toast://不能为空'\\n                                }\\n                            }, i)\\n                        } else if (input == '编辑地址') {\\n                            return $(v.ua ? v.url + '$$$' + v.ua : v.url, '输入新地址').input((i) => {\\n                                eval(JSON.parse(request('hiker://page/config')).rule)\\n                                config = getConfig()\\n                                if (input == '') {\\n                                    return 'toast://不能为空'\\n                                } else if (\\n                                    input.indexOf('http') != 0 &&\\n                                    input.indexOf('file') != 0 &&\\n                                    input.indexOf('hiker') != 0\\n                                ) {\\n                                    return 'toast://链接格式有误'\\n                                } else {\\n                                    let [url, ua] = input.split('$$$')\\n                                    config.data[i].url = url\\n                                    config.data[i].ua = ua\\n                                    writeFile('hiker://files/rules/ApolloImg/config.json', JSON.stringify(config))\\n                                    refreshPage(false)\\n                                    return 'toast://修改成功'\\n                                }\\n                            }, i)\\n                        } else if (input == '编辑内容') {\\n                            if (v.url.startsWith('file://') || v.url.startsWith('hiker://files')) {\\n                                return 'editFile://' + v.url\\n                            }\\n                            return 'editFile://hiker://files/libs/' + md5(v.url) + '.js'\\n                        } else if (input == '选择样式') {\\n                            return $([\\\"movie_2\\\",\\\"movie_3\\\",\\\"pic_1\\\",\\\"pic_1_full\\\",\\\"pic_1_card\\\",\\\"pic_2\\\",\\\"pic_2_card\\\",\\\"pic_3\\\",\\\"pic_3_square\\\",\\\"icon_2\\\",\\\"icon_2_round\\\",\\\"icon_small_3\\\",\\\"icon_3_fill\\\",\\\"icon_3_round_fill\\\",\\\"icon_4\\\",\\\"icon_4_card\\\",\\\"icon_small_4\\\",\\\"icon_round_4\\\",\\\"icon_round_small_4\\\",\\\"icon_5\\\",\\\"card_pic_1\\\",\\\"card_pic_2\\\",\\\"card_pic_2_2\\\",\\\"card_pic_2_2_left\\\",\\\"card_pic_3\\\",\\\"card_pic_3_center\\\",\\\"pic_1_center\\\",\\\"text_1\\\",\\\"text_2\\\",\\\"text_3\\\",\\\"text_4\\\",\\\"text_5\\\",\\\"text_center_1\\\",\\\"text_icon\\\",\\\"avatar\\\"], 2, '请选择').select(() => {\\n                                setItem(\\\"sub_style\\\", input)\\n                            })\\n                        }\\n                    },\\n                    v,\\n                    i\\n                )\\n                break\\n            case '清除缓存':\\n                el.url = $('确定清除“' + v.name + '”订阅缓存？\\\\n(可立即更新)').confirm((url) => {\\n                    deleteCache(url)\\n                    return 'toast://清除成功'\\n                }, v.url)\\n                break\\n        }\\n        d.push(el)\\n    })\\n    return d\\n}\\n\\n$.exports = {\\n    renderSetting: renderSetting,\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"云口令\",\"path\":\"cloud\",\"rule\":\"eval(JSON.parse(request(\\\"hiker://page/batchIm?rule=聚图库\\\")).rule);\\nlet content = parsePaste(input);\\nbatchImport(content, \\\"聚图库\\\");\"}]","proxy":"","icon":"https://thumbsnap.com/i/VwW9xWsN.png"}