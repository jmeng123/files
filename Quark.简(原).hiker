{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"夸克列表API","path":"QuarkShareApi","rule":"js:\n//@author LoyDgIk\nlet httpRequest = $.require(\"httpRequest\");\nlet CookieManage=$.require(\"CookieManage\");\nlet fromDrive = module.importParam;\nlet pr, baseUrl, cookie;\nif (fromDrive === \"uc\") {\n    baseUrl = \"https://pc-api.uc.cn\";\n    pr = \"UCBrowser\";\n    cookie = getItem(\"ucCookie\", \"\");\n} else {\n    baseUrl = \"https://drive.quark.cn\";\n    pr = \"ucpro\";\n    cookie = getItem(\"quarkCookie\", \"\");\n}\n\nconst cookieManage = new CookieManage(cookie);\nfunction QuarkShareApi(shareId, sharePwd) {\n    this.shareId = shareId;\n    this.sharePwd = sharePwd;\n    this.refreshCallBack = (() => void 0);\n    //this.shareToken = shareToken || this.getShareToken();\n}\nObject.assign(QuarkShareApi.prototype, {\n    setRefresh(refreshCallBack) {\n        this.refreshCallBack = refreshCallBack;\n        return this;\n    },\n    setToken(shareToken) {\n        this.shareToken = shareToken;\n        return this;\n    },\n    requestHttp(api) {\n        return new httpRequest(api.startsWith(\"http\") ? api : (baseUrl + api)).success((body,res) => {\n            if (body.status !== 200) {\n                throw new Error(body.message);\n            }\n            cookieManage.add(res.headers[\"set-cookie\"]);\n            return body;\n        }).headers({\n            \"cookie\": cookieManage.get(),\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) quark-cloud-drive/2.5.20 Chrome/100.0.4896.160 Electron/18.3.5.4-b478491100 Safari/537.36 Channel/pckk_other_ch\",\n            \"referer\": baseUrl\n        });\n    },\n    getToken() {\n        if (this.shareId !== \"self\") {\n            return this.shareToken || this.getShareToken();\n        } else {\n            return \"\";\n        }\n    },\n    getPicCookie(){\n        return cookieManage.get();\n        \n    },\n    getShareToken() {\n        let result = this.requestHttp(\"/1/clouddrive/share/sharepage/token\").body({\n            \"pwd_id\": this.shareId,\n            \"passcode\": this.sharePwd,\n        }).bodyToString(true).setStartRequestFunc(post).start(true);\n        this.shareToken = result.data.stoken;\n        this.refreshCallBack(result.data.stoken, this);\n        return this.shareToken;\n    },\n    _getSelfListFile(fileId, page, orderBy) {\n        let result = this.requestHttp(\"https://drive.quark.cn/1/clouddrive/file/sort?pr=\" + pr + \"&fr=pc\").buildUrl({\n            pdir_fid: fileId || \"0\",\n            force: 0,\n            _page: page,\n            _size: 100,\n            uc_param_str: \"\",\n            _fetch_total: 1,\n            _fetch_sub_dirs: 0,\n            _sort: \"file_type:asc,\" + orderBy\n        }).start(true);\n        return result;\n    },\n    _getShareListFile(fileId, page, orderBy) {\n        let result = this.requestHttp(\"/1/clouddrive/share/sharepage/detail?pr=\" + pr + \"&fr=pc\").buildUrl({\n            pwd_id: this.shareId || \"\",\n            stoken: encodeURIComponent(this.getToken() || \"\"),\n            pdir_fid: fileId || \"\",\n            force: 0,\n            _page: page,\n            _size: 100,\n            _fetch_banner: 1,\n            _fetch_share: 1,\n            _fetch_total: 1,\n            _sort: \"file_type:asc,\" + orderBy\n        }).errorWithRetry((err, res, http) => {\n            if (JSON.parse(res.body).message.includes('stoken')) {\n                http.mergeHeadAndBody({\n                    buildUrl: {\n                        stoken: encodeURIComponent(this.getShareToken() || \"\")\n                    }\n                });\n                return true;\n            }\n        }).start(true);\n        return result;\n    },\n    getListFile(fileId, page, orderBy) {\n        if (this.shareId !== \"self\") {\n            return this._getShareListFile(fileId, page, orderBy);\n        } else {\n            return this._getSelfListFile(fileId, page, orderBy);\n        }\n    }\n});\n$.exports = QuarkShareApi;"},{"col_type":"movie_3","name":"httpRequest","path":"httpRequest","rule":"function httpRequest(url, options) {\n    this.retryCount = 0;\n    this.url = url;\n    this.options = Object.assign({}, options, {\n        withHeaders: true\n    });\n    this.errorCallback = (err, res) => {throw err};\n    this.errorCallbackWithRetry = (err, res, tryRestart) => false;\n    this.successCallback = (body, statusCode, headers) => body;\n    this.errorTypeCallback = (err, res) => err;\n    this.startRequest = fetch;\n    this._bodyToString = false;\n    this.buildParam = void(0);\n}\n\nObject.assign(httpRequest.prototype, {\n    bodyToString(flag) {\n        this._bodyToString = !!flag;\n        return this;\n    },\n    body(body) {\n        this.options.body = body || void 0;\n        return this;\n    },\n    buildUrl(buildParam) {\n        this.buildParam = buildParam || {};\n        return this;\n    },\n    setStartRequestFunc(func) {\n        this.startRequest = func;\n        return this;\n    },\n    headers(headers) {\n        this.options.headers = headers || void 0;\n        return this;\n    },\n    success(successCallback) {\n        if (typeof successCallback !== \"function\") return this;\n        this.successCallback = successCallback;\n        return this;\n    },\n    error(errorCallback) {\n        if (typeof errorCallback !== \"function\") return this;\n        this.errorCallback = errorCallback;\n        return this;\n    },\n    errorType(errorTypeCallback) {\n        if (typeof errorTypeCallback !== \"function\") return this;\n        this.errorTypeCallback = errorTypeCallback;\n        return this;\n    },\n    errorWithRetry(retryCount, errorCallbackWithRetry) {\n        if (typeof retryCount === \"function\" && typeof errorCallbackWithRetry === \"undefined\") {\n            errorCallbackWithRetry = retryCount;\n            retryCount = 1;\n        }\n        if (typeof errorCallbackWithRetry !== \"function\") {\n            return this;\n        }\n        this.retryCount = Number(retryCount);\n        this.errorCallbackWithRetry = errorCallbackWithRetry;\n        return this;\n    },\n    start(toJson) {\n        let options = Object.assign({}, this.options);\n        if (typeof options.body === \"object\" && this._bodyToString) {\n            options.body = JSON.stringify(options.body);\n        }\n        var res = JSON.parse(this.startRequest(this.buildParam?buildUrl(this.url, this.buildParam):this.url, options));\n        try {\n            if (res.statusCode >= 200 && res.statusCode <= 300) {\n                let body = res.body;\n                if (toJson) {\n                    body = JSON.parse(body);\n                }\n                return this.successCallback(body, res);\n            } else {\n                throw new Error(String(res.statusCode));\n            }\n        } catch (err) {\n            try {\n                err = this.errorTypeCallback(err, res);\n            } catch (e) {\n\n            }\n            if (this.retryCount) {\n                let tryResult = this.errorCallbackWithRetry(err, res, this);\n                if (tryResult) {\n                    this.retryCount--;\n                    return this.start(toJson);\n                } else {\n                    this.retryCount = 0;\n                    return this.errorCallback(err, res);\n                }\n            } else {\n                return this.errorCallback(err, res);\n            }\n        }\n    },\n    setOptions(options) {\n        this.options = Object.assign({}, options, {\n            withHeaders: true\n        });\n        return this;\n    },\n    mergeHeadAndBody(options) {\n        options = options || {};\n        Object.assign(this.options.headers||{}, options.headers);\n        if (typeof this.options.body === \"object\" && typeof options.body === \"object\") {\n            Object.assign(this.options.body||{}, options.body);\n        }\n        if (typeof options.buildUrl === \"object\") {\n            Object.assign(this.buildParam||{}, options.buildUrl);\n        }\n        return this;\n    }\n});\n\nObject.assign(httpRequest, {\n    fetch(url, options) {\n        return new httpRequest(url, options);\n    },\n    post(url, options) {\n        return new httpRequest(url, options).setStartRequestFunc(post);\n    },\n    request(url, options) {\n        return new httpRequest(url, options).setStartRequestFunc(request);\n    },\n    postRequest(url, options) {\n        return new httpRequest(url, options).setStartRequestFunc(postRequest);\n    },\n    fetchCookie(url, options) {\n        return new httpRequest(url, options).setStartRequestFunc(fetchCookie);\n    }\n});\n$.exports = httpRequest;"},{"col_type":"movie_3","name":"夸克列表","path":"quarkList","rule":"js:\nlet d = [];\n\naddListener(\"onClose\", () => clearMyVar(\"playUrlCache\"));\naddListener(\"onRefresh\", () => clearMyVar(\"playUrlCache\"));\nlet soUrl = decodeURIComponent(getParam(\"realurl\", \"\"));\nlet fromDrive = MY_PARAMS.fromDrive || \"quark\";\n\nif (soUrl.includes(\"drive.uc.cn\")) {\n    fromDrive = \"uc\";\n}\nlet realurl = soUrl.split(\"?\")[0];\nlet urlData = realurl.split(\"/\");\n\nlet shareId = MY_PARAMS.shareId || urlData[4].replace(\"#\", \"\");\nlet sharePwd = getParam(\"sharePwd\", MY_PARAMS.sharePwd || getParam(\"passcode\", \"\", soUrl) || \"\");\nlet shareToken = getParam(\"shareToken\", MY_PARAMS.shareToken || \"\");\n\nlet fileId = MY_PARAMS.fileId;\n\nlet sort = {\n    \"名称正序\": \"file_name:asc\",\n    \"名称倒序\": \"file_name:desc\",\n    \"时间正序\": \"updated_at:asc\",\n    \"时间倒序\": \"updated_at:desc\"\n};\nlet styles = [\"text_1\", \"avatar\"];\n\nlet sortValue = sort[getItem(\"sortKey\", \"名称正序\")];\nlet style = getItem(\"style\", styles[0]);\nif (MY_PAGE == 1) {\n    d.push({\n        title: fromDrive === \"uc\" ? \"UC网盘\" : \"夸克网盘\",\n        col_type: \"icon_5\",\n        pic_url: fromDrive === \"uc\" ? \"http://123.56.105.145/tubiao/erdi/14.png\" : \"hiker://images/icon_kuake\",\n        url: $(\"点击功能按钮=>个人账号管理即可登录账号\").confirm(() => {}),\n    });\n    d.push({\n        title: style,\n        url: $(styles, 1, '请选择').select(() => {\n            setItem('style', input);\n            refreshPage();\n        }),\n        pic_url: \"http://123.56.105.145/img/ali_icon.svg\",\n        col_type: \"icon_5\"\n    });\n    d.push({\n        title: getItem(\"sortKey\", \"名称正序\"),\n        url: $(Object.keys(sort), 1, '请选择').select(() => {\n            setItem(\"sortKey\", input)\n            refreshPage();\n        }),\n        pic_url: \"http://123.56.105.145/img/ali_sort.svg\",\n        col_type: \"icon_5\"\n    });\n    d.push({\n        title: getItem(\"quark_playMode\", \"转码\"),\n        url: $([\"转码\", \"原画\", \"普通原画\", \"curl\", \"aria2\", \"RPC\"], 2, \"播放模式\").select(() => {\n            setItem(\"quark_playMode\", input);\n            refreshPage();\n            return \"toast://切换成功\";\n        }),\n        col_type: \"icon_5\",\n        pic_url: \"http://123.56.105.145/img/ali_play.svg\",\n    });\n    d.push({\n        title: \"功能\",\n        url: $([\"跳转夸克APP\", \"复制分享链接\", \"个人账号管理\", \"原画下载线程\", \"设置RPC\"], 2).select((shareId, sharePwd, fromDrive) => {\n            if (input === \"跳转夸克APP\") {\n                return \"qklink://www.uc.cn/b20b84fd735a8dd3f7541129bacc4e9a?action=open_url&url=https://pan.quark.cn/s/\" + shareId;\n            } else if (input === \"个人账号管理\") {\n                return $.require(\"account\");\n            } else if (input === \"原画下载线程\") {\n                return $(getItem(\"speedThread\", \"10\"), \"请输入3-32之间的整数\").input(() => {\n                    let speedThread = parseInt(input);\n                    if (speedThread < 3 || speedThread > 32) {\n                        return \"toast://设置不合法\";\n                    }\n                    setItem(\"speedThread\", String(speedThread));\n                    return \"toast://设置成功\";\n                });\n            } else if (input === \"复制分享链接\") {\n                if (fromDrive === \"uc\") {\n                    return \"copy://\" + buildUrl(\"https://drive.uc.cn/s/\" + shareId + \"?public=1#/list/share\", {\n                        sharePwd: sharePwd\n                    });\n                } else {\n                    return \"copy://\" + buildUrl(\"https://pan.quark.cn/s/\" + shareId, {\n                        passcode: sharePwd\n                    });\n                }\n            } else if (input === \"设置RPC\") {\n                return $([\"设置RPC地址\", \"设置Token\", \"下载目录\"]).select(() => {\n                    if (input === \"设置RPC地址\") {\n                        const DownTool = $.require(\"DownTool\");\n                        return $(getItem(\"rpcUrl\", DownTool.getDefRpcUrl()), \"RPC地址,为空自动获取局域网地址\").input(() => {\n                            if (input) {\n                                setItem(\"rpcUrl\", input);\n                                return \"toast://设置成功\";\n                            } else {\n                                clearItem(\"rpcUrl\");\n                                return \"toast://清除设置\";\n                            }\n                        });\n                    } else if (input === \"设置Token\") {\n                        return $(getItem(\"rpcAriaToken\", \"\"), \"Token,没有就不填\").input(() => {\n                            setItem(\"rpcAriaToken\", input);\n                            return \"toast://设置成功\";\n                        });\n                    }else{\n                        return $(getItem(\"rpcDownDir\", \"\"), \"下载保存目录,为空就按下载器默认路径\").input(() => {\n                            setItem(\"rpcDownDir\", input);\n                            return \"toast://设置成功\";\n                        });\n                    }\n                });\n            }\n        }, shareId, sharePwd, fromDrive),\n        col_type: \"icon_5\",\n        pic_url: \"http://123.56.105.145/img/ali_fileinto.svg\",\n    });\n    d.push({\n        col_type: 'line_blank'\n    });\n}\n\n\nlet QuarkShareApi = $.require(\"QuarkShareApi\", fromDrive);\nlet quarkShareApi = new QuarkShareApi(shareId, sharePwd).setToken(shareToken).setRefresh((shareToken) => {\n    MY_PARAMS.shareToken = shareToken;\n    setPageParams(MY_PARAMS);\n});\n\nfunction formatSize(size) {\n    if (!size) {\n        return '';\n    }\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    let i = 0;\n    while (size >= 1024) {\n        size /= 1024;\n        i++;\n    }\n    size = i ? Number(size.toFixed(2)) : size;\n    return `${size} ${units[i]}`;\n}\n\nlet subExts = [\"vtt\", \"srt\", \"ass\"];\nlet titleHead = {\n    video: \"🎬\",\n    audio: \"🎵\",\n    doc: \"📑\",\n    image: \"🖼\",\n    archive: \"📦\",\n    \"default\": \"❓\"\n};\n\nfunction getHead(type, ext) {\n    let head = titleHead[type];\n\n    return head || \"❓\";\n}\n\nfunction getDownUrl(fid, fid_token, pwd_id, stoken, category, fromDrive) {\n\n    try {\n        showLoading(\"正在获取...\");\n        let playUrlCache = storage0.getMyVar(\"playUrlCache\", {});\n        if (playUrlCache[fid]) {\n            return playUrlCache[fid];\n        } else {\n            let url = $.require(\"play\", fromDrive).getPlayUrl(fid, fid_token, pwd_id, stoken, category);\n            playUrlCache[fid] = url;\n            storage0.putMyVar(\"playUrlCache\", playUrlCache);\n            return url;\n        }\n    } finally {\n        hideLoading();\n    }\n}\ntry {\n    var res = quarkShareApi.getListFile(fileId, MY_PAGE, sortValue);\n    //设置标题\n    var list = res.data.list || [];\n    if (shareId !== \"self\") {\n        setPageTitle(res.data.share.title);\n\n        if (list.length === 0 && !fileId) {\n            res = quarkShareApi.getListFile(res.data.share.first_fid, MY_PAGE, sortValue);\n            setPageTitle(res.data.share.title);\n            var list = res.data.list || [];\n        }\n    }\n    let ncookie = quarkShareApi.getPicCookie();\n    //log(ncookie)\n    list.forEach(item => {\n        //判断是否文件夹\n        if (item.dir) {\n            d.push({\n                title: \"📂\" + item.file_name,\n                desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + item.include_items + '项  ',\n                pic_url: \"http://123.56.105.145/tubiao/messy/27.svg\",\n                url: \"hiker://page/quarkList?page=fypage\",\n                col_type: style,\n                extra: {\n                    shareId,\n                    sharePwd,\n                    shareToken: quarkShareApi.getToken(),\n                    fileId: item.fid,\n                    inheritTitle: false,\n                    fromDrive\n                }\n            });\n        } else {\n            d.push({\n                title: getHead(item.obj_category) + item.file_name,\n                desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + formatSize(item.size),\n                pic_url: $(item.thumbnail, {\n                    cookie: ncookie\n                }).image(),\n                url: $(\"#noLoading#\").lazyRule(getDownUrl, item.fid, item.share_fid_token, shareId, quarkShareApi.getToken(), item.obj_category, fromDrive),\n                col_type: style,\n                extra: {\n                    id: item.fid,\n                    //inheritTitle: false,\n\n                    cls: 'playlist ' + item.obj_category\n                }\n            })\n        }\n\n    });\n} catch (e) {\n    d.push({\n        title: e.message,\n        url: 'hiker://empty',\n        col_type: 'text_center_1',\n        extra: {\n            lineVisible: false\n        }\n    });\n    if (e.message.includes(\"提取码\")) {\n        d.push({\n            title: \"输入提取码\",\n            url: $().input((MY_PARAMS) => {\n                setPageParams(Object.assign({}, MY_PARAMS, {\n                    sharePwd: input\n                }));\n                refreshPage();\n            }, MY_PARAMS),\n            col_type: \"text_center_1\"\n        });\n    }\n}\nsetResult(d);"},{"col_type":"movie_3","name":"play","path":"play","rule":"js:\nlet fromDrive = module.importParam;\nlet pr, homeUrl, api, cookie;\nif (fromDrive === \"uc\") {\n    homeUrl = \"https://drive.uc.cn/\";\n    pr = \"UCBrowser\";\n    api = \"https://pc-api.uc.cn\";\n    cookie = getItem(\"ucCookie\", \"\");\n} else {\n    homeUrl = \"https://drive.quark.cn/\";\n    pr = \"ucpro\";\n    api = \"https://drive.quark.cn\";\n    cookie = getItem(\"quarkCookie\", \"\");\n}\n\nlet CookieManage = $.require(\"CookieManage\");\n\nconst cookieManage = new CookieManage(cookie);\nlet httpRequest = $.require(\"httpRequest\");\n\nfunction waitSleep(time) {\n    java.lang.Thread.sleep(time || 600);\n}\n\nfunction requestHttp(url) {\n    return new httpRequest(url)\n        .success((body, res) => {\n            if (body.status !== 200) {\n                throw new Error(body.message);\n            }\n\n            cookieManage.add(res.headers[\"set-cookie\"]);\n            return body;\n        })\n        .errorType((err, res) => {\n            return new Error(JSON.parse(res.body).message);\n        })\n        .bodyToString(true)\n        .headers({\n            cookie: cookieManage.get(),\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) quark-cloud-drive/2.5.20 Chrome/100.0.4896.160 Electron/18.3.5.4-b478491100 Safari/537.36 Channel/pckk_other_ch\",\n            \"referer\": homeUrl\n        });\n}\n\nfunction getDriveInfo() {\n    return requestHttp(api + \"/1/clouddrive/share/sharepage/dir?pr=\" + pr + \"&fr=pc&aver=1\").start(true);\n}\n\nfunction createSaveTask(fid, fid_token, pwd_id, stoken) {\n    let driveInfo = getDriveInfo();\n    return requestHttp(api + \"/1/clouddrive/share/sharepage/save?pr=\" + pr + \"&fr=pc\").setStartRequestFunc(post).body({\n        \"fid_list\": [\n            fid\n        ],\n        \"fid_token_list\": [\n            fid_token\n        ],\n        \"to_pdir_fid\": driveInfo.data.dir.fid,\n        \"pwd_id\": pwd_id,\n        \"stoken\": stoken,\n        \"pdir_fid\": driveInfo.data.dir.pdir_fid\n    }).start(true);\n}\n\nfunction createDeleteTask(fid) {\n    let driveInfo = getDriveInfo();\n    return requestHttp(api + \"/1/clouddrive/file/delete?pr=\" + pr + \"&fr=pc\").setStartRequestFunc(post).body({\n        \"action_type\": 2,\n        \"filelist\": [\n            fid\n        ],\n        \"exclude_fids\": []\n    }).start(true);\n}\n\nfunction task(task_id, retry_index) {\n    return requestHttp(api + \"/1/clouddrive/task\").buildUrl({\n        pr: pr,\n        fr: \"pc\",\n        task_id: task_id,\n        retry_index: retry_index\n    }).start(true);\n}\n\nfunction queryTask(task_id) {\n    for (let i = 0; i < 9; i++) {\n        try {\n            let res = task(task_id, i + \"\");\n            if (res.data.status === 2) {\n                waitSleep(1000);\n                return res.data.save_as.save_as_top_fids[0];\n            }\n            waitSleep(300 * (i + 1));\n        } catch (e) {}\n    }\n    return void(0);\n}\n\nfunction queryTaskStatus(task_id) {\n    for (let i = 0; i < 6; i++) {\n        try {\n            let res = task(task_id, i + \"\");\n            if (res.data.status === 2) {\n                waitSleep(1000);\n                return true;\n            }\n            waitSleep(300);\n        } catch (e) {}\n    }\n    return false;\n}\n\nfunction getPreviewVideo(fid) {\n    return requestHttp(api + \"/1/clouddrive/file/v2/play?pr=\" + pr + \"&fr=pc\").body({\n        \"fid\": fid,\n        \"resolutions\": \"normal,low,high,super,2k,4k\",\n        \"supports\": \"fmp4,m3u8\"\n    }).setStartRequestFunc(post).start(true);\n}\n\n\nfunction getDownloadUrl(fid) {\n    return requestHttp(api + \"/1/clouddrive/file/download?pr=\" + pr + \"&fr=pc\").body({\n        \"fids\": [fid]\n    }).setStartRequestFunc(post).start(true);\n}\n\n\nconst DownTool = $.require(\"DownTool\");\n\nfunction getPlayUrl(fid, fid_token, pwd_id, stoken, category, isgetcurl) {\n    let isShare = pwd_id !== \"self\";\n    \n    try {\n        if (!cookie) return \"toast://请登录账号\";\n        let asfid = \"\";\n        if (isShare) {\n            let taskId = createSaveTask(fid, fid_token, pwd_id, stoken).data.task_id;\n            asfid = queryTask(taskId);\n            if (!asfid) {\n                return \"toast://获取失败\";\n            }\n        } else {\n            asfid = fid;\n        }\n        let playCookie = cookieManage.get();\n        /*if (pr === \"UCBrowser\") {\n            playCookie = cookie;\n        }*/\n        let playHeader = {\n            Referer: homeUrl,\n            cookie: playCookie,\n            \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/100.0.4896.58 UCBrowser/16.5.8.1309 Mobile Safari/537.36\"\n        };\n        /*let playHeaders = Object.assign({}, playHeader, {\n            \"User-Agent\": \"LogStatistic\"\n        });*/\n        let checkShare=()=>(isShare && createDeleteTask(asfid))||(playHeader.cookie=cookieManage.get());\n        let playMode = getItem(\"quark_playMode\", \"转码\");\n        if (playMode === \"RPC\") {\n            let downInfo = getDownloadUrl(asfid).data[0];\n            let download_url = downInfo.download_url;\n            let filename = downInfo.file_name;\n            checkShare();\n            return DownTool.updateRpc(download_url, playHeader, filename) ? \"toast://创建成功\" : \"toast://创建失败\";\n            //return \"toast://已推送\";\n        } else if ([\"curl\", \"aria2\"].includes(playMode)) {\n            let downInfo = getDownloadUrl(asfid).data[0];\n            let download_url = downInfo.download_url;\n            let filename = downInfo.file_name;\n            checkShare()\n            let cnmd = \"\";\n            if (playMode === \"curl\") {\n                cnmd = DownTool.getDownCURL(download_url, playHeader, filename);\n            } else {\n                cnmd = DownTool.getDownAria2c(download_url, playHeader, filename, Number(getItem(\"speedThread\", \"10\")));\n            }\n\n            let path = \"hiker://files/_cache/\" + filename + \"(\" + playMode + \").txt\";\n            writeFile(path, cnmd);\n            return \"share://\" + path;\n        } else if (category == \"video\") {\n\n            if (playMode === \"转码\") {\n                let videoRes = getPreviewVideo(asfid);\n                checkShare();\n                let videoList = videoRes.data.video_list;\n                let playList = {\n                    names: [],\n                    urls: [],\n                    headers: []\n                };                \n                videoList.filter(v => v.accessable).forEach(v => {\n                    playList.names.push(v.resolution);\n                    playList.urls.push(v.video_info.url + \"#isVideo=true#\");\n                    playList.headers.push(playHeader);\n                });\n                \n                return JSON.stringify(playList);\n            } else {\n\n                let playUrl = getDownloadUrl(asfid).data[0].download_url;\n                checkShare();\n                let playList = {\n                    names: [playMode],\n                    urls: [playUrl + \"#isVideo=true#\" + (playMode === \"原画\" ? \"#fastPlayMode##threads=\" + getItem(\"speedThread\", \"10\") + \"#\" : \"\")],\n                    headers: [playHeader]\n                }\n                \n                return JSON.stringify(playList);\n            }\n        } else {\n            let playUrl = getDownloadUrl(asfid).data[0].download_url;\n\n            checkShare();\n            if (category === 'audio') {\n                let playList = {\n                    names: [\"音频\"],\n                    urls: [playUrl + \"#isMusic=true#\"],\n                    headers: [playHeader],\n                    lyric: \"\"\n                }\n                return JSON.stringify(playList);\n            } else if (category === 'image') {\n                return $(playUrl, playHeader).image();\n            } else {\n                playHeader = Object.keys(playHeader).map(key => key + \"@\" + String(playHeader[key]).replace(/;/g, \"；；\"));\n                return \"download://\" + playUrl + \";{\" + playHeader.join(\"&&\") + \"}\";\n            }\n        }\n    } catch (e) {\n        if (e.message.includes(\"require login\") || e.message.includes(\"token\") || e.message.includes(\"invalid\")) {\n            toast(\"未登录或登录过期，请重新登录\");\n            return \"hiker://page/login#noRecordHistory##noHistory#?from=\" + fromDrive;\n        }\n        return \"toast://\" + e.toString();\n    }\n}\n\n$.exports = {\n    getPlayUrl\n};"},{"col_type":"movie_3","name":"登录账号","path":"login","rule":"js:\nlet d = [];\nsetPageTitle(\"登录账号\");\naddListener(\"onClose\", () => clearMyVar(\"cookie\"));\nlet from=getParam(\"from\",\"\");\n\nd.push({\n    title: \"““确认登录””\",\n    url: $(\"#noLoading#\").lazyRule((from) => {\n        //let cm = android.webkit.CookieManager.getInstance();\n        //let cm = com.tencent.smtt.sdk.CookieManager.getInstance();\n        //let cookie = String(cm.getCookie(\"https://pan.quark.cn\") || \"\");\n        let cookie = getMyVar(\"cookie\", \"\");\n        if ($.require(\"tool\").isLoginCookie(cookie)) {\n            if(from===\"uc\"){\n                setItem(\"ucCookie\", cookie);\n            }else{\n                setItem(\"quarkCookie\", cookie);\n            }\n            back();\n            return \"toast://登录成功\";\n        }\n        return \"toast://未登录\";\n    }, from),\n    desc: \"““””<small>点击头像可以退出账号重新登录</small>\",\n    col_type: \"text_center_1\"\n});\nd.push({\n    col_type: \"line_blank\"\n});\nlet durl=from===\"uc\"?\"https://drive.uc.cn\":\"https://pan.quark.cn\";\nd.push({\n    col_type: \"x5_webview_single\",\n    url: durl,\n    desc: \"list&&screen-150\",\n    extra: {\n        ua: PC_UA,\n        js: $.toString((title, durl) => {\n            let cookie = \"\";\n            setInterval(() => {\n                cookie = fba.getCookie(durl);\n                fba.putVar(title + \"@cookie\", cookie);\n            }, 200);\n        }, MY_RULE.title, durl)\n    }\n});\nsetResult(d)"},{"col_type":"movie_3","name":"工具","path":"tool","rule":"js:\n\n$.exports={\n    isLoginCookie(cookie){\n        //return true;\n        return !!(cookie  && cookie.includes(\"__uid=\") && cookie.includes(\"__pus=\"));\n    }\n};"},{"col_type":"movie_3","name":"个人账号设置","path":"account","rule":"$.exports = $([\"夸克二维码登录\", \"Cookie登录\", \"网页登录\", \"复制Cookie\", \"清除Cookie\", \"获取网络共享KKCookie\", \"UC二维码登录\", \"UC网页登录\", \"UCCookie登录\", \"复制UCCookie\", \"清除UCCookie\"]).select((isr) => {\n    function generateRandomUUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0,\n                v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n    if (input === \"网页登录\") {\n        return \"hiker://page/login#noRecordHistory##noHistory#\";\n    } else if (input === \"Cookie登录\") {\n        return $(\"\", \"请输入Cookie\").input((isr) => {\n            if ($.require(\"tool\").isLoginCookie(input)) {\n                setItem(\"quarkCookie\", input.replace(/\\s/g, \"\"));\n                isr && refreshPage();\n                return \"toast://设置成功\";\n            } else {\n                return \"toast://Cookie格式错误\";\n            }\n        }, isr);\n    } else if (input === \"从TVBOX获取Cookie\") {\n        let path = \"/storage/emulated/0/TV/.quark_user\";\n        if (fileExist(\"file://\" + path)) {\n            if (!new java.io.File(path).canRead()) {\n                return $(\"没有权限读取Cookie文件，请打开所有文件权限\\n海阔设置->更多功能->内部文件管理->右上角\").confirm(() => {});\n            }\n            try {\n                let json = JSON.parse(fetch(\"file://\" + path));\n                let cookie = json.cookie;\n                if ($.require(\"tool\").isLoginCookie(cookie)) {\n                    setItem(\"quarkCookie\", cookie);\n                    isr && refreshPage();\n                    return \"toast://设置成功\";\n                } else {\n                    return \"toast://Cookie格式错误\";\n                }\n            } catch (e) {\n                return \"toast://获取失败共享文件损坏\";\n            }\n        } else {\n            return $(\"未检测到TVBOX的Cookie文件\\n请使用过后再尝试\").confirm(() => {});\n        }\n    } else if (input === \"复制Cookie\") {\n        let cookie = getItem(\"quarkCookie\", \"\");\n        if (cookie) {\n            return \"copy://\" + cookie;\n        } else {\n            return \"toast://未登录\";\n        }\n    } else if (input === \"清除Cookie\") {\n        clearItem(\"quarkCookie\");\n        isr && refreshPage();\n        return \"toast://退出登录\";\n    } else if (input === \"UC网页登录\") {\n        return \"hiker://page/login#noRecordHistory##noHistory#?from=uc\";\n    } else if (input === \"UCCookie登录\") {\n        return $(\"\", \"请输入Cookie\").input((isr) => {\n            if ($.require(\"tool\").isLoginCookie(input)) {\n                setItem(\"ucCookie\", input.replace(/\\s/g, \"\"));\n                isr && refreshPage();\n                return \"toast://设置成功\";\n            } else {\n                return \"toast://Cookie格式错误\";\n            }\n        }, isr);\n    } else if (input === \"复制UCCookie\") {\n        let cookie = getItem(\"ucCookie\", \"\");\n        if (cookie) {\n            return \"copy://\" + cookie;\n        } else {\n            return \"toast://未登录\";\n        }\n    } else if (input === \"清除UCCookie\") {\n        clearItem(\"ucCookie\");\n        isr && refreshPage();\n        return \"toast://退出登录\";\n    } else if (input === \"获取网络共享KKCookie\") {\n        let hhd = {\n            'User-Agent': 'Apache-HttpClient/UNAVAILABLE (java 1.4)'\n        } \n        let dxcurl = 'http://api.v6x.wht.dgwht.top/text/3de88d10d01929be/'\n        let xcdata = ['c99d7411ccc29bc1']\n        let dxc = []\n        let yscookie = ''\n        for (let i = 0; i < xcdata.length; i++) {\n            let data = fetch(dxcurl + xcdata[i], {\n                headers: hhd\n            });\n            if ($.require(\"tool\").isLoginCookie(data)) {\n                try {\n                    yscookie = data.split(\"①\")[1];\n                } catch (e) {}\n                break;\n            }\n        }\n        if (yscookie) {\n            setItem(\"quarkCookie\", yscookie);\n            isr && refreshPage();\n            return \"toast://设置成功\";\n        } else {\n            return \"toast://获取失败\";\n        }\n    } else if (input === \"夸克二维码登录\") {\n        try {\n            let request_id = generateRandomUUID();\n            let qcToken = JSON.parse(fetch(buildUrl(\"https://uop.quark.cn/cas/ajax/getTokenForQrcodeLogin\", {\n                request_id,\n                client_id: \"532\",\n                v: \"1.2\"\n            }))).data.members.token;\n            createQRCode(`https://su.quark.cn/4_eMHBJ?token=${qcToken}&client_id=532&ssb=weblogin&uc_param_str=&uc_biz_str=S%3Acustom%7COPT%3ASAREA%400%7COPT%3AIMMERSIVE%401%7COPT%3ABACK_BTN_STYLE%400`, false);\n            let service_ticket = \"\";\n            for (let i = 0, ec = 0; i < 30; i++) {\n                java.lang.Thread.sleep(2000);\n                try {\n                    let ticket = JSON.parse(fetch(buildUrl(\"https://uop.quark.cn/cas/ajax/getServiceTicketByQrcodeToken\", {\n                        request_id: generateRandomUUID(),\n                        client_id: \"532\",\n                        v: \"1.2\",\n                        token: qcToken\n                    })));\n                    //log(ticket)\n                    if (ticket.status == 2000000) {\n                        service_ticket = ticket.data.members.service_ticket;\n                        break;\n                    }\n                    if (ticket.status == 50004001) continue;\n                    if (ticket.status == 50004002 || i === 29) {\n                        return \"toast://二维码过期\";\n                    }\n                } catch (e) {\n                    ec++;\n                    if (ec >= 5) {\n                        return \"toast://查询二维码出错\";\n                    }\n                }\n\n            }\n            if (!service_ticket) return \"toast://ticket获取失败\";\n            let res = JSON.parse(fetch(\"https://pan.quark.cn/account/info?st=\" + service_ticket + \"&lw=scan\", {\n                withHeaders: true\n            }));\n            //log(res)\n            if (!JSON.parse(res.body).success) return \"toast://ticket验证失败\";\n            let cookie = \"\";\n            let headers = res.headers;\n            for (let c of headers[\"set-cookie\"]) {\n                cookie += c.split(\";\")[0] + \";\";\n            }\n\n            log(cookie);\n            setItem(\"quarkCookie\", cookie);\n            refreshPage(false);\n            return \"toast://登录成功\";\n        } catch (e) {\n            return (\"toast://登录失败：\" + e.toString());\n        }\n        //https://su.quark.cn/4_eMHBJ?token=st96a633390ny9yzlk0ivuouc7b9gfmj&client_id=532&ssb=weblogin&uc_param_str=&uc_biz_str=S%3Acustom%7COPT%3ASAREA%400%7COPT%3AIMMERSIVE%401%7COPT%3ABACK_BTN_STYLE%400\n    } else if (input === \"UC二维码登录\") {\n        try {\n            let request_id = generateRandomUUID();\n            let qcToken = JSON.parse(post(`https://api.open.uc.cn/cas/ajax/getTokenForQrcodeLogin?__t=${new Date().getTime()}`, {\n                body: `v=1.2&request_id=${request_id}&client_id=381`\n            })).data.members.token;\n            createQRCode(`https://su.uc.cn/1_n0ZCv?token=${qcToken}&client_id=381&uc_param_str=&uc_biz_str=S%3Acustom%7CC%3Atitlebar_fix`, false);\n            let service_ticket = \"\";\n            for (let i = 0, ec = 0; i < 30; i++) {\n                java.lang.Thread.sleep(2000);\n                try {\n                    let ticket = JSON.parse(post(`https://api.open.uc.cn/cas/ajax/getServiceTicketByQrcodeToken?__t=${new Date().getTime()}`, {\n                        body: `v=1.2&request_id=${request_id}&client_id=381&token=${qcToken}`\n                    }));\n                    //log(ticket)\n                    if (ticket.status == 2000000) {\n                        service_ticket = ticket.data.members.service_ticket;\n                        break;\n                    }\n                    if (ticket.status == 50004001) continue;\n                    if (ticket.status == 50004002 || i === 29) {\n                        return \"toast://二维码过期\";\n                    }\n                } catch (e) {\n                    ec++;\n                    if (ec >= 5) {\n                        return \"toast://查询二维码出错\";\n                    }\n                }\n\n            }\n            if (!service_ticket) return \"toast://ticket获取失败\";\n            let res = JSON.parse(fetch(`https://drive.uc.cn/account/info?st=${service_ticket}`, {\n                withHeaders: true\n            }));\n            //log(res)\n            if (!JSON.parse(res.body).success) return \"toast://ticket验证失败\";\n            let cookie = \"\";\n            let headers = res.headers;\n            for (let c of headers[\"set-cookie\"]) {\n                cookie += c.split(\";\")[0] + \";\";\n            }\n            log(cookie);\n            setItem(\"ucCookie\", cookie);\n            refreshPage(false);\n            return \"toast://登录成功\";\n        } catch (e) {\n            return (\"toast://登录失败：\" + e.toString());\n        }\n    }\n}, $.importParam);"},{"col_type":"movie_3","name":"CookieManage","path":"CookieManage","rule":"function CookieManage(cookie) {\n    this.cookie = {};\n    this.add(cookie);\n}\nObject.assign(CookieManage.prototype, {\n    add(cookie) {\n        let cookies = [];\n        if (typeof cookie === \"string\") {\n            cookies = cookie.split(\";\");\n        } else if (Array.isArray(cookie)) {\n            cookies = cookie;\n        }\n        cookies.forEach(v => {\n            v = v.split(\"=\");\n            if (v.length < 2) return;\n            let key = v.shift().trim();\n            this.cookie[key] = v.join(\"=\").trim();\n        });\n    },\n    get() {\n        return Object.entries(this.cookie).map(v => v[0] + \"=\" + v[1]).join(\";\");\n    }\n});\n//const cookieManage = new CookieManage(cookie);\n$.exports=CookieManage;"},{"col_type":"movie_3","name":"天翼API","path":"CloudDrive","rule":"const CryptoUtil = $.require(\"hiker://assets/crypto-java.js\");\n\nfunction CloudDrive() {\n    this.regex = /https:\\/\\/cloud\\.189\\.cn\\/web\\/share\\?code=([0-9A-Za-z]+)/; //https://cloud.189.cn/web/share?code=qI3aMjqYRrqa\n    this.config = {\n        clientId: '538135150693412',\n        model: 'KB2000',\n        version: '9.0.6',\n        pubKey: 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCZLyV4gHNDUGJMZoOcYauxmNEsKrc0TlLeBEVVIIQNzG4WqjimceOj5R9ETwDeeSN3yejAKLGHgx83lyy2wBjvnbfm/nLObyWwQD/09CmpZdxoFYCH6rdDjRpwZOZ2nXSZpgkZXoOBkfNXNxnN74aXtho2dqBynTw3NFTWyQl8BQIDAQAB',\n    };\n    this.headers = {\n        'User-Agent': `Mozilla/5.0 (Linux; U; Android 11; ${this.config.model} Build/RP1A.201005.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.136 Mobile Safari/537.36 Ecloud/${this.config.version} Android/30 clientId/${this.config.clientId} clientModel/${this.config.model} clientChannelId/qq proVersion/1.0.6`,\n        'Referer': 'https://m.cloud.189.cn/zhuanti/2016/sign/index.jsp?albumBackupOpened=1',\n        'Accept-Encoding': 'gzip, deflate',\n    };\n    this.api = 'https://cloud.189.cn/api';\n    this.shareCode = '';\n    this.accessCode = '';\n    this.shareId = '';\n    this.shareMode = '';\n    this.isFolder = '';\n}\nObject.assign(CloudDrive.prototype, {\n    checkCookie() {\n        if (!this.cookie && this.account && this.password) {\n            setItem('cloudCookie', this.login(this.account, this.password));\n        } else {\n            throw new Error(\"未登录\");\n        }\n    },\n    getCookie() {\n        return getItem(\"cloudCookie\", \"\");\n    },\n    login(uname, passwd) {\n        try {\n            let resp = JSON.parse(post('https://open.e.189.cn/api/logbox/config/encryptConf.do?appId=cloud'));\n            let pubKey = resp.data.pubKey;\n            resp = JSON.parse(request('https://cloud.189.cn/api/portal/loginUrl.action?redirectURL=https://cloud.189.cn/web/redirect.html?returnURL=/main.action', {\n                headers: {\n                    cookie: \"#noCookie#\"\n                },\n                withHeaders: true\n            }));\n            //log(resp)\n            // 获取最后请求url中的参数reqId和lt\n            let Reqid = resp.url.match(/reqId=(\\w+)/)[1];\n            let Lt = resp.url.match(/lt=(\\w+)/)[1];\n            let tHeaders = {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/76.0',\n                'Referer': 'https://open.e.189.cn/',\n                Lt,\n                Reqid,\n            };\n            let data = {\n                version: '2.0',\n                appKey: 'cloud'\n            };\n            resp = JSON.parse(post('https://open.e.189.cn/api/logbox/oauth2/appConf.do', {\n                headers: tHeaders,\n                body: data\n            }));\n            let returnUrl = resp.data.returnUrl;\n            let paramId = resp.data.paramId;\n            //const keyData = `-----BEGIN PUBLIC KEY-----\\n${pubKey}\\n-----END PUBLIC KEY-----`;\n            //const jsencrypt = new JSEncrypt();\n            //jsencrypt.setPublicKey(keyData);\n            //const enUname = Buffer.from(jsencrypt.encrypt(uname), 'base64').toString('hex');\n            //const enPasswd = Buffer.from(jsencrypt.encrypt(passwd), 'base64').toString('hex');\n            let enUname = CryptoUtil.Data.parseBase64(rsaEncrypt(uname, pubKey), _base64.NO_WRAP).toHex().toUpperCase();\n            let enPasswd = CryptoUtil.Data.parseBase64(rsaEncrypt(passwd, pubKey), _base64.NO_WRAP).toHex().toUpperCase();\n            data = {\n                appKey: 'cloud',\n                version: '2.0',\n                accountType: '01',\n                mailSuffix: '@189.cn',\n                validateCode: '',\n                returnUrl,\n                paramId,\n                captchaToken: '',\n                dynamicCheck: 'FALSE',\n                clientType: '1',\n                cb_SaveName: '0',\n                isOauth2: false,\n                userName: `{NRP}${enUname}`,\n                password: `{NRP}${enPasswd}`,\n            };\n            resp = JSON.parse(post('https://open.e.189.cn/api/logbox/oauth2/loginSubmit.do', {\n                headers: tHeaders,\n                withHeaders: true,\n                body: data\n            }));\n            let res = JSON.parse(resp.body);\n            if (res.toUrl) {\n\n                let cookies = resp.headers['set-cookie'].map(it => it.split(';')[0]).join(';');\n                res = JSON.parse(request(res.toUrl, {\n                    headers: Object.assign({}, this.headers, {\n                        cookie: cookies\n                    }),\n                    withHeaders: true\n                }));\n\n                cookies += '; ' + (res.headers['set-cookie'] || []).map(it => it.split(';')[0]).join(';');\n                setItem('cloudCookie', cookies);\n                log(cookies);\n            } else {\n                console.error('Error during login:' + JSON.stringify(resp));\n            }\n        } catch (error) {\n            console.error('Error during login:' + error.toString());\n        }\n    },\n    getShareUrlData(url) {\n        let matches = this.regex.exec(url);\n        let shareData0 = {};\n        if (matches && matches[1]) {\n            shareData0.shareCode = matches[1];\n            let accessCodeMatch = url.match(/访问码：([a-zA-Z0-9]+)/);\n            shareData0.accessCode = accessCodeMatch ? accessCodeMatch[1] : '';\n        } else {\n            let matches_ = url.match(/https:\\/\\/cloud\\.189\\.cn\\/t\\/([0-9A-Za-z]+)/);\n            shareData0.shareCode = matches_ ? matches_[1] : null;\n            let accessCodeMatch = url.match(/访问码：([a-zA-Z0-9]+)/);\n            shareData0.accessCode = accessCodeMatch ? accessCodeMatch[1] : '';\n        }\n        return shareData0;\n    },\n    getShareInfoData(shareUrl, code) {\n        let shareData = this.getShareUrlData(shareUrl);\n        code && (shareData.accessCode = code);\n        try {\n            let resp = JSON.parse(request(`${this.api}/open/share/getShareInfoByCodeV2.action?key=noCache&shareCode=${shareData.shareCode}`, {\n                headers: {\n                    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',\n                    'accept': 'application/json;charset=UTF-8',\n                    //'accept-encoding': 'gzip, deflate, br, zstd',\n                    'accept-language': 'zh-CN,zh;q=0.9',\n                }\n            }));\n            shareData.rootFileId = resp.fileId;\n            shareData.shareId = resp.shareId;\n            shareData.shareMode = resp.shareMode;\n            shareData.isFolder = resp.isFolder;\n            return shareData;\n        } catch (error) {\n            console.error('Error during getShareInfo:' + error.toString());\n        }\n        return {};\n    },\n    getShareFiles(fileId, shareData, page, orderBy) {\n        let resp = JSON.parse(request(`${this.api}/open/share/listShareDir.action?key=noCache&pageNum=${page||1}&pageSize=60&fileId=${fileId}&shareDirFileId=${fileId}&isFolder=${shareData.isFolder}&shareId=${shareData.shareId||\"\"}&shareMode=${shareData.shareMode}&iconOption=5&orderBy=${orderBy||\"lastOpTime\"}&descending=true&accessCode=${shareData.accessCode}`, {\n            headers: {\n                'accept': 'application/json;charset=UTF-8',\n                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',\n            }\n        }));\n        log(resp)\n        let files = [];\n        for (let item of resp.fileListAO.fileList) {\n            files.push({\n                fileId: item.id,\n                name: item.name,\n                lastOpTime: item.lastOpTime,\n                dir: false,\n                mediaType: item.mediaType\n            });\n\n        }\n        for (let item of resp.fileListAO.folderList) {\n            files.push({\n                id: item.id.toString(),\n                name: item.name.toString(),\n                lastOpTime: item.lastOpTime.toString(),\n                dir: true\n            });\n\n        }\n        return files;\n    }\n});\n$.exports = new CloudDrive();\n//new CloudDrive().login(\"18181125538\", \"^A1B2C3@loydgik\");"},{"col_type":"movie_3","name":"天翼列表","path":"cloudShareList","rule":"js:\nlet titleHead = {\n    video: \"🎬\",\n    audio: \"🎵\",\n    doc: \"📑\",\n    image: \"🖼\",\n    archive: \"📦\",\n    \"default\": \"❓\"\n};\n\nfunction getHead(type, ext) {\n    let head = titleHead[type];\n\n    return head || \"❓\";\n}\n\nfunction formatSize(size) {\n    if (!size) {\n        return '';\n    }\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    let i = 0;\n    while (size >= 1024) {\n        size /= 1024;\n        i++;\n    }\n    size = i ? Number(size.toFixed(2)) : size;\n    return `${size} ${units[i]}`;\n}\n\n\nlet realurl = decodeURIComponent(getParam(\"realurl\", \"\"));\n\n\nlet cloudDrive = $.require(\"CloudDrive\");\n\n\nlet shareData = cloudDrive.getShareInfoData(realurl);\nlet list = cloudDrive.getShareFiles(MY_PARAMS.fileId || shareData.rootFileId, shareData, MY_PAGE);\n\nlet d = [];\nlist.forEach(item => {\n    //判断是否文件夹\n    if (item.dir) {\n        d.push({\n            title: \"📂\" + item.file_name,\n            desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + item.include_items + '项  ',\n            pic_url: \"http://123.56.105.145/tubiao/messy/27.svg\",\n            url: \"hiker://page/quarkList?page=fypage\",\n            col_type: style,\n            extra: {\n                shareId,\n                sharePwd,\n                shareToken: quarkShareApi.getToken(),\n                fileId: item.fid,\n                inheritTitle: false,\n                fromDrive\n            }\n        });\n    } else {\n        d.push({\n            title: getHead(item.obj_category) + item.file_name,\n            desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + formatSize(item.size),\n            pic_url: $(item.thumbnail, {\n                cookie: ncookie\n            }).image(),\n            url: $().lazyRule((fid, fid_token, pwd_id, stoken, category, fromDrive) => {\n                let playUrlCache = storage0.getMyVar(\"playUrlCache\", {});\n                if (playUrlCache[fid]) {\n                    return playUrlCache[fid];\n                } else {\n                    let url = $.require(\"play\", fromDrive).getPlayUrl(fid, fid_token, pwd_id, stoken, category);\n                    playUrlCache[fid] = url;\n                    storage0.putMyVar(\"playUrlCache\", playUrlCache);\n                    return url;\n                }\n            }, item.fid, item.share_fid_token, shareId, quarkShareApi.getToken(), item.obj_category, fromDrive),\n            col_type: style,\n            extra: {\n                id: item.fid,\n                //inheritTitle: false,\n                cls: 'playlist ' + item.obj_category\n            }\n        })\n    }\n\n});"},{"col_type":"movie_3","name":"DownTool","path":"DownTool","rule":"js:\n\nfunction getDownCURL(url, headers, filename) {\n    // Start building the curl command with the URL\n    let curlCommand = `curl -o \"${filename}\" \"${url}\"`;\n\n    // Add headers to the curl command if any are provided\n    if (headers && typeof headers === 'object') {\n        curlCommand += Object.entries(headers).reduce((command, [key, value]) => {\n            return `${command} -H \"${key}: ${value}\"`;\n        }, ' ');\n    }\n\n    return curlCommand;\n}\n\nfunction getDownAria2c(url, headers, filename, cut) {\n    // Start building the aria2c command with the URL and number of connections/segments\n    cut = cut || 1;\n    cut = cut > 16 ? 16 : cut;\n\n    let aria2Command = `aria2c -x ${cut} -s ${cut} -o \"${filename}\" \"${url}\"`;\n\n    // Add headers to the aria2c command if any are provided\n    if (headers && typeof headers === 'object') {\n        aria2Command += Object.entries(headers).reduce((command, [key, value]) => {\n            return `${command} --header=\"${key}: ${value}\"`;\n        }, ' ');\n    }\n\n    return aria2Command;\n}\nfunction getDefRpcUrl(){\n    let defip = getIP().split(\".\");\n    defip.push(Number(defip.pop()) + 2);\n    return \"http://\" + defip.join(\".\") + \":16800/jsonrpc\";\n}\nfunction updateRpc(url, headers, filename) {\n    //log(headers)\n    let header = [];\n    let rpcData = {\n        id: Date.now(),\n        jsonrpc: \"2.0\",\n        method: \"aria2.addUri\",\n        params: [\"token:\" + getItem(\"rpcAriaToken\", \"\"), [url], {\n            dir: getItem(\"rpcDownDir\",\"\")||void 0,\n            out: filename,\n            header\n        }]\n    };\n\n    if (headers && typeof headers === 'object') {\n        Object.entries(headers).forEach([key, value] => {\n            header.push(`${key}: ${value}`);\n        });\n    }\n    \n    let res = post(getItem(\"rpcUrl\", getDefRpcUrl()), {\n        body: JSON.stringify(rpcData)\n    });\n    return res.includes('\"result\":');\n}\n\n$.exports={\n    getDownCURL,\n    getDownAria2c,\n    updateRpc,\n    getDefRpcUrl\n};\n"}],"title":"Quark.简(原)","author":"@LoyDgIk","version":31,"type":"video","url":"hiker://empty##","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nlet d = [];\n$.require(\"CloudDrive\")\nlet cookie = getItem(\"quarkCookie\", \"\");\n\nif (!$.require(\"tool\").isLoginCookie(cookie)) {\n    clearItem(\"quarkCookie\");\n    d.push({\n        title: '<font color=\"#13B61B\">▐ </font><b>温馨提示<b>',\n        col_type: \"rich_text\",\n    });\n    d.push({\n        url: $.require(\"account\", true),\n        col_type: \"text_1\",\n        title: \"未检测到登录信息，点我跳转登录账号页面，获取Quark Cookie后方可使用\",\n        extra: {\n            pageTitle: \"登录夸克云盘\"\n        }\n    });\n}\nd.push({\n    title: \"云简\",\n    url: \"hiker://home@云盘君.简\",\n    pic_url: \"hiker://images/icon_left6\",\n    col_type: \"icon_round_small_4\"\n});\nd.push({\n    title: \"收藏\",\n    url: \"hiker://collection?rule=\" + MY_RULE.title,\n    pic_url: \"hiker://images/icon_good6\",\n    col_type: \"icon_round_small_4\"\n});\nd.push({\n    title: \"历史\",\n    url: \"hiker://history?rule=\" + MY_RULE.title,\n    pic_url: \"hiker://images/icon_time6\",\n    col_type: \"icon_round_small_4\"\n});\nd.push({\n    title: \"账号\",\n    url: $.require(\"account\", true),\n    pic_url: \"hiker://images/icon_setting6\",\n    col_type: \"icon_round_small_4\"\n});\nd.push({\n    title: '打开',\n    desc: '请输入链接/搜索关键词',\n    col_type: 'input',\n    url: $.toString(() => {\n        if (!input) return \"toast://请输入内容\";\n        if (!(input.startsWith(\"https://pan.quark.cn/s/\") || input.startsWith(\"https://drive.uc.cn/s/\"))) {\n            return \"hiker://page/sou#noHistory#?rule=云盘君.简&p=fypage&searchTerms=\" + encodeURIComponent(input);\n        }\n        return \"hiker://page/quarkList?realurl=\" + encodeURIComponent(input) + \"&sharePwd=\";\n    }),\n    extra: {\n        hideSetting: true,\n        pageTitle: \"搜索\"\n    }\n});\nd.push({\n    title: \"““””\"+\"我的夸克\".fontcolor(\"black\"),\n    url: \"hiker://page/quarkList\",\n    desc: \"2\",\n    pic_url: \"hiker://images/icon_kuake\",\n    col_type: \"card_pic_2\",\n    extra: {\n        shareId: \"self\"\n    }\n\n});\nd.push({\n    title: \"““””\"+\"我的UC\".fontcolor(\"black\"),\n    url: \"hiker://page/quarkList\",\n    desc: \"2\",\n    pic_url: \"http://123.56.105.145/tubiao/erdi/14.png\",\n    col_type: \"card_pic_2\",\n    extra: {\n        shareId: \"self\",\n        fromDrive: \"uc\"\n    }\n\n});\nsetResult(d);\n","searchFind":"","search_url":"","group":"④云盘","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"夸克列表API\",\"path\":\"QuarkShareApi\",\"rule\":\"js:\\n//@author LoyDgIk\\nlet httpRequest = $.require(\\\"httpRequest\\\");\\nlet CookieManage=$.require(\\\"CookieManage\\\");\\nlet fromDrive = module.importParam;\\nlet pr, baseUrl, cookie;\\nif (fromDrive === \\\"uc\\\") {\\n    baseUrl = \\\"https://pc-api.uc.cn\\\";\\n    pr = \\\"UCBrowser\\\";\\n    cookie = getItem(\\\"ucCookie\\\", \\\"\\\");\\n} else {\\n    baseUrl = \\\"https://drive.quark.cn\\\";\\n    pr = \\\"ucpro\\\";\\n    cookie = getItem(\\\"quarkCookie\\\", \\\"\\\");\\n}\\n\\nconst cookieManage = new CookieManage(cookie);\\nfunction QuarkShareApi(shareId, sharePwd) {\\n    this.shareId = shareId;\\n    this.sharePwd = sharePwd;\\n    this.refreshCallBack = (() => void 0);\\n    //this.shareToken = shareToken || this.getShareToken();\\n}\\nObject.assign(QuarkShareApi.prototype, {\\n    setRefresh(refreshCallBack) {\\n        this.refreshCallBack = refreshCallBack;\\n        return this;\\n    },\\n    setToken(shareToken) {\\n        this.shareToken = shareToken;\\n        return this;\\n    },\\n    requestHttp(api) {\\n        return new httpRequest(api.startsWith(\\\"http\\\") ? api : (baseUrl + api)).success((body,res) => {\\n            if (body.status !== 200) {\\n                throw new Error(body.message);\\n            }\\n            cookieManage.add(res.headers[\\\"set-cookie\\\"]);\\n            return body;\\n        }).headers({\\n            \\\"cookie\\\": cookieManage.get(),\\n            \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) quark-cloud-drive/2.5.20 Chrome/100.0.4896.160 Electron/18.3.5.4-b478491100 Safari/537.36 Channel/pckk_other_ch\\\",\\n            \\\"referer\\\": baseUrl\\n        });\\n    },\\n    getToken() {\\n        if (this.shareId !== \\\"self\\\") {\\n            return this.shareToken || this.getShareToken();\\n        } else {\\n            return \\\"\\\";\\n        }\\n    },\\n    getPicCookie(){\\n        return cookieManage.get();\\n        \\n    },\\n    getShareToken() {\\n        let result = this.requestHttp(\\\"/1/clouddrive/share/sharepage/token\\\").body({\\n            \\\"pwd_id\\\": this.shareId,\\n            \\\"passcode\\\": this.sharePwd,\\n        }).bodyToString(true).setStartRequestFunc(post).start(true);\\n        this.shareToken = result.data.stoken;\\n        this.refreshCallBack(result.data.stoken, this);\\n        return this.shareToken;\\n    },\\n    _getSelfListFile(fileId, page, orderBy) {\\n        let result = this.requestHttp(\\\"https://drive.quark.cn/1/clouddrive/file/sort?pr=\\\" + pr + \\\"&fr=pc\\\").buildUrl({\\n            pdir_fid: fileId || \\\"0\\\",\\n            force: 0,\\n            _page: page,\\n            _size: 100,\\n            uc_param_str: \\\"\\\",\\n            _fetch_total: 1,\\n            _fetch_sub_dirs: 0,\\n            _sort: \\\"file_type:asc,\\\" + orderBy\\n        }).start(true);\\n        return result;\\n    },\\n    _getShareListFile(fileId, page, orderBy) {\\n        let result = this.requestHttp(\\\"/1/clouddrive/share/sharepage/detail?pr=\\\" + pr + \\\"&fr=pc\\\").buildUrl({\\n            pwd_id: this.shareId || \\\"\\\",\\n            stoken: encodeURIComponent(this.getToken() || \\\"\\\"),\\n            pdir_fid: fileId || \\\"\\\",\\n            force: 0,\\n            _page: page,\\n            _size: 100,\\n            _fetch_banner: 1,\\n            _fetch_share: 1,\\n            _fetch_total: 1,\\n            _sort: \\\"file_type:asc,\\\" + orderBy\\n        }).errorWithRetry((err, res, http) => {\\n            if (JSON.parse(res.body).message.includes('stoken')) {\\n                http.mergeHeadAndBody({\\n                    buildUrl: {\\n                        stoken: encodeURIComponent(this.getShareToken() || \\\"\\\")\\n                    }\\n                });\\n                return true;\\n            }\\n        }).start(true);\\n        return result;\\n    },\\n    getListFile(fileId, page, orderBy) {\\n        if (this.shareId !== \\\"self\\\") {\\n            return this._getShareListFile(fileId, page, orderBy);\\n        } else {\\n            return this._getSelfListFile(fileId, page, orderBy);\\n        }\\n    }\\n});\\n$.exports = QuarkShareApi;\"},{\"col_type\":\"movie_3\",\"name\":\"httpRequest\",\"path\":\"httpRequest\",\"rule\":\"function httpRequest(url, options) {\\n    this.retryCount = 0;\\n    this.url = url;\\n    this.options = Object.assign({}, options, {\\n        withHeaders: true\\n    });\\n    this.errorCallback = (err, res) => {throw err};\\n    this.errorCallbackWithRetry = (err, res, tryRestart) => false;\\n    this.successCallback = (body, statusCode, headers) => body;\\n    this.errorTypeCallback = (err, res) => err;\\n    this.startRequest = fetch;\\n    this._bodyToString = false;\\n    this.buildParam = void(0);\\n}\\n\\nObject.assign(httpRequest.prototype, {\\n    bodyToString(flag) {\\n        this._bodyToString = !!flag;\\n        return this;\\n    },\\n    body(body) {\\n        this.options.body = body || void 0;\\n        return this;\\n    },\\n    buildUrl(buildParam) {\\n        this.buildParam = buildParam || {};\\n        return this;\\n    },\\n    setStartRequestFunc(func) {\\n        this.startRequest = func;\\n        return this;\\n    },\\n    headers(headers) {\\n        this.options.headers = headers || void 0;\\n        return this;\\n    },\\n    success(successCallback) {\\n        if (typeof successCallback !== \\\"function\\\") return this;\\n        this.successCallback = successCallback;\\n        return this;\\n    },\\n    error(errorCallback) {\\n        if (typeof errorCallback !== \\\"function\\\") return this;\\n        this.errorCallback = errorCallback;\\n        return this;\\n    },\\n    errorType(errorTypeCallback) {\\n        if (typeof errorTypeCallback !== \\\"function\\\") return this;\\n        this.errorTypeCallback = errorTypeCallback;\\n        return this;\\n    },\\n    errorWithRetry(retryCount, errorCallbackWithRetry) {\\n        if (typeof retryCount === \\\"function\\\" && typeof errorCallbackWithRetry === \\\"undefined\\\") {\\n            errorCallbackWithRetry = retryCount;\\n            retryCount = 1;\\n        }\\n        if (typeof errorCallbackWithRetry !== \\\"function\\\") {\\n            return this;\\n        }\\n        this.retryCount = Number(retryCount);\\n        this.errorCallbackWithRetry = errorCallbackWithRetry;\\n        return this;\\n    },\\n    start(toJson) {\\n        let options = Object.assign({}, this.options);\\n        if (typeof options.body === \\\"object\\\" && this._bodyToString) {\\n            options.body = JSON.stringify(options.body);\\n        }\\n        var res = JSON.parse(this.startRequest(this.buildParam?buildUrl(this.url, this.buildParam):this.url, options));\\n        try {\\n            if (res.statusCode >= 200 && res.statusCode <= 300) {\\n                let body = res.body;\\n                if (toJson) {\\n                    body = JSON.parse(body);\\n                }\\n                return this.successCallback(body, res);\\n            } else {\\n                throw new Error(String(res.statusCode));\\n            }\\n        } catch (err) {\\n            try {\\n                err = this.errorTypeCallback(err, res);\\n            } catch (e) {\\n\\n            }\\n            if (this.retryCount) {\\n                let tryResult = this.errorCallbackWithRetry(err, res, this);\\n                if (tryResult) {\\n                    this.retryCount--;\\n                    return this.start(toJson);\\n                } else {\\n                    this.retryCount = 0;\\n                    return this.errorCallback(err, res);\\n                }\\n            } else {\\n                return this.errorCallback(err, res);\\n            }\\n        }\\n    },\\n    setOptions(options) {\\n        this.options = Object.assign({}, options, {\\n            withHeaders: true\\n        });\\n        return this;\\n    },\\n    mergeHeadAndBody(options) {\\n        options = options || {};\\n        Object.assign(this.options.headers||{}, options.headers);\\n        if (typeof this.options.body === \\\"object\\\" && typeof options.body === \\\"object\\\") {\\n            Object.assign(this.options.body||{}, options.body);\\n        }\\n        if (typeof options.buildUrl === \\\"object\\\") {\\n            Object.assign(this.buildParam||{}, options.buildUrl);\\n        }\\n        return this;\\n    }\\n});\\n\\nObject.assign(httpRequest, {\\n    fetch(url, options) {\\n        return new httpRequest(url, options);\\n    },\\n    post(url, options) {\\n        return new httpRequest(url, options).setStartRequestFunc(post);\\n    },\\n    request(url, options) {\\n        return new httpRequest(url, options).setStartRequestFunc(request);\\n    },\\n    postRequest(url, options) {\\n        return new httpRequest(url, options).setStartRequestFunc(postRequest);\\n    },\\n    fetchCookie(url, options) {\\n        return new httpRequest(url, options).setStartRequestFunc(fetchCookie);\\n    }\\n});\\n$.exports = httpRequest;\"},{\"col_type\":\"movie_3\",\"name\":\"夸克列表\",\"path\":\"quarkList\",\"rule\":\"js:\\nlet d = [];\\n\\naddListener(\\\"onClose\\\", () => clearMyVar(\\\"playUrlCache\\\"));\\naddListener(\\\"onRefresh\\\", () => clearMyVar(\\\"playUrlCache\\\"));\\nlet soUrl = decodeURIComponent(getParam(\\\"realurl\\\", \\\"\\\"));\\nlet fromDrive = MY_PARAMS.fromDrive || \\\"quark\\\";\\n\\nif (soUrl.includes(\\\"drive.uc.cn\\\")) {\\n    fromDrive = \\\"uc\\\";\\n}\\nlet realurl = soUrl.split(\\\"?\\\")[0];\\nlet urlData = realurl.split(\\\"/\\\");\\n\\nlet shareId = MY_PARAMS.shareId || urlData[4].replace(\\\"#\\\", \\\"\\\");\\nlet sharePwd = getParam(\\\"sharePwd\\\", MY_PARAMS.sharePwd || getParam(\\\"passcode\\\", \\\"\\\", soUrl) || \\\"\\\");\\nlet shareToken = getParam(\\\"shareToken\\\", MY_PARAMS.shareToken || \\\"\\\");\\n\\nlet fileId = MY_PARAMS.fileId;\\n\\nlet sort = {\\n    \\\"名称正序\\\": \\\"file_name:asc\\\",\\n    \\\"名称倒序\\\": \\\"file_name:desc\\\",\\n    \\\"时间正序\\\": \\\"updated_at:asc\\\",\\n    \\\"时间倒序\\\": \\\"updated_at:desc\\\"\\n};\\nlet styles = [\\\"text_1\\\", \\\"avatar\\\"];\\n\\nlet sortValue = sort[getItem(\\\"sortKey\\\", \\\"名称正序\\\")];\\nlet style = getItem(\\\"style\\\", styles[0]);\\nif (MY_PAGE == 1) {\\n    d.push({\\n        title: fromDrive === \\\"uc\\\" ? \\\"UC网盘\\\" : \\\"夸克网盘\\\",\\n        col_type: \\\"icon_5\\\",\\n        pic_url: fromDrive === \\\"uc\\\" ? \\\"http://123.56.105.145/tubiao/erdi/14.png\\\" : \\\"hiker://images/icon_kuake\\\",\\n        url: $(\\\"点击功能按钮=>个人账号管理即可登录账号\\\").confirm(() => {}),\\n    });\\n    d.push({\\n        title: style,\\n        url: $(styles, 1, '请选择').select(() => {\\n            setItem('style', input);\\n            refreshPage();\\n        }),\\n        pic_url: \\\"http://123.56.105.145/img/ali_icon.svg\\\",\\n        col_type: \\\"icon_5\\\"\\n    });\\n    d.push({\\n        title: getItem(\\\"sortKey\\\", \\\"名称正序\\\"),\\n        url: $(Object.keys(sort), 1, '请选择').select(() => {\\n            setItem(\\\"sortKey\\\", input)\\n            refreshPage();\\n        }),\\n        pic_url: \\\"http://123.56.105.145/img/ali_sort.svg\\\",\\n        col_type: \\\"icon_5\\\"\\n    });\\n    d.push({\\n        title: getItem(\\\"quark_playMode\\\", \\\"转码\\\"),\\n        url: $([\\\"转码\\\", \\\"原画\\\", \\\"普通原画\\\", \\\"curl\\\", \\\"aria2\\\", \\\"RPC\\\"], 2, \\\"播放模式\\\").select(() => {\\n            setItem(\\\"quark_playMode\\\", input);\\n            refreshPage();\\n            return \\\"toast://切换成功\\\";\\n        }),\\n        col_type: \\\"icon_5\\\",\\n        pic_url: \\\"http://123.56.105.145/img/ali_play.svg\\\",\\n    });\\n    d.push({\\n        title: \\\"功能\\\",\\n        url: $([\\\"跳转夸克APP\\\", \\\"复制分享链接\\\", \\\"个人账号管理\\\", \\\"原画下载线程\\\", \\\"设置RPC\\\"], 2).select((shareId, sharePwd, fromDrive) => {\\n            if (input === \\\"跳转夸克APP\\\") {\\n                return \\\"qklink://www.uc.cn/b20b84fd735a8dd3f7541129bacc4e9a?action=open_url&url=https://pan.quark.cn/s/\\\" + shareId;\\n            } else if (input === \\\"个人账号管理\\\") {\\n                return $.require(\\\"account\\\");\\n            } else if (input === \\\"原画下载线程\\\") {\\n                return $(getItem(\\\"speedThread\\\", \\\"10\\\"), \\\"请输入3-32之间的整数\\\").input(() => {\\n                    let speedThread = parseInt(input);\\n                    if (speedThread < 3 || speedThread > 32) {\\n                        return \\\"toast://设置不合法\\\";\\n                    }\\n                    setItem(\\\"speedThread\\\", String(speedThread));\\n                    return \\\"toast://设置成功\\\";\\n                });\\n            } else if (input === \\\"复制分享链接\\\") {\\n                if (fromDrive === \\\"uc\\\") {\\n                    return \\\"copy://\\\" + buildUrl(\\\"https://drive.uc.cn/s/\\\" + shareId + \\\"?public=1#/list/share\\\", {\\n                        sharePwd: sharePwd\\n                    });\\n                } else {\\n                    return \\\"copy://\\\" + buildUrl(\\\"https://pan.quark.cn/s/\\\" + shareId, {\\n                        passcode: sharePwd\\n                    });\\n                }\\n            } else if (input === \\\"设置RPC\\\") {\\n                return $([\\\"设置RPC地址\\\", \\\"设置Token\\\", \\\"下载目录\\\"]).select(() => {\\n                    if (input === \\\"设置RPC地址\\\") {\\n                        const DownTool = $.require(\\\"DownTool\\\");\\n                        return $(getItem(\\\"rpcUrl\\\", DownTool.getDefRpcUrl()), \\\"RPC地址,为空自动获取局域网地址\\\").input(() => {\\n                            if (input) {\\n                                setItem(\\\"rpcUrl\\\", input);\\n                                return \\\"toast://设置成功\\\";\\n                            } else {\\n                                clearItem(\\\"rpcUrl\\\");\\n                                return \\\"toast://清除设置\\\";\\n                            }\\n                        });\\n                    } else if (input === \\\"设置Token\\\") {\\n                        return $(getItem(\\\"rpcAriaToken\\\", \\\"\\\"), \\\"Token,没有就不填\\\").input(() => {\\n                            setItem(\\\"rpcAriaToken\\\", input);\\n                            return \\\"toast://设置成功\\\";\\n                        });\\n                    }else{\\n                        return $(getItem(\\\"rpcDownDir\\\", \\\"\\\"), \\\"下载保存目录,为空就按下载器默认路径\\\").input(() => {\\n                            setItem(\\\"rpcDownDir\\\", input);\\n                            return \\\"toast://设置成功\\\";\\n                        });\\n                    }\\n                });\\n            }\\n        }, shareId, sharePwd, fromDrive),\\n        col_type: \\\"icon_5\\\",\\n        pic_url: \\\"http://123.56.105.145/img/ali_fileinto.svg\\\",\\n    });\\n    d.push({\\n        col_type: 'line_blank'\\n    });\\n}\\n\\n\\nlet QuarkShareApi = $.require(\\\"QuarkShareApi\\\", fromDrive);\\nlet quarkShareApi = new QuarkShareApi(shareId, sharePwd).setToken(shareToken).setRefresh((shareToken) => {\\n    MY_PARAMS.shareToken = shareToken;\\n    setPageParams(MY_PARAMS);\\n});\\n\\nfunction formatSize(size) {\\n    if (!size) {\\n        return '';\\n    }\\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\\n    let i = 0;\\n    while (size >= 1024) {\\n        size /= 1024;\\n        i++;\\n    }\\n    size = i ? Number(size.toFixed(2)) : size;\\n    return `${size} ${units[i]}`;\\n}\\n\\nlet subExts = [\\\"vtt\\\", \\\"srt\\\", \\\"ass\\\"];\\nlet titleHead = {\\n    video: \\\"🎬\\\",\\n    audio: \\\"🎵\\\",\\n    doc: \\\"📑\\\",\\n    image: \\\"🖼\\\",\\n    archive: \\\"📦\\\",\\n    \\\"default\\\": \\\"❓\\\"\\n};\\n\\nfunction getHead(type, ext) {\\n    let head = titleHead[type];\\n\\n    return head || \\\"❓\\\";\\n}\\n\\nfunction getDownUrl(fid, fid_token, pwd_id, stoken, category, fromDrive) {\\n\\n    try {\\n        showLoading(\\\"正在获取...\\\");\\n        let playUrlCache = storage0.getMyVar(\\\"playUrlCache\\\", {});\\n        if (playUrlCache[fid]) {\\n            return playUrlCache[fid];\\n        } else {\\n            let url = $.require(\\\"play\\\", fromDrive).getPlayUrl(fid, fid_token, pwd_id, stoken, category);\\n            playUrlCache[fid] = url;\\n            storage0.putMyVar(\\\"playUrlCache\\\", playUrlCache);\\n            return url;\\n        }\\n    } finally {\\n        hideLoading();\\n    }\\n}\\ntry {\\n    var res = quarkShareApi.getListFile(fileId, MY_PAGE, sortValue);\\n    //设置标题\\n    var list = res.data.list || [];\\n    if (shareId !== \\\"self\\\") {\\n        setPageTitle(res.data.share.title);\\n\\n        if (list.length === 0 && !fileId) {\\n            res = quarkShareApi.getListFile(res.data.share.first_fid, MY_PAGE, sortValue);\\n            setPageTitle(res.data.share.title);\\n            var list = res.data.list || [];\\n        }\\n    }\\n    let ncookie = quarkShareApi.getPicCookie();\\n    //log(ncookie)\\n    list.forEach(item => {\\n        //判断是否文件夹\\n        if (item.dir) {\\n            d.push({\\n                title: \\\"📂\\\" + item.file_name,\\n                desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + item.include_items + '项  ',\\n                pic_url: \\\"http://123.56.105.145/tubiao/messy/27.svg\\\",\\n                url: \\\"hiker://page/quarkList?page=fypage\\\",\\n                col_type: style,\\n                extra: {\\n                    shareId,\\n                    sharePwd,\\n                    shareToken: quarkShareApi.getToken(),\\n                    fileId: item.fid,\\n                    inheritTitle: false,\\n                    fromDrive\\n                }\\n            });\\n        } else {\\n            d.push({\\n                title: getHead(item.obj_category) + item.file_name,\\n                desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + formatSize(item.size),\\n                pic_url: $(item.thumbnail, {\\n                    cookie: ncookie\\n                }).image(),\\n                url: $(\\\"#noLoading#\\\").lazyRule(getDownUrl, item.fid, item.share_fid_token, shareId, quarkShareApi.getToken(), item.obj_category, fromDrive),\\n                col_type: style,\\n                extra: {\\n                    id: item.fid,\\n                    //inheritTitle: false,\\n\\n                    cls: 'playlist ' + item.obj_category\\n                }\\n            })\\n        }\\n\\n    });\\n} catch (e) {\\n    d.push({\\n        title: e.message,\\n        url: 'hiker://empty',\\n        col_type: 'text_center_1',\\n        extra: {\\n            lineVisible: false\\n        }\\n    });\\n    if (e.message.includes(\\\"提取码\\\")) {\\n        d.push({\\n            title: \\\"输入提取码\\\",\\n            url: $().input((MY_PARAMS) => {\\n                setPageParams(Object.assign({}, MY_PARAMS, {\\n                    sharePwd: input\\n                }));\\n                refreshPage();\\n            }, MY_PARAMS),\\n            col_type: \\\"text_center_1\\\"\\n        });\\n    }\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"play\",\"path\":\"play\",\"rule\":\"js:\\nlet fromDrive = module.importParam;\\nlet pr, homeUrl, api, cookie;\\nif (fromDrive === \\\"uc\\\") {\\n    homeUrl = \\\"https://drive.uc.cn/\\\";\\n    pr = \\\"UCBrowser\\\";\\n    api = \\\"https://pc-api.uc.cn\\\";\\n    cookie = getItem(\\\"ucCookie\\\", \\\"\\\");\\n} else {\\n    homeUrl = \\\"https://drive.quark.cn/\\\";\\n    pr = \\\"ucpro\\\";\\n    api = \\\"https://drive.quark.cn\\\";\\n    cookie = getItem(\\\"quarkCookie\\\", \\\"\\\");\\n}\\n\\nlet CookieManage = $.require(\\\"CookieManage\\\");\\n\\nconst cookieManage = new CookieManage(cookie);\\nlet httpRequest = $.require(\\\"httpRequest\\\");\\n\\nfunction waitSleep(time) {\\n    java.lang.Thread.sleep(time || 600);\\n}\\n\\nfunction requestHttp(url) {\\n    return new httpRequest(url)\\n        .success((body, res) => {\\n            if (body.status !== 200) {\\n                throw new Error(body.message);\\n            }\\n\\n            cookieManage.add(res.headers[\\\"set-cookie\\\"]);\\n            return body;\\n        })\\n        .errorType((err, res) => {\\n            return new Error(JSON.parse(res.body).message);\\n        })\\n        .bodyToString(true)\\n        .headers({\\n            cookie: cookieManage.get(),\\n            \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) quark-cloud-drive/2.5.20 Chrome/100.0.4896.160 Electron/18.3.5.4-b478491100 Safari/537.36 Channel/pckk_other_ch\\\",\\n            \\\"referer\\\": homeUrl\\n        });\\n}\\n\\nfunction getDriveInfo() {\\n    return requestHttp(api + \\\"/1/clouddrive/share/sharepage/dir?pr=\\\" + pr + \\\"&fr=pc&aver=1\\\").start(true);\\n}\\n\\nfunction createSaveTask(fid, fid_token, pwd_id, stoken) {\\n    let driveInfo = getDriveInfo();\\n    return requestHttp(api + \\\"/1/clouddrive/share/sharepage/save?pr=\\\" + pr + \\\"&fr=pc\\\").setStartRequestFunc(post).body({\\n        \\\"fid_list\\\": [\\n            fid\\n        ],\\n        \\\"fid_token_list\\\": [\\n            fid_token\\n        ],\\n        \\\"to_pdir_fid\\\": driveInfo.data.dir.fid,\\n        \\\"pwd_id\\\": pwd_id,\\n        \\\"stoken\\\": stoken,\\n        \\\"pdir_fid\\\": driveInfo.data.dir.pdir_fid\\n    }).start(true);\\n}\\n\\nfunction createDeleteTask(fid) {\\n    let driveInfo = getDriveInfo();\\n    return requestHttp(api + \\\"/1/clouddrive/file/delete?pr=\\\" + pr + \\\"&fr=pc\\\").setStartRequestFunc(post).body({\\n        \\\"action_type\\\": 2,\\n        \\\"filelist\\\": [\\n            fid\\n        ],\\n        \\\"exclude_fids\\\": []\\n    }).start(true);\\n}\\n\\nfunction task(task_id, retry_index) {\\n    return requestHttp(api + \\\"/1/clouddrive/task\\\").buildUrl({\\n        pr: pr,\\n        fr: \\\"pc\\\",\\n        task_id: task_id,\\n        retry_index: retry_index\\n    }).start(true);\\n}\\n\\nfunction queryTask(task_id) {\\n    for (let i = 0; i < 9; i++) {\\n        try {\\n            let res = task(task_id, i + \\\"\\\");\\n            if (res.data.status === 2) {\\n                waitSleep(1000);\\n                return res.data.save_as.save_as_top_fids[0];\\n            }\\n            waitSleep(300 * (i + 1));\\n        } catch (e) {}\\n    }\\n    return void(0);\\n}\\n\\nfunction queryTaskStatus(task_id) {\\n    for (let i = 0; i < 6; i++) {\\n        try {\\n            let res = task(task_id, i + \\\"\\\");\\n            if (res.data.status === 2) {\\n                waitSleep(1000);\\n                return true;\\n            }\\n            waitSleep(300);\\n        } catch (e) {}\\n    }\\n    return false;\\n}\\n\\nfunction getPreviewVideo(fid) {\\n    return requestHttp(api + \\\"/1/clouddrive/file/v2/play?pr=\\\" + pr + \\\"&fr=pc\\\").body({\\n        \\\"fid\\\": fid,\\n        \\\"resolutions\\\": \\\"normal,low,high,super,2k,4k\\\",\\n        \\\"supports\\\": \\\"fmp4,m3u8\\\"\\n    }).setStartRequestFunc(post).start(true);\\n}\\n\\n\\nfunction getDownloadUrl(fid) {\\n    return requestHttp(api + \\\"/1/clouddrive/file/download?pr=\\\" + pr + \\\"&fr=pc\\\").body({\\n        \\\"fids\\\": [fid]\\n    }).setStartRequestFunc(post).start(true);\\n}\\n\\n\\nconst DownTool = $.require(\\\"DownTool\\\");\\n\\nfunction getPlayUrl(fid, fid_token, pwd_id, stoken, category, isgetcurl) {\\n    let isShare = pwd_id !== \\\"self\\\";\\n    \\n    try {\\n        if (!cookie) return \\\"toast://请登录账号\\\";\\n        let asfid = \\\"\\\";\\n        if (isShare) {\\n            let taskId = createSaveTask(fid, fid_token, pwd_id, stoken).data.task_id;\\n            asfid = queryTask(taskId);\\n            if (!asfid) {\\n                return \\\"toast://获取失败\\\";\\n            }\\n        } else {\\n            asfid = fid;\\n        }\\n        let playCookie = cookieManage.get();\\n        /*if (pr === \\\"UCBrowser\\\") {\\n            playCookie = cookie;\\n        }*/\\n        let playHeader = {\\n            Referer: homeUrl,\\n            cookie: playCookie,\\n            \\\"User-Agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/100.0.4896.58 UCBrowser/16.5.8.1309 Mobile Safari/537.36\\\"\\n        };\\n        /*let playHeaders = Object.assign({}, playHeader, {\\n            \\\"User-Agent\\\": \\\"LogStatistic\\\"\\n        });*/\\n        let checkShare=()=>(isShare && createDeleteTask(asfid))||(playHeader.cookie=cookieManage.get());\\n        let playMode = getItem(\\\"quark_playMode\\\", \\\"转码\\\");\\n        if (playMode === \\\"RPC\\\") {\\n            let downInfo = getDownloadUrl(asfid).data[0];\\n            let download_url = downInfo.download_url;\\n            let filename = downInfo.file_name;\\n            checkShare();\\n            return DownTool.updateRpc(download_url, playHeader, filename) ? \\\"toast://创建成功\\\" : \\\"toast://创建失败\\\";\\n            //return \\\"toast://已推送\\\";\\n        } else if ([\\\"curl\\\", \\\"aria2\\\"].includes(playMode)) {\\n            let downInfo = getDownloadUrl(asfid).data[0];\\n            let download_url = downInfo.download_url;\\n            let filename = downInfo.file_name;\\n            checkShare()\\n            let cnmd = \\\"\\\";\\n            if (playMode === \\\"curl\\\") {\\n                cnmd = DownTool.getDownCURL(download_url, playHeader, filename);\\n            } else {\\n                cnmd = DownTool.getDownAria2c(download_url, playHeader, filename, Number(getItem(\\\"speedThread\\\", \\\"10\\\")));\\n            }\\n\\n            let path = \\\"hiker://files/_cache/\\\" + filename + \\\"(\\\" + playMode + \\\").txt\\\";\\n            writeFile(path, cnmd);\\n            return \\\"share://\\\" + path;\\n        } else if (category == \\\"video\\\") {\\n\\n            if (playMode === \\\"转码\\\") {\\n                let videoRes = getPreviewVideo(asfid);\\n                checkShare();\\n                let videoList = videoRes.data.video_list;\\n                let playList = {\\n                    names: [],\\n                    urls: [],\\n                    headers: []\\n                };                \\n                videoList.filter(v => v.accessable).forEach(v => {\\n                    playList.names.push(v.resolution);\\n                    playList.urls.push(v.video_info.url + \\\"#isVideo=true#\\\");\\n                    playList.headers.push(playHeader);\\n                });\\n                \\n                return JSON.stringify(playList);\\n            } else {\\n\\n                let playUrl = getDownloadUrl(asfid).data[0].download_url;\\n                checkShare();\\n                let playList = {\\n                    names: [playMode],\\n                    urls: [playUrl + \\\"#isVideo=true#\\\" + (playMode === \\\"原画\\\" ? \\\"#fastPlayMode##threads=\\\" + getItem(\\\"speedThread\\\", \\\"10\\\") + \\\"#\\\" : \\\"\\\")],\\n                    headers: [playHeader]\\n                }\\n                \\n                return JSON.stringify(playList);\\n            }\\n        } else {\\n            let playUrl = getDownloadUrl(asfid).data[0].download_url;\\n\\n            checkShare();\\n            if (category === 'audio') {\\n                let playList = {\\n                    names: [\\\"音频\\\"],\\n                    urls: [playUrl + \\\"#isMusic=true#\\\"],\\n                    headers: [playHeader],\\n                    lyric: \\\"\\\"\\n                }\\n                return JSON.stringify(playList);\\n            } else if (category === 'image') {\\n                return $(playUrl, playHeader).image();\\n            } else {\\n                playHeader = Object.keys(playHeader).map(key => key + \\\"@\\\" + String(playHeader[key]).replace(/;/g, \\\"；；\\\"));\\n                return \\\"download://\\\" + playUrl + \\\";{\\\" + playHeader.join(\\\"&&\\\") + \\\"}\\\";\\n            }\\n        }\\n    } catch (e) {\\n        if (e.message.includes(\\\"require login\\\") || e.message.includes(\\\"token\\\") || e.message.includes(\\\"invalid\\\")) {\\n            toast(\\\"未登录或登录过期，请重新登录\\\");\\n            return \\\"hiker://page/login#noRecordHistory##noHistory#?from=\\\" + fromDrive;\\n        }\\n        return \\\"toast://\\\" + e.toString();\\n    }\\n}\\n\\n$.exports = {\\n    getPlayUrl\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"登录账号\",\"path\":\"login\",\"rule\":\"js:\\nlet d = [];\\nsetPageTitle(\\\"登录账号\\\");\\naddListener(\\\"onClose\\\", () => clearMyVar(\\\"cookie\\\"));\\nlet from=getParam(\\\"from\\\",\\\"\\\");\\n\\nd.push({\\n    title: \\\"““确认登录””\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule((from) => {\\n        //let cm = android.webkit.CookieManager.getInstance();\\n        //let cm = com.tencent.smtt.sdk.CookieManager.getInstance();\\n        //let cookie = String(cm.getCookie(\\\"https://pan.quark.cn\\\") || \\\"\\\");\\n        let cookie = getMyVar(\\\"cookie\\\", \\\"\\\");\\n        if ($.require(\\\"tool\\\").isLoginCookie(cookie)) {\\n            if(from===\\\"uc\\\"){\\n                setItem(\\\"ucCookie\\\", cookie);\\n            }else{\\n                setItem(\\\"quarkCookie\\\", cookie);\\n            }\\n            back();\\n            return \\\"toast://登录成功\\\";\\n        }\\n        return \\\"toast://未登录\\\";\\n    }, from),\\n    desc: \\\"““””<small>点击头像可以退出账号重新登录</small>\\\",\\n    col_type: \\\"text_center_1\\\"\\n});\\nd.push({\\n    col_type: \\\"line_blank\\\"\\n});\\nlet durl=from===\\\"uc\\\"?\\\"https://drive.uc.cn\\\":\\\"https://pan.quark.cn\\\";\\nd.push({\\n    col_type: \\\"x5_webview_single\\\",\\n    url: durl,\\n    desc: \\\"list&&screen-150\\\",\\n    extra: {\\n        ua: PC_UA,\\n        js: $.toString((title, durl) => {\\n            let cookie = \\\"\\\";\\n            setInterval(() => {\\n                cookie = fba.getCookie(durl);\\n                fba.putVar(title + \\\"@cookie\\\", cookie);\\n            }, 200);\\n        }, MY_RULE.title, durl)\\n    }\\n});\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"tool\",\"rule\":\"js:\\n\\n$.exports={\\n    isLoginCookie(cookie){\\n        //return true;\\n        return !!(cookie  && cookie.includes(\\\"__uid=\\\") && cookie.includes(\\\"__pus=\\\"));\\n    }\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"个人账号设置\",\"path\":\"account\",\"rule\":\"$.exports = $([\\\"夸克二维码登录\\\", \\\"Cookie登录\\\", \\\"网页登录\\\", \\\"复制Cookie\\\", \\\"清除Cookie\\\", \\\"获取网络共享KKCookie\\\", \\\"UC二维码登录\\\", \\\"UC网页登录\\\", \\\"UCCookie登录\\\", \\\"复制UCCookie\\\", \\\"清除UCCookie\\\"]).select((isr) => {\\n    function generateRandomUUID() {\\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\\n            var r = Math.random() * 16 | 0,\\n                v = c === 'x' ? r : (r & 0x3 | 0x8);\\n            return v.toString(16);\\n        });\\n    }\\n    if (input === \\\"网页登录\\\") {\\n        return \\\"hiker://page/login#noRecordHistory##noHistory#\\\";\\n    } else if (input === \\\"Cookie登录\\\") {\\n        return $(\\\"\\\", \\\"请输入Cookie\\\").input((isr) => {\\n            if ($.require(\\\"tool\\\").isLoginCookie(input)) {\\n                setItem(\\\"quarkCookie\\\", input.replace(/\\\\s/g, \\\"\\\"));\\n                isr && refreshPage();\\n                return \\\"toast://设置成功\\\";\\n            } else {\\n                return \\\"toast://Cookie格式错误\\\";\\n            }\\n        }, isr);\\n    } else if (input === \\\"从TVBOX获取Cookie\\\") {\\n        let path = \\\"/storage/emulated/0/TV/.quark_user\\\";\\n        if (fileExist(\\\"file://\\\" + path)) {\\n            if (!new java.io.File(path).canRead()) {\\n                return $(\\\"没有权限读取Cookie文件，请打开所有文件权限\\\\n海阔设置->更多功能->内部文件管理->右上角\\\").confirm(() => {});\\n            }\\n            try {\\n                let json = JSON.parse(fetch(\\\"file://\\\" + path));\\n                let cookie = json.cookie;\\n                if ($.require(\\\"tool\\\").isLoginCookie(cookie)) {\\n                    setItem(\\\"quarkCookie\\\", cookie);\\n                    isr && refreshPage();\\n                    return \\\"toast://设置成功\\\";\\n                } else {\\n                    return \\\"toast://Cookie格式错误\\\";\\n                }\\n            } catch (e) {\\n                return \\\"toast://获取失败共享文件损坏\\\";\\n            }\\n        } else {\\n            return $(\\\"未检测到TVBOX的Cookie文件\\\\n请使用过后再尝试\\\").confirm(() => {});\\n        }\\n    } else if (input === \\\"复制Cookie\\\") {\\n        let cookie = getItem(\\\"quarkCookie\\\", \\\"\\\");\\n        if (cookie) {\\n            return \\\"copy://\\\" + cookie;\\n        } else {\\n            return \\\"toast://未登录\\\";\\n        }\\n    } else if (input === \\\"清除Cookie\\\") {\\n        clearItem(\\\"quarkCookie\\\");\\n        isr && refreshPage();\\n        return \\\"toast://退出登录\\\";\\n    } else if (input === \\\"UC网页登录\\\") {\\n        return \\\"hiker://page/login#noRecordHistory##noHistory#?from=uc\\\";\\n    } else if (input === \\\"UCCookie登录\\\") {\\n        return $(\\\"\\\", \\\"请输入Cookie\\\").input((isr) => {\\n            if ($.require(\\\"tool\\\").isLoginCookie(input)) {\\n                setItem(\\\"ucCookie\\\", input.replace(/\\\\s/g, \\\"\\\"));\\n                isr && refreshPage();\\n                return \\\"toast://设置成功\\\";\\n            } else {\\n                return \\\"toast://Cookie格式错误\\\";\\n            }\\n        }, isr);\\n    } else if (input === \\\"复制UCCookie\\\") {\\n        let cookie = getItem(\\\"ucCookie\\\", \\\"\\\");\\n        if (cookie) {\\n            return \\\"copy://\\\" + cookie;\\n        } else {\\n            return \\\"toast://未登录\\\";\\n        }\\n    } else if (input === \\\"清除UCCookie\\\") {\\n        clearItem(\\\"ucCookie\\\");\\n        isr && refreshPage();\\n        return \\\"toast://退出登录\\\";\\n    } else if (input === \\\"获取网络共享KKCookie\\\") {\\n        let hhd = {\\n            'User-Agent': 'Apache-HttpClient/UNAVAILABLE (java 1.4)'\\n        } \\n        let dxcurl = 'http://api.v6x.wht.dgwht.top/text/3de88d10d01929be/'\\n        let xcdata = ['c99d7411ccc29bc1']\\n        let dxc = []\\n        let yscookie = ''\\n        for (let i = 0; i < xcdata.length; i++) {\\n            let data = fetch(dxcurl + xcdata[i], {\\n                headers: hhd\\n            });\\n            if ($.require(\\\"tool\\\").isLoginCookie(data)) {\\n                try {\\n                    yscookie = data.split(\\\"①\\\")[1];\\n                } catch (e) {}\\n                break;\\n            }\\n        }\\n        if (yscookie) {\\n            setItem(\\\"quarkCookie\\\", yscookie);\\n            isr && refreshPage();\\n            return \\\"toast://设置成功\\\";\\n        } else {\\n            return \\\"toast://获取失败\\\";\\n        }\\n    } else if (input === \\\"夸克二维码登录\\\") {\\n        try {\\n            let request_id = generateRandomUUID();\\n            let qcToken = JSON.parse(fetch(buildUrl(\\\"https://uop.quark.cn/cas/ajax/getTokenForQrcodeLogin\\\", {\\n                request_id,\\n                client_id: \\\"532\\\",\\n                v: \\\"1.2\\\"\\n            }))).data.members.token;\\n            createQRCode(`https://su.quark.cn/4_eMHBJ?token=${qcToken}&client_id=532&ssb=weblogin&uc_param_str=&uc_biz_str=S%3Acustom%7COPT%3ASAREA%400%7COPT%3AIMMERSIVE%401%7COPT%3ABACK_BTN_STYLE%400`, false);\\n            let service_ticket = \\\"\\\";\\n            for (let i = 0, ec = 0; i < 30; i++) {\\n                java.lang.Thread.sleep(2000);\\n                try {\\n                    let ticket = JSON.parse(fetch(buildUrl(\\\"https://uop.quark.cn/cas/ajax/getServiceTicketByQrcodeToken\\\", {\\n                        request_id: generateRandomUUID(),\\n                        client_id: \\\"532\\\",\\n                        v: \\\"1.2\\\",\\n                        token: qcToken\\n                    })));\\n                    //log(ticket)\\n                    if (ticket.status == 2000000) {\\n                        service_ticket = ticket.data.members.service_ticket;\\n                        break;\\n                    }\\n                    if (ticket.status == 50004001) continue;\\n                    if (ticket.status == 50004002 || i === 29) {\\n                        return \\\"toast://二维码过期\\\";\\n                    }\\n                } catch (e) {\\n                    ec++;\\n                    if (ec >= 5) {\\n                        return \\\"toast://查询二维码出错\\\";\\n                    }\\n                }\\n\\n            }\\n            if (!service_ticket) return \\\"toast://ticket获取失败\\\";\\n            let res = JSON.parse(fetch(\\\"https://pan.quark.cn/account/info?st=\\\" + service_ticket + \\\"&lw=scan\\\", {\\n                withHeaders: true\\n            }));\\n            //log(res)\\n            if (!JSON.parse(res.body).success) return \\\"toast://ticket验证失败\\\";\\n            let cookie = \\\"\\\";\\n            let headers = res.headers;\\n            for (let c of headers[\\\"set-cookie\\\"]) {\\n                cookie += c.split(\\\";\\\")[0] + \\\";\\\";\\n            }\\n\\n            log(cookie);\\n            setItem(\\\"quarkCookie\\\", cookie);\\n            refreshPage(false);\\n            return \\\"toast://登录成功\\\";\\n        } catch (e) {\\n            return (\\\"toast://登录失败：\\\" + e.toString());\\n        }\\n        //https://su.quark.cn/4_eMHBJ?token=st96a633390ny9yzlk0ivuouc7b9gfmj&client_id=532&ssb=weblogin&uc_param_str=&uc_biz_str=S%3Acustom%7COPT%3ASAREA%400%7COPT%3AIMMERSIVE%401%7COPT%3ABACK_BTN_STYLE%400\\n    } else if (input === \\\"UC二维码登录\\\") {\\n        try {\\n            let request_id = generateRandomUUID();\\n            let qcToken = JSON.parse(post(`https://api.open.uc.cn/cas/ajax/getTokenForQrcodeLogin?__t=${new Date().getTime()}`, {\\n                body: `v=1.2&request_id=${request_id}&client_id=381`\\n            })).data.members.token;\\n            createQRCode(`https://su.uc.cn/1_n0ZCv?token=${qcToken}&client_id=381&uc_param_str=&uc_biz_str=S%3Acustom%7CC%3Atitlebar_fix`, false);\\n            let service_ticket = \\\"\\\";\\n            for (let i = 0, ec = 0; i < 30; i++) {\\n                java.lang.Thread.sleep(2000);\\n                try {\\n                    let ticket = JSON.parse(post(`https://api.open.uc.cn/cas/ajax/getServiceTicketByQrcodeToken?__t=${new Date().getTime()}`, {\\n                        body: `v=1.2&request_id=${request_id}&client_id=381&token=${qcToken}`\\n                    }));\\n                    //log(ticket)\\n                    if (ticket.status == 2000000) {\\n                        service_ticket = ticket.data.members.service_ticket;\\n                        break;\\n                    }\\n                    if (ticket.status == 50004001) continue;\\n                    if (ticket.status == 50004002 || i === 29) {\\n                        return \\\"toast://二维码过期\\\";\\n                    }\\n                } catch (e) {\\n                    ec++;\\n                    if (ec >= 5) {\\n                        return \\\"toast://查询二维码出错\\\";\\n                    }\\n                }\\n\\n            }\\n            if (!service_ticket) return \\\"toast://ticket获取失败\\\";\\n            let res = JSON.parse(fetch(`https://drive.uc.cn/account/info?st=${service_ticket}`, {\\n                withHeaders: true\\n            }));\\n            //log(res)\\n            if (!JSON.parse(res.body).success) return \\\"toast://ticket验证失败\\\";\\n            let cookie = \\\"\\\";\\n            let headers = res.headers;\\n            for (let c of headers[\\\"set-cookie\\\"]) {\\n                cookie += c.split(\\\";\\\")[0] + \\\";\\\";\\n            }\\n            log(cookie);\\n            setItem(\\\"ucCookie\\\", cookie);\\n            refreshPage(false);\\n            return \\\"toast://登录成功\\\";\\n        } catch (e) {\\n            return (\\\"toast://登录失败：\\\" + e.toString());\\n        }\\n    }\\n}, $.importParam);\"},{\"col_type\":\"movie_3\",\"name\":\"CookieManage\",\"path\":\"CookieManage\",\"rule\":\"function CookieManage(cookie) {\\n    this.cookie = {};\\n    this.add(cookie);\\n}\\nObject.assign(CookieManage.prototype, {\\n    add(cookie) {\\n        let cookies = [];\\n        if (typeof cookie === \\\"string\\\") {\\n            cookies = cookie.split(\\\";\\\");\\n        } else if (Array.isArray(cookie)) {\\n            cookies = cookie;\\n        }\\n        cookies.forEach(v => {\\n            v = v.split(\\\"=\\\");\\n            if (v.length < 2) return;\\n            let key = v.shift().trim();\\n            this.cookie[key] = v.join(\\\"=\\\").trim();\\n        });\\n    },\\n    get() {\\n        return Object.entries(this.cookie).map(v => v[0] + \\\"=\\\" + v[1]).join(\\\";\\\");\\n    }\\n});\\n//const cookieManage = new CookieManage(cookie);\\n$.exports=CookieManage;\"},{\"col_type\":\"movie_3\",\"name\":\"天翼API\",\"path\":\"CloudDrive\",\"rule\":\"const CryptoUtil = $.require(\\\"hiker://assets/crypto-java.js\\\");\\n\\nfunction CloudDrive() {\\n    this.regex = /https:\\\\/\\\\/cloud\\\\.189\\\\.cn\\\\/web\\\\/share\\\\?code=([0-9A-Za-z]+)/; //https://cloud.189.cn/web/share?code=qI3aMjqYRrqa\\n    this.config = {\\n        clientId: '538135150693412',\\n        model: 'KB2000',\\n        version: '9.0.6',\\n        pubKey: 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCZLyV4gHNDUGJMZoOcYauxmNEsKrc0TlLeBEVVIIQNzG4WqjimceOj5R9ETwDeeSN3yejAKLGHgx83lyy2wBjvnbfm/nLObyWwQD/09CmpZdxoFYCH6rdDjRpwZOZ2nXSZpgkZXoOBkfNXNxnN74aXtho2dqBynTw3NFTWyQl8BQIDAQAB',\\n    };\\n    this.headers = {\\n        'User-Agent': `Mozilla/5.0 (Linux; U; Android 11; ${this.config.model} Build/RP1A.201005.001) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.136 Mobile Safari/537.36 Ecloud/${this.config.version} Android/30 clientId/${this.config.clientId} clientModel/${this.config.model} clientChannelId/qq proVersion/1.0.6`,\\n        'Referer': 'https://m.cloud.189.cn/zhuanti/2016/sign/index.jsp?albumBackupOpened=1',\\n        'Accept-Encoding': 'gzip, deflate',\\n    };\\n    this.api = 'https://cloud.189.cn/api';\\n    this.shareCode = '';\\n    this.accessCode = '';\\n    this.shareId = '';\\n    this.shareMode = '';\\n    this.isFolder = '';\\n}\\nObject.assign(CloudDrive.prototype, {\\n    checkCookie() {\\n        if (!this.cookie && this.account && this.password) {\\n            setItem('cloudCookie', this.login(this.account, this.password));\\n        } else {\\n            throw new Error(\\\"未登录\\\");\\n        }\\n    },\\n    getCookie() {\\n        return getItem(\\\"cloudCookie\\\", \\\"\\\");\\n    },\\n    login(uname, passwd) {\\n        try {\\n            let resp = JSON.parse(post('https://open.e.189.cn/api/logbox/config/encryptConf.do?appId=cloud'));\\n            let pubKey = resp.data.pubKey;\\n            resp = JSON.parse(request('https://cloud.189.cn/api/portal/loginUrl.action?redirectURL=https://cloud.189.cn/web/redirect.html?returnURL=/main.action', {\\n                headers: {\\n                    cookie: \\\"#noCookie#\\\"\\n                },\\n                withHeaders: true\\n            }));\\n            //log(resp)\\n            // 获取最后请求url中的参数reqId和lt\\n            let Reqid = resp.url.match(/reqId=(\\\\w+)/)[1];\\n            let Lt = resp.url.match(/lt=(\\\\w+)/)[1];\\n            let tHeaders = {\\n                \\\"Content-Type\\\": \\\"application/x-www-form-urlencoded\\\",\\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/76.0',\\n                'Referer': 'https://open.e.189.cn/',\\n                Lt,\\n                Reqid,\\n            };\\n            let data = {\\n                version: '2.0',\\n                appKey: 'cloud'\\n            };\\n            resp = JSON.parse(post('https://open.e.189.cn/api/logbox/oauth2/appConf.do', {\\n                headers: tHeaders,\\n                body: data\\n            }));\\n            let returnUrl = resp.data.returnUrl;\\n            let paramId = resp.data.paramId;\\n            //const keyData = `-----BEGIN PUBLIC KEY-----\\\\n${pubKey}\\\\n-----END PUBLIC KEY-----`;\\n            //const jsencrypt = new JSEncrypt();\\n            //jsencrypt.setPublicKey(keyData);\\n            //const enUname = Buffer.from(jsencrypt.encrypt(uname), 'base64').toString('hex');\\n            //const enPasswd = Buffer.from(jsencrypt.encrypt(passwd), 'base64').toString('hex');\\n            let enUname = CryptoUtil.Data.parseBase64(rsaEncrypt(uname, pubKey), _base64.NO_WRAP).toHex().toUpperCase();\\n            let enPasswd = CryptoUtil.Data.parseBase64(rsaEncrypt(passwd, pubKey), _base64.NO_WRAP).toHex().toUpperCase();\\n            data = {\\n                appKey: 'cloud',\\n                version: '2.0',\\n                accountType: '01',\\n                mailSuffix: '@189.cn',\\n                validateCode: '',\\n                returnUrl,\\n                paramId,\\n                captchaToken: '',\\n                dynamicCheck: 'FALSE',\\n                clientType: '1',\\n                cb_SaveName: '0',\\n                isOauth2: false,\\n                userName: `{NRP}${enUname}`,\\n                password: `{NRP}${enPasswd}`,\\n            };\\n            resp = JSON.parse(post('https://open.e.189.cn/api/logbox/oauth2/loginSubmit.do', {\\n                headers: tHeaders,\\n                withHeaders: true,\\n                body: data\\n            }));\\n            let res = JSON.parse(resp.body);\\n            if (res.toUrl) {\\n\\n                let cookies = resp.headers['set-cookie'].map(it => it.split(';')[0]).join(';');\\n                res = JSON.parse(request(res.toUrl, {\\n                    headers: Object.assign({}, this.headers, {\\n                        cookie: cookies\\n                    }),\\n                    withHeaders: true\\n                }));\\n\\n                cookies += '; ' + (res.headers['set-cookie'] || []).map(it => it.split(';')[0]).join(';');\\n                setItem('cloudCookie', cookies);\\n                log(cookies);\\n            } else {\\n                console.error('Error during login:' + JSON.stringify(resp));\\n            }\\n        } catch (error) {\\n            console.error('Error during login:' + error.toString());\\n        }\\n    },\\n    getShareUrlData(url) {\\n        let matches = this.regex.exec(url);\\n        let shareData0 = {};\\n        if (matches && matches[1]) {\\n            shareData0.shareCode = matches[1];\\n            let accessCodeMatch = url.match(/访问码：([a-zA-Z0-9]+)/);\\n            shareData0.accessCode = accessCodeMatch ? accessCodeMatch[1] : '';\\n        } else {\\n            let matches_ = url.match(/https:\\\\/\\\\/cloud\\\\.189\\\\.cn\\\\/t\\\\/([0-9A-Za-z]+)/);\\n            shareData0.shareCode = matches_ ? matches_[1] : null;\\n            let accessCodeMatch = url.match(/访问码：([a-zA-Z0-9]+)/);\\n            shareData0.accessCode = accessCodeMatch ? accessCodeMatch[1] : '';\\n        }\\n        return shareData0;\\n    },\\n    getShareInfoData(shareUrl, code) {\\n        let shareData = this.getShareUrlData(shareUrl);\\n        code && (shareData.accessCode = code);\\n        try {\\n            let resp = JSON.parse(request(`${this.api}/open/share/getShareInfoByCodeV2.action?key=noCache&shareCode=${shareData.shareCode}`, {\\n                headers: {\\n                    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',\\n                    'accept': 'application/json;charset=UTF-8',\\n                    //'accept-encoding': 'gzip, deflate, br, zstd',\\n                    'accept-language': 'zh-CN,zh;q=0.9',\\n                }\\n            }));\\n            shareData.rootFileId = resp.fileId;\\n            shareData.shareId = resp.shareId;\\n            shareData.shareMode = resp.shareMode;\\n            shareData.isFolder = resp.isFolder;\\n            return shareData;\\n        } catch (error) {\\n            console.error('Error during getShareInfo:' + error.toString());\\n        }\\n        return {};\\n    },\\n    getShareFiles(fileId, shareData, page, orderBy) {\\n        let resp = JSON.parse(request(`${this.api}/open/share/listShareDir.action?key=noCache&pageNum=${page||1}&pageSize=60&fileId=${fileId}&shareDirFileId=${fileId}&isFolder=${shareData.isFolder}&shareId=${shareData.shareId||\\\"\\\"}&shareMode=${shareData.shareMode}&iconOption=5&orderBy=${orderBy||\\\"lastOpTime\\\"}&descending=true&accessCode=${shareData.accessCode}`, {\\n            headers: {\\n                'accept': 'application/json;charset=UTF-8',\\n                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',\\n            }\\n        }));\\n        log(resp)\\n        let files = [];\\n        for (let item of resp.fileListAO.fileList) {\\n            files.push({\\n                fileId: item.id,\\n                name: item.name,\\n                lastOpTime: item.lastOpTime,\\n                dir: false,\\n                mediaType: item.mediaType\\n            });\\n\\n        }\\n        for (let item of resp.fileListAO.folderList) {\\n            files.push({\\n                id: item.id.toString(),\\n                name: item.name.toString(),\\n                lastOpTime: item.lastOpTime.toString(),\\n                dir: true\\n            });\\n\\n        }\\n        return files;\\n    }\\n});\\n$.exports = new CloudDrive();\\n//new CloudDrive().login(\\\"18181125538\\\", \\\"^A1B2C3@loydgik\\\");\"},{\"col_type\":\"movie_3\",\"name\":\"天翼列表\",\"path\":\"cloudShareList\",\"rule\":\"js:\\nlet titleHead = {\\n    video: \\\"🎬\\\",\\n    audio: \\\"🎵\\\",\\n    doc: \\\"📑\\\",\\n    image: \\\"🖼\\\",\\n    archive: \\\"📦\\\",\\n    \\\"default\\\": \\\"❓\\\"\\n};\\n\\nfunction getHead(type, ext) {\\n    let head = titleHead[type];\\n\\n    return head || \\\"❓\\\";\\n}\\n\\nfunction formatSize(size) {\\n    if (!size) {\\n        return '';\\n    }\\n    const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\\n    let i = 0;\\n    while (size >= 1024) {\\n        size /= 1024;\\n        i++;\\n    }\\n    size = i ? Number(size.toFixed(2)) : size;\\n    return `${size} ${units[i]}`;\\n}\\n\\n\\nlet realurl = decodeURIComponent(getParam(\\\"realurl\\\", \\\"\\\"));\\n\\n\\nlet cloudDrive = $.require(\\\"CloudDrive\\\");\\n\\n\\nlet shareData = cloudDrive.getShareInfoData(realurl);\\nlet list = cloudDrive.getShareFiles(MY_PARAMS.fileId || shareData.rootFileId, shareData, MY_PAGE);\\n\\nlet d = [];\\nlist.forEach(item => {\\n    //判断是否文件夹\\n    if (item.dir) {\\n        d.push({\\n            title: \\\"📂\\\" + item.file_name,\\n            desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + item.include_items + '项  ',\\n            pic_url: \\\"http://123.56.105.145/tubiao/messy/27.svg\\\",\\n            url: \\\"hiker://page/quarkList?page=fypage\\\",\\n            col_type: style,\\n            extra: {\\n                shareId,\\n                sharePwd,\\n                shareToken: quarkShareApi.getToken(),\\n                fileId: item.fid,\\n                inheritTitle: false,\\n                fromDrive\\n            }\\n        });\\n    } else {\\n        d.push({\\n            title: getHead(item.obj_category) + item.file_name,\\n            desc: $.dateFormat(item.updated_at, 'yyyy-MM-dd') + '  ' + formatSize(item.size),\\n            pic_url: $(item.thumbnail, {\\n                cookie: ncookie\\n            }).image(),\\n            url: $().lazyRule((fid, fid_token, pwd_id, stoken, category, fromDrive) => {\\n                let playUrlCache = storage0.getMyVar(\\\"playUrlCache\\\", {});\\n                if (playUrlCache[fid]) {\\n                    return playUrlCache[fid];\\n                } else {\\n                    let url = $.require(\\\"play\\\", fromDrive).getPlayUrl(fid, fid_token, pwd_id, stoken, category);\\n                    playUrlCache[fid] = url;\\n                    storage0.putMyVar(\\\"playUrlCache\\\", playUrlCache);\\n                    return url;\\n                }\\n            }, item.fid, item.share_fid_token, shareId, quarkShareApi.getToken(), item.obj_category, fromDrive),\\n            col_type: style,\\n            extra: {\\n                id: item.fid,\\n                //inheritTitle: false,\\n                cls: 'playlist ' + item.obj_category\\n            }\\n        })\\n    }\\n\\n});\"},{\"col_type\":\"movie_3\",\"name\":\"DownTool\",\"path\":\"DownTool\",\"rule\":\"js:\\n\\nfunction getDownCURL(url, headers, filename) {\\n    // Start building the curl command with the URL\\n    let curlCommand = `curl -o \\\"${filename}\\\" \\\"${url}\\\"`;\\n\\n    // Add headers to the curl command if any are provided\\n    if (headers && typeof headers === 'object') {\\n        curlCommand += Object.entries(headers).reduce((command, [key, value]) => {\\n            return `${command} -H \\\"${key}: ${value}\\\"`;\\n        }, ' ');\\n    }\\n\\n    return curlCommand;\\n}\\n\\nfunction getDownAria2c(url, headers, filename, cut) {\\n    // Start building the aria2c command with the URL and number of connections/segments\\n    cut = cut || 1;\\n    cut = cut > 16 ? 16 : cut;\\n\\n    let aria2Command = `aria2c -x ${cut} -s ${cut} -o \\\"${filename}\\\" \\\"${url}\\\"`;\\n\\n    // Add headers to the aria2c command if any are provided\\n    if (headers && typeof headers === 'object') {\\n        aria2Command += Object.entries(headers).reduce((command, [key, value]) => {\\n            return `${command} --header=\\\"${key}: ${value}\\\"`;\\n        }, ' ');\\n    }\\n\\n    return aria2Command;\\n}\\nfunction getDefRpcUrl(){\\n    let defip = getIP().split(\\\".\\\");\\n    defip.push(Number(defip.pop()) + 2);\\n    return \\\"http://\\\" + defip.join(\\\".\\\") + \\\":16800/jsonrpc\\\";\\n}\\nfunction updateRpc(url, headers, filename) {\\n    //log(headers)\\n    let header = [];\\n    let rpcData = {\\n        id: Date.now(),\\n        jsonrpc: \\\"2.0\\\",\\n        method: \\\"aria2.addUri\\\",\\n        params: [\\\"token:\\\" + getItem(\\\"rpcAriaToken\\\", \\\"\\\"), [url], {\\n            dir: getItem(\\\"rpcDownDir\\\",\\\"\\\")||void 0,\\n            out: filename,\\n            header\\n        }]\\n    };\\n\\n    if (headers && typeof headers === 'object') {\\n        Object.entries(headers).forEach([key, value] => {\\n            header.push(`${key}: ${value}`);\\n        });\\n    }\\n    \\n    let res = post(getItem(\\\"rpcUrl\\\", getDefRpcUrl()), {\\n        body: JSON.stringify(rpcData)\\n    });\\n    return res.includes('\\\"result\\\":');\\n}\\n\\n$.exports={\\n    getDownCURL,\\n    getDownAria2c,\\n    updateRpc,\\n    getDefRpcUrl\\n};\\n\"}]","proxy":"","icon":"https://android-artworks.25pp.com/fs08/2022/07/26/7/110_19d9823817a833704d6e9b40c71da042_con_130x130.png"}