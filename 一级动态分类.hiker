{"firstHeader":"class","last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"自动下一页","path":"autoPage","rule":"js:\nvar 状态 =\r\ntypeof 状态标记 != \"undefined\" && 状态标记 != \"\" ? 状态标记: MY_RULE.url;\n\nfunction getTruelink(mark, url, page) {\r\n  var p = getMyVar(mark, url).replace(\"fypage\", page);\r\n  if (page == 1) {\r\n    return getMyVar(\"yi_firstpage\", p);\r\n  } else if (p != \"\") {\r\n    return p;\r\n  } else {\r\n    return url;\r\n  }\r\n}\n\nfunction autoPage() {\r\n  if (page == 1) {\r\n    putMyVar(\"yi_firstpage\", true_url);\r\n  }\r\n  try {\r\n    var next = eval(下一页);\r\n    //log(\"next\");\r\n    //log('next:'+next);\r\n  } catch {\r\n    log(\"可能不存在下一页或者下一页定位有问题\");\r\n    next = \"\";\r\n  }\r\n  if (next != \"\") {\r\n    putMyVar(状态, next);\r\n  }\r\n}"},{"col_type":"movie_3","name":"动态分类改","path":"dtfl","rule":"js:\n/*\nVer 2023-10-28 1.0\n备注：不要用海阔代码格式化 内容会出错\n必须参数：\n分类颜色 大类定位 \n小类定位 分类标题 分类链接\nhtml =>源码 page =>页码\n可选参数：\n拼接分类 折叠标记 展开标记 排除\n大类链接 大类标题 清除键 开启折叠\n附加定位\n说明：\n外面用getMyVar(MY_RULE.url) 或者 状态 取链接\n魔改:α\n*/\n\nlet empty = \"hiker://empty\";\nlet categories = [];\nif (typeof (拼接分类) != 'undefined' && 拼接分类 != '') {\n    categories = [pdfa(html, 大类定位).join('\\n')];\n    if (拼接分类.includes(';')) {\n        拼接分类 = 拼接分类.split(';');\n    }\n    if (拼接分类.constructor == Array) {\n        拼接分类.forEach(item => {\n            categories = categories.concat(pdfa(html, item));\n        })\n    } else {\n        categories = [pdfa(html, 大类定位).join('\\n')].concat(pdfa(html, 拼接分类));\n    }\n    if (typeof (附加定位) != 'undefined' && 附加定位.length > 0) {\n        附加定位.forEach(x => {\n            var 一级 = pdfa(html, x.一级定位).map(s => {\n                var 定位 = pdfa(s, x.小类).map(q => {\n                    var title = pdfh(q, x.标题);\n                    var url = 'a'\n                    if (x.链接.includes('@@')) {\n                        state = x.链接.split('@@')[0]\n                        value = pdfh(q, x.链接.split('@@')[1]);\n                        if (x.转换 == true) {\n                            return `<li data-type=\"${state}\" data-val=\"${value}\"><a href=\"\">${title}</a></li>`\n                        } else {\n                            return `<a type=\"@extra\" state=\"${state}\" value=\"${value}\">${title}</a>`;\n                        }\n                    } else {\n                        href = pd(q, x.链接);\n                        return `<a href=\"${href}\">${title}</a>`;\n                    }\n                });\n                return 定位;\n            });\n            categories.push(一级.join('\\n'));\n        });\n    }\n} else {\n    categories = [pdfa(html, 大类定位).join('\\n')];\n}\n\nlet items = [];\nlet cates = [];\nlet init_cate = new Array(20).fill(\"0\");\nconst fold = getMyVar(MY_RULE.group, \"0\");\nconst cate_temp = JSON.parse(getMyVar(\"head.cate\", JSON.stringify(init_cate)));\nvar 折叠状态 = (typeof (开启折叠) != 'undefined') ? 开启折叠 : true;\nvar 折叠 = (typeof (折叠标记) != 'undefined' && 折叠标记 != '') ? 折叠标记 : '““””' + '∨'.fontcolor(\"#FF0000\");\nvar 展开 = (typeof (展开标记) != 'undefined' && 展开标记 != '') ? 展开标记 : '““””' + '∧'.fontcolor(\"#1aad19\");\nvar 清除 = (typeof (清除键) != 'undefined' && 清除键 != '') ? 清除键 : [];\nvar 状态 = (typeof (状态标记) != 'undefined' && 状态标记 != '') ? 状态标记 : MY_RULE.url;\nvar 大类处理 = typeof (一级分类处理) != 'undefined' ? true : false;\n\nvar _动态返回=true;\nif(typeof 动态返回!='undefined'&&typeof 动态返回 === \"boolean\"){\n    _动态返回=动态返回;\n}\n\nvar 搜索 = typeof (开启搜索) != 'undefined' ? 开启搜索 : false;\nvar 全清 = (typeof (全清键) != 'undefined' && 全清键 != '') ? 全清键 : [];\n全清.unshift('yi_firstpage');\n\n\nif (parseInt(page) === 1) {\n    if (搜索) {\n        d.push({\n            title: \"\",\n            url: \"'hiker://search?rule=\" + MY_RULE.title + \"&s='+input\",\n            desc: \"搜索关键词\",\n            col_type: \"input\",\n            extra: {\n                defaultValue: getMyVar('keyword', ''),\n                onChange: $.toString(() => {\n                    putMyVar('keyword', input);\n                })\n            }\n        })\n    }\n    if (page == 1 ) {\n    if (折叠状态) {\n          items.push({\n                title: fold === '1' ? 折叠 : 展开,\n                url: $(\"#noLoading#\").lazyRule((title, fold, u, all, exps) => {\n                    var fold = getMyVar(MY_RULE.group, fold);\n                    if(getMyVar('cate_empty','empty')=='empty'){\n                      return 'toast://拼接部分为空';\n                    }\n                    \n                    var [展开, 折叠] = exps;\n                    if (fold == 1) {\n                        var cx = findItemsByCls(title + 'cate_button');\n                        storage0.putMyVar('cate_button', cx);\n                        deleteItemByCls(title + 'cate_button');\n                    } else {\n                        var cx = storage0.getMyVar('cate_button', []).map(x => {\n                            x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\n                            return x;\n                        });\n                        addItemAfter(title + 'cate_line', cx)\n                    }\n                    /*all.forEach((item) => {\n                      clearMyVar(item);\n                    });*/\n                    updateItem(title + 'cate_exp', {\n                        title: fold == 1 ? 展开 : 折叠,\n                    })\n                    putMyVar(MY_RULE.group, fold === \"1\" ? \"0\" : \"1\");\n                    return \"hiker://empty\";\n                }, MY_RULE.title, fold, 状态, 全清, [展开, 折叠]),\n                col_type: 'scroll_button',\n                extra: {\n                    id: MY_RULE.title + 'cate_exp',\n                    longClick: [{\n                        title: '清除状态',\n                        js: $.toString((x, all, cl) => {\n                            clearMyVar(x);\n                            clearMyVar('head.cate');\n                            all.forEach((item) => {\n                                clearMyVar(item)\n                            })\n                            cl.forEach((item) => {\n                                clearMyVar(item)\n                            })\n                            refreshPage();\n                        }, 状态, 全清, 清除)\n                    }]\n                }\n            })\n    }else{\n       var bo=JSON.parse(getMyVar('head.cate','[]')).every(x=>x===\"0\");\n       if(!bo){\n       items.push({\n         title:'““””'+'♻'.fontcolor('#3CB371'),\n         col_type:'scroll_button',\n         url:$('#noLoading#').lazyRule((x, all, cl)=>{\n           clearMyVar(x);\n           clearMyVar('head.cate');\n           all.forEach((item) => {\n             clearMyVar(item)\n          })\n            cl.forEach((item) => {\n             clearMyVar(item)\n           })\n           refreshPage(false);\n           return 'hiker://empty';\n         }, 状态, 全清, 清除),\n       })\n      }}\n    }\n    let setTitle = (k, i, t) => {\n        return k == i ? \"““””\" + t.fontcolor(分类颜色) : t\n    }\n    categories.forEach((category, index) => {\n        let sub_categories = [];\n        if (小类定位.includes(';')) {\n            sub_categories = pdfa(category, 小类定位.split(';')[0]);\n            if (sub_categories.length == 0) {\n                sub_categories = pdfa(category, 小类定位.split(';')[1]);\n            }\n        } else {\n            sub_categories = pdfa(category, 小类定位);\n        }\n        if (index === 0) {\n            sub_categories.forEach((item, key) => {\n                let _大类链接 = (typeof (大类链接) != 'undefined' && 大类链接 != '') ? 大类链接 : 分类链接;\n\n                let _大类标题 = (typeof (大类标题) != 'undefined' && 大类标题 != '') ? 大类标题 : 分类标题;\n\n                let title = pdfh(item, _大类标题);\n                if (typeof (排除) != 'undefined' && 排除 != '') {\n                    title = title.replace(new RegExp(排除, \"g\"), \"\");\n                }\n                let params = {\n                    cate_temp: cate_temp, key: key, page: page, clears: 清除, state: 状态, allclears: 全清\n                }\n\n                let url = pd(item, _大类链接);\n                if (大类处理) {\n                    //log(一级分类处理)\n                    //log($.stringify(一级分类处理))\n                    let input = url;\n                    eval(\"result = \" + 一级分类处理);\n                    //log(result)\n                    url = result;\n                }\n                items.push({\n                    title: setTitle(key.toString(), cate_temp[index], title),\n                    col_type: 'scroll_button',\n                    url: $(url + '#noLoading#').lazyRule((params) => {\n                        let new_cate = [];\n                        params.clears.forEach((item) => {\n                            clearMyVar(item)\n                        })\n                        params.allclears.forEach((item) => {\n                            clearMyVar(item)\n                        })\n\n                        params.cate_temp.forEach((cate, index) => {\n                            new_cate.push(index === 0 ? params.key.toString() : \"0\")\n                        })\n                        putMyVar(\"head.cate\", JSON.stringify(new_cate));\n                        putMyVar(params.state, input);\n                        refreshPage(true);\n                        return \"hiker://empty\";\n                    }, params)\n                });\n            });\n            items.push({\n                col_type: \"blank_block\",\n                extra: {\n                    id: MY_RULE.title + 'cate_line',\n                }\n            })\n        } else {\n            sub_categories.forEach((item, key) => {\n                var extrapos = false;\n                if (item.includes('type=\"@extra\"')) {\n                    extrapos = true;\n                    //log('附加定位')\n                }\n\n                if (extrapos) {\n                    var title = pdfh(item, 'a&&Text');\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\n                        title = title.replace(new RegExp(排除, \"g\"), \"\");\n                    }\n                    var json = {\n                        type: pdfh(item, 'a&&state'),\n                        value: pdfh(item, 'a&&value'),\n                    }\n                } else {\n\n                    var title = pdfh(item, 分类标题);\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\n                        title = title.replace(new RegExp(排除, \"g\"), \"\");\n                    }\n\n                    var json = '';\n                    switch (true) {\n                        case 分类链接.includes('@@@'):\n                            json = {\n                                type: pdfh(item, 分类链接.split('@@@')[0]),\n                                value: pdfh(item, 分类链接.split('@@@')[1]),\n                            }\n                            break;\n                        case 分类链接.includes('@@'):\n                            json = {\n                                type: 分类链接.split('@@')[0],\n                                value: pdfh(item, 分类链接.split('@@')[1]),\n                            }\n                            break;\n                        default:\n                            json = pd(item, 分类链接);\n                            break;\n                    }\n                    /*var json=分类链接.includes('@@@')?{\n                         type:pdfh(item,分类链接.split('@@@')[0]),\n                         value:pdfh(item,分类链接.split('@@@')[1]),\n                     }:pd(item,分类链接);\n                     \n                     json=分类链接.includes('@@')?{\n                         type:分类链接.split('@@')[0],\n                         value:pdfh(item,分类链接.split('@@')[1]),\n                     }:pd(item,分类链接);*/\n\n                }\n\n                let params = {\n                    cate_temp: cate_temp, index: index, key: key, page: page, json: json, state: 状态, allclears: 全清\n                }\n                cates.push({\n                    title: setTitle(key.toString(), cate_temp[index], title),\n                    url: $('hiker://empty' + '#noLoading#').lazyRule((params) => {\n                        params.allclears.forEach((item) => {\n                            clearMyVar(item)\n                        })\n                        params.cate_temp[params.index] = params.key.toString();\n                        putMyVar(\"head.cate\", JSON.stringify(params.cate_temp));\n                        if (params.json.constructor === Object) {\n                            putMyVar('dt_' + params.json.type, params.json.value);\n                        } else {\n                            putMyVar(params.state, params.json);\n                        }\n                        refreshPage(true);\n                        return \"hiker://empty\";\n                    }, params),\n                    col_type: 'scroll_button',\n                    extra: {\n                        cls: MY_RULE.title + 'cate_button',\n                    }\n                });\n            });\n            cates.push({\n                col_type: \"blank_block\",\n                extra: {\n                    cls: MY_RULE.title + 'cate_button',\n                }\n            });\n        }\n    })\n}\n\n\nif (fold === \"1\" || 折叠状态 == false) {\n    items = items.concat(cates);\n}\nif (fold === \"0\") {\n    storage0.putMyVar('cate_button', cates)\n}\nif(cates.length==0){\n     putMyVar('cate_empty','empty');\n}else{\n     putMyVar('cate_empty','noempty');\n}\n\nif (typeof setPreResult != 'undefined'&&_动态返回) {\n    items = d.concat(items);\n    //清空继承数组\n    d.length = 0;\n    setPreResult(items);\n} else {\n    items.forEach(item => {\n        d.push(item);\n    })\n}\n"}],"title":"一级动态分类","author":"zetalpha","version":3,"type":"video","url":"hiker://empty##fypage","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d=[];\r\nconst page = MY_PAGE;\r\naddListener(\"onClose\",\r\n  $.toString(() => {\r\n    clearMyVar('mode');\r\n  })\r\n);\r\n\r\nif (page == 1) {\r\n  d.push({\r\n    title: '\\t' + getMyVar('折叠状态', '展开'),\r\n    img: getMyVar('折叠状态', '展开') == '展开' ? 'https://hikerfans.com/tubiao/messy/60.svg' : 'https://hikerfans.com/tubiao/messy/59.svg',\r\n    col_type: 'text_icon',\r\n    url: $('#noLoading#').lazyRule((t) => {\r\n      var st = getMyVar('折叠状态', '展开');\r\n      if (st == \"展开\") {\r\n        putMyVar('折叠状态', '折叠');\r\n        var clsx = findItemsByCls(t+'Options');\r\n        storage0.putMyVar('clsx', clsx);\r\n        deleteItemByCls(t+'Options');\r\n      } else {\r\n        putMyVar('折叠状态', '展开');\r\n        var clsx = storage0.getMyVar('clsx', []).map(x => {\r\n          x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\r\n          return x;\r\n        });\r\n        addItemAfter(t+'addres', clsx);\r\n      }\r\n      updateItem(t+'exp', {\r\n        title: '\\t' + getMyVar('折叠状态', '展开'),\r\n        img: getMyVar('折叠状态', '展开') == '展开' ? 'https://hikerfans.com/tubiao/messy/60.svg' : 'https://hikerfans.com/tubiao/messy/59.svg',\r\n      })\r\n\r\n      //refreshPage();\r\n      return 'hiker://empty';\r\n    },MY_RULE.title),\r\n    extra: {\r\n      id:MY_RULE.title+'exp',\r\n    }\r\n  })\r\n\r\n  var st = getMyVar('折叠状态', '展开');\r\n\r\n  d.push({\r\n    title: '网址',\r\n    col_type: 'input',\r\n    url: $.toString((page) => {\r\n      toast('加载网页中...');\r\n      var url = input.replace('fypage', page)\r\n      var html = fetch(url);\r\n      putMyVar('html', html);\r\n      setItem('url', url);\r\n      putMyVar('url', url);\r\n      clearMyVar(\"head.cate\")\r\n      toast(url);\r\n      refreshPage();\r\n    }, page),\r\n    extra: {\r\n      id: MY_RULE.title+'addres',\r\n      defaultValue: getItem('url', \"\"),\r\n      onChange: $.toString(() => {\r\n        putMyVar('url', input)\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n\r\nlet html = getMyVar(\"html\", \"\");\r\nlet url = getItem('url', \"\");\r\n\r\n\r\nvar 定义 = {\r\n  分类颜色: { value: getMyVar('分类颜色', 'red') },\r\n  大类定位: { value: getMyVar('大类定位', '') },\r\n  拼接分类: { value: getMyVar('拼接分类', ''),desc:'多个按按;隔开' },\r\n  小类定位: { value: getMyVar('小类定位', 'body&&a:not(:matches(首页))') },\r\n  分类标题: { value: getMyVar('分类标题', 'a&&Text') },\r\n  分类链接: { value: getMyVar('分类链接', 'a&&href') },\r\n  一级分类处理: {\r\n    value: getMyVar(\"一级分类处理\", $.toString(() => {\r\n      let u = input;\r\n      //log(u);\r\n      return u;\r\n    }))\r\n  }\r\n}\r\n\r\nvar opts = [];\r\nif (page == 1) {\r\n  Object.entries(定义).forEach(function ([key, obj]) {\r\n    if (key == \"一级分类处理\") {\r\n      key = \"一级处理\";\r\n    }\r\n\r\n    opts.push({\r\n      title: key,\r\n      col_type: 'input',\r\n      desc: obj.desc,\r\n      url: $.toString((key) => {\r\n        if (!input && key != '拼接分类') return 'toast://输入为空';\r\n        if (key == \"一级处理\") {\r\n          \r\n        }\r\n        if (key == \"分类颜色\") {\r\n          let all_cols = [':随机颜色']\r\n          all_cols.unshift('当前' + ':' + input)\r\n          return $(all_cols, 1, '分类颜色').select(() => {\r\n            var r = input.split(':')[1];\r\n            putMyVar('分类颜色', r);\r\n            refreshPage(false);\r\n            return 'hiker://empty'\r\n          })\r\n        }\r\n\r\n        putMyVar(key, input);\r\n        refreshPage()\r\n        return 'toast://' + key + \":\" + input;\r\n      }, key),\r\n      extra: {\r\n        onChange:$.toString((k)=>{\r\n          if(k=='一级处理'){\r\n            putMyVar('一级分类处理',input)\r\n          }\r\n        },key),\r\n        cls: MY_RULE.title+'Options',\r\n        defaultValue: obj.value,\r\n        highlight: key=='一级处理'?true:false,\r\n        type: 'textarea',\r\n        height: -1,\r\n      }\r\n    })\r\n  });\r\n}\r\n\r\nif (st == \"展开\") {\r\n  d = d.concat(opts);\r\n} else {\r\n  storage0.putMyVar('clsx', opts);\r\n}\r\n\r\nif (page == 1) {\r\n  d.push({\r\n    title: '列表规则',\r\n    desc: '列表 标题 图片 描述 链接 ;号隔开',\r\n    col_type: 'input',\r\n    url: $.toString(() => {\r\n      if (!input) return 'toast://输入为空';\r\n      storage0.putMyVar(\"lists\", input)\r\n      refreshPage(false);\r\n      return 'toast://' + input;\r\n    }),\r\n    extra: {\r\n      defaultValue: storage0.getMyVar(\"lists\", \"\"),\r\n      type: 'textarea',\r\n      height: -1,\r\n    }\r\n  }, {\r\n    title: '下一页',\r\n    desc: '下一页pd或者pdfh',\r\n    col_type: 'input',\r\n    url: $.toString(() => {\r\n      let all_cols = ['空::', '例1::pd(html,\"a:matches(下[一]?页)&&href\")', '例2::pd(html,\"a:matches(>)&&href\")','例3::pd(html,\"a[title=下一页]&&href\")'];\r\n      all_cols.unshift('当前' + '::' + input)\r\n      return $(all_cols, 1, '下一页规则').select(() => {\r\n        var r = input.split('::')[1];\r\n        log(r)\r\n        storage0.putMyVar('下一页', r);\r\n        refreshPage(false);\r\n        return 'hiker://empty'\r\n      })\r\n    }),\r\n    extra: {\r\n      defaultValue: storage0.getMyVar(\"下一页\", \"\"),\r\n      type: 'textarea',\r\n      height: -1,\r\n    }\r\n  })\r\n}\r\n\r\n\r\nfor (var propName in 定义) {\r\n  eval('var ' + propName + ' = 定义[propName][\"value\"];');\r\n}\r\n\r\nvar getRangeColors = function () {\r\n  return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);\r\n}\r\n\r\nif (分类颜色 == \"随机颜色\") {\r\n  分类颜色 = getRangeColors();\r\n}\r\n\r\nif (page == 1) {\r\n  d.push({\r\n    title: '预览',\r\n    col_type: 'flex_button',\r\n    url: $('#noLoading#').lazyRule(() => {\r\n      putMyVar('折叠状态', '折叠');\r\n      putMyVar('mode', 'Pre');\r\n      clearMyVar('yi_firstpage');\r\n      clearMyVar(MY_RULE.url);\r\n      clearMyVar(\"head.cate\");\r\n      refreshPage()\r\n      return 'toast://预览'\r\n    })\r\n  }, {\r\n    title: '取消',\r\n    col_type: 'flex_button',\r\n    url: $('#noLoading#').lazyRule(() => {\r\n      clearMyVar('mode')\r\n      refreshPage()\r\n      return 'toast://取消预览'\r\n    })\r\n  },{\r\n    title:'列表',\r\n    col_type:'flex_button',\r\n    url:$('hiker://empty##').rule(()=>{\r\n      addListener(\"onClose\",\r\n       $.toString(() => {\r\n         clearMyVar('listi');\r\n         //refreshPage();\r\n        })\r\n      );\r\n      \r\n      var d=[];\r\n      var rlist=[];\r\n      d.push({\r\n        title:'确认修改并返回',\r\n        img:'https://hikerfans.com/tubiao/messy/179.svg',\r\n        url:$('#noLoading#').lazyRule(()=>{\r\n          back(true);\r\n          return 'hiker://empty';\r\n        }),\r\n        col_type:'avatar',\r\n      })\r\n      var listrule = storage0.getMyVar(\"lists\", \"\");\r\n      if (listrule != \"\" && listrule.includes(\";\")){\r\n        rlist = listrule.split(';');\r\n      }\r\n      var listurl=getMyVar('listurl','');\r\n      var url=getMyVar('url', '');\r\n      if(listurl!=''){\r\n        url=listurl;\r\n      }\r\n      MY_URL=url;\r\n      d.push({\r\n        title:'网址',\r\n        col_type:'input',\r\n        url:$.toString(()=>{\r\n          toast('获取网页中...');\r\n          var html=fetch(input);\r\n          putMyVar('listurl',input);\r\n          putMyVar('listhtml',html);\r\n          refreshPage();\r\n          return \"hiker://empty\";\r\n        }),\r\n        extra:{\r\n          defaultValue:url,\r\n        }\r\n      })\r\n      var html=getMyVar('html','');\r\n      var listhtml=getMyVar('listhtml','');\r\n      if(html==''&&listhtml==''){\r\n        html=fetch(url);\r\n        toast('获取网页中...');\r\n        putMyVar('listhtml',html);\r\n      }else if(listhtml!=''){\r\n        html=listhtml;\r\n      }\r\n      \r\n      var ts=['列表','标题','图片','描述','链接'];\r\n      ts.forEach((item,i)=>{\r\n        d.push({\r\n          title:item,\r\n          col_type:'input',\r\n          url:$.toString((ts,rl,i)=>{\r\n            rl[i]=input;\r\n            storage0.putMyVar(\"lists\", rl.join(';'));\r\n            refreshPage(false);\r\n            return 'toast://'+ts[i]+':'+input;\r\n          },ts,rlist,i),\r\n          extra:{\r\n            defaultValue:rlist[i]\r\n          }\r\n        })\r\n      })\r\n      \r\n      var list = pdfa(html, rlist[0]);\r\n      var index=getMyVar('listi','');\r\n      \r\n      if(index!=''){\r\n        var tsobj={\r\n         title:pdfh(list[index],rlist[1]),\r\n         desc:pdfh(list[index],rlist[3]),\r\n         img:pd(list[index],rlist[2])+'@Referer=',\r\n         url:pd(list[index],rlist[4]),\r\n        }\r\n        \r\n        d.push({\r\n          title:tsobj.title,\r\n          desc:tsobj.desc,\r\n          img:tsobj.img,\r\n          url:tsobj.url,\r\n          col_type:'movie_1_vertical_pic',\r\n        })\r\n        \r\n        d.push({\r\n          desc:'调试窗口',\r\n          col_type:'input',\r\n          extra:{\r\n            defaultValue:list[index],\r\n            titleVisible: false,\r\n            type:'textarea',\r\n            highlight: true,\r\n            height:-1,\r\n          }\r\n        })\r\n      }\r\n      \r\n      d.push({\r\n          title:'““””'+(index==''?'All'.fontcolor('#3CB371'):'All'),\r\n          col_type:'flex_button',\r\n          url:$('#noLoading#').lazyRule(()=>{\r\n            clearMyVar('listi');\r\n            refreshPage(false);\r\n            setPageTitle('全部');\r\n            return 'toast://全部';\r\n          })\r\n      })\r\n      \r\n      list.forEach((item,i)=>{\r\n        d.push({\r\n          title:'““””'+(index!=''&&parseInt(index)==i?(i+'').fontcolor('#3CB371'):i),\r\n          col_type:'flex_button',\r\n          url:$('#noLoading#').lazyRule((i)=>{\r\n            putMyVar('listi',i+'');\r\n            refreshPage(false);\r\n            setPageTitle('第'+i+'个');\r\n            return 'toast://当前调试第'+i+'个';\r\n          },i)\r\n        })\r\n      })\r\n      \r\n      if(index==''){\r\n      for (var i in list) {\r\n      var img = pd(list[i], rlist[2]) + \"@Referer=\";\r\n        d.push({\r\n         title: pdfh(list[i], rlist[1]),\r\n         img: img,\r\n         desc: pdfh(list[i], rlist[3]),\r\n         url: pd(list[i], rlist[4]),\r\n         extra: {\r\n           img: img\r\n          }\r\n         })\r\n        }\r\n       } \r\n      \r\n      setResult(d);\r\n    }),\r\n  }, {\r\n    title: '生成',\r\n    col_type: 'flex_button',\r\n    url: $('#noLoading#').lazyRule(() => {\r\n      var 处理 = getMyVar('一级分类处理', '');\r\n      处理 = 处理.replace(/[\\r\\n](\\(\\))/, '$1').replace(/[\\r\\n]\\)\\(\\)$/m, \")\");\r\n      var list = \"\";\r\n      var listrule = storage0.getMyVar(\"lists\", \"\");\r\n      if (listrule != \"\" && listrule.includes(\";\")) {\r\n        var rlist = listrule.split(';');\r\n        var list = `\r\nvar list = pdfa(html,\"${rlist[0]}\");\r\nfor (var i in list) {\r\n  var img = pd(list[i], \"${rlist[2]}\") + \"@Referer=\";\r\n  d.push({\r\n      title: pdfh(list[i], \"${rlist[1]}\"),\r\n      img: img,\r\n      desc: pdfh(list[i], \"${rlist[3]}\"),\r\n      url: pd(list[i], \"${rlist[4]}\"),\r\n      extra: {\r\n        img: img\r\n      }\r\n    })\r\n  }`\r\n      }\r\n      var trueurl = \"\";\r\n      var auto = \"\";\r\n      var next = \"\";\r\n      if (getMyVar(\"下一页\", \"\") != \"\") {\r\n        trueurl = `eval(JSON.parse(request('hiker://page/autoPage')).rule); \r\nlet true_url = getTruelink(MY_RULE.url, MY_URL,page);`\r\n        auto = \"autoPage();\"\r\n        next = `const 下一页='${getMyVar(\"下一页\", \"\")}';`\r\n      } else {\r\n        trueurl = \"let true_url = getMyVar(MY_RULE.url, MY_URL);\"\r\n      }\r\n      var color = `${getMyVar('分类颜色', 'red')}`\r\n      if (color == \"随机颜色\") {\r\n        color = `getRangeColors()`;\r\n      } else {\r\n        color = `\"${getMyVar('分类颜色', 'red')}\"`\r\n      }\r\n\r\n      var str = `js:\r\nvar d = [];\r\nvar getRangeColors = function() {\r\n  return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);\r\n}\r\nconst page = MY_PAGE;\r\nconst 分类颜色 = ${color};\r\nconst 大类定位 = \"${getMyVar('大类定位', '')}\";\r\nconst 拼接分类 = \"${getMyVar('拼接分类', '')}\";\r\nconst 小类定位 = \"${getMyVar('小类定位', 'body&&a:not(:matches(首页))')}\";\r\nconst 分类标题 = \"${getMyVar('分类标题', 'a&&Text')}\";\r\nconst 分类链接 = \"${getMyVar('分类链接', 'a&&href')}\";\r\nconst 一级分类处理 = $.toString${处理};\r\n${next}\r\nMY_URL = MY_URL.replace('hiker://empty##', '');\r\n${trueurl}\r\nlog(true_url);\r\nvar html=fetch(true_url);\r\nMY_URL=true_url;\r\neval(JSON.parse(request('hiker://page/dtfl')).rule);\r\n${list}\r\n${auto}\r\nsetResult(d);`\r\n      var rule = MY_RULE;\r\n      const now = new Date();\r\n      var time = `${now.getMonth() + 1}-${now.getDate()}`;\r\n      rule.title = '测试' + time;\r\n      rule.url = 'hiker://empty##' + getMyVar('url', '');\r\n      log(rule.url)\r\n      rule.find_rule = str;\r\n      return \"rule://\" + base64Encode(\"海阔视界￥home_rule￥\" + JSON.stringify(rule));\r\n    }),\r\n  }, {\r\n    title: '删除',\r\n    col_type: 'flex_button',\r\n    url: $('#noLoading#').lazyRule(() => {\r\n      let all_cols = listMyVarKeys();\r\n      let tips = '请选择删除临时变量 ';\r\n      return $(all_cols, 2, tips).select(() => {\r\n        clearMyVar(input);\r\n        refreshPage(true);\r\n        return 'toast://已删除临时变量:' + input;\r\n      });\r\n    }),\r\n  })\r\n}\r\n\r\nvar mode = getMyVar(\"mode\", \"\");\r\neval(JSON.parse(request('hiker://page/autoPage')).rule);\r\n\r\nlet 下一页 = \"\";\r\nif (getMyVar(\"下一页\", \"\") != \"\") {\r\n  下一页 = getMyVar(\"下一页\", \"\")\r\n}\r\nvar 动态返回=false;\r\n//var 开启折叠=false;\r\n\r\nlet true_url = '';\r\nif (mode == 'Pre') {\r\n  if (下一页 != \"\") {\r\n    true_url = getTruelink(MY_RULE.url, url, page);\r\n  } else {\r\n    true_url = getMyVar(MY_RULE.url, url);\r\n  }\r\n  log('true_url:'+true_url);\r\n  MY_URL = true_url;\r\n  html = fetch(true_url);\r\n} else {\r\n  MY_URL = url;\r\n}\r\nlog('MY_URL: ' + MY_URL);\r\ntry {\r\n  if (大类定位 == '') {\r\n    toast('当前大类定位为空将不会执行')\r\n  } else {\r\n    eval(fetch('file:///storage/emulated/0/Download/web/dt.js'))\r\n  }\r\n} catch (e) {\r\n  toast(e.message)\r\n}\r\n\r\nvar listrule = storage0.getMyVar(\"lists\", \"\");\r\n\r\nif (listrule != \"\" && listrule.includes(\";\")) {\r\n  var rlist = listrule.split(';');\r\n  var list = pdfa(html, rlist[0]);\r\n  for (var i in list) {\r\n    var img = pd(list[i], rlist[2]) + \"@Referer=\";\r\n    d.push({\r\n      title: pdfh(list[i], rlist[1]),\r\n      img: img,\r\n      desc: pdfh(list[i], rlist[3]),\r\n      url: pd(list[i], rlist[4]),\r\n      extra: {\r\n        img: img\r\n      }\r\n    })\r\n  }\r\n}\r\nif (下一页 != \"undefined\"&&下一页!='') {\r\n  autoPage();\r\n}\r\n\r\nsetResult(d);","searchFind":"","search_url":"","group":"⑧工具","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"自动下一页\",\"path\":\"autoPage\",\"rule\":\"js:\\nvar 状态 =\\r\\ntypeof 状态标记 != \\\"undefined\\\" && 状态标记 != \\\"\\\" ? 状态标记: MY_RULE.url;\\n\\nfunction getTruelink(mark, url, page) {\\r\\n  var p = getMyVar(mark, url).replace(\\\"fypage\\\", page);\\r\\n  if (page == 1) {\\r\\n    return getMyVar(\\\"yi_firstpage\\\", p);\\r\\n  } else if (p != \\\"\\\") {\\r\\n    return p;\\r\\n  } else {\\r\\n    return url;\\r\\n  }\\r\\n}\\n\\nfunction autoPage() {\\r\\n  if (page == 1) {\\r\\n    putMyVar(\\\"yi_firstpage\\\", true_url);\\r\\n  }\\r\\n  try {\\r\\n    var next = eval(下一页);\\r\\n    //log(\\\"next\\\");\\r\\n    //log('next:'+next);\\r\\n  } catch {\\r\\n    log(\\\"可能不存在下一页或者下一页定位有问题\\\");\\r\\n    next = \\\"\\\";\\r\\n  }\\r\\n  if (next != \\\"\\\") {\\r\\n    putMyVar(状态, next);\\r\\n  }\\r\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"动态分类改\",\"path\":\"dtfl\",\"rule\":\"js:\\n/*\\nVer 2023-10-28 1.0\\n备注：不要用海阔代码格式化 内容会出错\\n必须参数：\\n分类颜色 大类定位 \\n小类定位 分类标题 分类链接\\nhtml =>源码 page =>页码\\n可选参数：\\n拼接分类 折叠标记 展开标记 排除\\n大类链接 大类标题 清除键 开启折叠\\n附加定位\\n说明：\\n外面用getMyVar(MY_RULE.url) 或者 状态 取链接\\n魔改:α\\n*/\\n\\nlet empty = \\\"hiker://empty\\\";\\nlet categories = [];\\nif (typeof (拼接分类) != 'undefined' && 拼接分类 != '') {\\n    categories = [pdfa(html, 大类定位).join('\\\\n')];\\n    if (拼接分类.includes(';')) {\\n        拼接分类 = 拼接分类.split(';');\\n    }\\n    if (拼接分类.constructor == Array) {\\n        拼接分类.forEach(item => {\\n            categories = categories.concat(pdfa(html, item));\\n        })\\n    } else {\\n        categories = [pdfa(html, 大类定位).join('\\\\n')].concat(pdfa(html, 拼接分类));\\n    }\\n    if (typeof (附加定位) != 'undefined' && 附加定位.length > 0) {\\n        附加定位.forEach(x => {\\n            var 一级 = pdfa(html, x.一级定位).map(s => {\\n                var 定位 = pdfa(s, x.小类).map(q => {\\n                    var title = pdfh(q, x.标题);\\n                    var url = 'a'\\n                    if (x.链接.includes('@@')) {\\n                        state = x.链接.split('@@')[0]\\n                        value = pdfh(q, x.链接.split('@@')[1]);\\n                        if (x.转换 == true) {\\n                            return `<li data-type=\\\"${state}\\\" data-val=\\\"${value}\\\"><a href=\\\"\\\">${title}</a></li>`\\n                        } else {\\n                            return `<a type=\\\"@extra\\\" state=\\\"${state}\\\" value=\\\"${value}\\\">${title}</a>`;\\n                        }\\n                    } else {\\n                        href = pd(q, x.链接);\\n                        return `<a href=\\\"${href}\\\">${title}</a>`;\\n                    }\\n                });\\n                return 定位;\\n            });\\n            categories.push(一级.join('\\\\n'));\\n        });\\n    }\\n} else {\\n    categories = [pdfa(html, 大类定位).join('\\\\n')];\\n}\\n\\nlet items = [];\\nlet cates = [];\\nlet init_cate = new Array(20).fill(\\\"0\\\");\\nconst fold = getMyVar(MY_RULE.group, \\\"0\\\");\\nconst cate_temp = JSON.parse(getMyVar(\\\"head.cate\\\", JSON.stringify(init_cate)));\\nvar 折叠状态 = (typeof (开启折叠) != 'undefined') ? 开启折叠 : true;\\nvar 折叠 = (typeof (折叠标记) != 'undefined' && 折叠标记 != '') ? 折叠标记 : '““””' + '∨'.fontcolor(\\\"#FF0000\\\");\\nvar 展开 = (typeof (展开标记) != 'undefined' && 展开标记 != '') ? 展开标记 : '““””' + '∧'.fontcolor(\\\"#1aad19\\\");\\nvar 清除 = (typeof (清除键) != 'undefined' && 清除键 != '') ? 清除键 : [];\\nvar 状态 = (typeof (状态标记) != 'undefined' && 状态标记 != '') ? 状态标记 : MY_RULE.url;\\nvar 大类处理 = typeof (一级分类处理) != 'undefined' ? true : false;\\n\\nvar _动态返回=true;\\nif(typeof 动态返回!='undefined'&&typeof 动态返回 === \\\"boolean\\\"){\\n    _动态返回=动态返回;\\n}\\n\\nvar 搜索 = typeof (开启搜索) != 'undefined' ? 开启搜索 : false;\\nvar 全清 = (typeof (全清键) != 'undefined' && 全清键 != '') ? 全清键 : [];\\n全清.unshift('yi_firstpage');\\n\\n\\nif (parseInt(page) === 1) {\\n    if (搜索) {\\n        d.push({\\n            title: \\\"\\\",\\n            url: \\\"'hiker://search?rule=\\\" + MY_RULE.title + \\\"&s='+input\\\",\\n            desc: \\\"搜索关键词\\\",\\n            col_type: \\\"input\\\",\\n            extra: {\\n                defaultValue: getMyVar('keyword', ''),\\n                onChange: $.toString(() => {\\n                    putMyVar('keyword', input);\\n                })\\n            }\\n        })\\n    }\\n    if (page == 1 ) {\\n    if (折叠状态) {\\n          items.push({\\n                title: fold === '1' ? 折叠 : 展开,\\n                url: $(\\\"#noLoading#\\\").lazyRule((title, fold, u, all, exps) => {\\n                    var fold = getMyVar(MY_RULE.group, fold);\\n                    if(getMyVar('cate_empty','empty')=='empty'){\\n                      return 'toast://拼接部分为空';\\n                    }\\n                    \\n                    var [展开, 折叠] = exps;\\n                    if (fold == 1) {\\n                        var cx = findItemsByCls(title + 'cate_button');\\n                        storage0.putMyVar('cate_button', cx);\\n                        deleteItemByCls(title + 'cate_button');\\n                    } else {\\n                        var cx = storage0.getMyVar('cate_button', []).map(x => {\\n                            x['col_type'] = x['col_type'] ? x['col_type'] : x['type'];\\n                            return x;\\n                        });\\n                        addItemAfter(title + 'cate_line', cx)\\n                    }\\n                    /*all.forEach((item) => {\\n                      clearMyVar(item);\\n                    });*/\\n                    updateItem(title + 'cate_exp', {\\n                        title: fold == 1 ? 展开 : 折叠,\\n                    })\\n                    putMyVar(MY_RULE.group, fold === \\\"1\\\" ? \\\"0\\\" : \\\"1\\\");\\n                    return \\\"hiker://empty\\\";\\n                }, MY_RULE.title, fold, 状态, 全清, [展开, 折叠]),\\n                col_type: 'scroll_button',\\n                extra: {\\n                    id: MY_RULE.title + 'cate_exp',\\n                    longClick: [{\\n                        title: '清除状态',\\n                        js: $.toString((x, all, cl) => {\\n                            clearMyVar(x);\\n                            clearMyVar('head.cate');\\n                            all.forEach((item) => {\\n                                clearMyVar(item)\\n                            })\\n                            cl.forEach((item) => {\\n                                clearMyVar(item)\\n                            })\\n                            refreshPage();\\n                        }, 状态, 全清, 清除)\\n                    }]\\n                }\\n            })\\n    }else{\\n       var bo=JSON.parse(getMyVar('head.cate','[]')).every(x=>x===\\\"0\\\");\\n       if(!bo){\\n       items.push({\\n         title:'““””'+'♻'.fontcolor('#3CB371'),\\n         col_type:'scroll_button',\\n         url:$('#noLoading#').lazyRule((x, all, cl)=>{\\n           clearMyVar(x);\\n           clearMyVar('head.cate');\\n           all.forEach((item) => {\\n             clearMyVar(item)\\n          })\\n            cl.forEach((item) => {\\n             clearMyVar(item)\\n           })\\n           refreshPage(false);\\n           return 'hiker://empty';\\n         }, 状态, 全清, 清除),\\n       })\\n      }}\\n    }\\n    let setTitle = (k, i, t) => {\\n        return k == i ? \\\"““””\\\" + t.fontcolor(分类颜色) : t\\n    }\\n    categories.forEach((category, index) => {\\n        let sub_categories = [];\\n        if (小类定位.includes(';')) {\\n            sub_categories = pdfa(category, 小类定位.split(';')[0]);\\n            if (sub_categories.length == 0) {\\n                sub_categories = pdfa(category, 小类定位.split(';')[1]);\\n            }\\n        } else {\\n            sub_categories = pdfa(category, 小类定位);\\n        }\\n        if (index === 0) {\\n            sub_categories.forEach((item, key) => {\\n                let _大类链接 = (typeof (大类链接) != 'undefined' && 大类链接 != '') ? 大类链接 : 分类链接;\\n\\n                let _大类标题 = (typeof (大类标题) != 'undefined' && 大类标题 != '') ? 大类标题 : 分类标题;\\n\\n                let title = pdfh(item, _大类标题);\\n                if (typeof (排除) != 'undefined' && 排除 != '') {\\n                    title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                }\\n                let params = {\\n                    cate_temp: cate_temp, key: key, page: page, clears: 清除, state: 状态, allclears: 全清\\n                }\\n\\n                let url = pd(item, _大类链接);\\n                if (大类处理) {\\n                    //log(一级分类处理)\\n                    //log($.stringify(一级分类处理))\\n                    let input = url;\\n                    eval(\\\"result = \\\" + 一级分类处理);\\n                    //log(result)\\n                    url = result;\\n                }\\n                items.push({\\n                    title: setTitle(key.toString(), cate_temp[index], title),\\n                    col_type: 'scroll_button',\\n                    url: $(url + '#noLoading#').lazyRule((params) => {\\n                        let new_cate = [];\\n                        params.clears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n                        params.allclears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n\\n                        params.cate_temp.forEach((cate, index) => {\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\")\\n                        })\\n                        putMyVar(\\\"head.cate\\\", JSON.stringify(new_cate));\\n                        putMyVar(params.state, input);\\n                        refreshPage(true);\\n                        return \\\"hiker://empty\\\";\\n                    }, params)\\n                });\\n            });\\n            items.push({\\n                col_type: \\\"blank_block\\\",\\n                extra: {\\n                    id: MY_RULE.title + 'cate_line',\\n                }\\n            })\\n        } else {\\n            sub_categories.forEach((item, key) => {\\n                var extrapos = false;\\n                if (item.includes('type=\\\"@extra\\\"')) {\\n                    extrapos = true;\\n                    //log('附加定位')\\n                }\\n\\n                if (extrapos) {\\n                    var title = pdfh(item, 'a&&Text');\\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\\n                        title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                    }\\n                    var json = {\\n                        type: pdfh(item, 'a&&state'),\\n                        value: pdfh(item, 'a&&value'),\\n                    }\\n                } else {\\n\\n                    var title = pdfh(item, 分类标题);\\n                    if (typeof (排除) != 'undefined' && 排除 != '') {\\n                        title = title.replace(new RegExp(排除, \\\"g\\\"), \\\"\\\");\\n                    }\\n\\n                    var json = '';\\n                    switch (true) {\\n                        case 分类链接.includes('@@@'):\\n                            json = {\\n                                type: pdfh(item, 分类链接.split('@@@')[0]),\\n                                value: pdfh(item, 分类链接.split('@@@')[1]),\\n                            }\\n                            break;\\n                        case 分类链接.includes('@@'):\\n                            json = {\\n                                type: 分类链接.split('@@')[0],\\n                                value: pdfh(item, 分类链接.split('@@')[1]),\\n                            }\\n                            break;\\n                        default:\\n                            json = pd(item, 分类链接);\\n                            break;\\n                    }\\n                    /*var json=分类链接.includes('@@@')?{\\n                         type:pdfh(item,分类链接.split('@@@')[0]),\\n                         value:pdfh(item,分类链接.split('@@@')[1]),\\n                     }:pd(item,分类链接);\\n                     \\n                     json=分类链接.includes('@@')?{\\n                         type:分类链接.split('@@')[0],\\n                         value:pdfh(item,分类链接.split('@@')[1]),\\n                     }:pd(item,分类链接);*/\\n\\n                }\\n\\n                let params = {\\n                    cate_temp: cate_temp, index: index, key: key, page: page, json: json, state: 状态, allclears: 全清\\n                }\\n                cates.push({\\n                    title: setTitle(key.toString(), cate_temp[index], title),\\n                    url: $('hiker://empty' + '#noLoading#').lazyRule((params) => {\\n                        params.allclears.forEach((item) => {\\n                            clearMyVar(item)\\n                        })\\n                        params.cate_temp[params.index] = params.key.toString();\\n                        putMyVar(\\\"head.cate\\\", JSON.stringify(params.cate_temp));\\n                        if (params.json.constructor === Object) {\\n                            putMyVar('dt_' + params.json.type, params.json.value);\\n                        } else {\\n                            putMyVar(params.state, params.json);\\n                        }\\n                        refreshPage(true);\\n                        return \\\"hiker://empty\\\";\\n                    }, params),\\n                    col_type: 'scroll_button',\\n                    extra: {\\n                        cls: MY_RULE.title + 'cate_button',\\n                    }\\n                });\\n            });\\n            cates.push({\\n                col_type: \\\"blank_block\\\",\\n                extra: {\\n                    cls: MY_RULE.title + 'cate_button',\\n                }\\n            });\\n        }\\n    })\\n}\\n\\n\\nif (fold === \\\"1\\\" || 折叠状态 == false) {\\n    items = items.concat(cates);\\n}\\nif (fold === \\\"0\\\") {\\n    storage0.putMyVar('cate_button', cates)\\n}\\nif(cates.length==0){\\n     putMyVar('cate_empty','empty');\\n}else{\\n     putMyVar('cate_empty','noempty');\\n}\\n\\nif (typeof setPreResult != 'undefined'&&_动态返回) {\\n    items = d.concat(items);\\n    //清空继承数组\\n    d.length = 0;\\n    setPreResult(items);\\n} else {\\n    items.forEach(item => {\\n        d.push(item);\\n    })\\n}\\n\"}]","proxy":"","icon":""}