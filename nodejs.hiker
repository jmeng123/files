{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"runtimeManager","path":"runtimeManager","rule":"js:\n// author:@LoyDgIk\n// 借鉴请注明出处\n\nfunction importClass(clsname) {\n    return new org.mozilla.javascript.NativeJavaClass(this, findJavaClass(clsname));\n}\nconst AtomicBoolean = java.util.concurrent.atomic.AtomicBoolean;\nconst V8ValueString = loadJavaClass('hiker://files/data2/nodejs/libs/classes.dex', 'com.caoccao.javet.values.primitive.V8ValueString', 'hiker://files/data2/nodejs/libs/arm64-v8a');\nconst JavetEnginePool = importClass(\"com.caoccao.javet.interop.engine.JavetEnginePool\");\nconst JSRuntimeType = importClass(\"com.caoccao.javet.enums.JSRuntimeType\");\nconst JavetProxyConverter = importClass(\"com.caoccao.javet.interop.converters.JavetProxyConverter\");\nconst NodeModuleModule = findJavaClass(\"com.caoccao.javet.node.modules.NodeModuleModule\");\nconst V8AwaitMode = importClass(\"com.caoccao.javet.enums.V8AwaitMode\");\nconst JavetBuiltInModuleResolver = importClass(\"com.caoccao.javet.interop.callback.JavetBuiltInModuleResolver\");\n\nconst NodeRuntimeOptions = importClass(\"com.caoccao.javet.interop.options.NodeRuntimeOptions\");\nconst V8Host = importClass(\"com.caoccao.javet.interop.V8Host\");\n\nconst Paths = java.nio.file.Paths;\nconst Files = java.nio.file.Files;\nconst File = java.io.File;\nconst JavetEntityError = importClass(\"com.caoccao.javet.entities.JavetEntityError\");\nconst JavetEntitySymbol = importClass(\"com.caoccao.javet.entities.JavetEntitySymbol\");\nconst JavetTerminatedException = importClass(\"com.caoccao.javet.exceptions.JavetTerminatedException\")\nconst IV8ModuleResolver = importClass(\"com.caoccao.javet.interop.callback.IV8ModuleResolver\");\nconst NodeModuleAny = findJavaClass(\"com.caoccao.javet.node.modules.NodeModuleAny\");\n\n\nlet javetEnginePool = null;\nlet nodeRuntime = null;\nlet daemonThread = null;\nlet continueAwait = new AtomicBoolean(false);\nlet running = new AtomicBoolean(false);\nlet localRelativePath = null;\n\nlet useESM = true;\nlet useStrict = false;\nlet runtimePromiseError = null;\nlet moduleCacheMap=new Map();\n\n//let icuDir=getPath(\"hiker://files/data2/nodejs/libs/icu\").slice(7);\nNodeRuntimeOptions.V8_FLAGS.setUseStrict(useStrict);\n//NodeRuntimeOptions.NODE_FLAGS.setIcuDataDir(icuDir);\nfunction WrapperFunction(obj, noUnsteady) {\n    this.javaObject = new JavaAdapter(java.lang.Object, obj);\n    this.noUnsteady = !!noUnsteady;\n}\n\nObject.assign(WrapperFunction.prototype, {\n    bind(nodeRuntime, name) {\n        nodeRuntime.getGlobalObject().set(name, this.javaObject);\n        nodeRuntime.getExecutor($.toString((name, unsteady) => {\n            let nJava = globalThis[name];\n            globalThis[name] = {};\n            let methods = nJava.getClass().getDeclaredMethods();\n            for (let m of methods) {\n                let mName = String(m.getName());\n                if (unsteady && mName.startsWith(\"_\")) {\n                    mName = mName.replace(\"_\", \"\");\n                    globalThis[name][mName] = function(...arg) {\n                        arg=arg.map(v=>{\n                            if(Object.prototype.toString.call(v)===\"[object Object]\"){\n                                return JSON.parse(JSON.stringify(v));\n                            }\n                            return v;\n                        });\n                        return m.invoke.apply(nJava, [nJava, arg])\n                    }\n                } else {\n                    globalThis[name][mName] = function(...arg) {\n                        arg=arg.map(v=>{\n                            if(Object.prototype.toString.call(v)===\"[object Object]\"){\n                                return JSON.parse(JSON.stringify(v));\n                            }\n                            return v;\n                        });\n                        return m.invoke.apply(nJava, [nJava].concat(arg))\n                    }\n                }\n\n            }\n\n        }, name, !this.noUnsteady)).executeVoid();\n    },\n    bindAndUnstructure(nodeRuntime) {\n        let tName = \"$\" + String(Date.now()).slice(-7, -1);\n        nodeRuntime.getGlobalObject().set(tName, this.javaObject);\n        nodeRuntime.getExecutor($.toString((name, unsteady) => {\n            let nJava = globalThis[name];\n            delete globalThis[name];\n            let methods = nJava.getClass().getDeclaredMethods();\n            for (let m of methods) {\n                let mName = String(m.getName());\n                if (unsteady && mName.startsWith(\"_\")) {\n                    mName = mName.replace(\"_\", \"\");\n                    globalThis[mName] = function(...arg) {\n                        arg=arg.map(v=>{\n                            if(Object.prototype.toString.call(v)===\"[object Object]\"){\n                                return JSON.parse(JSON.stringify(v));\n                            }\n                            return v;\n                        });\n                        return m.invoke.apply(nJava, [nJava, arg])\n                    }\n                } else {\n                    globalThis[mName] = function(...arg) {\n                        arg=arg.map(v=>{\n                            if(Object.prototype.toString.call(v)===\"[object Object]\"){\n                                return JSON.parse(JSON.stringify(v));\n                            }\n                            return v;\n                        });\n                        return m.invoke.apply(nJava, [nJava].concat(arg))\n                    }\n                }\n            }\n\n        }, tName, !this.noUnsteady)).executeVoid();\n    }\n})\n\nfunction _log(arg) {\n    arg = Array.from(arg, v => {\n        if (v instanceof JavetEntityError) {\n            return v.getStack();\n        } else if (v instanceof JavetEntitySymbol) {\n            return \"Symbol(\" + v.getDescription() + \")\";\n        }\n        return v;\n    });\n    log(arg.join(\" \"));\n}\n\nfunction initJavetEngine() {\n    //javetEnginePool = new JavetEnginePool();\n    try {\n        //javetEnginePool.getConfig().setJSRuntimeType(JSRuntimeType.Node).setAllowEval(true).setGlobalName('globalThis');\n        \n        //nodeRuntime = javetEnginePool.getEngine().getV8Runtime();\n        nodeRuntime= V8Host.getNodeI18nInstance().createV8Runtime();\n        nodeRuntime.allowEval(true);\n        nodeRuntime.setConverter(new JavetProxyConverter());\n        //nodeRuntime.getGlobalObject().set(\"HikerJSEngine\", com.example.hikerview.service.parser.JSEngine.getInstance());\n\n        nodeRuntime.setStopping(true);\n        let wf = new WrapperFunction({\n            _log: _log,\n            _warn: _log,\n            _trace: _log,\n            _info: _log,\n            _error: _log,\n            _debug: _log,\n            _assert: (a) => {\n                if (a) _log(a);\n            }\n        });\n        wf.bind(nodeRuntime, \"console\");\n        let wfexit = new WrapperFunction({\n            __exitNative__() {\n                continueAwait.set(false);\n            },\n            __catchErrorNative__(error) {\n                runtimePromiseError = error;\n            },\n            fetchByHiker(url, options) {\n                return fetch(url, options);\n            }\n        }, true);\n        wfexit.bindAndUnstructure(nodeRuntime);\n        new WrapperFunction(HikerUtils).bind(nodeRuntime,\"HikerUtils\");\n        let envAppName = typeof MY_NAME===\"undefined\"?\"海阔视界\":MY_NAME;\n        nodeRuntime.getExecutor($.toString((envAppName) => {\n            process.reallyExit = function(code) {\n                __exitNative__();\n            }\n            process.on('unhandledRejection', (reason, promise) => {\n                //console.error('未捕获的 Promise 拒绝：'+reason);\n                __catchErrorNative__(reason);\n            });\n            const vm = require('node:vm');\n            const path = require('node:path');\n            const url = require('node:url');\n            const globalImport = function(modulePath, metaUrl) {\n                if(metaUrl){\n                    modulePath = path.join(metaUrl, modulePath);\n                }\n                const script = new vm.Script(\"import(\" + JSON.stringify(modulePath) + \")\", {\n                    importModuleDynamically: vm.constants.USE_MAIN_CONTEXT_DEFAULT_LOADER\n                });\n                \n                return script.runInNewContext();\n            };\n            globalThis.import = globalImport;\n            globalThis.__createGlobalImport__ = function(metaUrl){\n                metaUrl = path.dirname(url.fileURLToPath(metaUrl));\n                let GlobalImport=function(modulePath){\n                    return globalImport(modulePath, metaUrl);\n                };\n                return new Proxy(globalThis,{\n                    get(target, key, receiver){\n                        if(key===\"import\"&&target[key]===globalImport){\n                            return GlobalImport;\n                        }\n                        return target[key];\n                    },\n                    set(target, key,value, receiver){\n                        target[key] = value;\n                        //receiver[key] = value;\n                        return true;\n                    }\n                });\n            };\n            process.env[\"ANDROID_APP_NAME\"]=envAppName;\n            process.env[\"IS_HIKER\"]=\"1\";\n        }, envAppName)).executeVoid();\n\n        if (localRelativePath) {\n            nodeRuntime.getGlobalObject().setProperty(\"__dirname\", localRelativePath);\n            nodeRuntime.getNodeModule(NodeModuleModule).setRequireRootDirectory(localRelativePath + \"/\");\n            if (useESM) {\n                let nodeResolve = new JavetBuiltInModuleResolver();\n                nodeRuntime.setV8ModuleResolver(new IV8ModuleResolver({\n                    resolve(runtime, resourceName, v8ModuleReferrer) {\n                        if (resourceName.startsWith(\"/\") || resourceName.startsWith(\"./\") || resourceName.startsWith(\"../\")) {\n                            let parentModuleName = v8ModuleReferrer.getResourceName();\n\n                            let moduleRelativePath = Paths.get(parentModuleName).getParent().resolve(resourceName);\n                            //log(\"模块相对路径\" + moduleRelativePath.normalize());\n                            let modulefile = Paths.get(localRelativePath).resolve(moduleRelativePath).toFile();\n\n                            //log(\"子模块：\" + modulefile.getCanonicalPath())\n                            if (modulefile.exists() && modulefile.isFile()) {\n                                let url = \"file://\" + modulefile.getCanonicalPath();\n                                let code = readFile(url);\n                                \n                                if(moduleCacheMap.has(url)){\n                            return moduleCacheMap.get(url);\n                        }else{\n                            let code = readFile(url);\n                            let module = runtime.getExecutor(\"import.meta.url = \" + JSON.stringify(url) + \";var globalThis=__createGlobalImport__(import.meta.url);\" + code);\n                            module.getV8ScriptOrigin().setResourceName(moduleRelativePath.normalize());\n                            let compiled = module.setModule(true).compileV8Module();\n                            moduleCacheMap.set(url, compiled);\n                            return compiled;\n                        }\n                            } else {\n                                return null;\n                            }\n                        } else if (resourceName.startsWith(\"node:\")) {\n                            return nodeResolve.resolve(runtime, resourceName, v8ModuleReferrer);\n                        } else {\n                            let moduleObject = runtime.getNodeModule(resourceName, NodeModuleAny).getModuleObject();\n                            moduleObject.set(\"default\", moduleObject);\n                            return runtime.createV8Module(resourceName, moduleObject);\n                        }\n                    },\n                    getAbsoluteResourceName(runtime, resourceName, v8ModuleReferrer) {\n                        return resourceName;\n                    }\n                }));\n\n            }\n        }\n\n    } catch (e) {\n        log(e.toString());\n        close();\n    }\n}\n\nfunction runScript(code, runOnce, resourceName) {\n    if (running.get()) return false;\n    daemonThread = new java.lang.Thread(new java.lang.Runnable(() => {\n        try {\n            running.set(true);\n            if (!nodeRuntime) {\n                initJavetEngine();\n            }\n            if (useESM) {\n                let IV8Executor = nodeRuntime.getExecutor(\"import.meta.url = \" + JSON.stringify(\"file://\" + resourceName) + \";\" + code).setModule(true);\n                if (resourceName && typeof resourceName === \"string\") {\n                    IV8Executor.setResourceName(resourceName);\n                } else {\n                    IV8Executor.setResourceName(\"\");\n                }\n                IV8Executor.executeVoid();\n               \n            } else {\n                nodeRuntime.getExecutor(code).executeVoid();\n            }\n            continueAwait.set(true);\n            let mode = V8AwaitMode.RunOnce;\n\n            while (continueAwait.get()) {\n                if (nodeRuntime.await(mode) == false) {\n                    continueAwait.set(false);\n                    callOn(onFinishedfunc);\n                }\n            }\n            if (runtimePromiseError !== null) {\n                let error = runtimePromiseError;\n                runtimePromiseError = null;\n                throw error;\n            }\n        } catch (e) {\n            let es = \"\";\n            if (e instanceof JavetEntityError) {\n                es += \"JavetExecutionException:\" + e.getStack();\n            } else {\n                es = String(e.toString());\n            }\n            \n            if (!es.startsWith(\"JavaException: com.caoccao.javet.exceptions.JavetExecutionException: Error: Wrapped com.caoccao.javet.exceptions.JavetTerminatedException:\")) {\n                log(es);\n                setError(String(e.toString()));\n            }\n        } finally {\n            nodeRuntime.lowMemoryNotification();\n            \n            nodeRuntime.close();\n            moduleCacheMap.clear();\n            nodeRuntime = null;\n            running.set(false);\n            \n            callOn(onClosefunc);\n            \n        }\n    }));\n    daemonThread.start();\n    return true;\n}\n\nfunction close(nocall) {\n    continueAwait.set(false);\n    if (nodeRuntime&&nodeRuntime.isInUse()) {\n            nodeRuntime.terminateExecution();\n    }\n    if(daemonThread){\n        daemonThread.join();\n        daemonThread=null;\n    }\n}\n\nfunction isActive() {\n    return !!nodeRuntime\n}\n\nfunction isRunning() {\n    return isActive() && !!running.get();\n}\n\nfunction setRequireRootDirectory(path) {\n    if (typeof path === \"string\") {\n        localRelativePath = path;\n    }\n}\nlet onClosefunc = null;\nlet onFinishedfunc = null;\n\nfunction onClose(func) {\n    if (typeof func === \"function\")\n        onClosefunc = func;\n}\n\nfunction onFinished(func) {\n    if (typeof func === \"function\")\n        onFinishedfunc = func;\n}\n\nfunction callOn(func) {\n    try {\n        func && func();\n    } catch (e) {\n        log(e.toString());\n    }\n}\n$.exports = {\n    runScript,\n    close,\n    setRequireRootDirectory,\n    isActive,\n    onClose,\n    onFinished,\n    isRunning\n}\nconst HikerUtils={\n    _findReachableIP(args){\n        return findReachableIP.apply(null,args);\n    },\n    _ipping(args){\n        return ipping.apply(null, args);\n    },\n    _fetch(args){\n        return fetch.apply(null, args);\n    },\n    toast(text){\n        toast(text);\n    },\n    getCopy() {\n        try {\n            const Context = android.content.Context;\n            const context = getCurrentActivity();\n            // 获取系统剪贴板\n            let clipboard = context.getSystemService(Context.CLIPBOARD_SERVICE);\n            // 返回数据\n            let clipData = clipboard.getPrimaryClip();\n            if (clipData != null && clipData.getItemCount() > 0) {\n                // 从数据集中获取（粘贴）第一条文本数据\n                let text = clipData.getItemAt(0).getText();\n                if (text != null) {\n                    return String(text.toString());\n                }\n            }\n            return null;\n        } catch (e) {\n            return null;\n        }\n    },\n    copy(text){\n        copy(String(text));\n    },\n    showQRCode(text){\n        createQRCode(text,false);\n    }\n};"},{"col_type":"movie_3","name":"配置文件","path":"configs","rule":"js:\nconst path = \"hiker://files/rules/nodejs/Config.json\";\nconst defaultC = {\n    name: \"默认\",\n    projectPath: \"/storage/emulated/0/serverdemo/\",\n    mainIndex: \"/storage/emulated/0/serverdemo/index.js\"\n}\nlet data;\n\nfunction getJson() {\n    if (Array.isArray(data)) {\n        return data;\n    }\n    try {\n        data = JSON.parse(readFile(path) || \"[]\");\n        data = data.map(v => {\n            v.id = v.id || md5(v.mainIndex);\n            return v;\n        });\n    } catch (e) {\n        deleteFile(path);\n        data = [];\n    }\n    return data;\n}\n\nfunction saveJson(json) {\n    saveFile(path, JSON.stringify(json));\n}\n\nfunction getCurrentConfig() {\n    return storage0.getItem(\"CurrentConfig\", defaultC);\n}\n\nfunction setCurrentConfig(configc) {\n    return storage0.setItem(\"CurrentConfig\", configc || defaultC);\n}\n\nfunction getConfigs() {\n    let r = getJson();\n    r.unshift(defaultC);\n    return r;\n}\n$.exports = {\n    getJson,\n    saveJson,\n    getCurrentConfig,\n    setCurrentConfig,\n    getConfigs\n};"},{"col_type":"movie_3","name":"配置Add","path":"ConfigAdd","rule":"js:\nlet Configs = $.require(\"configs\");\nlet arr = Configs.getJson();\n\n\n\nlet d = [];\nd.push({\n    title: \"新建\",\n    col_type: \"text_center_1\",\n    url: \"hiker://page/ConfigEd#noRecordHistory##noHistory#\",\n});\nd.push({\n    title: '<font color=\"#13B61B\">▐ </font><b>项目<b>',\n    col_type: \"rich_text\",\n});\nlet ci = 0;\nfor (let it of arr) {\n    d.push({\n        title: it.name,\n        desc: \"ID:\"+it.id,\n        col_type: \"text_1\",\n        url: \"hiker://page/ConfigEd#noRecordHistory##noHistory#\",\n        extra: {\n            index: ci++\n        }\n    });\n}\nsetResult(d);"},{"col_type":"movie_3","name":"配置编辑","path":"ConfigEd","rule":"js:\nlet configC = {};\n\nif (MY_PARAMS.index !== undefined) {\n    let Configs = $.require(\"configs\");\n    configC = Configs.getJson()[MY_PARAMS.index];\n    setPageTitle(\"编辑:\" + configC.name);\n\n} else {\n    setPageTitle(\"新建\");\n\n}\naddListener(\"onClose\", () => {\n    listMyVarKeys().forEach((v) => {\n        if (v.startsWith(\"ps_\")) clearMyVar(v);\n    })\n})\nlet d = [];\nlet f = $.require(\"http://hiker.nokia.press/hikerule/rulelist.json?id=5099\");\n\nd.push({\n    col_type: \"input\",\n    desc: \"项目名称(必填)\",\n    extra: {\n        onChange: $.toString(() => {\n            putMyVar(\"ps_name\", input);\n        }),\n        defaultValue: configC.name,\n        titleVisible: false\n    }\n});\nlet pathDir = joinUrl(getPath(\"hiker://files/\"), \"../\".repeat(5)).slice(7);\n\nd.push({\n    title: \"选择\",\n    col_type: \"input\",\n    desc: \"项目目录(必填)\",\n    url: JSON.stringify(f.fileSelectionUri({\n        callback: $.toString(() => {\n            let target = findItem(\"nodejs_config_projectPath\").extra;\n            updateItem(\"nodejs_config_projectPath\", {\n                extra: Object.assign(target, {\n                    defaultValue: PATH\n                })\n            });\n            return true;\n        }),\n        rootDirPath: pathDir,\n        initialPath: pathDir,\n        pattern: 1,\n        //fileType: \".json\",\n    })),\n    extra: {\n        onChange: $.toString(() => {\n            putMyVar(\"ps_projectPath\", input);\n        }),\n        defaultValue: configC.projectPath,\n        //titleVisible: false,\n        id: \"nodejs_config_projectPath\"\n    }\n});\nd.push({\n    title: \"选择\",\n    col_type: \"input\",\n    desc: \"项目索引文件\",\n    url: JSON.stringify(f.fileSelectionUri({\n        callback: $.toString(() => {\n            let target = findItem(\"nodejs_config_mainIndex\").extra;\n            updateItem(\"nodejs_config_mainIndex\", {\n                extra: Object.assign(target, {\n                    defaultValue: PATH\n                })\n            });\n            return true;\n        }),\n        rootDirPath: pathDir,\n        initialPath: pathDir,\n        pattern: 0,\n        fileType: \".js|.ts\",\n    })),\n    extra: {\n        onChange: $.toString(() => {\n            putMyVar(\"ps_mainIndex\", input);\n        }),\n        defaultValue: configC.mainIndex,\n        //titleVisible: false,\n        id: \"nodejs_config_mainIndex\"\n    }\n});\nd.push({\n    title: \"删除\",\n    url: $(\"#noLoading#\").lazyRule((index) => {\n        if (index === void(0)) {\n            return \"toast://此项无法删除\";\n        }\n\n        confirm({\n            title: \"温馨提示\",\n            content: \"确定要删除此规则吗？注意删除后无法恢复\",\n            confirm: $.toString((index) => {\n                let arr = $.require(\"configs\").getJson();\n                arr.splice(index, 1);\n                $.require(\"configs\").saveJson(arr);\n                back(true);\n                return \"toast://删除成功\";\n            }, index)\n        });\n        return \"hiker://empty\"\n    }, MY_PARAMS.index),\n    col_type: \"text_2\",\n});\nd.push({\n    title: \"保存\",\n    url: $(\"#noLoading#\").lazyRule((index, page, isImport) => {\n        let name = getMyVar(\"ps_name\", \"\");\n        if (!name) {\n            return \"toast://名字得有一个吧\";\n        }\n        let projectPath = getMyVar(\"ps_projectPath\", \"\");\n        if (!projectPath) {\n            return \"toast://项目目录不能为空\";\n        }\n        if (!projectPath.endsWith(\"/\")) {\n            projectPath += \"/\";\n        }\n        let mainIndex = getMyVar(\"ps_mainIndex\", \"\");\n        if (!mainIndex) mainIndex = projectPath + \"index.js\";\n        let id = md5(mainIndex);\n        let arr = $.require(\"configs\").getJson();\n        let ConfigC = {\n            name,\n            projectPath,\n            mainIndex,\n            id\n        };\n        if (index === void(0)) {\n            if (arr.some(v => v.name === name)) {\n                return \"toast://已经存在该规则\";\n            }\n            if (index === -1) {\n                arr.unshift(obj1);\n            } else {\n                arr.splice(index, 0, ConfigC);\n            }\n        } else {\n            let namey = arr[index].name;\n            if (name !== namey) {\n                if (arr.some(v => v.name === name)) {\n                    return \"toast://已经存在该规则\";\n                }\n            }\n            ConfigC = Object.assign(arr[index], ConfigC);\n            arr.splice(index, 1, ConfigC);\n        }\n        $.require(\"configs\").saveJson(arr);\n        back(true);\n        return \"toast://保存成功\";\n    }, MY_PARAMS.index),\n    col_type: \"text_2\",\n});\nsetResult(d);"},{"col_type":"text_2","name":"NodeController","path":"NodeController","rule":"js:\n// author:@LoyDgIk\n// 借鉴请注明出处 \n\nfunction importClass(clsname) {\n    return new org.mozilla.javascript.NativeJavaClass(this, findJavaClass(clsname));\n}\nconst AtomicBoolean = java.util.concurrent.atomic.AtomicBoolean;\nconst AtomicInteger = java.util.concurrent.atomic.AtomicInteger;\nconst Executors = java.util.concurrent.Executors;\nconst Thread = java.lang.Thread;\nconst Runnable = java.lang.Runnable;\nconst V8ValueString = loadJavaClass('hiker://files/data2/nodejs/libs/classes.dex', 'com.caoccao.javet.values.primitive.V8ValueString', 'hiker://files/data2/nodejs/libs/arm64-v8a');\n\nconst JSRuntimeType = importClass(\"com.caoccao.javet.enums.JSRuntimeType\");\nconst JavetEnginePool = importClass(\"com.caoccao.javet.interop.engine.JavetEnginePool\");\nconst JavetEngineConfig = importClass(\"com.caoccao.javet.interop.engine.JavetEngineConfig\");\nconst V8Host = importClass(\"com.caoccao.javet.interop.V8Host\");\n\n//const JSRuntimeType = importClass(\"com.caoccao.javet.enums.JSRuntimeType\");\nconst JavetProxyConverter = importClass(\"com.caoccao.javet.interop.converters.JavetProxyConverter\");\nconst NodeModuleModule = findJavaClass(\"com.caoccao.javet.node.modules.NodeModuleModule\");\nconst NodeModuleAny = findJavaClass(\"com.caoccao.javet.node.modules.NodeModuleAny\");\nconst IJavetLogger = importClass(\"com.caoccao.javet.interfaces.IJavetLogger\");\n\nconst V8AwaitMode = importClass(\"com.caoccao.javet.enums.V8AwaitMode\");\nconst JavetBuiltInModuleResolver = importClass(\"com.caoccao.javet.interop.callback.JavetBuiltInModuleResolver\");\n\nconst NodeRuntimeOptions = importClass(\"com.caoccao.javet.interop.options.NodeRuntimeOptions\");\n\nconst Paths = java.nio.file.Paths;\nconst Files = java.nio.file.Files;\nconst File = java.io.File;\n\nconst TimeUnit = java.util.concurrent.TimeUnit;\n\nconst JavetEntityError = importClass(\"com.caoccao.javet.entities.JavetEntityError\");\nconst JavetEntitySymbol = importClass(\"com.caoccao.javet.entities.JavetEntitySymbol\");\n\nconst IV8ModuleResolver = importClass(\"com.caoccao.javet.interop.callback.IV8ModuleResolver\");\n\n\nfunction JavetEngineManage() {\n    //let icuDir = getPath(\"hiker://files/data2/nodejs/libs/icu\").slice(7);\n    //NodeRuntimeOptions.NODE_FLAGS.setIcuDataDir(icuDir);\n    NodeRuntimeOptions.V8_FLAGS.setUseStrict(false);\n    NodeRuntimeOptions.NODE_FLAGS.setExperimentalSqlite(true);\n    this.nodeop = new NodeRuntimeOptions();\n    this.engineMaxNun = 5;\n    this.currentEngineCount = new AtomicInteger(0);\n    this.runtimeMap = new Map();\n    this.event = new Map();\n    this.uesNodeImportResolver = true;\n}\n\nObject.assign(JavetEngineManage.prototype, {\n    getExecutorService() {\n        if (this.daemonExecutorService) return this.daemonExecutorService;\n        let executorService = Executors.newFixedThreadPool(this.engineMaxNun + 1);\n        this.daemonExecutorService = executorService;\n        let monitorThread = new Thread(new Runnable(() => {\n            while (true) {\n                try {\n                    // 检查线程池中的任务数量\n                    if (executorService.getActiveCount() == 0 && this.runtimeMap.size == 0) {\n                        log(\"No active tasks and all tasks are completed. Shutting down the executor service.\");\n                        this.daemonExecutorService = null;\n                        executorService.shutdown();\n                        break;\n                    }\n                    Thread.sleep(1000);\n                } catch (e) {\n                    log(\"守护线程出错\" + e.toString());\n\n                    Thread.currentThread().interrupt();\n                    break;\n                }\n            }\n        }));\n        monitorThread.setDaemon(true); // 设置为守护线程\n        monitorThread.start();\n\n        return executorService;\n    },\n    inEvent(name, arg) {\n        let func = this.event.get(name);\n        if (typeof func == \"function\") {\n            try {\n                func.apply(null, arg);\n            } catch (e) {\n\n            }\n        }\n    },\n    onEvent(name, func) {\n        if (typeof func == \"function\") {\n            this.event.set(name, func);\n        }\n    },\n    createRuntime(project, {\n        errorList,\n        continueAwait,\n        moduleCacheMap\n    }) {\n\n        let runtime = V8Host.getNodeI18nInstance().createV8Runtime(this.nodeop);\n        runtime.setPromiseRejectCallback((_, _, v) => {\n            errorList.push(v);\n        });\n        let javetProxyConverter = new JavetProxyConverter();\n        runtime.allowEval(true);\n        runtime.setConverter(javetProxyConverter);\n        runtime.setStopping(true);\n        runtime.setLogger(MyJavetLogger);\n\n        function _log(arg) {\n            arg = Array.from(arg, v => {\n                if (v instanceof JavetEntityError) {\n                    return v.getStack();\n                } else if (v instanceof JavetEntitySymbol) {\n                    return \"Symbol(\" + v.getDescription() + \")\";\n                }\n                return v;\n            });\n            log(project.name + \":\" + arg.join(\" \"));\n        }\n        let nodeconsole = new WrapperFunction({\n            _log: _log,\n            _warn: _log,\n            _trace: _log,\n            _info: _log,\n            _error: _log,\n            _debug: _log,\n            _assert: (a) => {\n                if (a) _log(a);\n            }\n        });\n        nodeconsole.bind(runtime, \"console\");\n        new WrapperFunction(HikerUtils).bind(runtime, \"HikerUtils\");\n\n        let wfexit = new WrapperFunction({\n            __exitNative__() {\n                continueAwait.set(false);\n            },\n            __catchErrorNative__(error) {\n                errorList.push(error);\n            },\n            fetchByHiker(url, options) {\n                return fetch(url, options);\n            }\n        }, true);\n        wfexit.bindAndUnstructure(runtime);\n        let envAppName = typeof MY_NAME === \"undefined\" ? \"海阔视界\" : MY_NAME;\n        runtime.getExecutor($.toString((envAppName) => {\n            process.reallyExit = function(code) {\n                __exitNative__();\n            };\n            process.abort = function() {\n                __exitNative__();\n            };\n            process.on('unhandledRejection', (reason, promise) => {\n                __catchErrorNative__(reason);\n            });\n            process.on('uncaughtException', (error) => {\n              //console.error('未捕获的异常:', error);\n              __catchErrorNative__(reason);\n              __exitNative__();\n            });\n            const vm = require('node:vm');\n            const path = require('node:path');\n            const url = require('node:url');\n            const globalImport = function(modulePath, metaUrl) {\n                if (metaUrl) {\n                    modulePath = path.join(metaUrl, modulePath);\n                }\n                const script = new vm.Script(\"import(\" + JSON.stringify(modulePath) + \")\", {\n                    importModuleDynamically: vm.constants.USE_MAIN_CONTEXT_DEFAULT_LOADER\n                });\n\n                return script.runInNewContext();\n            };\n            globalThis.import = globalImport;\n            globalThis.__createGlobalImport__ = function(metaUrl) {\n                metaUrl = path.dirname(url.fileURLToPath(metaUrl));\n                let GlobalImport = function(modulePath) {\n                    return globalImport(modulePath, metaUrl);\n                };\n                return new Proxy(globalThis, {\n                    get(target, key, receiver) {\n                        if (key === \"import\" && target[key] === globalImport) {\n                            return GlobalImport;\n                        }\n                        return target[key];\n                    },\n                    set(target, key, value, receiver) {\n                        target[key] = value;\n                        return true;\n                    }\n                });\n            }\n            process.env[\"ANDROID_APP_NAME\"] = envAppName;\n            process.env[\"IS_HIKER\"] = \"1\";\n        }, envAppName)).executeVoid();\n        //使用IV8ModuleResolver问题太多故不用\n        let localRelativePath = project.projectPath;\n        runtime.getGlobalObject().setProperty(\"__dirname\", localRelativePath);\n        runtime.getNodeModule(NodeModuleModule).setRequireRootDirectory(localRelativePath + \"/\");\n\n        let nodeResolve = new JavetBuiltInModuleResolver();\n\n        runtime.setV8ModuleResolver(new IV8ModuleResolver({\n            resolve(runtime, resourceName, v8ModuleReferrer) {\n                if (resourceName.startsWith(\"/\") || resourceName.startsWith(\"./\") || resourceName.startsWith(\"../\") && !resourceName.endsWith(\".cjs\")) {\n                    let parentModuleName = v8ModuleReferrer.getResourceName();\n\n                    let moduleRelativePath = Paths.get(parentModuleName).getParent().resolve(resourceName);\n                    //log(\"模块相对路径\" + moduleRelativePath.normalize());\n                    let modulefile = Paths.get(localRelativePath).resolve(moduleRelativePath).toFile();\n\n                    //log(\"子模块：\"+modulefile.getCanonicalPath())\n                    if (modulefile.exists() && modulefile.isFile()) {\n                        let url = \"file://\" + modulefile.getCanonicalPath();\n                        if (moduleCacheMap.has(url)) {\n                            return moduleCacheMap.get(url);\n                        } else {\n                            let code = readFile(url);\n                            let module = runtime.getExecutor(\"import.meta.url = \" + JSON.stringify(url) + \";var globalThis=__createGlobalImport__(import.meta.url);\" + code);\n                            module.getV8ScriptOrigin().setResourceName(moduleRelativePath.normalize());\n                            let compiled = module.setModule(true).compileV8Module();\n                            moduleCacheMap.set(url, compiled);\n                            return compiled;\n                        }\n                    } else {\n                        return null;\n                    }\n                } else if (resourceName.startsWith(\"node:\")) {\n                    return nodeResolve.resolve(runtime, resourceName, v8ModuleReferrer);\n                } else {\n                    let moduleObject = runtime.getNodeModule(resourceName, NodeModuleAny).getModuleObject();\n                    moduleObject.set(\"default\", moduleObject);\n                    return runtime.createV8Module(resourceName, moduleObject);\n                }\n            },\n            getAbsoluteResourceName(runtime, resourceName, v8ModuleReferrer) {\n                return resourceName;\n            }\n        }));\n        return runtime;\n    },\n    isEsmModule(project) {\n        try {\n            let packageinfo = JSON.parse(readFile(project.projectPath + \"/package.json\"));\n            return packageinfo.type === \"module\";\n        } catch (e) {\n            return false;\n        }\n    },\n    createEngine(project, nocount) {\n        let errorList = [];\n        let continueAwait = new AtomicBoolean(true);\n        let engine = {\n            name: project.name,\n            errorList,\n            continueAwait,\n            moduleCacheMap: new Map(),\n            project\n        };\n        if (!nocount) {\n            if (this.currentEngineCount.get() >= this.engineMaxNun) {\n                throw new Error(\"超过最大允许项目数\");\n            }\n            this.currentEngineCount.incrementAndGet();\n        }\n        let runtime = this.createRuntime(project, engine);\n        engine.runtime = runtime;\n\n        return engine;\n    },\n    npmcom(project, cmd, params, registry) {\n        if (this.npmEngine) {\n            toast(\"请等待上一个命令完成\");\n            return;\n        }\n        let npmPath = getPath(\"hiker://files/data2/nodejs/libs/npm\").slice(7);\n        let npmproject = {\n            name: \"npm\",\n            projectPath: npmPath,\n            mainIndex: npmPath + \"/index.js\"\n        };\n        let engine = this.createEngine(npmproject, true);\n        let executorService = this.getExecutorService();\n\n        engine.runres = executorService.submit(new Runnable(() => {\n            this.safeRun(engine, 0, () => {\n                let c = $.toString((project, cmd, params, registry) => {\n                    console.log(\"正在执行:\" + cmd + \",请稍等\");\n                    let Npm = require(\"./index.js\");\n                    let npm = new Npm(project.projectPath, registry);\n                    npm.execCommand(cmd, params).then(v => {\n                        if (Array.isArray(v)) {\n                            console.log(JSON.stringify(v.slice(0, 50), null, 2));\n                        } else if (typeof v === \"object\") {\n                            console.log(Object.keys(v));\n                        } else if (typeof v === \"string\") {\n                            console.log(v);\n                        }\n                        console.log(cmd + \"执行完毕\");\n                    }).catch(e => {\n                        console.log(e);\n                    });\n\n                }, project, cmd, params, registry || \"\");\n                engine.runtime.getExecutor(c).executeVoid();\n            });\n            this.npmEngine = void 0;\n        }));\n        this.npmEngine = engine;\n    },\n    terminateNpm() {\n        this.terminate(this.npmEngine);\n        this.npmEngine = void 0;\n    },\n    runProject(project, pid, runMode, script) {\n        let id = pid || String(Date.now());\n        if (typeof script !== \"object\") {\n            script = {};\n        }\n        if (this.runtimeMap.has(id)) {\n            return id;\n        }\n        let engine = this.createEngine(project);\n        this.runtimeMap.set(id, engine);\n        engine.runres = this.run(engine, project, id, runMode, script);\n        return id;\n    },\n    safeRun({\n        runtime,\n        continueAwait,\n        errorList,\n        moduleCacheMap\n    }, runMode, runFanc, errorcatch) {\n        try {\n            runFanc();\n            let check;\n            if (runMode) {\n                //快速终止模式\n                let lock = new java.lang.Object();\n                check = new org.mozilla.javascript.Synchronizer(() => {\n                    if (runtime.await(V8AwaitMode.RunNoWait) == false) {\n                        continueAwait.set(false);\n                    }\n                    lock.wait(10);\n                }, lock);\n            } else {\n                //效率模式\n                check = function() {\n                    if (runtime.await(V8AwaitMode.RunOnce) == false) {\n                        continueAwait.set(false);\n                    }\n                };\n            }\n            //let date = Date.now();\n            while (continueAwait.get()) {\n                check.call();\n                //log(\"test:\"+(Date.now()-date));\n            }\n            runtime.lowMemoryNotification();\n            if (errorList.length) {\n                //log(errorList.length)\n                throw errorList.at(-1);\n            }\n        } catch (e) {\n            let errorMessage;\n            if (e instanceof JavetEntityError) {\n                errorMessage = e.getStack();\n            } else {\n                errorMessage = String(e);\n            }\n            if (!errorMessage.startsWith(\"JavaException: com.caoccao.javet.exceptions.JavetExecutionException: Error: Wrapped com.caoccao.javet.exceptions.JavetTerminatedException:\")) {\n                \n                if(typeof errorcatch==\"function\"){\n                    try{\n                        errorcatch(errorMessage, e);\n                    }catch(e){}\n                }else{\n                    log(errorMessage);\n                    setError(errorMessage);\n                }\n            }\n        } finally {\n            try {\n                runtime.close(true);\n            } catch (e) {}\n            moduleCacheMap.clear();\n        }\n    },\n    run(engine, project, id, runMode, script) {\n        let executorService = this.getExecutorService();\n        return executorService.submit(new Runnable(() => {\n            let res;\n            this.safeRun(engine, runMode, () => {\n                this.inEvent(\"start\", [id, project]);\n                if (this.uesNodeImportResolver) {\n                    res = engine.runtime.getExecutor($.toString((path, isEsmModule, script) => {\n                        let gimport = globalThis.import;\n                        delete globalThis.import;\n                        if (isEsmModule) {\n                            delete globalThis.__dirname;\n                            delete globalThis.__filename;\n                        }\n                        if (script.init) {\n                            try {\n                                eval(script.init);\n                            } catch (e) {\n                                console.log(\"初始化脚本执行失败\", e);\n                            }\n                        }\n                        let res = gimport(path);\n                        if (script.end) {\n                            res.then(input => {\n                                try {\n                                    eval(script.end);\n                                } catch (e) {\n                                    console.log(\"结尾脚本执行失败\", e);\n                                }\n                            });\n                        }\n\n                    }, project.mainIndex, this.isEsmModule(project), script)).setResourceName(project.mainIndex).setModule(true).executeVoid();\n                } else {\n                    res = engine.runtime.getExecutor(\"import.meta.url = \" + JSON.stringify(\"file://\" + project.mainIndex) + \";\" + readFile(\"file://\" + project.mainIndex)).setResourceName(project.mainIndex).setModule(true).executeVoid();\n                }\n            },script.error);\n            this.currentEngineCount.decrementAndGet();\n            this.runtimeMap.delete(id);\n            this.inEvent(\"end\", [id, project, engine.errorList]);\n            return res;\n        }));\n    },\n    terminate(id) {\n        if (!id) return;\n        let engine;\n        if (this.runtimeMap.has(id)) {\n            engine = this.runtimeMap.get(id);\n\n        } else if (typeof id === \"object\" && id.runtime) {\n            engine = id;\n        } else {\n            return;\n        }\n        if (engine.runtime.isInUse()) {\n            engine.runtime.terminateExecution();\n        }\n        engine.continueAwait.set(false);\n        engine.runres && engine.runres.get();\n    },\n    terminateAll() {\n        let awaitrunres = [];\n        for (let [id, engine] of this.runtimeMap) {\n            engine.continueAwait.set(false);\n            awaitrunres.push(engine.runres);\n            if (engine.runtime.isInUse()) {\n                engine.runtime.terminateExecution();\n            }\n        }\n        for (let runres of awaitrunres) {\n            runres.get();\n        }\n    },\n    isRunning(id) {\n        if (this.runtimeMap.has(id)) {\n            return true;\n        }\n        return false;\n    }\n});\n\n$.exports = new JavetEngineManage();\n\n\nfunction WrapperFunction(obj, noUnsteady) {\n    this.javaObject = new JavaAdapter(java.lang.Object, obj);\n    this.noUnsteady = !!noUnsteady;\n}\n\nObject.assign(WrapperFunction.prototype, {\n    bind(nodeRuntime, name) {\n        nodeRuntime.getGlobalObject().set(name, this.javaObject);\n        nodeRuntime.getExecutor($.toString((name, unsteady) => {\n            let nJava = globalThis[name];\n            globalThis[name] = {};\n            let methods = nJava.getClass().getDeclaredMethods();\n            for (let m of methods) {\n                let mName = String(m.getName());\n                if (unsteady && mName.startsWith(\"_\")) {\n                    mName = mName.replace(\"_\", \"\");\n                    globalThis[name][mName] = function(...arg) {\n                        arg=arg.map(v=>{\n                            if(Object.prototype.toString.call(v)===\"[object Object]\"){\n                                return JSON.parse(JSON.stringify(v));\n                            }\n                            return v;\n                        });\n                        return m.invoke.apply(nJava, [nJava, arg])\n                    }\n                } else {\n                    globalThis[name][mName] = function(...arg) {\n                        arg=arg.map(v=>{\n                            if(Object.prototype.toString.call(v)===\"[object Object]\"){\n                                return JSON.parse(JSON.stringify(v));\n                            }\n                            return v;\n                        });\n                        return m.invoke.apply(nJava, [nJava].concat(arg))\n                    }\n                }\n\n            }\n\n        }, name, !this.noUnsteady)).executeVoid();\n    },\n    bindAndUnstructure(nodeRuntime) {\n        let tName = \"$\" + String(Date.now()).slice(-7, -1);\n        nodeRuntime.getGlobalObject().set(tName, this.javaObject);\n        nodeRuntime.getExecutor($.toString((name, unsteady) => {\n            let nJava = globalThis[name];\n            delete globalThis[name];\n            let methods = nJava.getClass().getDeclaredMethods();\n            for (let m of methods) {\n                let mName = String(m.getName());\n                if (unsteady && mName.startsWith(\"_\")) {\n                    mName = mName.replace(\"_\", \"\");\n                    globalThis[mName] = function(...arg) {\n                        arg=arg.map(v=>{\n                            if(Object.prototype.toString.call(v)===\"[object Object]\"){\n                                return JSON.parse(JSON.stringify(v));\n                            }\n                            return v;\n                        });\n                        return m.invoke.apply(nJava, [nJava, arg])\n                    }\n                } else {\n                    globalThis[mName] = function(...arg) {\n                        arg=arg.map(v=>{\n                            if(Object.prototype.toString.call(v)===\"[object Object]\"){\n                                return JSON.parse(JSON.stringify(v));\n                            }\n                            return v;\n                        });\n                        return m.invoke.apply(nJava, [nJava].concat(arg))\n                    }\n                }\n            }\n\n        }, tName, !this.noUnsteady)).executeVoid();\n    }\n});\nconst HikerUtils = {\n    _findReachableIP(args) {\n        return findReachableIP.apply(null, args);\n    },\n    _ipping(args) {\n        return ipping.apply(null, args);\n    },\n    _fetch(args) {\n        return fetch.apply(null, args);\n    },\n    toast(text) {\n        toast(text);\n    },\n    getCopy() {\n        try {\n            const Context = android.content.Context;\n            const context = getCurrentActivity();\n            // 获取系统剪贴板\n            let clipboard = context.getSystemService(Context.CLIPBOARD_SERVICE);\n            // 返回数据\n            let clipData = clipboard.getPrimaryClip();\n            if (clipData != null && clipData.getItemCount() > 0) {\n                // 从数据集中获取（粘贴）第一条文本数据\n                let text = clipData.getItemAt(0).getText();\n                if (text != null) {\n                    return String(text.toString());\n                }\n            }\n            return null;\n        } catch (e) {\n            return null;\n        }\n    },\n    copy(text) {\n        copy(String(text));\n    },\n    showQRCode(text) {\n        createQRCode(text, false);\n    }\n}\nconst MyJavetLogger = new IJavetLogger({\n    debug(str) {\n        log(`[Runtime/debug]:${str}`);\n    },\n    error(str, th) {\n        log(`[Runtime/error]:${str}`);\n    },\n    info(str) {\n        log(`[Runtime/info]:${str}`);\n    },\n    warn(str) {\n        log(`[Runtime/warn]:${str}`);\n    }\n});"},{"col_type":"movie_3","name":"项目描述","path":"projectDescription","rule":"js:\nlet configc = MY_PARAMS.configc;\nlet mdfile = \"file://\" + configc.projectPath + \"README.md\";\nlet packagefile = \"file://\" + configc.projectPath + \"package.json\";\n\nlet d = [];\nlet packageinfo = {};\ntry {\n    packageinfo = JSON.parse(fetch(packagefile) || \"{}\");\n} catch (e) {}\nd.push({\n    title: '<font color=\"#13B61B\">▐ </font><b>应用信息<b>',\n    col_type: \"rich_text\",\n});\nd.push({\n    title: \"<strong>\" + ((packageinfo.name || \"神秘项目\") + \" v\" + (packageinfo.version || \"\")).big() + \"</strong>\" + \"<br>\" +\n        \"作者：\" + (packageinfo.author || \"神秘人\") + \"<br>\" +\n        \"描述：\" + (packageinfo.desc || \"空空如也\") + \"<br>\" +\n        \"开源协议：\" + \"<code>\" + (packageinfo.license || \"\") + \"</code>\",\n    col_type: \"rich_text\"\n});\n\nfunction fixHtml(html, path) {\n    const Jsoup = org.jsoup.Jsoup;\n    let doc = Jsoup.parse(html);\n    let links = doc.select(\"a[href]\");\n    path = path.split(\"/\");\n    path.pop();\n    path = path.join(\"/\") + \"/\";\n    for (let link of links) {\n        let originalHref = link.attr(\"href\");\n        if (!originalHref.startsWith(\"http\") || !originalHref.startsWith(\"file://\")) {\n            let absHref = \"file://\" + path + String(originalHref).replace(/^\\//, \"\");\n            link.attr(\"href\", absHref);\n        }\n        let nlink = link.attr(\"href\");\n        if (nlink.endsWith(\".md\")) {\n            link.attr(\"href\", $().b64(\"'\").rule((nlink, fixHtml, anMd) => {\n                let d = [];\n                this.fixHtml = fixHtml;\n                this.anMd = anMd;\n                anMd(d, nlink);\n                setResult(d);\n            }, nlink, fixHtml, anMd));\n        }\n    }\n    return String(doc.html())\n\n}\n\nfunction anMd(d, file) {\n    if (fileExist(file)) {\n\n        let README = readFile(file);\n        if (README) {\n            let marked = $.require(\"https://gitlab.com/hjdhnx/hiker/-/raw/main/js/marked.min.js\");\n            d.push({\n                col_type: \"line_blank\"\n            });\n            d.push({\n                title: '<font color=\"#13B61B\">▐ </font><b>README<b>',\n                col_type: \"rich_text\",\n            });\n\n            d.push({\n                title: fixHtml(marked.parse(README), file),\n                col_type: \"rich_text\",\n                extra: {\n                    //textSize: 12,\n                    lineSpacing: 1\n                }\n            });\n        }\n\n    }\n\n}\nanMd(d, mdfile);\nsetResult(d);"},{"col_type":"movie_3","name":"thirdstart","path":"thirdstart","rule":"js:\nlet Configs = $.require(\"configs?rule=nodejs\");\nlet multiConfig = Configs.getJson();\n$.exports.start = function(id, mode, script) {\n    let configc = multiConfig.find(v => v.id == id);\n    if (!configc) throw new Error(\"找不到该项目:id=\" + id);\n    let NodeController = GA.defineModule(\"NodeController\", \"NodeController?rule=nodejs\");\n    NodeController.runProject(configc, configc.id, mode, script);\n};\n$.exports.isRunning = function(id) {\n    let NodeController = GA.defineModule(\"NodeController\", \"NodeController?rule=nodejs\");\n    return NodeController.isRunning(id);\n};\n$.exports.stop = function(id) {\n    let NodeController = GA.defineModule(\"NodeController\", \"NodeController?rule=nodejs\");\n    NodeController.terminate(id);\n    return;\n};\n$.exports.startNew = function(index, mode, script, ext) {\n    input = index.replace(\"file://\",\"\");\n    let configc = {\n        mainIndex: index,\n        id: md5(index),\n        projectPath: joinUrl(index, \"./\"),\n        name: index.split(\"/\").at(-1),\n        ext:ext\n    };\n    //log(configc)\n    let NodeController = GA.defineModule(\"NodeController\", \"NodeController?rule=nodejs\");\n    NodeController.runProject(configc, configc.id, mode, script);\n    return configc.id;\n};\n\n$.exports.getProject = function(id) {\n    let NodeController = GA.defineModule(\"NodeController\", \"NodeController?rule=nodejs\");\n    return (NodeController.runtimeMap.get(id)||{}).project;\n};\n"},{"col_type":"movie_3","name":"runNpm","path":"runNpm","rule":"js:\nlet d = [];\naddListener(\"onClose\", () => {\n    let NodeController = GA.defineModule(\"NodeController\");\n    NodeController.terminateNpm();\n})\nd.push({\n    title: '‘‘’’<font color=\"#13B61B\">▐ </font><b>NPM(<small>运行结果可以从log查看,运行期间不要退出该页面</small>)<b>',\n    col_type: \"text_1\",\n    url:$(\"#noLoading#\").lazyRule(()=>{\n        return $(getItem(\"registry\", \"https://r.cnpmjs.org/\"), \"npm仓库镜像\").input(()=>{\n            setItem(\"registry\",input);\n            return \"toast://registry设置为:\"+input;\n        });\n    })\n});\nd.push({\n    col_type: \"text_2\",\n    title: \"安装NPM包(install)\",\n    url: $(\"\", \"npm install <packages>\\n支持换行多参数\").input((configc) => {\n\n        let NodeController = GA.defineModule(\"NodeController\");\n        NodeController.npmcom(configc, \"install\", input.split(\"\\n\"));\n    }, MY_PARAMS.configc)\n});\nd.push({\n    col_type: \"text_2\",\n    title: \"安装NPM包(link)\",\n    url: $(\"\", \"npm link <packages>\\n支持换行多参数\").input((configc) => {\n        let NodeController = GA.defineModule(\"NodeController\");\n        NodeController.npmcom(configc, \"link\", input.split(\"\\n\"), getItem(\"registry\",\"\"));\n    }, MY_PARAMS.configc)\n});\nd.push({\n    col_type: \"text_2\",\n    title: \"卸载NPM包(uninstall)\",\n    url: $(\"\", \"npm uninstall <packages>\\n支持换行多参数\").input((configc) => {\n        let NodeController = GA.defineModule(\"NodeController\");\n        NodeController.npmcom(configc, \"uninstall\", input.split(\"\\n\"), getItem(\"registry\",\"\"));\n    }, MY_PARAMS.configc)\n});\nd.push({\n    col_type: \"text_2\",\n    title: \"更新NPM包(update)\",\n    url: $(\"\", \"npm update <packages>\\n支持换行多参数\").input((configc) => {\n        let NodeController = GA.defineModule(\"NodeController\");\n        NodeController.npmcom(configc, \"update\", input.split(\"\\n\"), getItem(\"registry\",\"\"));\n    }, MY_PARAMS.configc)\n});\nd.push({\n    col_type: \"text_2\",\n    title: \"查看已经安装(list)\",\n    url: $(\"#noLoading#\").lazyRule((configc) => {\n        let NodeController = GA.defineModule(\"NodeController\");\n        NodeController.npmcom(configc, \"list\", [], getItem(\"registry\",\"\"));\n        return \"hiker://empty\";\n    }, MY_PARAMS.configc)\n});\nd.push({\n    col_type: \"text_2\",\n    title: \"自定义命令\",\n    url: $(\"\", \"npm <command>\\n第一行是命令，后面是参数\").input((configc) => {\n        let NodeController = GA.defineModule(\"NodeController\");\n        let c = input.split(\"\\n\");\n\n        NodeController.npmcom(configc, c.shift(), c, getItem(\"registry\",\"\"));\n    }, MY_PARAMS.configc)\n});\nsetResult(d);"},{"col_type":"movie_3","name":"查看日志","path":"checkLog","rule":"js:\nconst JSEngine = com.example.hikerview.service.parser.JSEngine;\nconst BigTextDO = com.example.hikerview.model.BigTextDO;\n\nlet logs = Array.from(JSEngine.getInstance().getLogs(), (v) => String(v)).reverse();\n\nlet d = [];\nif (BigTextDO.getTraceLog()) {\n    d.push({\n        title: \"刷新\",\n        url: $(\"#noLoading#\").lazyRule(() => {\n            refreshPage(false);\n            return \"hiker://empty\";\n        }),\n        col_type: \"text_2\"\n    });\n    d.push({\n        title: \"清空\",\n        url: $(\"#noLoading#\").lazyRule(() => {\n            const JSEngine = com.example.hikerview.service.parser.JSEngine;\n            JSEngine.getInstance().getLogs().clear();\n\n            refreshPage(false);\n            return \"hiker://empty\";\n        }),\n        col_type: \"text_2\"\n    });\n    for (let it of logs) {\n        let r = it.split(\":\")\n        let desc = r.splice(0, 4);\n        d.push({\n            title: r.join(\":\"),\n            col_type: \"text_1\",\n            desc: desc.join(\":\"),\n            url: $().rule((v) => setResult([{\n                title: v.replace(/((https?:\\/\\/)[^\\s]+)/g, (url) => `<a href=\"${url}\" target=\"_blank\">${url}</a>`),\n                col_type: \"rich_text\"\n            }]), it)\n        });\n    }\n} else {\n    d.push({\n        title: \"你还未开启日志记录\\n是否开启\",\n        url: $(\"#noLoading#\").lazyRule(() => {\n            const JSEngine = com.example.hikerview.service.parser.JSEngine;\n            const BigTextDO = com.example.hikerview.model.BigTextDO;\n            let traceLog=!BigTextDO.getTraceLog()\n            BigTextDO.updateTraceLog(traceLog);\n            JSEngine.getInstance().updateTraceLog(traceLog);\n            refreshPage()\n            return \"toast://开启日志记录\";\n        }),\n        col_type: \"text_center_1\"\n    })\n}\n\nsetResult(d)"}],"title":"nodejs","author":"@LoyDgIk","version":35,"type":"tool","url":"hiker://empty##","col_type":"movie_3","class_name":"多任务&测试&正在运行","class_url":"0&1&2","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nif (getAppVersion() < 5505) {\n    setResult([{\n        title: \"APP版本过低\",\n        desc: \"当前:\" + getAppVersion() + \"\\t期望:>=5505\",\n        url: \"web://https://haikuoshijie.cn/archives/fang-yuan-ying-shi-chang-jian-wen-ti\",\n        col_type: \"text_center_1\"\n    }]);\n} else if (MY_CLASS_URL === \"0\") {\n    let NodeController = GA.defineModule(\"NodeController\");\n    let Configs = $.require(\"configs\");\n    let multiConfig = Configs.getJson();\n    let d = [];\n    /*d.push({\n        title: \"运行模式:\"+[\"效率\", \"可控\"][Number(getItem(\"runmode\", \"0\"))],\n        col_type: \"text_3\",\n        url: $(\"#noLoading#\").lazyRule(() => {\n            return $([\"效率模式(终止速度慢,可能好几秒)\",\"可控模式(运行效率会低>=0.5倍)\"],1, \"运行模式\", Number(getItem(\"runmode\", \"0\"))).select(()=>{\n                setItem(\"runmode\", String(MY_INDEX));\n                refreshPage(false);\n                return \"toast://设置成功\";\n            });\n        })\n    });*/\n    d.push({\n        title: \"了解运行模式\",\n        col_type: \"text_4\",\n        url: $([\"效率模式\", \"可控模式\"], 2, \"了解运行模式\").select(() => {\n            if (MY_INDEX === 0) {\n                return $(\"效率模式\\n执行速度块,但终止速度慢,可能好几秒。\").confirm(() => {});\n            } else {\n                return $(\"可控模式\\n运行效率会低>=0.5倍,但可以快速终止运行。\").confirm(() => {});\n            }\n        })\n    });\n    d.push({\n        title: \"全部终止\",\n        col_type: \"text_4\",\n        url: $().lazyRule(() => {\n            let NodeController = GA.defineModule(\"NodeController\");\n            NodeController.terminateAll();\n            return \"toast://终止成功\";\n        })\n    });\n\n    d.push({\n        title: \"配置\",\n        url: \"hiker://page/ConfigAdd#noHistory##noRecordHistory#\",\n        col_type: \"text_4\"\n    });\n    d.push({\n        title: \"日志\",\n        url: \"hiker://page/checkLog#noHistory##noRecordHistory#\",\n        col_type: \"text_4\",\n        extra:{\n            newWindow: true,\n            pageTitle:\"NodeJS日志\"\n        }\n    });\n    \n    d.push({\n        title: '<font color=\"#13B61B\">▐ </font><b>项目(最多可同时运行5个项目)<b>',\n        col_type: \"rich_text\",\n    });\n    /*d.push({\n        title: \"““””\"+\"小程序使用的nodejs引擎适配问题较多,难以维护,现停止更新.\".fontcolor(\"grey\").small(),\n        url: \"hiker://empty\",\n        col_type: \"text_1\"\n    });*/\n    for (let it of multiConfig) {\n        let icon = \"file://\" + it.projectPath + \"public/icon.svg\";\n        d.push({\n            title: it.name,\n            desc: \"[\" + [\"未运行\", \"正在运行\"][Number(NodeController.isRunning(it.id))] + \"]\",\n            col_type: \"avatar\",\n            pic_url: fileExist(icon) ? icon : it.name,\n            url: $([\"启动[效率]\", \"启动[可控]\", \"终止\", \"项目信息\", \"项目目录\", \"NPM\"]).select((configc) => {\n                if (input.includes(\"启动\")) {\n                    let NodeController = GA.defineModule(\"NodeController\");\n                    if (!NodeController.isRunning(configc.id)) {\n                        NodeController.runProject(configc, configc.id, input.includes(\"效率\") ? 0 : 1);\n                        return \"toast://开始运行\";\n                    } else {\n                        return \"toast://项目正在运行中...\";\n                    }\n                } else if (input === \"终止\") {\n                    showLoading(\"正在终止项目\");\n                    let NodeController = GA.defineModule(\"NodeController\");\n                    NodeController.terminate(configc.id);\n                    hideLoading();\n                    return \"toast://终止完成\";\n                } else if (input === \"项目目录\") {\n                    let fileSelect = $.require(\"http://hiker.nokia.press/hikerule/rulelist.json?id=5099\");\n                    return fileSelect.fileSelectionUri({\n                        callback: $.toString(() => {\n                            if ([\".js\", \".json\", \".py\", \".md\", \".lock\", \".html\", \".css\"].includes(TYPE.toLowerCase()))\n                                return \"editFile://file://\" + PATH;\n                            else\n                                return \"openFile://file://\" + PATH;\n                        }),\n                        exitSearchRefresh: true,\n                        pattern: 0,\n                        rootDirPath: configc.projectPath,\n                        initialPath: configc.projectPath,\n                        memory: \"filepath\",\n                    });\n                } else if (input === \"NPM\") {\n                    return \"hiker://page/runNpm#noRecordHistory##noHistory#\";\n                } else {\n                    return \"hiker://page/projectDescription#noRecordHistory##noHistory#\"\n                }\n            }, it),\n            extra: {\n                id: \"project-\" + it.id,\n                configc: it\n            }\n        });\n        d.push({\n            col_type: \"line\"\n        });\n    }\n    NodeController.onEvent(\"start\", (id, p) => {\n        updateItem(\"project-\" + id, {\n            desc: \"[正在运行]\"\n        });\n    });\n    NodeController.onEvent(\"end\", (id, p, e) => {\n        updateItem(\"project-\" + id, {\n            desc: \"[结束运行]\" + (e.length ? \"\\tERROR\" : \"\")\n        });\n    });\n\n    setResult(d);\n} else if (MY_CLASS_URL === \"1\") {\n    let Configs = $.require(\"configs\");\n    let configc = Configs.getCurrentConfig();\n\n    let runtimeManager = GM.defineModule(\"runtimeManager\");\n    runtimeManager.onFinished(() => {\n        updateItem(\"nodezt\", {\n            title: \"执行完成:\" + configc.name\n        });\n    });\n    runtimeManager.onClose(() => {\n        updateItem(\"nodezt\", {\n            title: \"执行终止:\" + configc.name\n        });\n    });\n    runtimeManager.setRequireRootDirectory(configc.projectPath);\n    let d = [];\n    d.push({\n        title: '<font color=\"#13B61B\">▐ </font><b>测试代码环境(#请勿用于正式启动项目)<b>',\n        col_type: \"rich_text\",\n    });\n    d.push({\n        title: \"启动\",\n        col_type: \"text_4\",\n        url: $(\"#noLoading#\").lazyRule((configc) => {\n            let code = getMyVar(\"nodeindexjs\", \"\");\n            if (code) {\n                updateItem(\"nodezt\", {\n                    title: \"正在运行:\" + configc.name\n                });\n                let runtimeManager = GM.defineModule(\"runtimeManager\");\n                if (runtimeManager.isRunning()) return \"toast://脚本正在运行，请终止后再重新开始\";\n                runtimeManager.runScript(code, true, configc.mainIndex);\n            }\n            return \"toast://开始运行\";\n        }, configc)\n    });\n    d.push({\n        title: \"终止\",\n        col_type: \"text_4\",\n        url: $().lazyRule(() => {\n            let runtimeManager = GM.defineModule(\"runtimeManager\");\n            runtimeManager.close();\n            return \"toast://终止成功\";\n        })\n    });\n    d.push({\n        title: \"保存\",\n        col_type: \"text_4\",\n        url: $(\"#noLoading#\").lazyRule((configc) => {\n            let code = getMyVar(\"nodeindexjs\", \"\");\n            if (code) {\n                writeFile(\"file://\" + configc.mainIndex, code)\n            }\n            return \"toast://保存成功\";\n        }, configc)\n    });\n    d.push({\n        title: \"配置\",\n        url: \"hiker://page/ConfigAdd#noHistory##noRecordHistory#\",\n        col_type: \"text_4\"\n    });\n    let defaultValue = getMyVar(\"nodeindexjs\", \"\");\n    if (!defaultValue) {\n        defaultValue = fetch(\"file://\" + configc.mainIndex);\n    }\n    d.push({\n        title: runtimeManager.isRunning() ? \"正在运行:\" + configc.name : \"未运行\",\n        col_type: \"text_center_1\",\n        url: \"hiker://empty\",\n        extra: {\n            id: \"nodezt\"\n        }\n    });\n    d.push({\n        col_type: \"input\",\n        desc: \"code\",\n        extra: {\n            type: \"textarea\",\n            height: 5,\n            highlight: true,\n            onChange: $.toString(() => {\n                putMyVar(\"nodeindexjs\", input);\n            }),\n            defaultValue: getMyVar(\"nodeindexjs\", defaultValue),\n            titleVisible: false,\n        }\n    });\n    d.push({\n        title: \"项目:\" + configc.name,\n        url: $(\"#noLoading#\").lazyRule(() => {\n            let Configs = $.require(\"configs\");\n            let namelist = Configs.getConfigs().map(v => v.name);\n            return $(namelist).select(() => {\n                let Configs = $.require(\"configs\");\n                let list = Configs.getConfigs();\n                let configc = list[MY_INDEX];\n                Configs.setCurrentConfig(configc);\n                clearMyVar(\"nodeindexjs\");\n                let runtimeManager = GM.defineModule(\"runtimeManager\");\n                if (runtimeManager.isRunning()) {\n                    showLoading(\"正在终止当前项目\");\n                    runtimeManager.close();\n                    hideLoading();\n                }\n                refreshPage(false);\n            });\n        }),\n        col_type: \"text_2\",\n\n    });\n\n    d.push({\n        title: \"项目文件夹\",\n        url: $(\"#noLoading#\").lazyRule((path) => {\n            let fileSelect = $.require(\"http://hiker.nokia.press/hikerule/rulelist.json?id=5099\");\n            return fileSelect.fileSelectionUri({\n                callback: $.toString(() => {\n                    if ([\".js\", \".json\", \".py\", \".md\", \".lock\", \".html\", \".css\"].includes(TYPE.toLowerCase()))\n                        return \"editFile://file://\" + PATH;\n                    else\n                        return \"openFile://file://\" + PATH;\n                }),\n                exitSearchRefresh: true,\n                pattern: 0,\n                rootDirPath: path,\n                initialPath: path,\n                memory: \"filepath\",\n            });\n        }, configc.projectPath),\n        col_type: \"text_2\"\n    });\n\n    setResult(d);\n} else {\n    let d = [];\n    d.push({\n        title: '<font color=\"#13B61B\">▐ </font><b>这种运行的项目<b>',\n        col_type: \"rich_text\",\n    });\n    let NodeController = GA.defineModule(\"NodeController\");\n    let runtimeMap = NodeController.runtimeMap;\n    for (let [id, engine] of runtimeMap) {\n        d.push({\n            title: engine.name,\n            desc: \"[\" + [\"未运行\", \"正在运行\"][Number(NodeController.isRunning(id))] + \"]\",\n            col_type: \"avatar\",\n            pic_url: engine.name,\n            url: $(\"确认终止执行项目\").confirm(id => {\n                showLoading(\"正在终止项目\");\n                let NodeController = GA.defineModule(\"NodeController\");\n                NodeController.terminate(id);\n                hideLoading();\n                return \"toast://终止完成\";\n            }, id),\n            extra: {\n                id: \"project-\" + id,\n            }\n        });\n        d.push({\n            col_type: \"line\"\n        });\n    }\n\n    setResult(d);\n}","searchFind":"","search_url":"","group":"⑧工具","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"/*<$>\n@include start\nhttp://hiker.nokia.press/hikerule/rulelist.json?id=6916&auth=1d35e8f0-22e8-5270-a9d1-826f53f177ad\n@include end\n<$>*/\n","pages":"[{\"col_type\":\"movie_3\",\"name\":\"runtimeManager\",\"path\":\"runtimeManager\",\"rule\":\"js:\\n// author:@LoyDgIk\\n// 借鉴请注明出处\\n\\nfunction importClass(clsname) {\\n    return new org.mozilla.javascript.NativeJavaClass(this, findJavaClass(clsname));\\n}\\nconst AtomicBoolean = java.util.concurrent.atomic.AtomicBoolean;\\nconst V8ValueString = loadJavaClass('hiker://files/data2/nodejs/libs/classes.dex', 'com.caoccao.javet.values.primitive.V8ValueString', 'hiker://files/data2/nodejs/libs/arm64-v8a');\\nconst JavetEnginePool = importClass(\\\"com.caoccao.javet.interop.engine.JavetEnginePool\\\");\\nconst JSRuntimeType = importClass(\\\"com.caoccao.javet.enums.JSRuntimeType\\\");\\nconst JavetProxyConverter = importClass(\\\"com.caoccao.javet.interop.converters.JavetProxyConverter\\\");\\nconst NodeModuleModule = findJavaClass(\\\"com.caoccao.javet.node.modules.NodeModuleModule\\\");\\nconst V8AwaitMode = importClass(\\\"com.caoccao.javet.enums.V8AwaitMode\\\");\\nconst JavetBuiltInModuleResolver = importClass(\\\"com.caoccao.javet.interop.callback.JavetBuiltInModuleResolver\\\");\\n\\nconst NodeRuntimeOptions = importClass(\\\"com.caoccao.javet.interop.options.NodeRuntimeOptions\\\");\\nconst V8Host = importClass(\\\"com.caoccao.javet.interop.V8Host\\\");\\n\\nconst Paths = java.nio.file.Paths;\\nconst Files = java.nio.file.Files;\\nconst File = java.io.File;\\nconst JavetEntityError = importClass(\\\"com.caoccao.javet.entities.JavetEntityError\\\");\\nconst JavetEntitySymbol = importClass(\\\"com.caoccao.javet.entities.JavetEntitySymbol\\\");\\nconst JavetTerminatedException = importClass(\\\"com.caoccao.javet.exceptions.JavetTerminatedException\\\")\\nconst IV8ModuleResolver = importClass(\\\"com.caoccao.javet.interop.callback.IV8ModuleResolver\\\");\\nconst NodeModuleAny = findJavaClass(\\\"com.caoccao.javet.node.modules.NodeModuleAny\\\");\\n\\n\\nlet javetEnginePool = null;\\nlet nodeRuntime = null;\\nlet daemonThread = null;\\nlet continueAwait = new AtomicBoolean(false);\\nlet running = new AtomicBoolean(false);\\nlet localRelativePath = null;\\n\\nlet useESM = true;\\nlet useStrict = false;\\nlet runtimePromiseError = null;\\nlet moduleCacheMap=new Map();\\n\\n//let icuDir=getPath(\\\"hiker://files/data2/nodejs/libs/icu\\\").slice(7);\\nNodeRuntimeOptions.V8_FLAGS.setUseStrict(useStrict);\\n//NodeRuntimeOptions.NODE_FLAGS.setIcuDataDir(icuDir);\\nfunction WrapperFunction(obj, noUnsteady) {\\n    this.javaObject = new JavaAdapter(java.lang.Object, obj);\\n    this.noUnsteady = !!noUnsteady;\\n}\\n\\nObject.assign(WrapperFunction.prototype, {\\n    bind(nodeRuntime, name) {\\n        nodeRuntime.getGlobalObject().set(name, this.javaObject);\\n        nodeRuntime.getExecutor($.toString((name, unsteady) => {\\n            let nJava = globalThis[name];\\n            globalThis[name] = {};\\n            let methods = nJava.getClass().getDeclaredMethods();\\n            for (let m of methods) {\\n                let mName = String(m.getName());\\n                if (unsteady && mName.startsWith(\\\"_\\\")) {\\n                    mName = mName.replace(\\\"_\\\", \\\"\\\");\\n                    globalThis[name][mName] = function(...arg) {\\n                        arg=arg.map(v=>{\\n                            if(Object.prototype.toString.call(v)===\\\"[object Object]\\\"){\\n                                return JSON.parse(JSON.stringify(v));\\n                            }\\n                            return v;\\n                        });\\n                        return m.invoke.apply(nJava, [nJava, arg])\\n                    }\\n                } else {\\n                    globalThis[name][mName] = function(...arg) {\\n                        arg=arg.map(v=>{\\n                            if(Object.prototype.toString.call(v)===\\\"[object Object]\\\"){\\n                                return JSON.parse(JSON.stringify(v));\\n                            }\\n                            return v;\\n                        });\\n                        return m.invoke.apply(nJava, [nJava].concat(arg))\\n                    }\\n                }\\n\\n            }\\n\\n        }, name, !this.noUnsteady)).executeVoid();\\n    },\\n    bindAndUnstructure(nodeRuntime) {\\n        let tName = \\\"$\\\" + String(Date.now()).slice(-7, -1);\\n        nodeRuntime.getGlobalObject().set(tName, this.javaObject);\\n        nodeRuntime.getExecutor($.toString((name, unsteady) => {\\n            let nJava = globalThis[name];\\n            delete globalThis[name];\\n            let methods = nJava.getClass().getDeclaredMethods();\\n            for (let m of methods) {\\n                let mName = String(m.getName());\\n                if (unsteady && mName.startsWith(\\\"_\\\")) {\\n                    mName = mName.replace(\\\"_\\\", \\\"\\\");\\n                    globalThis[mName] = function(...arg) {\\n                        arg=arg.map(v=>{\\n                            if(Object.prototype.toString.call(v)===\\\"[object Object]\\\"){\\n                                return JSON.parse(JSON.stringify(v));\\n                            }\\n                            return v;\\n                        });\\n                        return m.invoke.apply(nJava, [nJava, arg])\\n                    }\\n                } else {\\n                    globalThis[mName] = function(...arg) {\\n                        arg=arg.map(v=>{\\n                            if(Object.prototype.toString.call(v)===\\\"[object Object]\\\"){\\n                                return JSON.parse(JSON.stringify(v));\\n                            }\\n                            return v;\\n                        });\\n                        return m.invoke.apply(nJava, [nJava].concat(arg))\\n                    }\\n                }\\n            }\\n\\n        }, tName, !this.noUnsteady)).executeVoid();\\n    }\\n})\\n\\nfunction _log(arg) {\\n    arg = Array.from(arg, v => {\\n        if (v instanceof JavetEntityError) {\\n            return v.getStack();\\n        } else if (v instanceof JavetEntitySymbol) {\\n            return \\\"Symbol(\\\" + v.getDescription() + \\\")\\\";\\n        }\\n        return v;\\n    });\\n    log(arg.join(\\\" \\\"));\\n}\\n\\nfunction initJavetEngine() {\\n    //javetEnginePool = new JavetEnginePool();\\n    try {\\n        //javetEnginePool.getConfig().setJSRuntimeType(JSRuntimeType.Node).setAllowEval(true).setGlobalName('globalThis');\\n        \\n        //nodeRuntime = javetEnginePool.getEngine().getV8Runtime();\\n        nodeRuntime= V8Host.getNodeI18nInstance().createV8Runtime();\\n        nodeRuntime.allowEval(true);\\n        nodeRuntime.setConverter(new JavetProxyConverter());\\n        //nodeRuntime.getGlobalObject().set(\\\"HikerJSEngine\\\", com.example.hikerview.service.parser.JSEngine.getInstance());\\n\\n        nodeRuntime.setStopping(true);\\n        let wf = new WrapperFunction({\\n            _log: _log,\\n            _warn: _log,\\n            _trace: _log,\\n            _info: _log,\\n            _error: _log,\\n            _debug: _log,\\n            _assert: (a) => {\\n                if (a) _log(a);\\n            }\\n        });\\n        wf.bind(nodeRuntime, \\\"console\\\");\\n        let wfexit = new WrapperFunction({\\n            __exitNative__() {\\n                continueAwait.set(false);\\n            },\\n            __catchErrorNative__(error) {\\n                runtimePromiseError = error;\\n            },\\n            fetchByHiker(url, options) {\\n                return fetch(url, options);\\n            }\\n        }, true);\\n        wfexit.bindAndUnstructure(nodeRuntime);\\n        new WrapperFunction(HikerUtils).bind(nodeRuntime,\\\"HikerUtils\\\");\\n        let envAppName = typeof MY_NAME===\\\"undefined\\\"?\\\"海阔视界\\\":MY_NAME;\\n        nodeRuntime.getExecutor($.toString((envAppName) => {\\n            process.reallyExit = function(code) {\\n                __exitNative__();\\n            }\\n            process.on('unhandledRejection', (reason, promise) => {\\n                //console.error('未捕获的 Promise 拒绝：'+reason);\\n                __catchErrorNative__(reason);\\n            });\\n            const vm = require('node:vm');\\n            const path = require('node:path');\\n            const url = require('node:url');\\n            const globalImport = function(modulePath, metaUrl) {\\n                if(metaUrl){\\n                    modulePath = path.join(metaUrl, modulePath);\\n                }\\n                const script = new vm.Script(\\\"import(\\\" + JSON.stringify(modulePath) + \\\")\\\", {\\n                    importModuleDynamically: vm.constants.USE_MAIN_CONTEXT_DEFAULT_LOADER\\n                });\\n                \\n                return script.runInNewContext();\\n            };\\n            globalThis.import = globalImport;\\n            globalThis.__createGlobalImport__ = function(metaUrl){\\n                metaUrl = path.dirname(url.fileURLToPath(metaUrl));\\n                let GlobalImport=function(modulePath){\\n                    return globalImport(modulePath, metaUrl);\\n                };\\n                return new Proxy(globalThis,{\\n                    get(target, key, receiver){\\n                        if(key===\\\"import\\\"&&target[key]===globalImport){\\n                            return GlobalImport;\\n                        }\\n                        return target[key];\\n                    },\\n                    set(target, key,value, receiver){\\n                        target[key] = value;\\n                        //receiver[key] = value;\\n                        return true;\\n                    }\\n                });\\n            };\\n            process.env[\\\"ANDROID_APP_NAME\\\"]=envAppName;\\n            process.env[\\\"IS_HIKER\\\"]=\\\"1\\\";\\n        }, envAppName)).executeVoid();\\n\\n        if (localRelativePath) {\\n            nodeRuntime.getGlobalObject().setProperty(\\\"__dirname\\\", localRelativePath);\\n            nodeRuntime.getNodeModule(NodeModuleModule).setRequireRootDirectory(localRelativePath + \\\"/\\\");\\n            if (useESM) {\\n                let nodeResolve = new JavetBuiltInModuleResolver();\\n                nodeRuntime.setV8ModuleResolver(new IV8ModuleResolver({\\n                    resolve(runtime, resourceName, v8ModuleReferrer) {\\n                        if (resourceName.startsWith(\\\"/\\\") || resourceName.startsWith(\\\"./\\\") || resourceName.startsWith(\\\"../\\\")) {\\n                            let parentModuleName = v8ModuleReferrer.getResourceName();\\n\\n                            let moduleRelativePath = Paths.get(parentModuleName).getParent().resolve(resourceName);\\n                            //log(\\\"模块相对路径\\\" + moduleRelativePath.normalize());\\n                            let modulefile = Paths.get(localRelativePath).resolve(moduleRelativePath).toFile();\\n\\n                            //log(\\\"子模块：\\\" + modulefile.getCanonicalPath())\\n                            if (modulefile.exists() && modulefile.isFile()) {\\n                                let url = \\\"file://\\\" + modulefile.getCanonicalPath();\\n                                let code = readFile(url);\\n                                \\n                                if(moduleCacheMap.has(url)){\\n                            return moduleCacheMap.get(url);\\n                        }else{\\n                            let code = readFile(url);\\n                            let module = runtime.getExecutor(\\\"import.meta.url = \\\" + JSON.stringify(url) + \\\";var globalThis=__createGlobalImport__(import.meta.url);\\\" + code);\\n                            module.getV8ScriptOrigin().setResourceName(moduleRelativePath.normalize());\\n                            let compiled = module.setModule(true).compileV8Module();\\n                            moduleCacheMap.set(url, compiled);\\n                            return compiled;\\n                        }\\n                            } else {\\n                                return null;\\n                            }\\n                        } else if (resourceName.startsWith(\\\"node:\\\")) {\\n                            return nodeResolve.resolve(runtime, resourceName, v8ModuleReferrer);\\n                        } else {\\n                            let moduleObject = runtime.getNodeModule(resourceName, NodeModuleAny).getModuleObject();\\n                            moduleObject.set(\\\"default\\\", moduleObject);\\n                            return runtime.createV8Module(resourceName, moduleObject);\\n                        }\\n                    },\\n                    getAbsoluteResourceName(runtime, resourceName, v8ModuleReferrer) {\\n                        return resourceName;\\n                    }\\n                }));\\n\\n            }\\n        }\\n\\n    } catch (e) {\\n        log(e.toString());\\n        close();\\n    }\\n}\\n\\nfunction runScript(code, runOnce, resourceName) {\\n    if (running.get()) return false;\\n    daemonThread = new java.lang.Thread(new java.lang.Runnable(() => {\\n        try {\\n            running.set(true);\\n            if (!nodeRuntime) {\\n                initJavetEngine();\\n            }\\n            if (useESM) {\\n                let IV8Executor = nodeRuntime.getExecutor(\\\"import.meta.url = \\\" + JSON.stringify(\\\"file://\\\" + resourceName) + \\\";\\\" + code).setModule(true);\\n                if (resourceName && typeof resourceName === \\\"string\\\") {\\n                    IV8Executor.setResourceName(resourceName);\\n                } else {\\n                    IV8Executor.setResourceName(\\\"\\\");\\n                }\\n                IV8Executor.executeVoid();\\n               \\n            } else {\\n                nodeRuntime.getExecutor(code).executeVoid();\\n            }\\n            continueAwait.set(true);\\n            let mode = V8AwaitMode.RunOnce;\\n\\n            while (continueAwait.get()) {\\n                if (nodeRuntime.await(mode) == false) {\\n                    continueAwait.set(false);\\n                    callOn(onFinishedfunc);\\n                }\\n            }\\n            if (runtimePromiseError !== null) {\\n                let error = runtimePromiseError;\\n                runtimePromiseError = null;\\n                throw error;\\n            }\\n        } catch (e) {\\n            let es = \\\"\\\";\\n            if (e instanceof JavetEntityError) {\\n                es += \\\"JavetExecutionException:\\\" + e.getStack();\\n            } else {\\n                es = String(e.toString());\\n            }\\n            \\n            if (!es.startsWith(\\\"JavaException: com.caoccao.javet.exceptions.JavetExecutionException: Error: Wrapped com.caoccao.javet.exceptions.JavetTerminatedException:\\\")) {\\n                log(es);\\n                setError(String(e.toString()));\\n            }\\n        } finally {\\n            nodeRuntime.lowMemoryNotification();\\n            \\n            nodeRuntime.close();\\n            moduleCacheMap.clear();\\n            nodeRuntime = null;\\n            running.set(false);\\n            \\n            callOn(onClosefunc);\\n            \\n        }\\n    }));\\n    daemonThread.start();\\n    return true;\\n}\\n\\nfunction close(nocall) {\\n    continueAwait.set(false);\\n    if (nodeRuntime&&nodeRuntime.isInUse()) {\\n            nodeRuntime.terminateExecution();\\n    }\\n    if(daemonThread){\\n        daemonThread.join();\\n        daemonThread=null;\\n    }\\n}\\n\\nfunction isActive() {\\n    return !!nodeRuntime\\n}\\n\\nfunction isRunning() {\\n    return isActive() && !!running.get();\\n}\\n\\nfunction setRequireRootDirectory(path) {\\n    if (typeof path === \\\"string\\\") {\\n        localRelativePath = path;\\n    }\\n}\\nlet onClosefunc = null;\\nlet onFinishedfunc = null;\\n\\nfunction onClose(func) {\\n    if (typeof func === \\\"function\\\")\\n        onClosefunc = func;\\n}\\n\\nfunction onFinished(func) {\\n    if (typeof func === \\\"function\\\")\\n        onFinishedfunc = func;\\n}\\n\\nfunction callOn(func) {\\n    try {\\n        func && func();\\n    } catch (e) {\\n        log(e.toString());\\n    }\\n}\\n$.exports = {\\n    runScript,\\n    close,\\n    setRequireRootDirectory,\\n    isActive,\\n    onClose,\\n    onFinished,\\n    isRunning\\n}\\nconst HikerUtils={\\n    _findReachableIP(args){\\n        return findReachableIP.apply(null,args);\\n    },\\n    _ipping(args){\\n        return ipping.apply(null, args);\\n    },\\n    _fetch(args){\\n        return fetch.apply(null, args);\\n    },\\n    toast(text){\\n        toast(text);\\n    },\\n    getCopy() {\\n        try {\\n            const Context = android.content.Context;\\n            const context = getCurrentActivity();\\n            // 获取系统剪贴板\\n            let clipboard = context.getSystemService(Context.CLIPBOARD_SERVICE);\\n            // 返回数据\\n            let clipData = clipboard.getPrimaryClip();\\n            if (clipData != null && clipData.getItemCount() > 0) {\\n                // 从数据集中获取（粘贴）第一条文本数据\\n                let text = clipData.getItemAt(0).getText();\\n                if (text != null) {\\n                    return String(text.toString());\\n                }\\n            }\\n            return null;\\n        } catch (e) {\\n            return null;\\n        }\\n    },\\n    copy(text){\\n        copy(String(text));\\n    },\\n    showQRCode(text){\\n        createQRCode(text,false);\\n    }\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"配置文件\",\"path\":\"configs\",\"rule\":\"js:\\nconst path = \\\"hiker://files/rules/nodejs/Config.json\\\";\\nconst defaultC = {\\n    name: \\\"默认\\\",\\n    projectPath: \\\"/storage/emulated/0/serverdemo/\\\",\\n    mainIndex: \\\"/storage/emulated/0/serverdemo/index.js\\\"\\n}\\nlet data;\\n\\nfunction getJson() {\\n    if (Array.isArray(data)) {\\n        return data;\\n    }\\n    try {\\n        data = JSON.parse(readFile(path) || \\\"[]\\\");\\n        data = data.map(v => {\\n            v.id = v.id || md5(v.mainIndex);\\n            return v;\\n        });\\n    } catch (e) {\\n        deleteFile(path);\\n        data = [];\\n    }\\n    return data;\\n}\\n\\nfunction saveJson(json) {\\n    saveFile(path, JSON.stringify(json));\\n}\\n\\nfunction getCurrentConfig() {\\n    return storage0.getItem(\\\"CurrentConfig\\\", defaultC);\\n}\\n\\nfunction setCurrentConfig(configc) {\\n    return storage0.setItem(\\\"CurrentConfig\\\", configc || defaultC);\\n}\\n\\nfunction getConfigs() {\\n    let r = getJson();\\n    r.unshift(defaultC);\\n    return r;\\n}\\n$.exports = {\\n    getJson,\\n    saveJson,\\n    getCurrentConfig,\\n    setCurrentConfig,\\n    getConfigs\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"配置Add\",\"path\":\"ConfigAdd\",\"rule\":\"js:\\nlet Configs = $.require(\\\"configs\\\");\\nlet arr = Configs.getJson();\\n\\n\\n\\nlet d = [];\\nd.push({\\n    title: \\\"新建\\\",\\n    col_type: \\\"text_center_1\\\",\\n    url: \\\"hiker://page/ConfigEd#noRecordHistory##noHistory#\\\",\\n});\\nd.push({\\n    title: '<font color=\\\"#13B61B\\\">▐ </font><b>项目<b>',\\n    col_type: \\\"rich_text\\\",\\n});\\nlet ci = 0;\\nfor (let it of arr) {\\n    d.push({\\n        title: it.name,\\n        desc: \\\"ID:\\\"+it.id,\\n        col_type: \\\"text_1\\\",\\n        url: \\\"hiker://page/ConfigEd#noRecordHistory##noHistory#\\\",\\n        extra: {\\n            index: ci++\\n        }\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"配置编辑\",\"path\":\"ConfigEd\",\"rule\":\"js:\\nlet configC = {};\\n\\nif (MY_PARAMS.index !== undefined) {\\n    let Configs = $.require(\\\"configs\\\");\\n    configC = Configs.getJson()[MY_PARAMS.index];\\n    setPageTitle(\\\"编辑:\\\" + configC.name);\\n\\n} else {\\n    setPageTitle(\\\"新建\\\");\\n\\n}\\naddListener(\\\"onClose\\\", () => {\\n    listMyVarKeys().forEach((v) => {\\n        if (v.startsWith(\\\"ps_\\\")) clearMyVar(v);\\n    })\\n})\\nlet d = [];\\nlet f = $.require(\\\"http://hiker.nokia.press/hikerule/rulelist.json?id=5099\\\");\\n\\nd.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"项目名称(必填)\\\",\\n    extra: {\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_name\\\", input);\\n        }),\\n        defaultValue: configC.name,\\n        titleVisible: false\\n    }\\n});\\nlet pathDir = joinUrl(getPath(\\\"hiker://files/\\\"), \\\"../\\\".repeat(5)).slice(7);\\n\\nd.push({\\n    title: \\\"选择\\\",\\n    col_type: \\\"input\\\",\\n    desc: \\\"项目目录(必填)\\\",\\n    url: JSON.stringify(f.fileSelectionUri({\\n        callback: $.toString(() => {\\n            let target = findItem(\\\"nodejs_config_projectPath\\\").extra;\\n            updateItem(\\\"nodejs_config_projectPath\\\", {\\n                extra: Object.assign(target, {\\n                    defaultValue: PATH\\n                })\\n            });\\n            return true;\\n        }),\\n        rootDirPath: pathDir,\\n        initialPath: pathDir,\\n        pattern: 1,\\n        //fileType: \\\".json\\\",\\n    })),\\n    extra: {\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_projectPath\\\", input);\\n        }),\\n        defaultValue: configC.projectPath,\\n        //titleVisible: false,\\n        id: \\\"nodejs_config_projectPath\\\"\\n    }\\n});\\nd.push({\\n    title: \\\"选择\\\",\\n    col_type: \\\"input\\\",\\n    desc: \\\"项目索引文件\\\",\\n    url: JSON.stringify(f.fileSelectionUri({\\n        callback: $.toString(() => {\\n            let target = findItem(\\\"nodejs_config_mainIndex\\\").extra;\\n            updateItem(\\\"nodejs_config_mainIndex\\\", {\\n                extra: Object.assign(target, {\\n                    defaultValue: PATH\\n                })\\n            });\\n            return true;\\n        }),\\n        rootDirPath: pathDir,\\n        initialPath: pathDir,\\n        pattern: 0,\\n        fileType: \\\".js|.ts\\\",\\n    })),\\n    extra: {\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_mainIndex\\\", input);\\n        }),\\n        defaultValue: configC.mainIndex,\\n        //titleVisible: false,\\n        id: \\\"nodejs_config_mainIndex\\\"\\n    }\\n});\\nd.push({\\n    title: \\\"删除\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule((index) => {\\n        if (index === void(0)) {\\n            return \\\"toast://此项无法删除\\\";\\n        }\\n\\n        confirm({\\n            title: \\\"温馨提示\\\",\\n            content: \\\"确定要删除此规则吗？注意删除后无法恢复\\\",\\n            confirm: $.toString((index) => {\\n                let arr = $.require(\\\"configs\\\").getJson();\\n                arr.splice(index, 1);\\n                $.require(\\\"configs\\\").saveJson(arr);\\n                back(true);\\n                return \\\"toast://删除成功\\\";\\n            }, index)\\n        });\\n        return \\\"hiker://empty\\\"\\n    }, MY_PARAMS.index),\\n    col_type: \\\"text_2\\\",\\n});\\nd.push({\\n    title: \\\"保存\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule((index, page, isImport) => {\\n        let name = getMyVar(\\\"ps_name\\\", \\\"\\\");\\n        if (!name) {\\n            return \\\"toast://名字得有一个吧\\\";\\n        }\\n        let projectPath = getMyVar(\\\"ps_projectPath\\\", \\\"\\\");\\n        if (!projectPath) {\\n            return \\\"toast://项目目录不能为空\\\";\\n        }\\n        if (!projectPath.endsWith(\\\"/\\\")) {\\n            projectPath += \\\"/\\\";\\n        }\\n        let mainIndex = getMyVar(\\\"ps_mainIndex\\\", \\\"\\\");\\n        if (!mainIndex) mainIndex = projectPath + \\\"index.js\\\";\\n        let id = md5(mainIndex);\\n        let arr = $.require(\\\"configs\\\").getJson();\\n        let ConfigC = {\\n            name,\\n            projectPath,\\n            mainIndex,\\n            id\\n        };\\n        if (index === void(0)) {\\n            if (arr.some(v => v.name === name)) {\\n                return \\\"toast://已经存在该规则\\\";\\n            }\\n            if (index === -1) {\\n                arr.unshift(obj1);\\n            } else {\\n                arr.splice(index, 0, ConfigC);\\n            }\\n        } else {\\n            let namey = arr[index].name;\\n            if (name !== namey) {\\n                if (arr.some(v => v.name === name)) {\\n                    return \\\"toast://已经存在该规则\\\";\\n                }\\n            }\\n            ConfigC = Object.assign(arr[index], ConfigC);\\n            arr.splice(index, 1, ConfigC);\\n        }\\n        $.require(\\\"configs\\\").saveJson(arr);\\n        back(true);\\n        return \\\"toast://保存成功\\\";\\n    }, MY_PARAMS.index),\\n    col_type: \\\"text_2\\\",\\n});\\nsetResult(d);\"},{\"col_type\":\"text_2\",\"name\":\"NodeController\",\"path\":\"NodeController\",\"rule\":\"js:\\n// author:@LoyDgIk\\n// 借鉴请注明出处 \\n\\nfunction importClass(clsname) {\\n    return new org.mozilla.javascript.NativeJavaClass(this, findJavaClass(clsname));\\n}\\nconst AtomicBoolean = java.util.concurrent.atomic.AtomicBoolean;\\nconst AtomicInteger = java.util.concurrent.atomic.AtomicInteger;\\nconst Executors = java.util.concurrent.Executors;\\nconst Thread = java.lang.Thread;\\nconst Runnable = java.lang.Runnable;\\nconst V8ValueString = loadJavaClass('hiker://files/data2/nodejs/libs/classes.dex', 'com.caoccao.javet.values.primitive.V8ValueString', 'hiker://files/data2/nodejs/libs/arm64-v8a');\\n\\nconst JSRuntimeType = importClass(\\\"com.caoccao.javet.enums.JSRuntimeType\\\");\\nconst JavetEnginePool = importClass(\\\"com.caoccao.javet.interop.engine.JavetEnginePool\\\");\\nconst JavetEngineConfig = importClass(\\\"com.caoccao.javet.interop.engine.JavetEngineConfig\\\");\\nconst V8Host = importClass(\\\"com.caoccao.javet.interop.V8Host\\\");\\n\\n//const JSRuntimeType = importClass(\\\"com.caoccao.javet.enums.JSRuntimeType\\\");\\nconst JavetProxyConverter = importClass(\\\"com.caoccao.javet.interop.converters.JavetProxyConverter\\\");\\nconst NodeModuleModule = findJavaClass(\\\"com.caoccao.javet.node.modules.NodeModuleModule\\\");\\nconst NodeModuleAny = findJavaClass(\\\"com.caoccao.javet.node.modules.NodeModuleAny\\\");\\nconst IJavetLogger = importClass(\\\"com.caoccao.javet.interfaces.IJavetLogger\\\");\\n\\nconst V8AwaitMode = importClass(\\\"com.caoccao.javet.enums.V8AwaitMode\\\");\\nconst JavetBuiltInModuleResolver = importClass(\\\"com.caoccao.javet.interop.callback.JavetBuiltInModuleResolver\\\");\\n\\nconst NodeRuntimeOptions = importClass(\\\"com.caoccao.javet.interop.options.NodeRuntimeOptions\\\");\\n\\nconst Paths = java.nio.file.Paths;\\nconst Files = java.nio.file.Files;\\nconst File = java.io.File;\\n\\nconst TimeUnit = java.util.concurrent.TimeUnit;\\n\\nconst JavetEntityError = importClass(\\\"com.caoccao.javet.entities.JavetEntityError\\\");\\nconst JavetEntitySymbol = importClass(\\\"com.caoccao.javet.entities.JavetEntitySymbol\\\");\\n\\nconst IV8ModuleResolver = importClass(\\\"com.caoccao.javet.interop.callback.IV8ModuleResolver\\\");\\n\\n\\nfunction JavetEngineManage() {\\n    //let icuDir = getPath(\\\"hiker://files/data2/nodejs/libs/icu\\\").slice(7);\\n    //NodeRuntimeOptions.NODE_FLAGS.setIcuDataDir(icuDir);\\n    NodeRuntimeOptions.V8_FLAGS.setUseStrict(false);\\n    NodeRuntimeOptions.NODE_FLAGS.setExperimentalSqlite(true);\\n    this.nodeop = new NodeRuntimeOptions();\\n    this.engineMaxNun = 5;\\n    this.currentEngineCount = new AtomicInteger(0);\\n    this.runtimeMap = new Map();\\n    this.event = new Map();\\n    this.uesNodeImportResolver = true;\\n}\\n\\nObject.assign(JavetEngineManage.prototype, {\\n    getExecutorService() {\\n        if (this.daemonExecutorService) return this.daemonExecutorService;\\n        let executorService = Executors.newFixedThreadPool(this.engineMaxNun + 1);\\n        this.daemonExecutorService = executorService;\\n        let monitorThread = new Thread(new Runnable(() => {\\n            while (true) {\\n                try {\\n                    // 检查线程池中的任务数量\\n                    if (executorService.getActiveCount() == 0 && this.runtimeMap.size == 0) {\\n                        log(\\\"No active tasks and all tasks are completed. Shutting down the executor service.\\\");\\n                        this.daemonExecutorService = null;\\n                        executorService.shutdown();\\n                        break;\\n                    }\\n                    Thread.sleep(1000);\\n                } catch (e) {\\n                    log(\\\"守护线程出错\\\" + e.toString());\\n\\n                    Thread.currentThread().interrupt();\\n                    break;\\n                }\\n            }\\n        }));\\n        monitorThread.setDaemon(true); // 设置为守护线程\\n        monitorThread.start();\\n\\n        return executorService;\\n    },\\n    inEvent(name, arg) {\\n        let func = this.event.get(name);\\n        if (typeof func == \\\"function\\\") {\\n            try {\\n                func.apply(null, arg);\\n            } catch (e) {\\n\\n            }\\n        }\\n    },\\n    onEvent(name, func) {\\n        if (typeof func == \\\"function\\\") {\\n            this.event.set(name, func);\\n        }\\n    },\\n    createRuntime(project, {\\n        errorList,\\n        continueAwait,\\n        moduleCacheMap\\n    }) {\\n\\n        let runtime = V8Host.getNodeI18nInstance().createV8Runtime(this.nodeop);\\n        runtime.setPromiseRejectCallback((_, _, v) => {\\n            errorList.push(v);\\n        });\\n        let javetProxyConverter = new JavetProxyConverter();\\n        runtime.allowEval(true);\\n        runtime.setConverter(javetProxyConverter);\\n        runtime.setStopping(true);\\n        runtime.setLogger(MyJavetLogger);\\n\\n        function _log(arg) {\\n            arg = Array.from(arg, v => {\\n                if (v instanceof JavetEntityError) {\\n                    return v.getStack();\\n                } else if (v instanceof JavetEntitySymbol) {\\n                    return \\\"Symbol(\\\" + v.getDescription() + \\\")\\\";\\n                }\\n                return v;\\n            });\\n            log(project.name + \\\":\\\" + arg.join(\\\" \\\"));\\n        }\\n        let nodeconsole = new WrapperFunction({\\n            _log: _log,\\n            _warn: _log,\\n            _trace: _log,\\n            _info: _log,\\n            _error: _log,\\n            _debug: _log,\\n            _assert: (a) => {\\n                if (a) _log(a);\\n            }\\n        });\\n        nodeconsole.bind(runtime, \\\"console\\\");\\n        new WrapperFunction(HikerUtils).bind(runtime, \\\"HikerUtils\\\");\\n\\n        let wfexit = new WrapperFunction({\\n            __exitNative__() {\\n                continueAwait.set(false);\\n            },\\n            __catchErrorNative__(error) {\\n                errorList.push(error);\\n            },\\n            fetchByHiker(url, options) {\\n                return fetch(url, options);\\n            }\\n        }, true);\\n        wfexit.bindAndUnstructure(runtime);\\n        let envAppName = typeof MY_NAME === \\\"undefined\\\" ? \\\"海阔视界\\\" : MY_NAME;\\n        runtime.getExecutor($.toString((envAppName) => {\\n            process.reallyExit = function(code) {\\n                __exitNative__();\\n            };\\n            process.abort = function() {\\n                __exitNative__();\\n            };\\n            process.on('unhandledRejection', (reason, promise) => {\\n                __catchErrorNative__(reason);\\n            });\\n            process.on('uncaughtException', (error) => {\\n              //console.error('未捕获的异常:', error);\\n              __catchErrorNative__(reason);\\n              __exitNative__();\\n            });\\n            const vm = require('node:vm');\\n            const path = require('node:path');\\n            const url = require('node:url');\\n            const globalImport = function(modulePath, metaUrl) {\\n                if (metaUrl) {\\n                    modulePath = path.join(metaUrl, modulePath);\\n                }\\n                const script = new vm.Script(\\\"import(\\\" + JSON.stringify(modulePath) + \\\")\\\", {\\n                    importModuleDynamically: vm.constants.USE_MAIN_CONTEXT_DEFAULT_LOADER\\n                });\\n\\n                return script.runInNewContext();\\n            };\\n            globalThis.import = globalImport;\\n            globalThis.__createGlobalImport__ = function(metaUrl) {\\n                metaUrl = path.dirname(url.fileURLToPath(metaUrl));\\n                let GlobalImport = function(modulePath) {\\n                    return globalImport(modulePath, metaUrl);\\n                };\\n                return new Proxy(globalThis, {\\n                    get(target, key, receiver) {\\n                        if (key === \\\"import\\\" && target[key] === globalImport) {\\n                            return GlobalImport;\\n                        }\\n                        return target[key];\\n                    },\\n                    set(target, key, value, receiver) {\\n                        target[key] = value;\\n                        return true;\\n                    }\\n                });\\n            }\\n            process.env[\\\"ANDROID_APP_NAME\\\"] = envAppName;\\n            process.env[\\\"IS_HIKER\\\"] = \\\"1\\\";\\n        }, envAppName)).executeVoid();\\n        //使用IV8ModuleResolver问题太多故不用\\n        let localRelativePath = project.projectPath;\\n        runtime.getGlobalObject().setProperty(\\\"__dirname\\\", localRelativePath);\\n        runtime.getNodeModule(NodeModuleModule).setRequireRootDirectory(localRelativePath + \\\"/\\\");\\n\\n        let nodeResolve = new JavetBuiltInModuleResolver();\\n\\n        runtime.setV8ModuleResolver(new IV8ModuleResolver({\\n            resolve(runtime, resourceName, v8ModuleReferrer) {\\n                if (resourceName.startsWith(\\\"/\\\") || resourceName.startsWith(\\\"./\\\") || resourceName.startsWith(\\\"../\\\") && !resourceName.endsWith(\\\".cjs\\\")) {\\n                    let parentModuleName = v8ModuleReferrer.getResourceName();\\n\\n                    let moduleRelativePath = Paths.get(parentModuleName).getParent().resolve(resourceName);\\n                    //log(\\\"模块相对路径\\\" + moduleRelativePath.normalize());\\n                    let modulefile = Paths.get(localRelativePath).resolve(moduleRelativePath).toFile();\\n\\n                    //log(\\\"子模块：\\\"+modulefile.getCanonicalPath())\\n                    if (modulefile.exists() && modulefile.isFile()) {\\n                        let url = \\\"file://\\\" + modulefile.getCanonicalPath();\\n                        if (moduleCacheMap.has(url)) {\\n                            return moduleCacheMap.get(url);\\n                        } else {\\n                            let code = readFile(url);\\n                            let module = runtime.getExecutor(\\\"import.meta.url = \\\" + JSON.stringify(url) + \\\";var globalThis=__createGlobalImport__(import.meta.url);\\\" + code);\\n                            module.getV8ScriptOrigin().setResourceName(moduleRelativePath.normalize());\\n                            let compiled = module.setModule(true).compileV8Module();\\n                            moduleCacheMap.set(url, compiled);\\n                            return compiled;\\n                        }\\n                    } else {\\n                        return null;\\n                    }\\n                } else if (resourceName.startsWith(\\\"node:\\\")) {\\n                    return nodeResolve.resolve(runtime, resourceName, v8ModuleReferrer);\\n                } else {\\n                    let moduleObject = runtime.getNodeModule(resourceName, NodeModuleAny).getModuleObject();\\n                    moduleObject.set(\\\"default\\\", moduleObject);\\n                    return runtime.createV8Module(resourceName, moduleObject);\\n                }\\n            },\\n            getAbsoluteResourceName(runtime, resourceName, v8ModuleReferrer) {\\n                return resourceName;\\n            }\\n        }));\\n        return runtime;\\n    },\\n    isEsmModule(project) {\\n        try {\\n            let packageinfo = JSON.parse(readFile(project.projectPath + \\\"/package.json\\\"));\\n            return packageinfo.type === \\\"module\\\";\\n        } catch (e) {\\n            return false;\\n        }\\n    },\\n    createEngine(project, nocount) {\\n        let errorList = [];\\n        let continueAwait = new AtomicBoolean(true);\\n        let engine = {\\n            name: project.name,\\n            errorList,\\n            continueAwait,\\n            moduleCacheMap: new Map(),\\n            project\\n        };\\n        if (!nocount) {\\n            if (this.currentEngineCount.get() >= this.engineMaxNun) {\\n                throw new Error(\\\"超过最大允许项目数\\\");\\n            }\\n            this.currentEngineCount.incrementAndGet();\\n        }\\n        let runtime = this.createRuntime(project, engine);\\n        engine.runtime = runtime;\\n\\n        return engine;\\n    },\\n    npmcom(project, cmd, params, registry) {\\n        if (this.npmEngine) {\\n            toast(\\\"请等待上一个命令完成\\\");\\n            return;\\n        }\\n        let npmPath = getPath(\\\"hiker://files/data2/nodejs/libs/npm\\\").slice(7);\\n        let npmproject = {\\n            name: \\\"npm\\\",\\n            projectPath: npmPath,\\n            mainIndex: npmPath + \\\"/index.js\\\"\\n        };\\n        let engine = this.createEngine(npmproject, true);\\n        let executorService = this.getExecutorService();\\n\\n        engine.runres = executorService.submit(new Runnable(() => {\\n            this.safeRun(engine, 0, () => {\\n                let c = $.toString((project, cmd, params, registry) => {\\n                    console.log(\\\"正在执行:\\\" + cmd + \\\",请稍等\\\");\\n                    let Npm = require(\\\"./index.js\\\");\\n                    let npm = new Npm(project.projectPath, registry);\\n                    npm.execCommand(cmd, params).then(v => {\\n                        if (Array.isArray(v)) {\\n                            console.log(JSON.stringify(v.slice(0, 50), null, 2));\\n                        } else if (typeof v === \\\"object\\\") {\\n                            console.log(Object.keys(v));\\n                        } else if (typeof v === \\\"string\\\") {\\n                            console.log(v);\\n                        }\\n                        console.log(cmd + \\\"执行完毕\\\");\\n                    }).catch(e => {\\n                        console.log(e);\\n                    });\\n\\n                }, project, cmd, params, registry || \\\"\\\");\\n                engine.runtime.getExecutor(c).executeVoid();\\n            });\\n            this.npmEngine = void 0;\\n        }));\\n        this.npmEngine = engine;\\n    },\\n    terminateNpm() {\\n        this.terminate(this.npmEngine);\\n        this.npmEngine = void 0;\\n    },\\n    runProject(project, pid, runMode, script) {\\n        let id = pid || String(Date.now());\\n        if (typeof script !== \\\"object\\\") {\\n            script = {};\\n        }\\n        if (this.runtimeMap.has(id)) {\\n            return id;\\n        }\\n        let engine = this.createEngine(project);\\n        this.runtimeMap.set(id, engine);\\n        engine.runres = this.run(engine, project, id, runMode, script);\\n        return id;\\n    },\\n    safeRun({\\n        runtime,\\n        continueAwait,\\n        errorList,\\n        moduleCacheMap\\n    }, runMode, runFanc, errorcatch) {\\n        try {\\n            runFanc();\\n            let check;\\n            if (runMode) {\\n                //快速终止模式\\n                let lock = new java.lang.Object();\\n                check = new org.mozilla.javascript.Synchronizer(() => {\\n                    if (runtime.await(V8AwaitMode.RunNoWait) == false) {\\n                        continueAwait.set(false);\\n                    }\\n                    lock.wait(10);\\n                }, lock);\\n            } else {\\n                //效率模式\\n                check = function() {\\n                    if (runtime.await(V8AwaitMode.RunOnce) == false) {\\n                        continueAwait.set(false);\\n                    }\\n                };\\n            }\\n            //let date = Date.now();\\n            while (continueAwait.get()) {\\n                check.call();\\n                //log(\\\"test:\\\"+(Date.now()-date));\\n            }\\n            runtime.lowMemoryNotification();\\n            if (errorList.length) {\\n                //log(errorList.length)\\n                throw errorList.at(-1);\\n            }\\n        } catch (e) {\\n            let errorMessage;\\n            if (e instanceof JavetEntityError) {\\n                errorMessage = e.getStack();\\n            } else {\\n                errorMessage = String(e);\\n            }\\n            if (!errorMessage.startsWith(\\\"JavaException: com.caoccao.javet.exceptions.JavetExecutionException: Error: Wrapped com.caoccao.javet.exceptions.JavetTerminatedException:\\\")) {\\n                \\n                if(typeof errorcatch==\\\"function\\\"){\\n                    try{\\n                        errorcatch(errorMessage, e);\\n                    }catch(e){}\\n                }else{\\n                    log(errorMessage);\\n                    setError(errorMessage);\\n                }\\n            }\\n        } finally {\\n            try {\\n                runtime.close(true);\\n            } catch (e) {}\\n            moduleCacheMap.clear();\\n        }\\n    },\\n    run(engine, project, id, runMode, script) {\\n        let executorService = this.getExecutorService();\\n        return executorService.submit(new Runnable(() => {\\n            let res;\\n            this.safeRun(engine, runMode, () => {\\n                this.inEvent(\\\"start\\\", [id, project]);\\n                if (this.uesNodeImportResolver) {\\n                    res = engine.runtime.getExecutor($.toString((path, isEsmModule, script) => {\\n                        let gimport = globalThis.import;\\n                        delete globalThis.import;\\n                        if (isEsmModule) {\\n                            delete globalThis.__dirname;\\n                            delete globalThis.__filename;\\n                        }\\n                        if (script.init) {\\n                            try {\\n                                eval(script.init);\\n                            } catch (e) {\\n                                console.log(\\\"初始化脚本执行失败\\\", e);\\n                            }\\n                        }\\n                        let res = gimport(path);\\n                        if (script.end) {\\n                            res.then(input => {\\n                                try {\\n                                    eval(script.end);\\n                                } catch (e) {\\n                                    console.log(\\\"结尾脚本执行失败\\\", e);\\n                                }\\n                            });\\n                        }\\n\\n                    }, project.mainIndex, this.isEsmModule(project), script)).setResourceName(project.mainIndex).setModule(true).executeVoid();\\n                } else {\\n                    res = engine.runtime.getExecutor(\\\"import.meta.url = \\\" + JSON.stringify(\\\"file://\\\" + project.mainIndex) + \\\";\\\" + readFile(\\\"file://\\\" + project.mainIndex)).setResourceName(project.mainIndex).setModule(true).executeVoid();\\n                }\\n            },script.error);\\n            this.currentEngineCount.decrementAndGet();\\n            this.runtimeMap.delete(id);\\n            this.inEvent(\\\"end\\\", [id, project, engine.errorList]);\\n            return res;\\n        }));\\n    },\\n    terminate(id) {\\n        if (!id) return;\\n        let engine;\\n        if (this.runtimeMap.has(id)) {\\n            engine = this.runtimeMap.get(id);\\n\\n        } else if (typeof id === \\\"object\\\" && id.runtime) {\\n            engine = id;\\n        } else {\\n            return;\\n        }\\n        if (engine.runtime.isInUse()) {\\n            engine.runtime.terminateExecution();\\n        }\\n        engine.continueAwait.set(false);\\n        engine.runres && engine.runres.get();\\n    },\\n    terminateAll() {\\n        let awaitrunres = [];\\n        for (let [id, engine] of this.runtimeMap) {\\n            engine.continueAwait.set(false);\\n            awaitrunres.push(engine.runres);\\n            if (engine.runtime.isInUse()) {\\n                engine.runtime.terminateExecution();\\n            }\\n        }\\n        for (let runres of awaitrunres) {\\n            runres.get();\\n        }\\n    },\\n    isRunning(id) {\\n        if (this.runtimeMap.has(id)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n});\\n\\n$.exports = new JavetEngineManage();\\n\\n\\nfunction WrapperFunction(obj, noUnsteady) {\\n    this.javaObject = new JavaAdapter(java.lang.Object, obj);\\n    this.noUnsteady = !!noUnsteady;\\n}\\n\\nObject.assign(WrapperFunction.prototype, {\\n    bind(nodeRuntime, name) {\\n        nodeRuntime.getGlobalObject().set(name, this.javaObject);\\n        nodeRuntime.getExecutor($.toString((name, unsteady) => {\\n            let nJava = globalThis[name];\\n            globalThis[name] = {};\\n            let methods = nJava.getClass().getDeclaredMethods();\\n            for (let m of methods) {\\n                let mName = String(m.getName());\\n                if (unsteady && mName.startsWith(\\\"_\\\")) {\\n                    mName = mName.replace(\\\"_\\\", \\\"\\\");\\n                    globalThis[name][mName] = function(...arg) {\\n                        arg=arg.map(v=>{\\n                            if(Object.prototype.toString.call(v)===\\\"[object Object]\\\"){\\n                                return JSON.parse(JSON.stringify(v));\\n                            }\\n                            return v;\\n                        });\\n                        return m.invoke.apply(nJava, [nJava, arg])\\n                    }\\n                } else {\\n                    globalThis[name][mName] = function(...arg) {\\n                        arg=arg.map(v=>{\\n                            if(Object.prototype.toString.call(v)===\\\"[object Object]\\\"){\\n                                return JSON.parse(JSON.stringify(v));\\n                            }\\n                            return v;\\n                        });\\n                        return m.invoke.apply(nJava, [nJava].concat(arg))\\n                    }\\n                }\\n\\n            }\\n\\n        }, name, !this.noUnsteady)).executeVoid();\\n    },\\n    bindAndUnstructure(nodeRuntime) {\\n        let tName = \\\"$\\\" + String(Date.now()).slice(-7, -1);\\n        nodeRuntime.getGlobalObject().set(tName, this.javaObject);\\n        nodeRuntime.getExecutor($.toString((name, unsteady) => {\\n            let nJava = globalThis[name];\\n            delete globalThis[name];\\n            let methods = nJava.getClass().getDeclaredMethods();\\n            for (let m of methods) {\\n                let mName = String(m.getName());\\n                if (unsteady && mName.startsWith(\\\"_\\\")) {\\n                    mName = mName.replace(\\\"_\\\", \\\"\\\");\\n                    globalThis[mName] = function(...arg) {\\n                        arg=arg.map(v=>{\\n                            if(Object.prototype.toString.call(v)===\\\"[object Object]\\\"){\\n                                return JSON.parse(JSON.stringify(v));\\n                            }\\n                            return v;\\n                        });\\n                        return m.invoke.apply(nJava, [nJava, arg])\\n                    }\\n                } else {\\n                    globalThis[mName] = function(...arg) {\\n                        arg=arg.map(v=>{\\n                            if(Object.prototype.toString.call(v)===\\\"[object Object]\\\"){\\n                                return JSON.parse(JSON.stringify(v));\\n                            }\\n                            return v;\\n                        });\\n                        return m.invoke.apply(nJava, [nJava].concat(arg))\\n                    }\\n                }\\n            }\\n\\n        }, tName, !this.noUnsteady)).executeVoid();\\n    }\\n});\\nconst HikerUtils = {\\n    _findReachableIP(args) {\\n        return findReachableIP.apply(null, args);\\n    },\\n    _ipping(args) {\\n        return ipping.apply(null, args);\\n    },\\n    _fetch(args) {\\n        return fetch.apply(null, args);\\n    },\\n    toast(text) {\\n        toast(text);\\n    },\\n    getCopy() {\\n        try {\\n            const Context = android.content.Context;\\n            const context = getCurrentActivity();\\n            // 获取系统剪贴板\\n            let clipboard = context.getSystemService(Context.CLIPBOARD_SERVICE);\\n            // 返回数据\\n            let clipData = clipboard.getPrimaryClip();\\n            if (clipData != null && clipData.getItemCount() > 0) {\\n                // 从数据集中获取（粘贴）第一条文本数据\\n                let text = clipData.getItemAt(0).getText();\\n                if (text != null) {\\n                    return String(text.toString());\\n                }\\n            }\\n            return null;\\n        } catch (e) {\\n            return null;\\n        }\\n    },\\n    copy(text) {\\n        copy(String(text));\\n    },\\n    showQRCode(text) {\\n        createQRCode(text, false);\\n    }\\n}\\nconst MyJavetLogger = new IJavetLogger({\\n    debug(str) {\\n        log(`[Runtime/debug]:${str}`);\\n    },\\n    error(str, th) {\\n        log(`[Runtime/error]:${str}`);\\n    },\\n    info(str) {\\n        log(`[Runtime/info]:${str}`);\\n    },\\n    warn(str) {\\n        log(`[Runtime/warn]:${str}`);\\n    }\\n});\"},{\"col_type\":\"movie_3\",\"name\":\"项目描述\",\"path\":\"projectDescription\",\"rule\":\"js:\\nlet configc = MY_PARAMS.configc;\\nlet mdfile = \\\"file://\\\" + configc.projectPath + \\\"README.md\\\";\\nlet packagefile = \\\"file://\\\" + configc.projectPath + \\\"package.json\\\";\\n\\nlet d = [];\\nlet packageinfo = {};\\ntry {\\n    packageinfo = JSON.parse(fetch(packagefile) || \\\"{}\\\");\\n} catch (e) {}\\nd.push({\\n    title: '<font color=\\\"#13B61B\\\">▐ </font><b>应用信息<b>',\\n    col_type: \\\"rich_text\\\",\\n});\\nd.push({\\n    title: \\\"<strong>\\\" + ((packageinfo.name || \\\"神秘项目\\\") + \\\" v\\\" + (packageinfo.version || \\\"\\\")).big() + \\\"</strong>\\\" + \\\"<br>\\\" +\\n        \\\"作者：\\\" + (packageinfo.author || \\\"神秘人\\\") + \\\"<br>\\\" +\\n        \\\"描述：\\\" + (packageinfo.desc || \\\"空空如也\\\") + \\\"<br>\\\" +\\n        \\\"开源协议：\\\" + \\\"<code>\\\" + (packageinfo.license || \\\"\\\") + \\\"</code>\\\",\\n    col_type: \\\"rich_text\\\"\\n});\\n\\nfunction fixHtml(html, path) {\\n    const Jsoup = org.jsoup.Jsoup;\\n    let doc = Jsoup.parse(html);\\n    let links = doc.select(\\\"a[href]\\\");\\n    path = path.split(\\\"/\\\");\\n    path.pop();\\n    path = path.join(\\\"/\\\") + \\\"/\\\";\\n    for (let link of links) {\\n        let originalHref = link.attr(\\\"href\\\");\\n        if (!originalHref.startsWith(\\\"http\\\") || !originalHref.startsWith(\\\"file://\\\")) {\\n            let absHref = \\\"file://\\\" + path + String(originalHref).replace(/^\\\\//, \\\"\\\");\\n            link.attr(\\\"href\\\", absHref);\\n        }\\n        let nlink = link.attr(\\\"href\\\");\\n        if (nlink.endsWith(\\\".md\\\")) {\\n            link.attr(\\\"href\\\", $().b64(\\\"'\\\").rule((nlink, fixHtml, anMd) => {\\n                let d = [];\\n                this.fixHtml = fixHtml;\\n                this.anMd = anMd;\\n                anMd(d, nlink);\\n                setResult(d);\\n            }, nlink, fixHtml, anMd));\\n        }\\n    }\\n    return String(doc.html())\\n\\n}\\n\\nfunction anMd(d, file) {\\n    if (fileExist(file)) {\\n\\n        let README = readFile(file);\\n        if (README) {\\n            let marked = $.require(\\\"https://gitlab.com/hjdhnx/hiker/-/raw/main/js/marked.min.js\\\");\\n            d.push({\\n                col_type: \\\"line_blank\\\"\\n            });\\n            d.push({\\n                title: '<font color=\\\"#13B61B\\\">▐ </font><b>README<b>',\\n                col_type: \\\"rich_text\\\",\\n            });\\n\\n            d.push({\\n                title: fixHtml(marked.parse(README), file),\\n                col_type: \\\"rich_text\\\",\\n                extra: {\\n                    //textSize: 12,\\n                    lineSpacing: 1\\n                }\\n            });\\n        }\\n\\n    }\\n\\n}\\nanMd(d, mdfile);\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"thirdstart\",\"path\":\"thirdstart\",\"rule\":\"js:\\nlet Configs = $.require(\\\"configs?rule=nodejs\\\");\\nlet multiConfig = Configs.getJson();\\n$.exports.start = function(id, mode, script) {\\n    let configc = multiConfig.find(v => v.id == id);\\n    if (!configc) throw new Error(\\\"找不到该项目:id=\\\" + id);\\n    let NodeController = GA.defineModule(\\\"NodeController\\\", \\\"NodeController?rule=nodejs\\\");\\n    NodeController.runProject(configc, configc.id, mode, script);\\n};\\n$.exports.isRunning = function(id) {\\n    let NodeController = GA.defineModule(\\\"NodeController\\\", \\\"NodeController?rule=nodejs\\\");\\n    return NodeController.isRunning(id);\\n};\\n$.exports.stop = function(id) {\\n    let NodeController = GA.defineModule(\\\"NodeController\\\", \\\"NodeController?rule=nodejs\\\");\\n    NodeController.terminate(id);\\n    return;\\n};\\n$.exports.startNew = function(index, mode, script, ext) {\\n    input = index.replace(\\\"file://\\\",\\\"\\\");\\n    let configc = {\\n        mainIndex: index,\\n        id: md5(index),\\n        projectPath: joinUrl(index, \\\"./\\\"),\\n        name: index.split(\\\"/\\\").at(-1),\\n        ext:ext\\n    };\\n    //log(configc)\\n    let NodeController = GA.defineModule(\\\"NodeController\\\", \\\"NodeController?rule=nodejs\\\");\\n    NodeController.runProject(configc, configc.id, mode, script);\\n    return configc.id;\\n};\\n\\n$.exports.getProject = function(id) {\\n    let NodeController = GA.defineModule(\\\"NodeController\\\", \\\"NodeController?rule=nodejs\\\");\\n    return (NodeController.runtimeMap.get(id)||{}).project;\\n};\\n\"},{\"col_type\":\"movie_3\",\"name\":\"runNpm\",\"path\":\"runNpm\",\"rule\":\"js:\\nlet d = [];\\naddListener(\\\"onClose\\\", () => {\\n    let NodeController = GA.defineModule(\\\"NodeController\\\");\\n    NodeController.terminateNpm();\\n})\\nd.push({\\n    title: '‘‘’’<font color=\\\"#13B61B\\\">▐ </font><b>NPM(<small>运行结果可以从log查看,运行期间不要退出该页面</small>)<b>',\\n    col_type: \\\"text_1\\\",\\n    url:$(\\\"#noLoading#\\\").lazyRule(()=>{\\n        return $(getItem(\\\"registry\\\", \\\"https://r.cnpmjs.org/\\\"), \\\"npm仓库镜像\\\").input(()=>{\\n            setItem(\\\"registry\\\",input);\\n            return \\\"toast://registry设置为:\\\"+input;\\n        });\\n    })\\n});\\nd.push({\\n    col_type: \\\"text_2\\\",\\n    title: \\\"安装NPM包(install)\\\",\\n    url: $(\\\"\\\", \\\"npm install <packages>\\\\n支持换行多参数\\\").input((configc) => {\\n\\n        let NodeController = GA.defineModule(\\\"NodeController\\\");\\n        NodeController.npmcom(configc, \\\"install\\\", input.split(\\\"\\\\n\\\"));\\n    }, MY_PARAMS.configc)\\n});\\nd.push({\\n    col_type: \\\"text_2\\\",\\n    title: \\\"安装NPM包(link)\\\",\\n    url: $(\\\"\\\", \\\"npm link <packages>\\\\n支持换行多参数\\\").input((configc) => {\\n        let NodeController = GA.defineModule(\\\"NodeController\\\");\\n        NodeController.npmcom(configc, \\\"link\\\", input.split(\\\"\\\\n\\\"), getItem(\\\"registry\\\",\\\"\\\"));\\n    }, MY_PARAMS.configc)\\n});\\nd.push({\\n    col_type: \\\"text_2\\\",\\n    title: \\\"卸载NPM包(uninstall)\\\",\\n    url: $(\\\"\\\", \\\"npm uninstall <packages>\\\\n支持换行多参数\\\").input((configc) => {\\n        let NodeController = GA.defineModule(\\\"NodeController\\\");\\n        NodeController.npmcom(configc, \\\"uninstall\\\", input.split(\\\"\\\\n\\\"), getItem(\\\"registry\\\",\\\"\\\"));\\n    }, MY_PARAMS.configc)\\n});\\nd.push({\\n    col_type: \\\"text_2\\\",\\n    title: \\\"更新NPM包(update)\\\",\\n    url: $(\\\"\\\", \\\"npm update <packages>\\\\n支持换行多参数\\\").input((configc) => {\\n        let NodeController = GA.defineModule(\\\"NodeController\\\");\\n        NodeController.npmcom(configc, \\\"update\\\", input.split(\\\"\\\\n\\\"), getItem(\\\"registry\\\",\\\"\\\"));\\n    }, MY_PARAMS.configc)\\n});\\nd.push({\\n    col_type: \\\"text_2\\\",\\n    title: \\\"查看已经安装(list)\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule((configc) => {\\n        let NodeController = GA.defineModule(\\\"NodeController\\\");\\n        NodeController.npmcom(configc, \\\"list\\\", [], getItem(\\\"registry\\\",\\\"\\\"));\\n        return \\\"hiker://empty\\\";\\n    }, MY_PARAMS.configc)\\n});\\nd.push({\\n    col_type: \\\"text_2\\\",\\n    title: \\\"自定义命令\\\",\\n    url: $(\\\"\\\", \\\"npm <command>\\\\n第一行是命令，后面是参数\\\").input((configc) => {\\n        let NodeController = GA.defineModule(\\\"NodeController\\\");\\n        let c = input.split(\\\"\\\\n\\\");\\n\\n        NodeController.npmcom(configc, c.shift(), c, getItem(\\\"registry\\\",\\\"\\\"));\\n    }, MY_PARAMS.configc)\\n});\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"查看日志\",\"path\":\"checkLog\",\"rule\":\"js:\\nconst JSEngine = com.example.hikerview.service.parser.JSEngine;\\nconst BigTextDO = com.example.hikerview.model.BigTextDO;\\n\\nlet logs = Array.from(JSEngine.getInstance().getLogs(), (v) => String(v)).reverse();\\n\\nlet d = [];\\nif (BigTextDO.getTraceLog()) {\\n    d.push({\\n        title: \\\"刷新\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }),\\n        col_type: \\\"text_2\\\"\\n    });\\n    d.push({\\n        title: \\\"清空\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            const JSEngine = com.example.hikerview.service.parser.JSEngine;\\n            JSEngine.getInstance().getLogs().clear();\\n\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }),\\n        col_type: \\\"text_2\\\"\\n    });\\n    for (let it of logs) {\\n        let r = it.split(\\\":\\\")\\n        let desc = r.splice(0, 4);\\n        d.push({\\n            title: r.join(\\\":\\\"),\\n            col_type: \\\"text_1\\\",\\n            desc: desc.join(\\\":\\\"),\\n            url: $().rule((v) => setResult([{\\n                title: v.replace(/((https?:\\\\/\\\\/)[^\\\\s]+)/g, (url) => `<a href=\\\"${url}\\\" target=\\\"_blank\\\">${url}</a>`),\\n                col_type: \\\"rich_text\\\"\\n            }]), it)\\n        });\\n    }\\n} else {\\n    d.push({\\n        title: \\\"你还未开启日志记录\\\\n是否开启\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            const JSEngine = com.example.hikerview.service.parser.JSEngine;\\n            const BigTextDO = com.example.hikerview.model.BigTextDO;\\n            let traceLog=!BigTextDO.getTraceLog()\\n            BigTextDO.updateTraceLog(traceLog);\\n            JSEngine.getInstance().updateTraceLog(traceLog);\\n            refreshPage()\\n            return \\\"toast://开启日志记录\\\";\\n        }),\\n        col_type: \\\"text_center_1\\\"\\n    })\\n}\\n\\nsetResult(d)\"}]","proxy":"","icon":""}