海阔视界，我的主页「新京梦主页」主题￥my_home_theme￥{"Date":"2025-03-04 05:47:26","Name":"新京梦主页","BookmarksList":[{"pattern":2,"name":"预处理","code":"var collection=JSON.parse(fetch('hiker://collection'));\nvar colPicUrl=\"hiker://images/card_bg\";\nfor(let i=0;i<collection.length;i++){\n              if(collection[i].picUrl!=null){                        colPicUrl=collection[i].picUrl;\n              break;\n    }\n}\n\n/**try{\nvar logoPic = JSON.parse(fetch('http://api.btstu.cn/sjbz/api.php?lx=fengjing&format=images&_tt='+new Date().getTime(),{redirect:false, withHeaders:true, timeout: 1000})).headers.location[0];\n}catch(e){}*/\nvar logoPic = \"hiker://images/home_bg\";\n[]\n\n/*\n//本地图片随机\n//直接引用fileImg即可\n//file更改路径\nlet file = new java.io.File('/storage/emulated/0/Pictures/');\nlet fileList = file.listFiles().filter(h => h.isFile()&&/\\.(jpg|jpeg|png|gif|webp)/.test(h));\nlet i = Math.floor(Math.random() * fileList.length);\nvar fileImg = fileList[i];*/\n\n"},{"status":false,"pattern":2,"name":"影视_搜索","code":"var rl = [];\nvar ys_ss = getItem('ys_ss', '');\nrl.push({\n    title: '搜索',\n    col_type: 'input',\n    desc: '请输入搜索关键词',\n    url: $.toString(() => {\n        if (!input) return 'toast://请输入关键词搜索';\n        let txt = input;\n        setItem('ys_ss', txt);\n        var html = ('https://api.milorapart.top/api/searchvedio/?name=' + txt + '&id=');\n        var js = JSON.parse(fetch(html)).data;\n        var n = js.map(t => t.name);\n        return $(n, 1, '请选择').select((js, html) => {\n            var txt = input;\n            let index = js.findIndex(t => t.name == input);\n            var id = js[index].id;\n            return $('hiker://empty').rule((html, id, txt) => {\n                setPageTitle(txt);\n                var d = [];\n                var json = JSON.parse(fetch(html + id)).data;\n                json.map(a => d.push({\n                    title: a.num,\n                    col_type: 'text_4',\n                    url: a.url,\n                }));\n                setResult(d);\n            }, html, id, txt)\n        }, js, html)\n    }),\n    extra: {\n        defaultValue: getItem('ys_ss', ''),\n    }\n});\nrl"},{"status":false,"pattern":2,"name":"导入图标","code":"//自动导入，无需手动操作。\n//正常显示图标后，可以关掉本书签，使主页更流畅。\nlet icons = [{\n    'html': 'http://123.56.105.145/tubiao/more/',\n    'file': 'hiker://files/Jm/lm/more/',\n    'id': ['1.png','5.png','7.png','10.png','16.png','18.png','25.png','27.png','35.png','36.png','37.png','38.png','44.png','47.png','48.png','59.png','65.png','67.png','73.png','93.png','101.png','130.png','146.png','157.png','161.png','167.png','171.png','182.png','195.png','202.png','205.png','213.png','215.png','221.png','227.png','232.png','251.png','253.png','258.png','263.png','279.png','284.png','294.png','300.png','303.png','325.png','336.png']\n}, {\n    'html': 'http://123.56.105.145/tubiao/q/',\n    'file': 'hiker://files/Jm/lm/q/',\n    'id': ['5.png','20.png', '35.png','70.png','125.png']\n}, {\n    'html': 'http://123.56.105.145/tubiao/music/',\n    'file': 'hiker://files/Jm/lm/music/',\n    'id': ['51.svg','82.svg','85.svg']\n}, {\n    'html': 'http://123.56.105.145/tubiao/movie/',\n    'file': 'hiker://files/Jm/lm/movie/',\n    'id': ['9.svg','22.svg']\n}, {\n    'html': 'http://123.56.105.145/tubiao/messy/',\n    'file': 'hiker://files/Jm/lm/messy/',\n    'id': ['123.svg','124.svg']\n}, {\n    'html': 'https://img.vinua.cn/images/',\n    'file': 'hiker://files/Jm/vinua/',\n    'id': ['vKY98.jpeg','vKkQb.jpeg']\n}];\n\nlet icon= icons.flatMap(h => h.id.map(id => ({\n    url: h.html + id,\n    file: h.file + id\n})));\n\nicon.forEach(j => {\n    if (!fileExist(j.file)) {saveImage(j.url, j.file);\n    }\n});\n\n"},{"pattern":2,"name":"全民k歌","code":"let kg = [];\nkg.push({\n    title:\"全民K歌\",\n    desc: \"输入全民K歌分享链接\",\n    url: $(\"\",\"输入全民K歌分享链接\").input(()=>{\n        if (input == \"\") {\n            return \"toast://输入链接后播放！\";\n        } else {\n            var api = \"https://xhl97.cn/tools/qmkg/kg_changba.php\"\n            var play = JSON.parse(post(api, {\n                headers: {\n                    \"Referer\": \"https://xhl97.cn/tools/qmkg/\"\n                },\n                body: {\n                    \"url\": input\n                }\n            }))\n            if (play.code == \"1\") {                \n                let ft=findItem(MY_RULE.title+\"kplay\");\n                updateItem(MY_RULE.title+\"kplay\",{\n                    extra:Object.assign({},ft.extra,{\n                        pageTitle:play.title\n                    })\n                })    \n                return play.url;\n            } else {\n                return \"toast://解析失败请输入正确链接，唱吧链接前边不能有文字以及空格！\";\n            }\n\n        }\n    }),\n    col_type: \"icon_small_4\",\n    extra: {\n        inheritTitle: false,\n        pageTitle:\"播放\",\n        id: MY_RULE.title + \"kplay\"\n    }\n})\nkg","status":false},{"status":false,"pattern":2,"name":"随机歌曲","code":"let gq = []\n\nfunction setHead(pic, text, desc, playUrl) {\n    putMyVar('url', playUrl);\n    updateItem(\"simplePlayer:pic\", {\n        title: text || '随机歌曲',\n        pic_url: pic || \"hiker://images/home_pic4\",\n        //url: pic || \"hiker://empty\"\n    });\n\n}\ngq.push({\n    title: '随机歌曲',\n    pic_url: \"https://hikerfans.com/tubiao/more/129.png\",\n    col_type: \"icon_round_4\",\n    url: $('#noLoading#').lazyRule((setHead) => {\n        let G = $.require(\"https://hikerfans.com/weisyr/js/GlobalVar.js\");\n        let audioSingle = G.moduleMyVar(\"audioSingle\", \"https://gitcode.net/liuzaoyue/hai/-/raw/master/jdbf.js\");        \n        let mode = getItem(\"mode\", \"热歌榜\");\n        let mid = getItem(\"mid\", \"\");\n        let songInfo = {};\n        let id = \"\";\n        let curl = \"\";        \n        function playAudio(url, info) {\n            let cid = id;\n            curl = url;\n           audioSingle.playNetwor(url, void 0, () => {\n log(info.name);               \n                setHead(info.picurl, info.name, info.artistsname, url);\n                toast(\"正在播放：\" + info.name);                              \n            });\n        }\n        function getSong() {\n            if (mode === \"自定义歌单ID\") {\n                return audioSingle.getRandomListSong(mid);\n            } else {\n                return audioSingle.getRandomSong(mode);\n            }\n        }\n             \n        \n         function playVip() {\n            try {\n                if (id) {\n                    let json = JSON.parse(fetch(\"https://api.xingzhige.com/API/NetEase_CloudMusic_new/?songid=\" + id + \"&br=2\"));\n                    playAudio(json.data.src, songInfo);\n                    return true;\n                }\n            } catch (e) {\n                return false;\n            }\n            return false;\n        }\n\n        function play() {\n            try {\n                songInfo = getSong();\n                id = songInfo.id;\n                audioSingle.id = songInfo.id;\n            } catch (e) {\n                clearItem(\"mid\");\n                clearItem(\"mode\");\n                toast(e.toString());\n                return;\n            }\n            playAudio(songInfo.url, songInfo);\n        }\nif (!audioSingle.hasPlayer()) {         \n   audioSingle.setCompletionListener(() => {\nlog(getItem(\"循环\", \"0\"));\n            if (getItem(\"循环\", \"0\") == 0) {\n\n                play();\n            } else {\n                playAudio(curl, songInfo);\n            }\n        });\n        audioSingle.setErrorListener(() => {\n            //toast(\"播放失败正在重新随机\");\n            if (!playVip()) {\n                play();\n            }\n        });\n        play();\n        return \"hiker://empty\";\n     }\n     if (audioSingle.hasPlayer()) {           audioSingle.startOrPause();\n        if (audioSingle.isPlaying()) {                \n            return \"toast://播放已开始\";\n            } else {\n            return \"toast://播放已停止\";\n            }\n        }   \n            \n       \n    }, setHead),\n    extra: {\n        id: \"simplePlayer:pic\",\n        longClick: [{\n            title: \"下一曲\",\n            js: $.toString((setHead) => {\n        let G = $.require(\"https://hikerfans.com/weisyr/js/GlobalVar.js\");\n        let audioSingle = G.moduleMyVar(\"audioSingle\", \"https://gitcode.net/liuzaoyue/hai/-/raw/master/jdbf.js\");        \n        let mode = getItem(\"mode\", \"热歌榜\");\n        let mid = getItem(\"mid\", \"\");\n        let songInfo = {};\n        let id = \"\";\n        let curl = \"\";        \n        function playAudio(url, info) {\n            let cid = id;\n            curl = url;\n           audioSingle.playNetwor(url, void 0, () => {\n log(info.name);               \n                setHead(info.picurl, info.name, info.artistsname, url);\n                toast(\"正在播放：\" + info.name);                              \n            });\n        }\n        function getSong() {\n            if (mode === \"自定义歌单ID\") {\n                return audioSingle.getRandomListSong(mid);\n            } else {\n                return audioSingle.getRandomSong(mode);\n            }\n        }\n             \n        \n         function playVip() {\n            try {\n                if (id) {\n                    let json = JSON.parse(fetch(\"https://api.xingzhige.com/API/NetEase_CloudMusic_new/?songid=\" + id + \"&br=2\"));\n                    playAudio(json.data.src, songInfo);\n                    return true;\n                }\n            } catch (e) {\n                return false;\n            }\n            return false;\n        }\n\n        function play() {\n            try {\n                songInfo = getSong();\n                id = songInfo.id;\n                audioSingle.id = songInfo.id;\n            } catch (e) {\n                clearItem(\"mid\");\n                clearItem(\"mode\");\n                toast(e.toString());\n                return;\n            }\n            playAudio(songInfo.url, songInfo);\n        }\naudioSingle.setCompletionListener(() => {            \n                if (getItem(\"循环\", \"0\") == 0) {\n\n                play();\n            } else {\n                playAudio(curl, songInfo);\n            }\n        });\n        audioSingle.setErrorListener(() => {\n            //toast(\"播放失败正在重新随机\");\n            if (!playVip()) {\n                play();\n            }\n        });\n        play();\n        return \"hiker://empty\";\n            }, setHead)\n        }, {\n            title: \"下载\",\n            js: $.toString(() => {\n                return 'download://' + getMyVar('url', '')\n            })\n        }, {\n                title: \"歌单\",\n                js: $.toString(() => {\n                    var list = [\"热歌榜\", \"新歌榜\", \"飙升榜\", \"抖音榜\", \"电音榜\", \"自定义歌单ID\"];\n\n                    return $(list, 1, '选择歌单', getItem('i', '-1')).select((list) => {\n                        let i = list.indexOf(input) + '';                        \n                        setItem('i', i);\n           \n        if (input === \"自定义歌单ID\") {\n                return $(getItem(\"mid\", \"\")).input(() => {\n                    if (!input) return \"toast://不能为空\";\n                    if (Number.isNaN(Number(input))) return \"toast://id为应纯数字\";\n                    setItem(\"mid\", input);\n                    setItem(\"mode\", \"自定义歌单ID\");\n                    return \"toast://设置完成切换下一首即可\";\n                });\n            } else {\n                setItem(\"mode\", input);\n            }\n            return \"toast://设置完成切换下一首即可\";\n                    }, list)\n                })\n            }, {\n                title: getItem('循环', '0')  == \"0\" ? \"随机播放\" : \"单曲循环\",\n                js: $.toString(() => {\n                    if (getItem('循环', '0') == 0) {\n                        setItem('循环', '1');\n                        refreshPage(false);\n                        toast('单曲循环')\n  } else {\n                        setItem('循环', '0');\n                        refreshPage(false);\n                        toast('随机播放');\n}                    \n})\n}]\n    }\n});\ngq\n"},{"name":"顺搜","mark":"海报","list":[{"status":true,"pattern":2,"name":"顺搜元素","code":"require('https://hikerfans.com/weisyr/顺搜_into.js');\n顺搜(250) //给个指定高度"}],"fold_status":false,"pattern":3},{"name":"天气","mark":"海报","list":[{"status":true,"pattern":2,"name":"天气播报","code":"let tq = [];\n\nArray.prototype.last = function() {\n    return this[this.length - 1];\n};\n\nfunction getCity() {\n    let url = \"https://www.ipshudi.com/\";\n    let ip = pdfh(fetch(url), \"input[name=ip]&&value\");\n    //log(ip)\n    let city = pdfh(fetch(url + ip), \"table&&tr:has(:matches(归属地))&&td,1&&span&&Text\");\n    //log(city)\n    return city.split(\" \").last();\n}\n\nfunction zero(s) {\n    return s < 10 ? '0' + s : s;\n};\nlet mydate = new Date();\nlet year = mydate.getFullYear(); //年\nlet month = mydate.getMonth() + 1; //月\nlet date = mydate.getDate(); //日\n/*let hour = mydate.getHours();//时\nlet minute = mydate.getMinutes();//分\nlet second = mydate.getSeconds();//秒*/\nlet day = new Array(\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\")[mydate.getDay()];\n\n//日历\nvar rl = ('hiker://files/Jm/file/日历.js');\ntry {\n    var cd_file = $.require(rl).date;\n} catch (e) {\n    let html = fetch('https://raw.gitmirror.com/jmeng123/files/main/日历.js');    \n    saveFile(rl, html);\n        var cd_file = $.require(rl).date;\n}\nlet cd = cd_file;\nlet cityid = getItem(\"city_id\", \"\");\nif (cityid == \"\") {\n    clearItem('地区')\n}\nvar 位置 = \"\" || getItem('地区', '');\nif (!位置) {\n    位置 = getCity().replace(\"市\", \"\");\n    setItem(\"地区\", 位置);\n}\n\nlet ID = getItem('播报员', '2');\n\nlet 文字天气 = getItem('开关', '开启');\nvar tq_img = getItem(\"tq_img\", \"\");\n//图片\nvar gif = ('hiker://files/Jm/png/gif.json');\nif (!fileExist(gif)) {\n    saveFile(gif, '[\"https://img.vinua.cn/images/zUzCy.gif\",\"https://img.vinua.cn/images/zUaai.gif\",\"https://img.vinua.cn/images/zUvu1.gif\",\"https://img.vinua.cn/images/aLhu2.gif\"]');\n}\nlet f_id = getItem('Js_jk', 'dongman');\nvar dizhi = getItem('di', 'hiker://files/Jm/png/' + f_id + '.json');\nif (!fileExist(dizhi)) {\n    saveFile(dizhi, '[]');\n}\neval('list=' + fetch(dizhi));\nvar Pic = getItem('Pic', 'list');\nlet imglist = list;\nlet max = imglist.length - 1;\nlet min = 0;\nlet num = Math.floor(Math.random() * (max - min + 1)) + min;\nvar showImg = imglist[num];\nvar image = getItem('fs', 'img');\nvar html = getItem('html', 'https://www.yuanxiapi.cn/api/img/?type=meinv&format=img');\n//log(imglist)\n\nvar url = \"\";\nif (tq_img == \"\") {\n    try {\n        if (image == 'img') {\n            url = (html + '#' + new Date().getTime());\n        } else if (image == 'url') {\n            url = fetch(html);\n        } else {\n            path = \".data.img\";\n            if (html.includes(\"@@\")) {\n                var temp = html.split(\"@@\");\n                html = temp[0];\n                path = temp[1];\n            }\n            //log(path)\n            json = JSON.parse(fetch(html));\n            eval(\"url=json\" + path);\n            if (url.startsWith(\"//\")) {\n                url = \"https:\" + url;\n            }\n            //log(url)\n        }\n    } catch (e) {\n        log(e.message)\n        log(\"报错\")\n        clearItem(\"fs\");\n        clearItem(\"html\");\n    }\n}\nlet imgs = getItem('img', url + '#.jpg');\nvar img = (Pic == 'list') ? imgs : (showImg == null ? imgs : showImg);\n\nvar wpath = \"hiker://files/cache/weather.json\";\nvar updata = {\n    天: 0,\n    时: 1,\n    分: 0,\n}\nvar updatatime = (updata.天 * 86400000) + (updata.时 * 3600000) + (updata.分 * 60000);\n\nvar cond = false;\nlet wpjson = readFile(wpath);\nif (wpjson != \"\") {\n    wpjson = JSON.parse(wpjson);\n    if (new Date().getTime() > wpjson[\"nextUpdateTime\"]) {\n        cond = true;\n    }\n    /*if(位置!=wpjson['city']){\n     cond=true;\n    }*/\n}\n//log(位置)\n\nfunction colorTitle(title, colors) {\n    var def = {\n        fc: '#ffffff',\n        bc: '#3F8ED0',\n    }\n    colors = Object.assign(def, colors);\n    return '<font color=\"' + colors.fc + '\"><span style=\"background-color: ' + colors.bc + '\">' + title + '</span></font>'\n}\n\nfunction dateFormat(time) {\n    let text = 'yyyy-MM-dd HH:mm:ss';\n    return $.dateFormat(time, text)\n}\n\nfunction repeatString(str, num) {\n    return str.repeat(num);\n}\n\nfunction replaceWithPatterns(text, patternList, replacementList) {\n    let replacedText = text;\n    for (let i = 0; i < patternList.length; i++) {\n        var pattern = patternList[i];\n        if (pattern.includes(\"::\")) {\n            var temp = pattern.split(\"::\");\n            try {\n                pattern = new RegExp(temp[0], temp[1]);\n            } catch {\n                pattern = new RegExp(temp[0]);\n            }\n        }\n        var replacement = replacementList[i];\n        if (pattern instanceof RegExp) { // 如果列表项是正则表达式\n            //log(\"正则\")\n            replacedText = replacedText.replace(pattern, replacement);\n        } else if (typeof pattern === 'string') { // 如果列表项是文本字符串\n            var regexPattern = pattern;\n            replacedText = replacedText.replace(regexPattern, replacement);\n        }\n    }\n    return replacedText;\n}\n\n\nvar tq_simple = getItem(\"tq_simple\", \"0\") == \"0\" ? false : true;\n\nfunction getqimage() {\n    var img = \"\";\n    if (tq_simple) {\n        var thtml = fetch(\"https://tianqi.moji.com/\" + (cityid != \"\" ? \"api/redirect/\" + cityid : \"\"), {})\n        //log(thtml)\n        img = pdfh(thtml, \".wea_weather&&img&&src\");\n    }\n    return img;\n}\n\n\nif (cityid == \"\") {\n    var item = JSON.parse(post(\"https://ssch.api.moji.com/citymanage/json/h5/searchCity\", {\n        body: {\n            keyWord: 位置,\n        }\n    })).city_list[0];\n    //log(item)\n    //setItem(\"city\",item.name);\n    cityid = item.cityId;\n    setItem(\"city_id\", String(item.cityId));\n}\nif (wpjson.cityid == undefined) {\n    cond = true;\n}\nif (wpjson.cityid != cityid) {\n    cond = true;\n}\n\n//log(cityid)\nif (wpjson == \"\" || cond) {\n    //log(\"天气缓存缓存 当前\" + JSON.stringify(updata) + '更新一次,' + dateFormat((new Date().getTime() + updatatime)));\n    //wpjson=JSON.parse(fetch(\"http://autodev.openspeech.cn/csp/api/v2.1/weather?openId=aiuicus&clientType=android&sign=android&city=\"+位置+\"&needMoreData=true&pageNo=1&pageSize=1\")).data.list[0];\n    var h = fetch(\"https://m.moji.com/\" + (cityid != \"\" ? \"api/redirect/\" + cityid : \"\"), {});\n\n    try {\n        var wartext = [];\n        var warning = pdfa(h, \".info_aqi&&li:not(:has([alt=aqi]))\").map(x => pdfh(x, \"Text\")).map((x) => {\n            var text = x.split(\" \")[0];\n            var color = x.split(\" \")[1].replace(\"色\", \"\");\n            switch (color) {\n                case \"蓝\":\n                    color = \"#4D7EF8\";\n                    break;\n                case \"黄\":\n                    color = \"#FFED2D\";\n                    break;\n                case \"橙\":\n                    color = \"#F78E1B\";\n                    break;\n                case \"红\":\n                    color = \"#F54B46\";\n                    break;\n                default:\n                    color = \"#FFFFFF\";\n            }\n            wartext.push(x);\n            return colorTitle(text, {\n                bc: color\n            })\n        });\n        wpjson = {\n            cityid: cityid,\n            img: getqimage(),\n            city: pdfh(h, \".city&&Text\"),\n            weather: pdfh(h, \"#info_wea&&Text\"),\n            temp: pdfh(h, \".info_about&&em&&Text\"),\n            airQuality: pdfh(h, \".info_aqi&&li:has([alt=aqi])&&Text\"),\n            wind: pdfh(h, \".info_about&&p&&Text\"),\n            warning: warning,\n            wartext: wartext,\n        }\n        //log(\"正常\")\n    } catch {}\n\n    wpjson[\"nextUpdateTime\"] = (new Date().getTime() + updatatime).toString();\n    wpjson[\"nextUpdateText\"] = dateFormat((new Date().getTime() + updatatime));\n    writeFile(wpath, JSON.stringify(wpjson));\n}\nif ((!wpjson.hasOwnProperty(\"img\") || wpjson[\"img\"] == \"\") && tq_img == \"simple\") {\n    wpjson.img = getqimage();\n    writeFile(wpath, JSON.stringify(wpjson));\n}\n\n//log(wpjson)\n\nlet warline = getItem(\"warline\", \"7:0\");\nvar 颜色 = getItem('文字', '#fd268a');\n\nvar weather = {\n    city: wpjson.city,\n    cond: wpjson.weather,\n    tmp: wpjson.temp,\n    airquality: wpjson.airQuality,\n    wind: wpjson.wind,\n    warning: wpjson.warning.length ? \"当前预警: \".fontcolor(颜色) + wpjson.warning.join(\" \") + \"\" : \"\",\n    wartext: wpjson.wartext.length ? \"当前预警: \" + wpjson.wartext.join(\" \") : \"\",\n}\n\nwarline = warline.split(\":\");\n\nvar fruit = [\"地区\", \"天气\", \"温度\", \"AQI\", \"日期\", \"农历\", \"风向\", \"预警\"];\nvar tq_shows = storage0.getItem(\"tq_shows\", fruit.map(() => \"1\"));\n\n\nvar tq_re = storage0.getItem(\"tq_re\", []);\n\nlet titles = [\n    '<font color=' + 颜色 + '>' + weather.city + '</font>',\n    '<small><font color=' + 颜色 + '>今日天气: (' + weather.cond + ')</font>',\n    '<font color=' + 颜色 + '>温度: (' + weather.tmp + '℃)</font>', '<font color=' + 颜色 + '>空气质量: (' + weather.airquality + ')</font>',\n    '<font color=' + 颜色 + '>日期: ' + year + '年' + zero(month) + '月' + zero(date) + '日</font>',\n    '<font color=' + 颜色 + '>农历: ' + cd + '\\t ' + day + '</font>',\n    '<font color=' + 颜色 + '>风向: ' + weather.wind + '</font><small>',\n];\n\n\nlet warning = repeatString(\"\\t\", warline[1]) + weather.warning;\n\nvar tq_titles = Object.assign([], titles)\nif (weather.warning != \"\") {\n    tq_titles.push(weather.warning)\n}\nstorage0.putMyVar(\"tq_titles\", tq_titles);\n\nif (Object.keys(tq_re).length > 0) {\n    function treplaceALL(title, params) {\n        if (params == undefined) {\n            return title;\n        }\n        title = replaceWithPatterns(title, params[\"regex\"], params[\"replace\"]);\n        return title;\n    }\n    fruit.filter(x => x != \"预警\").forEach((x, i) => {\n        titles[i] = treplaceALL(titles[i], tq_re[x])\n    })\n    warning = treplaceALL(warning, tq_re[\"预警\"])\n}\n\ntitles = titles.map(function(element, index) {\n    return tq_shows[index] == \"1\" ? titles[index] : \"\";\n});\n\n\nif (warning != \"\" && tq_shows[7] == \"1\") {\n    var le = titles.filter(x => x != \"\").length;\n    //log(le)\n    if (warline[0] == \"7\") {\n        if (le == warline[0]) {\n            titles[le] = warning + '</small>';\n        } else {\n            titles[warline[0]] = warning;\n        }\n    } else {\n        let ss = \"\";\n        let en = \"\";\n        if (warline[0] == \"6\" && tq_shows[6] == \"1\") {\n            [ss, end] = [\"\", \"</small>\"];\n        }\n        if (titles.length < warline[0]) {\n            titles[titles.length] = warning;\n        } else {\n            titles[warline[0]] = (titles[warline[0]] != undefined ? titles[warline[0]] : \"\") + ss + warning + en;\n        }\n    }\n}\n//log(titles.join(\"\\n\"))\n//log(weather)\n\nvar title = '““””' + titles.filter(x => x != \"\").join(\"\\n\");\n//log(titles)\n\nvar only_x5 = getItem(\"onlyx5\", \"0\") == \"0\" ? true : false;\n\nfunction lazyR(weather, mode) {\n    var txt = (weather.city + '，今天' + weather.cond + '，温度' + weather.tmp + '，空气质量' + weather.airquality + '，' + weather.wind.replace(/%/, \"\")) + '，' + weather.wartext;\n    //log(txt)\n    function playAudio(url) {\n        const MediaPlayer = android.media.MediaPlayer;\n        let mediaPlayer = new MediaPlayer();\n        try {\n            mediaPlayer.setDataSource(url);\n            mediaPlayer.prepareAsync();\n            mediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener({\n                onPrepared(mp) {\n                    mediaPlayer.start();\n                }\n            }));\n            mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener({\n                onCompletion(mp) {\n                    mediaPlayer.release();\n                    mediaPlayer = null;\n                }\n            }));\n        } catch (e) {\n            mediaPlayer.release();\n            mediaPlayer = null;\n            log(e.toString());\n        }\n    }\n    //直接播放网络视频链接，有可能播放失败还没有缓存，还是下载一下比较稳妥\n    function playNetworAudio(url) {\n        let path = \"hiker://files/_cache/\" + md5(url);\n        Promise.resolve().then(() => {\n            requireDownload(url, path);\n            playAudio(getPath(path).slice(7));\n        });\n    }\n\n    var url = JSON.parse(fetch('https://xiaoapi.cn/API/zs_tts.php?type=xunfei&id=' + getItem('播报员') + '&msg=' + txt)).tts;\n    let d = [];\n    d.push({\n        title: txt,\n        col_type: 'rich_text',\n    })\n    d.push({\n        col_type: \"x5_webview_single\",\n        desc: \"0\",\n        url: url,\n        extra: {\n            js: $.toString(() => {\n                fba.log(\"aa\")\n                let audio = document.querySelector('audio[controls][autoplay][name=\"media\"]');\n                audio.addEventListener('ended', function() {\n                    console.log('音频播放完成');\n                    let r = $$$().lazyRule(() => {\n                        back();\n                        //refreshPage();\n                    });\n                    fy_bridge_app.parseLazyRule(r);\n                });\n            })\n        }\n    })\n\n    if (mode == \"lazy\") {\n        //log(url)\n        let {\n            GM\n        } = $.require(\"https://raw.gitmirror.com/jmeng123/files/main/GlobalVarV3.js\")\n        let audioSingle = GM.defineModule(\"audioSingle\", \"audio?rule=简易播放器\");\n        if (!audioSingle.hasPlayer() || audioSingle.getLocalUrl(url) !== audioSingle.getCurrentUrl()) {\n            audioSingle.playNetwor(url);\n            //return \"toast://开始播放\";\n        }\n        if (audioSingle.hasPlayer()) {\n            //audioSingle.startOrPause();\n            return 'toast://正在播放';\n        }\n        //playNetworAudio(url);\n\n        //return 'toast://正在播报天气'\n        return 'toast://' + txt;\n    }\n    return setResult(d)\n}\nurl = $('hiker://empty#noLoading#').lazyRule(lazyR, weather, \"lazy\");\n\nvar tq_col = getItem(\"tq_col\", \"card_pic_1\");\n//log(tq_col)\nif (tq_img != \"\") {\n    if (tq_img.includes(\"@@\")) {\n        var temp = tq_img.split(\"@@\");\n        th = fetch(temp[0]);\n        tq_img = pdfh(th, temp[1]);\n    }\n    img = tq_img;\n}\n\nif ([\"text_icon\", \"avatar\"].includes(tq_col)) {\n    title = title.replace('““””', \"\");\n}\nif (tq_simple && wpjson[\"img\"]) {\n    img = wpjson[\"img\"];\n}\n\ntq.push({\n    col_type: tq_col,\n    title: 文字天气 == '开启' ? title : '',\n    desc: tq_col.includes(\"card\") ? \"0\" : \"\",\n    img: img,\n    url: url,\n    extra: {\n        //newWindow:true,\n        id: \"主页元素#天气播报\",\n        lineVisible: false,\n        pageTitle: '天气播报',\n        longClick: [{\n            title: '🔖文字:\\t' + (getItem('开关', '开启') == '开启' ? '开' : '关'),\n            js: $.toString(() => {\n                setItem('开关', getItem('开关', '开启') == '开启' ? '关闭' : '开启');\n                refreshPage(false);\n                toast('天气文字已' + (getItem('开关', '开启') == '开启' ? '打开' : '关闭'));\n            }),\n        }, {\n            title: '🔄切换',\n            js: $.toString(() => {\n                return $(['天气位置', '天气播报', '图片接口', '文字颜色', '本地随机', \"预警所在行\", \"按钮样式\", \"选择显示\", \"极简模式:\" + (getItem(\"tq_simple\", \"0\") == \"0\" ? \"关\" : \"开\"), \"文本替换\", \"重置设定\"], 2, '请选择').select((index) => {\n                    const hikerPop = $.require(\"https://raw.gitmirror.com/jmeng123/files/main/hikerPop.js\");\n                    if (input == '天气位置') {\n                        return $('', '想要更换的地区位置，空则按定位').input(() => {\n                            //setItem('地区', input);\n                            if (input == '') {\n                                clearItem(\"city_id\");\n                                refreshPage(false);\n                                return 'toast://按定位';\n                            }\n                            var citylist = JSON.parse(post(\"https://ssch.api.moji.com/citymanage/json/h5/searchCity\", {\n                                body: {\n                                    keyWord: input,\n                                }\n                            })).city_list;\n                            //log(citylist)\n                            var select = citylist.map(x => x.name + \",\" + x.pname);\n                            return showSelectOptions({\n                                title: \"请确定\",\n                                col: 1,\n                                options: select,\n                                js: $.toString((citylist) => {\n                                    //log(citylist[MY_INDEX]);\n                                    setItem(\"city_id\", String(citylist[MY_INDEX].cityId));\n                                    refreshPage(false);\n                                    return 'toast://已切换地址为' + input;\n                                }, citylist)\n                            });\n                            refreshPage(false);\n                            return 'toast://已切换地址为' + input;\n                        })\n\n                    } else if (input == '天气播报') {\n                        let title = [\"七哥 男声\", \"子晴 女声\", \"一菲 女声\", \"小露 女声\", \"小鹏 男声\", \"小新 男声\", \"小雪 女声\", \"超哥 男声\", \"小媛 女声\", \"叶子 女声\", \"千雪 女声\", \"小忠 男声\", \"万叔 男声\", \"虫虫 女声\", \"楠楠 男童\", \"晓璇 女声\", \"芳芳 女童\", \"嘉嘉 女声\", \"小倩 女声\", \"英文 女声\"];\n                        let id = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"];\n\n                        var list = title.map((item, index) => {\n                            return {\n                                name: item,\n                                id: id[index]\n                            };\n                        });\n                        var name = list.map(list => list.name);\n                        return $(name, 3, '请选择').select((list) => {\n                            let o = list.findIndex(list => list.name == input);\n                            let url = list[o].id;\n                            setItem('播报员', url);\n                            refreshPage(false);\n                            return 'toast://已更换播报员'\n                        }, list)\n\n                    } else if (input == '图片接口') {\n                        return $(['图片', 'json', 'url'], 3, '请选择').select(() => {\n                            if (input == '图片') {\n                                var t_jpg = getItem('t_jpg', '');\n                                return $(t_jpg, '想要更换的图片接口地址，\\n支持网络api和本地图片').input(() => {\n                                    if (!input) return \"toast://不能为空\";\n                                    let txt = input;\n                                    clearItem('img');\n                                    clearItem('fs');\n                                    clearItem('Pic');\n                                    setItem('html', txt);\n                                    setItem('t_jpg', txt);\n                                    refreshPage(false);\n                                    return 'toast://已更换接口';\n                                })\n                            } else if (input == 'json') {\n                                var t_json = getItem('t_json', '');\n                                return $(t_json, '想要更换的json图片接口地址\\n默认数据为data.img\\n数据不同可 接口@@数据').input(() => {\n                                    if (!input) return \"toast://不能为空\";\n                                    let txt = input;\n                                    clearItem('img');\n                                    setItem('fs', 'json');\n                                    clearItem('Pic');\n                                    setItem('html', txt);\n                                    setItem('t_json', txt);\n                                    refreshPage(false);\n                                    return 'toast://已更换接口';\n                                })\n                            } else {\n                                var t_url = getItem('t_url', '');\n                                return $(t_url, '想要更换的图片接口地址，fetch(url)获取的图片为url链接。').input(() => {\n                                    if (!input) return \"toast://不能为空\";\n                                    let txt = input;\n                                    clearItem('img');\n                                    setItem('fs', 'url');\n                                    clearItem('Pic');\n                                    setItem('html', txt);\n                                    setItem('t_url', txt);\n                                    refreshPage(false);\n                                    return 'toast://已更换接口';\n                                })\n                            }\n                        })\n\n                    } else if (input == '文字颜色') {\n                        var ys = getItem('ys_input', '');\n                        return $(ys, '想要更换的颜色代码\\n例如：#fd268a').input(() => {\n                            if (!input) return \"toast://不能为空\";\n                            let txt = input;\n                            setItem('文字', txt);\n                            setItem('ys_input', txt);\n                            refreshPage(false);\n                            return 'toast://已更换文字颜色';\n                        })\n                    } else if (input == '本地随机') {\n                        let title = [\"动漫\", \"美女\", \"风景\", \"汽车\", \"动图\"];\n                        let id = [\"dongman\", \"meinv\", \"fengjing\", \"qiche\", \"gif\"];\n                        var list = title.map((item, index) => {\n                            return {\n                                name: item,\n                                id: id[index]\n                            };\n                        });\n                        var name = list.map(j => j.name);\n                        return $(name, 2, '❗️分组无图片则默认').select((list) => {\n                            let t = list.findIndex(j => j.name == input);\n                            let id = list[t].id;\n                            let q = getItem('Pic') == 'gif' ? 'gif' : 'sj';\n                            let f = getItem('Js_jk') == 'gif' ? 'hiker://files/Jm/png/gif.json' : 'hiker://files/Jm/png/' + id + '.json';\n                            setItem('Pic', q);\n                            setItem('di', f);\n                            setItem('Js_jk', id);\n                            refreshPage(false);\n                            return 'toast://已切换随机' + input\n                        }, list)\n                    } else if (input == \"预警所在行\") {\n                        return $(getItem(\"warline\", \"7:0\"), '预警所在行默认7:0 后面是\\\\t').input(() => {\n                            var result;\n                            var line = 0;\n                            if (input.includes(\":\")) {\n                                var temp = input.split(\":\");\n                                input = temp[0];\n                                line = temp[1];\n                            }\n                            if (isNaN(input)) {\n                                result = 7;\n                            } else {\n                                result = Number(input);\n                            }\n                            if (result > 7) {\n                                result = 7;\n                            }\n                            if (isNaN(line)) {\n                                line = 0;\n                            }\n                            result = result + \":\" + line;\n                            setItem('warline', String(result));\n                            refreshPage(false);\n                            return \"toast://所在行\" + result;\n                        })\n                    } else if (input.includes(\"x5模式\")) {\n                        var only_x5 = getItem(\"onlyx5\", \"0\") == \"0\" ? true : false;\n                        setItem(\"onlyx5\", only_x5 ? \"1\" : \"0\");\n                        refreshPage(false);\n                    } else if (input == \"按钮样式\") {\n                        hikerPop.inputTwoRow({\n                            titleHint: \"样式 默认card_pic_1\",\n                            titleDefault: getItem(\"tq_col\", \"card_pic_1\"),\n                            urlHint: \"图片 空使用接口图片\",\n                            urlDefault: getItem(\"tq_img\", \"\"),\n                            noAutoSoft: true, //不自动打开输入法\n                            title: \"按钮样式\",\n                            //hideCancel: true,\n                            confirm(s1, s2) {\n                                setItem(\"tq_col\", s1);\n                                setItem(\"tq_img\", s2);\n                                refreshPage(false);\n                                return \"toast://样式\" + s1 + \" 图片\" + s2;\n                            },\n                            cancel() {\n                                return \"toast://你取消了\"\n                            }\n                        });\n                    } else if (input == \"选择显示\") {\n                        let checkedName = [];\n                        var fruit = [\"地区\", \"天气\", \"温度\", \"日期\", \"农历\", \"AQI\", \"风向\", \"预警\"];\n                        var tq_shows = storage0.getItem(\"tq_shows\", fruit.map(() => \"1\"));\n                        tq_shows = tq_shows.reduce(function(acc, element, index) {\n                            if (element === \"1\") {\n                                acc.push(index);\n                            }\n                            return acc;\n                        }, []);\n                        //log(tq_shows)\n\n                        hikerPop.multiChoice({\n                            title: \"选择需要显示的内容\",\n                            options: fruit,\n                            checkedIndexs: tq_shows,\n                            onChoice(i, isChecked) {\n                                //log(i + \":\" + isChecked);\n                            },\n                            rightTitle: \"确认\",\n                            rightClick(options, checked) {\n                                toast(\"你选了：\" + options.filter((v, i) => checked[i]).join(\",\"));\n                                options.map((x, i) => {\n                                    if (checked[i]) {\n                                        checkedName.push(\"1\");\n                                    } else {\n                                        checkedName.push(\"0\");\n                                    }\n                                })\n                                //log(checkedName)\n                                storage0.setItem(\"tq_shows\", checkedName);\n                                refreshPage(false);\n                            },\n                            leftTitle: \"全选\",\n                            leftClick() {\n                                toast(\"全选\");\n                                storage0.setItem(\"tq_shows\", fruit.map(() => \"1\"));\n                                refreshPage(false);\n                            },\n                            centerTitle: \"取消\",\n                        });\n                    } else if (input.includes(\"极简模式\")) {\n                        var simple = getItem(\"tq_simple\", \"0\") == \"0\" ? false : true;\n                        if (simple) {\n                            setItem(\"tq_simple\", \"0\");\n                            clearItem(\"tq_img\");\n                            clearItem(\"tq_shows\");\n                            var obj = storage0.getItem(\"tq_re\", {});\n                            delete obj[\"温度\"];\n                            storage0.setItem(\"tq_re\", obj);\n                        }\n                        if (!simple) {\n                            let all_cols = [''].concat(getColTypes());\n                            all_cols = all_cols.filter(x =>\n                                /(text_|flex|avatar|card|icon).*/.test(x) && x != \"icon_1_search\");\n                            return $(all_cols, 2, '请选择').select(() => {\n                                setItem(\"tq_img\", \"simple\");\n                                setItem(\"tq_simple\", \"1\");\n                                setItem(\"tq_col\", input);\n                                var obj = storage0.getItem(\"tq_re\", {});\n                                obj[\"温度\"] = {\n                                    \"regex\": [\"温度: \\\\((.*?)\\\\)::g\"],\n                                    \"replace\": [\"$1\"],\n                                    \"value\": [\"温度: \\\\((.*?)\\\\)::g||$1\"]\n                                }\n                                storage0.setItem(\"tq_re\", obj);\n                                storage0.setItem(\"tq_shows\", [\"0\", \"0\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\"]);\n                                refreshPage(false);\n                            })\n                        }\n                        refreshPage(false);\n                        return \"toast://已\" + (simple ? \"关闭\" : \"开启\") + \"极简模式\";\n                    } else if (input == \"文本替换\") {\n                        return $(\"hiker://empty\").rule(() => {\n                            var d = [];\n                            var tq_titles = storage0.getMyVar(\"tq_titles\", []);\n                            var obj = {};\n                            var list = [\"地区\", \"天气\", \"温度\", \"AQI\", \"日期\", \"农历\", \"风向\", \"预警\"]\n                            //var tq_re=storage0.getItem(\"tq_re\",list.map(()=>{}));\n\n                            list.forEach(function(item) {\n                                obj[item] = {\n                                    regex: [],\n                                    replace: [],\n                                    value: [],\n                                };\n                            });\n                            obj = storage0.getItem(\"tq_re\", obj);\n                            obj = storage0.getMyVar(\"tq_re\", obj);\n                            list.forEach(x => {\n                                if (!obj.hasOwnProperty(x)) {\n                                    obj[x] = {\n                                        regex: [],\n                                        replace: [],\n                                        value: [],\n                                    };\n                                }\n                            })\n                            let titles = tq_titles;\n\n                            function treplaceALL(title, params) {\n                                if (params == undefined) {\n                                    return title;\n                                }\n                                title = replaceWithPatterns(title, params[\"regex\"], params[\"replace\"]);\n                                return title;\n                            }\n                            list.filter(x => x != \"预警\").forEach((x, i) => {\n                                titles[i] = treplaceALL(titles[i], obj[x])\n                            })\n                            titles[7] = treplaceALL(titles[7], obj[\"预警\"])\n                            d.push({\n                                title: '““””' + titles.join(\"\\n\"),\n                                desc: '0',\n                                img: \"http://pic.qqbizhi.com/allimg/202310/13359zh98bhoss7qask1_view.jpg\",\n                                col_type: 'card_pic_1',\n                                url: 'hiker://empty'\n                            })\n\n                            list.forEach((e, i) => {\n                                d.push({\n                                    title: e,\n                                    desc: \"查找||替换内容 一行一个 ::g正则\",\n                                    col_type: \"input\",\n                                    url: $.toString((obj, e) => {\n                                        var value = input.split(/[\\r\\n]/).filter(x => x != \"\");\n                                        //log(value)\n                                        obj[e][\"value\"] = value;\n                                        var regexlist = [];\n                                        var replacelist = [];\n                                        value.forEach(function(item) {\n                                            var parts = item.split(\"||\");\n                                            regexlist.push(parts[0] || item);\n                                            replacelist.push(parts[1] || \"\");\n                                        });\n                                        obj[e][\"regex\"] = regexlist;\n                                        obj[e][\"replace\"] = replacelist;\n                                        storage0.putMyVar(\"tq_re\", obj)\n                                        refreshPage();\n                                    }, obj, e),\n                                    extra: {\n                                        height: -1,\n                                        type: \"textarea\",\n                                        defaultValue: obj[e][\"value\"].join(\"\\r\\n\")\n                                    }\n                                })\n                            })\n                            d.push({\n                                title: \"““””\" + \"<small>清空\".fontcolor(\"grey\") + \"</small>\",\n                                col_type: \"text_center_1\",\n                                url: $(\"#noLoading#\").lazyRule(() => {\n                                    clearItem(\"tq_re\");\n                                    clearMyVar(\"tq_re\");\n                                    refreshPage();\n                                    return \"hiker://empty\";\n                                }),\n                                extra: {\n                                    lineVisible: false,\n                                }\n                            }, {\n                                title: '““””<small>确认</small>',\n                                col_type: 'text_2',\n                                url: $(\"#noLoading#\").lazyRule((obj) => {\n                                    clearMyVar(\"tq_re\");\n                                    storage0.setItem(\"tq_re\", obj);\n                                    back();\n                                    return \"hiker://empty\";\n                                }, obj),\n                                extra: {\n                                    lineVisible: false,\n                                }\n                            }, {\n                                title: '““””<small>取消</small>',\n                                col_type: 'text_2',\n                                url: $(\"#noLoading#\").lazyRule(() => {\n                                    clearMyVar(\"tq_re\");\n                                    refreshPage();\n                                    return \"hiker://empty\";\n                                }),\n                                extra: {\n                                    lineVisible: false,\n                                }\n                            })\n\n                            function replaceWithPatterns(text, patternList, replacementList) {\n                                let replacedText = text;\n                                for (let i = 0; i < patternList.length; i++) {\n                                    var pattern = patternList[i];\n                                    if (pattern.includes(\"::\")) {\n                                        var temp = pattern.split(\"::\");\n                                        try {\n                                            pattern = new RegExp(temp[0], temp[1]);\n                                        } catch {\n                                            pattern = new RegExp(temp[0]);\n                                        }\n                                    }\n                                    var replacement = replacementList[i];\n                                    if (pattern instanceof RegExp) { // 如果列表项是正则表达式\n                                        //log(\"正则\")\n                                        replacedText = replacedText.replace(pattern, replacement);\n                                    } else if (typeof pattern === 'string') { // 如果列表项是文本字符串\n                                        var regexPattern = pattern;\n                                        replacedText = replacedText.replace(regexPattern, replacement);\n                                    }\n                                }\n                                return replacedText;\n                            }\n\n                            setResult(d);\n                        })\n                    } else if (input == \"重置设定\") {\n                        clearItem(\"warline\");\n                        clearItem(\"tq_col\");\n                        clearItem(\"tq_img\");\n                        clearItem(\"tq_simple\");\n                        clearItem(\"tq_shows\");\n                        clearItem(\"tq_re\");\n                        refreshPage(false);\n                        return \"hiker://empty\";\n                    }\n                })\n            })\n        }, {\n            title: '🖼添加',\n            js: $.toString((img) => {\n                let title = [\"动漫\", \"美女\", \"风景\", \"汽车\", \"动图\"];\n                let id = [\"dongman\", \"meinv\", \"fengjing\", \"qiche\", \"gif\"];\n                var list = title.map((item, index) => {\n                    return {\n                        name: item,\n                        id: id[index]\n                    };\n                });\n                var name = list.map(j => j.name);\n                return $(name, 2, '添加到').select((img, list) => {\n                    let a = list.findIndex(j => j.name == input);\n                    let id = list[a].id;\n                    let time = new Date().getTime();\n                    let url = input === '动图' ? ('hiker://files/Jm/png/gif/' + time + '.gif') : ('hiker://files/Jm/png/' + id + '/' + time + '.png');\n                    let jsonPath = 'hiker://files/Jm/png/' + id + '.json';\n                    let data = JSON.parse(request(jsonPath));\n                    data = data.concat(url);\n                    saveFile(jsonPath, JSON.stringify(data));\n                    saveImage(img, url);\n                    setItem('Js_jk', id);\n                    return 'toast://已添加到' + input + '分组';\n                }, img, list)\n            }, img)\n        }, {\n            title: '📌锁定',\n            js: $.toString((img, showImg) => {\n                if (showImg) {\n                    setItem('img', showImg);\n                    clearItem('Pic');\n                    return 'toast://已锁定'\n\n                } else {\n                    let url = ('hiker://files/Jm/png/cache.png');\n                    saveImage(img, url);\n                    setItem('img', url);\n                    clearItem('Pic');\n                    return 'toast://已锁定'\n                }\n            }, img, showImg)\n        }, {\n            title: '🔀随机',\n            js: $.toString(() => {\n                clearItem('html');\n                clearItem('img');\n                clearItem('fs');\n                clearItem('di');\n                clearItem('Pic');\n                deleteFile('hiker://files/Jm/png/cache.png');\n                refreshPage(false);\n                return 'toast://已恢复随机'\n            })\n        }, {\n            title: '❎️删除',\n            js: $.toString((showImg) => {\n                let url = ('hiker://files/Jm/png/' + getItem('Js_jk') + '.json');\n                Pic = JSON.parse(request(url));\n                let indexToRemove = Pic.indexOf(showImg);\n                let removedElements = Pic.splice(indexToRemove, 1);\n                saveFile(url, JSON.stringify(Pic));\n                deleteFile(showImg);\n                refreshPage(false);\n                return 'toast://删除成功~'\n            }, showImg)\n        }, {\n            title: '🛡管理',\n            js: $.toString(() => {\n                return $('hiker://empty#noRecordHistory#').rule(() => {\n                    setPageTitle('随机图片管理');\n                    let d = [];\n                    var url = 'hiker://files/Jm/png/' + getItem('Js_jk') + '.json';\n\n                    d.push({\n                        title: '添加',\n                        col_type: 'input',\n                        desc: '请输入图片链接/本地图片路径',\n                        url: $.toString((url) => {\n                            if (!input) return \"toast://请输入图片链接\";\n                            let png_list = JSON.parse(request(url));\n                            png_list = png_list.concat(input);\n                            saveFile(url, JSON.stringify(png_list));\n                            refreshPage(false);\n                            return 'toast://添加成功';\n                        }, url)\n                    });\n                    let title = [\"动漫\", \"美女\", \"风景\", \"汽车\", \"动图\"];\n                    let id = [\"dongman\", \"meinv\", \"fengjing\", \"qiche\", \"gif\"];\n                    var list = title.map((item, index) => {\n                        return {\n                            name: item,\n                            id: id[index]\n                        };\n                    });\n                    list.map(j => {\n                        d.push({\n                            title: getItem('Js_jk') == j.id ? '‘‘’’<font color=#fd268a>' + j.name + '</font>' : j.name,\n                            col_type: 'scroll_button',\n                            url: $('#noLoading#').lazyRule((j) => {\n                                let url = 'hiker://files/Jm/png/' + j.id + '.json';\n                                if (!fileExist(url)) {\n                                    saveFile(url, '[]');\n                                }\n                                setItem('Js_jk', j.id);\n                                refreshPage(false);\n                                return 'hiker://empty';\n                            }, j),\n                            extra: {\n                                longClick: [{\n                                    title: '♻️重置',\n                                    js: $.toString((j) => {\n                                        let url = 'hiker://files/Jm/png/' + j.id + '.json';\n                                        deleteFile(url);\n                                        back(true);\n                                        return 'toast://已重置';\n                                    }, j)\n                                }],\n                            }\n                        });\n                    });\n                    try {\n                        Pic = JSON.parse(request(url));\n                    } catch {\n                        Pic = '';\n                    }\n                    index = 0;\n                    for (var i = 0; i < Pic.length; i++) {\n                        var img = Pic[i];\n                        d.push({\n                            title: index.toString(),\n                            url: $(['编辑', '查看', '删除'], 3, '请选择').select((url, index, img) => {\n                                if (input == '编辑') {\n                                    return $(img, '想要更换的图片链接').input((url, index) => {\n                                        Pic = JSON.parse(request(url));\n                                        Pic[index] = input;\n                                        saveFile(url, JSON.stringify(Pic));\n                                        refreshPage(false);\n                                        return 'toast://更改成功~'\n                                    }, url, index)\n                                } else if (input == '查看') {\n                                    let jpg = getPath(img);\n                                    return jpg + '#.jpg'\n\n                                } else {\n                                    Pic = JSON.parse(request(url));\n                                    Pic.splice(index, 1);\n                                    saveFile(url, JSON.stringify(Pic));\n                                    deleteFile(img);\n                                    refreshPage(false);\n                                    return 'toast://删除成功~'\n                                }\n                            }, url, index, img),\n                            col_type: 'movie_2',\n                            pic: img,\n                        });\n                        index++;\n                    }\n                    setResult(d);\n                })\n            })\n        }],\n    }\n})\ntq"}],"fold_status":true,"pattern":3},{"name":"豆瓣","mark":"海报","list":[{"status":true,"pattern":2,"name":"豆瓣海报x5改","code":"let dbarr = [];\nvar r = $.require(\"https://gitee.com/zetalpha/hikerview/raw/master/global/js/x5ui.js\", undefined, 24)\nvar setpage = $.toString(() => {\n    var dbobj = {\n        type: {\n            title: '类型',\n            select: {\n                \"0\": \"电影\",\n                \"1\": \"电视剧\",\n                \"2\": \"动漫\"\n            },\n            type: 'text_1',\n            tips: '',\n            value: \"0\",\n        },\n        countries: {\n            title: '区域',\n            select: [\"\", \"中国大陆\", \"中国香港\", \"中国台湾\", \"日本\", \"韩国\", \"美国\"],\n            type: 'input',\n            tips: '',\n            value: \"\",\n        },\n        year: {\n            title: '年份',\n            desc: '输入年份比如2020,2021',\n            type: 'input',\n            value: \"\",\n        },\n        sort: {\n            title: '排序',\n            select: {\n                \"T\": \"按热度排序\",\n                \"R\": \"按时间排序\",\n                \"S\": \"按评分排序\",\n                \"U\": \"按近期热门\"\n            },\n            tips: '默认近期热门',\n            type: 'text_1',\n            value: \"U\",\n        }\n    }\n\n    Object.keys(dbobj).forEach(x => {\n        function selectfunc(selects, key, obj) {\n            if (selects.length == 0) {\n                if (input == \"全部\") {\n                    input = \"\";\n                }\n                setItem(\"db_\" + key, input);\n                refreshPage(false);\n                return \"hiker://empty\";\n            }\n            if (obj.type == \"input\") {\n                selects.unshift(input);\n            }\n            let db = getItem(\"db_\" + key, obj.value);\n            selects = selects.map((it) => {\n                return it.split(\":\")[1] === db ? '➡️' + it : it;\n            });\n\n            return $(selects, 1, obj.tips)\n                .select((k) => {\n                    input = input.replace(\"➡️\", \"\");\n                    if (input.includes(\":\")) {\n                        input = input.split(\":\")[1];\n                    }\n                    if (input == \"全部\") {\n                        input = \"\";\n                    }\n                    log(input);\n                    setItem(\"db_\" + k, input);\n                    refreshPage(false);\n                    return 'hiker://empty';\n                }, key)\n        }\n        let def = getItem(\"db_\" + x, dbobj[x].value);\n        //log(def)\n        var select = [];\n        if (dbobj[x].select) {\n            if (dbobj[x].select.constructor == Object) {\n                select = Object.entries(dbobj[x].select).map(([key, value]) => value+':'+key);\n\n                def = dbobj[x].select[def];\n            }\n            if (dbobj[x].select.constructor == Array) {\n                select = dbobj[x].select;\n            }\n        }\n        if (def == \"\") {\n            def = \"全部\";\n        } else {\n            def = def;\n        }\n        let title = dbobj[x].title;\n        let url = \"hiker://empty\";\n        if (dbobj[x].type.includes(\"text\")) {\n            url = $(\"#noLoading#\").lazyRule(selectfunc, select, x, dbobj[x]);\n            title = dbobj[x].title + ':' + def;\n        }\n        if (dbobj[x].type == \"input\") {\n            url = $.toString(selectfunc, select, x, dbobj[x]);\n            title = dbobj[x].title;\n        }\n\n        d.push({\n            title: title,\n            desc: dbobj[x].desc,\n            col_type: dbobj[x].type,\n            url: url,\n            extra: {\n                lineVisible: false,\n                defaultValue: def,\n            }\n        })\n    })\n\n    /*d.push({\n        title: '设置',\n        img: 'https://i2.100024.xyz/2023/04/26/u04uxn.webp',\n        col_type: 'avatar',\n        url: 'hiker://page/settingPage?rule=青豆'\n    })*/\n})\n\n\nlet db_dict = {\n    \"countries\": getItem(\"db_countries\", \"\"),\n    \"sort\": getItem(\"db_sort\", \"U\"),\n    \"year_range\": getItem(\"db_year\", \"\"),\n}\n\nfunction compareObjects(obj1, obj2) {\n    var keys1 = Object.keys(obj1).sort();\n    var keys2 = Object.keys(obj2).sort();\n    var index = keys1.indexOf('time');\n    if (index !== -1) {\n        keys1.splice(index, 1);\n    }\n    index = keys2.indexOf('time');\n    if (index !== -1) {\n        keys2.splice(index, 1);\n    }\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (var i = 0; i < keys1.length; i++) {\n        var key = keys1[i];\n        if (obj1[key] !== obj2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlet db_types = [\"movie\", \"tv\", \"tv\"];\nlet db_tp = [\"电影\", \"电视剧\", \"动漫\"];\nlet nums=[0,20,40,60,80,100];\n\nlet DOUBAN_URL = 'https://movie.douban.com/j/new_search_subjects?range=0,10&start=0&tags=' + db_tp[getItem(\"db_type\", \"0\")] + '&' + Object.keys(db_dict).map(function(key) {\n    return key + \"=\" + db_dict[key]\n}).join(\"&\");\n\n//log(DOUBAN_URL)\n\ndb_dict['tags'] = getItem(\"db_type\", \"0\");\ndb_dict['time'] = (new Date().getTime() + 86400000).toString();\n\nlet path_data = \"hiker://files/cache/\" + MY_RULE.title + \"ddouban_data.txt\";\nlet path_date = \"hiker://files/cache/\" + MY_RULE.title + \"ddouban_date.txt\";\nlet result = [];\nlet db_data = readFile(path_data);\nlet db_date = readFile(path_date);\nif (db_date != \"\") {\n    db_date = JSON.parse(db_date)\n}\nlet now_date = new Date().getTime();\nlet db_re = false;\n//log(now_date>db_date.time)\nif (now_date > db_date.time) {\n    db_re = true;\n}\nif (!compareObjects(db_dict, db_date)) {\n    db_re = true;\n}\nif (db_data == \"\" || db_re) {\n    //log('download')\n    db_data = fetch(DOUBAN_URL);\n    writeFile(path_data, db_data);\n    writeFile(path_date, JSON.stringify(db_dict));\n    db_data = JSON.parse(db_data);\n} else {\n    db_data = JSON.parse(db_data);\n}\n\n\nif (db_data.hasOwnProperty(\"data\")) {\n    result = db_data.data.map(x => {\n        return {\n            title: x.title,\n            img: x.cover,\n            url: 'hiker://page/Sdetail#noHistory##immersiveTheme#?rule=青豆&id=' + x.id + '&type=' + db_types[db_dict[\"tags\"]],\n        }\n    })\n}\nif (result.length == 0) {\n    dbarr.push({\n        title: '当前选择无结果',\n        col_type: 'text_center_1',\n        url: $(\"#noLoading#\").lazyRule(() => {\n            clearItem(\"db_type\");\n            clearItem(\"db_countries\");\n            clearItem(\"db_year\");\n            clearItem(\"db_sort\");\n            refreshPage();\n            return 'hiker://empty';\n        })\n    })\n}\n\nr.show(dbarr, result, {\n    title: '青豆',\n    url: \"{url}\",\n    params:{\n      pages:false\n    },\n    mark: \"\",\n}, {\n    x5plusRule: setpage\n    //x5ui: 'file:///storage/emulated/0/Download/web/hikerview/global/js/x5ui.js',\n    //x5f: \"file:///storage/emulated/0/Download/web/hikerview/global/html/SlideX.html\",\n})\n\ndbarr;"}],"fold_status":false,"pattern":3},{"name":"轮播","mark":"海报","list":[{"status":true,"pattern":2,"name":"轮播元素","code":"let d = [];\nrc('https://gitlab.com/liuzaoyue/l/-/raw/main/%E8%BD%AE%E6%92%AD.js', 24);\nbanner(d, arr, 3000, 's1')"}],"fold_status":false,"pattern":3},{"name":"视频","mark":"海报","list":[{"status":true,"pattern":2,"name":"视频海报","code":"putVar('小程序名', MY_RULE.title);\n\nputVar(MY_RULE.title + '视频高度', '168');\nputVar(MY_RULE.title + '视频宽度', '93%');\n//最大100%\nputVar(MY_RULE.title + \"视频圆角\", '15');//0是直角\nvar 本地 = getPath('hiker://files/yuan/videoCarousel.html');\nif (!fileExist(本地)) {\n    confirm({\n        title: '导入',\n        content: '检测到你没有本地文件，是否导入',\n        confirm: $.toString((本地) => {\n            writeFile(本地, fetch('https://gitlab.com/liuzaoyue/l/-/raw/main/videoCarousel.html'));\n            refreshPage(false);\n        }, 本地),\n        cancel: $.toString(() => {})\n    });\n};\n[{\n            col_type: 'x5_webview_single',\n            url: 本地,\n            desc: 'list&&' + getVar(MY_RULE.title + '视频高度', 'video'),\n            extra: {                \n            autoPlay: true,                \n            showProgress: false\n          }\n}]"}],"fold_status":false,"pattern":3},{"name":"一言","mark":"一言","list":[{"status":true,"pattern":2,"name":"一言_日历","code":"function zero(s) {\n    return s < 10 ? '0' + s : s;\n};\nlet mydate = new Date();\nlet year = mydate.getFullYear(); //年\nlet month = mydate.getMonth() + 1; //月\nlet date = mydate.getDate(); //日\n/*let hour = mydate.getHours();//时\nlet minute = mydate.getMinutes();//分\nlet second = mydate.getSeconds();//秒*/\nlet day = new Array(\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\")[mydate.getDay()];\n\n//日历\nvar rl = ('hiker://files/Jm/file/日历.js');\ntry {\n    var cd_file = $.require(rl).date;\n} catch (e) {\n    let html = fetch('https://raw.gitmirror.com/jmeng123/files/main/日历.js');\n    saveFile(rl, html);    \n    var cd_file = $.require(rl).date;\n}\nlet cd = cd_file;\nlet 显示 = getItem('title', '日历');\nlet getRandomColor = function() {   \n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).slice(-6);  \n}  \nvar 日历 = ('““””<font color=' + getRandomColor() + '>⏰️\\t' + year + '年' + zero(month) + '月' + zero(date) + '日 ' + cd + '  ' + day + '</font>');\n\ntry {\n    var dizhi = ('hiker://files/Jm/yiyan.json');\n    if (!fileExist(dizhi)) {\n        saveFile('hiker://files/Jm/yiyan.json', '[\"疏影横斜水清浅，暗香浮动月黄昏。\",\"和风细动帘帷暖，清露微凝枕簟凉。\",\"梨花满院飘香雪，高楼夜静风筝咽。\",\"荻花秋，潇湘夜，橘洲佳景如屏画。\",\"暗柳萧萧，飞星冉冉，夜久知秋信。\",\"红衣入桨，青灯摇浪，微凉意思。\"]');\n    }\n\n    var url = getItem('一言', dizhi);\n    if (url === dizhi) {\n        let json = JSON.parse(fetch(url));\n        let max = json.length - 1;\n        let min = 0;\n        let num = Math.floor(Math.random() * (max - min + 1)) + min;\n        var Display = json[num];\n    } else {\n        let geshi = getItem('格式', 'json');\n        var Display = geshi == 'json' ? JSON.parse(fetch(url, {\n            timeout: 1000\n        })).data.content : fetch(url, {\n            timeout: 1000\n        });\n\n    }\n    var 一言 = ('““””<font color=' + getRandomColor() + '>🎀\\t' + getItem('yiyan', Display) + '</font>');\n} catch (e) {\n    var 一言 = ('““””<font color=' + getRandomColor() + '>❗️\\t' + getItem('yiyan', '获取数据失败，请刷新重试或更换接口。') + '</font>');\n}\n\nvar ys_ss = getItem('ys_ss', '');\n[{\n    title: 显示 == '日历' ? 日历 : 一言,\n    col_type: 'text_1',\n    url: 'copy://' + Display,\n    extra: {\n        lineVisible: false,\n        longClick: [{\n            title: '📲显示:\\t' + (getItem('title', '日历') == '日历' ? '日历' : '一言'),\n            js: $.toString(() => {\n                setItem('title', getItem('title', '日历') == '日历' ? '一言' : '日历');\n                clearItem('一言');\n                clearItem('yiyan');\n                refreshPage(false);\n                toast('已切换至' + (getItem('title', '日历') == '日历' ? '日历' : '一言'));\n            }),\n        }, {\n            title: '📝一言',\n            js: $.toString(() => {\n                return $(['造呗', '本地', '接口', '诗词', '情话', '骚话', '宋词', '鸡汤', '古籍'], 3, '请选择').select(() => {\n                    if (input == '造呗') {\n                        var L = getItem('L', '');\n                        return $(L, '写一句自己喜欢的句子吧。').input(() => {\n                            if (!input) return \"toast://不能为空\";\n                            setItem('L', input);\n                            setItem('yiyan', input);\n                            setItem('title', '一言');\n                            refreshPage(false);\n                            return 'toast://已更换一言'\n                        })\n                    } else if (input == '接口') {\n                        return $(['text格式', 'json格式'], 2, '请选择').select(() => {\n                            if (input == 'text格式') {\n                                var T = getItem('T', '');\n                                return $(T, '想更换的一言接口地址\\ntext文字格式。\\n\\n注意：如遇主页加载卡顿，请更换一言接口，或者恢复默认，或者自己来一句，再者切换日历显示。').input(() => {\n                                    if (!input) return \"toast://不能为空\";\n                                    setItem('T', input);\n                                    setItem('一言', input);\n                                    setItem('title', '一言');\n                                    setItem('格式', 'txt');\n                                    clearItem('yiyan');\n                                    refreshPage(false);\n                                    return 'toast://已更换一言'\n                                })\n                            } else if (input == 'json格式') {\n                                var J = getItem('J', '');\n                                return $(J, '想更换的一言接口地址\\n适用于json数据为data.content\\n\\n注意：如遇主页加载卡顿，请更换一言接口，或者恢复默认，或者自己来一句，再者切换日历显示。').input(() => {\n                                    if (!input) return \"toast://不能为空\";\n                                    setItem('J', input);\n                                    setItem('一言', input);\n                                    setItem('title', '一言');\n                                    clearItem('格式', 'json');\n                                    clearItem('yiyan');\n                                    refreshPage(false);\n                                    return 'toast://已更换一言'\n\n                                })\n                            }\n                        })\n                    } else if (input == '诗词') {\n                        setItem('一言', 'https://v2.jinrishici.com/one.json');\n                        setItem('title', '一言');\n                        setItem('格式', 'json');\n                        clearItem('yiyan');\n                        refreshPage(false);\n                        return 'toast://已切换一言古诗词'\n                    } else if (input == '情话') {\n\n\n                        setItem('一言', 'https://api.vvhan.com/api/text/love?type=json');\n                        setItem('格式', 'json');\n                        setItem('title', '一言');\n                        clearItem('yiyan');\n                        refreshPage(false);\n                        return 'toast://已切换一言情话'\n                    } else if (input == '骚话') {\n\n\n                        setItem('一言', 'https://api.vvhan.com/api/text/sexy?type=json');\n                        setItem('title', '一言');\n                        setItem('格式', 'json');\n                        clearItem('yiyan');\n                        refreshPage(false);\n                        return 'toast://已切换一言骚话'\n                    } else if (input == '宋词') {\n                        setItem('一言', 'https://api.qqsuu.cn/api/dm-zmsc');\n                        setItem('title', '一言');\n                        setItem('格式', 'json');\n                        clearItem('yiyan');\n                        refreshPage(false);\n                        return 'toast://已切换一言最美宋词'\n                    } else if (input == '鸡汤') {\n\n\n                        setItem('一言', 'https://api.qqsuu.cn/api/dm-djtang');\n                        setItem('title', '一言');\n                        setItem('格式', 'json');\n                        clearItem('yiyan');\n                        refreshPage(false);\n                        return 'toast://已切换一言毒鸡汤'\n                    } else if (input == '古籍') {\n\n\n                        setItem('一言', 'https://api.qqsuu.cn/api/dm-gjmj');\n                        setItem('title', '一言');\n                        setItem('格式', 'json');\n                        clearItem('yiyan');\n                        refreshPage(false);\n                        return 'toast://已切换一言古籍名句'\n                    } else {\n\n\n                        setItem('一言', 'hiker://files/Jm/yiyan.json');\n                        setItem('title', '一言');\n                        clearItem('yiyan');\n                        refreshPage(false);\n                        return 'toast://已切换本地随机一言'\n                    }\n                })\n            })\n        }, {\n            title: '🔰管理',\n            js: $.toString(() => {\n                return $('hiker://empty#noRecordHistory#').rule(() => {\n                    setPageTitle('本地一言管理');\n                    let d = [];\n                    d.push({\n                        title: '➕',\n                        desc: '请输入句子，多个请换行隔开。\\n(句子末尾为句号。中英文问号？?会自动添加换行符)',\n                        col_type: 'input',\n                        url: $.toString(() => {\n                            if (!input) return 'toast://输入为空';\n                            let txt = input.replace(/。|？|\\?/g, \"。\\n\");\n                            let input_name = txt.split(/\\n?\\n/);\n\n                            let name = input_name.filter(part => part.trim().length > 0);\n                            let yiyan = JSON.parse(request('hiker://files/Jm/yiyan.json'));\n                            yiyan = yiyan.concat(name);\n                            saveFile('hiker://files/Jm/yiyan.json', JSON.stringify(yiyan));\n                            refreshPage(false);\n                            return \"toast://添加成功~\";\n                        }),\n                        extra: {\n                            type: 'textarea',\n                            height: 5\n                        }\n                    }, {\n                        title: '✔️操作完点我',\n                        col_type: 'text_center_1',\n                        url: $('#noLoading#').lazyRule(() => {\n                            back(true);\n                            return 'hiker://empty'\n                        }),\n                    });\n                    let yiyan = JSON.parse(request('hiker://files/Jm/yiyan.json'));\n                    var index = 0;\n                    yiyan.forEach(item => {\n                        d.push({\n                            title: index + '.' + item,\n                            col_type: 'text_1',\n                            url: $(['编辑', '移位', '删除'], 3, '请选择操作').select((index, item) => {\n                                if (input == '编辑') {\n                                    return $(item, '请输入想更换的句子').input((index) => {\n                                        let yiyan = JSON.parse(request('hiker://files/Jm/yiyan.json'));\n                                        let show = input.split('\\n');\n                                        yiyan[index] = show;\n                                        saveFile('hiker://files/Jm/yiyan.json', JSON.stringify(yiyan));\n                                        refreshPage(false);\n                                        return 'toast://更改成功~';\n                                    }, index)\n                                } else if (input == '移位') {\n                                    return $('', '请输入要移动到哪个序号前面').input((index) => {\n                                        let yiyan = JSON.parse(request('hiker://files/Jm/yiyan.json'));\n                                        let temp = yiyan[index];\n                                        yiyan.splice(input, 0, temp);\n                                        if (input < index) {\n                                            yiyan.splice(index + 1, 1);\n                                        } else {\n                                            yiyan.splice(index, 1);\n                                        }\n                                        saveFile('hiker://files/Jm/yiyan.json', JSON.stringify(yiyan));\n                                        refreshPage(false);\n                                        return 'toast://移位成功~';\n                                    }, index)\n                                } else {\n                                    let yiyan = JSON.parse(request('hiker://files/Jm/yiyan.json'));\n                                    yiyan.splice(index, 1);\n                                    saveFile('hiker://files/Jm/yiyan.json', JSON.stringify(yiyan));\n                                    refreshPage(false);\n                                    return 'toast://删除成功~';\n                                }\n                            }, index, item),\n                            extra: {\n                                textAlign: 'left'\n                            }\n                        });\n                        index++;\n                    });\n                    setResult(d);\n                })\n            })\n        }, {\n            title: '♻️重置',\n            js: $.toString(() => {\n                clearItem('一言');\n                clearItem('yiyan');\n                clearItem('L');\n                clearItem('T');\n                clearItem('J');\n                clearItem('格式');\n                refreshPage(false);\n                deleteFile('hiker://files/Jm/yiyan.json');\n                return 'toast://已恢复默认'\n            })\n        }],\n    }\n}]"},{"status":true,"pattern":0,"name":"分割线","title":"","url":"","icon":"","desc":"","type":"line_blank"}],"fold_status":true,"pattern":3},{"name":"搜索","mark":"","list":[{"status":true,"pattern":0,"name":"历史记录","title":"历史","url":"hiker://history","icon":"hiker://files/Jm/lm/more/5.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"我的书签","title":"书签","url":"hiker://bookmark","icon":"hiker://files/Jm/lm/more/16.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"我的下载","title":"下载","url":"hiker://download","icon":"hiker://files/Jm/lm/more/35.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"主页设置","title":"设置","url":"@js:let title=[{title:\"主页设置\",icon:\"hiker://files/Jm/lm/more/47.png\",url:`${setting}`},{title:\"更多设置\",icon:\"hiker://files/Jm/lm/more/44.png\",url:\"hiker://settingMore\"},{title:\"文件管理\",icon:\"hiker://files/Jm/lm/more/37.png\",url:\"hiker://explore\"},{title:\"道长仓库\",icon:\"hiker://files/Jm/lm/more/182.png\",url:\"hiker://home@道长仓库Pro\"},{title:\"资源管理\",icon:\"hiker://files/Jm/lm/more/36.png\",url:\"hiker://home@本地资源管理\"},{title:\"奇妙工具\",icon:\"hiker://files/Jm/lm/more/27.png\",url:\"hiker://tools\"},{title:\"手动备份\",icon:\"hiker://files/Jm/lm/more/279.png\",url:\"hiker://webdav\"},{title:\"网址过滤\",icon:\"hiker://files/Jm/lm/more/294.png\",url:\"hiker://adUrl\"},{title:\"网页插件\",icon:\"hiker://files/Jm/lm/more/284.png\",url:\"hiker://js\"},{title:\"元素拦截\",icon:\"hiker://files/Jm/lm/more/325.png\",url:\"hiker://adRule\"}];$(title,2,\"更多功能\").select((title)=>{let i=title.findIndex(t=>t.title==input);let url=title[i].url;return url},title)","icon":"hiker://files/Jm/lm/more/44.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":2,"name":"自定义_搜索","code":"let so = [];\nif (!fileExist('hiker://files/Jm/search.json')) {\n    saveFile('hiker://files/Jm/search.json', '[{\"name\":\"百度\",\"url\":\"https://m.baidu.com/s?word=\"},{\"name\":\"玩偶\",\"url\":\"hiker://search?rule=玩偶哥哥&s=\"},{\"name\":\"聚影\",\"url\":\"hiker://search?rule=聚影&s=\"},{\"name\":\"影视\",\"url\":\"hiker://search?simple=false&rule=人人视频APP&s=\"},{\"name\":\"短剧\",\"url\":\"hiker://search?simple=false&rule=河马剧场APP&s=\"},{\"name\":\"音乐\",\"url\":\"hiker://search?simple=false&rule=歌词适配&s=\"},{\"name\":\"仓库\",\"url\":\"hiker://search?rule=道长仓库Pro&s=\"},{\"name\":\"搜狗\",\"url\":\"https://m.sogou.com/web/searchList.jsp?s_from=pcsearch&keyword=\"},{\"name\":\"360\",\"url\":\"https://m.so.com/s?ie=utf-8&fr=none&ssid=&q=\"},{\"name\":\"必应\",\"url\":\"https://cn.bing.com/search?q=\"},{\"name\":\"夸克\",\"url\":\"https://quark.sm.cn/s?q=\"}]');\n}\n\nvar search_url = getItem('search_url', 'https://m.baidu.com/s?word=');\nlet search_input = getItem('search_input', '');\nlet search_color = getItem('search_color', '百度');\nvar search_list = JSON.parse(request('hiker://files/Jm/search.json'));\nso.push({\n    title: '搜索',\n    col_type: 'input',\n    desc: '输入你想搜索的',\n    url: $.toString((search_url) => {\n        if (!input) {\n            startQRScanPage();\n            return 'hiker://empty'\n        } else {\n            setItem('search_input', input);\n            var url = search_url + input;\n            return url\n        }\n    }, search_url),\n    extra: {\n        defaultValue: getItem('search_input', ''),\n        onChange: 'setItem(\"search_input\",input)'\n    }\n});\nso.push({\n    title: '👉',\n    col_type: 'scroll_button',\n    url: \"select://\" + JSON.stringify({\n        options: [\n            \"管理\",\n            \"重置\"\n        ],\n        attachView: true,\n        js: $.toString(() => {\n            if (input == \"管理\") {\n                return $('hiker://empty#noRecordHistory#').rule(() => {\n                    setPageTitle('搜索管理');\n                    let d = [];\n                    d.push({\n                        title: '示例: 百度@https://m.baidu.com/s?word=',\n                        col_type: 'text_1',\n                        url: 'copy://名称@搜索链接',\n                        extra: {\n                            lineVisible: false\n                        }\n                    }, {\n                        title: '➕',\n                        desc: '名称@搜索链接',\n                        col_type: 'input',\n                        url: $.toString(() => {\n                            if (!input) return 'toast://输入为空';\n                            let name = input.split('@');\n                            search_name = {\n                                name: name[0],\n                                url: name[1]\n                            };\n                            let search = JSON.parse(request('hiker://files/Jm/search.json'));\n                            search = search.concat(search_name);\n                            saveFile('hiker://files/Jm/search.json', JSON.stringify(search));\n                            refreshPage(false);\n                            return \"toast://添加成功~\";\n                        }),\n                        extra: {\n                            type: 'textarea',\n                            height: 2\n                        }\n                    }, {\n                        title: '✔️操作完点我',\n                        col_type: 'text_center_1',\n                        url: $('#noLoading#').lazyRule(() => {\n                            back(true);\n                            return 'hiker://empty'\n                        }),\n                    }, {\n                        col_type: 'big_blank_block',\n                    });\n                    let search = JSON.parse(request('hiker://files/Jm/search.json'));\n                    var index = 0;\n                    search.forEach(item => {\n                        d.push({\n                            title: index + '.' + item.name,\n                            col_type: 'text_1',\n                            desc: item.url,\n                            pic: item.url,\n                            url: $(['编辑', '移位', '删除'], 3, '请选择操作').select((index, item) => {\n                                if (input == '编辑') {\n                                    return $(item.name + '@' + item.url, '名称@搜索链接').input((index) => {\n                                        let search = JSON.parse(request('hiker://files/Jm/search.json'));\n                                        let show = input.split('@');\n                                        search[index] = {\n                                            name: show[0],\n                                            url: show[1]\n                                        };\n                                        saveFile('hiker://files/Jm/search.json', JSON.stringify(search));\n                                        refreshPage(false);\n                                        return 'toast://更改成功~';\n                                    }, index)\n                                } else if (input == '移位') {\n                                    return $('', '请输入要移动到哪个序号前面').input((index) => {\n                                        let search = JSON.parse(request('hiker://files/Jm/search.json'));\n                                        let temp = search[index];\n                                        search.splice(input, 0, temp);\n                                        if (input < index) {\n                                            search.splice(index + 1, 1);\n                                        } else {\n                                            search.splice(index, 1);\n                                        }\n                                        saveFile('hiker://files/Jm/search.json', JSON.stringify(search));\n                                        refreshPage(false);\n                                        return 'toast://移位成功~';\n                                    }, index)\n                                } else {\n                                    let search = JSON.parse(request('hiker://files/Jm/search.json'));\n                                    search.splice(index, 1);\n                                    saveFile('hiker://files/Jm/search.json', JSON.stringify(search));\n                                    refreshPage(false);\n                                    return 'toast://删除成功~';\n                                }\n                            }, index, item),\n                            extra: {\n                                textAlign: 'left'\n                            }\n                        });\n                        index++;\n                    });\n                    setResult(d);\n                })\n            } else {\n                deleteFile('hiker://files/Jm/search.json');\n                refreshPage(false);\n                return 'toast://已恢复默认'\n            }\n        })\n    }),\n});\nsearch_list.map(s => {\n    so.push({\n        title: search_color == s.name ? '‘‘’’<font color=#fd268a>' + s.name + '</font>' : s.name,\n        col_type: 'scroll_button',\n        url: $('#noLoading#').lazyRule((s) => {\n            setItem('search_url', s.url);\n            setItem('search_color', s.name)\n            refreshPage(false);\n            return 'hiker://empty'\n        }, s),\n    });\n});\nso"}],"fold_status":true,"pattern":3},{"name":"收藏","mark":"小海报","list":[{"status":true,"pattern":0,"name":"我的收藏","title":"","url":"hiker://collection","icon":"hiker://files/Jm/vinua/vKkQb.jpeg","desc":"@js:'收藏('+collection.length+')'","type":"movie_2"},{"status":false,"pattern":0,"name":"我的小程序","title":"","url":"hiker://home","icon":"hiker://files/Jm/vinua/vKY98.jpeg","desc":"@js:'程序('+getRuleCount()+')'","type":"movie_2"},{"status":true,"pattern":0,"name":"我的小程序弹窗分组带图标","title":"","url":"@js: var html = JSON.parse(request(\"hiker://home\")); var grouplist = []; var appletlist = []; for (i = 0; i < html.length; i++) {     grouplist.push(html[i].group); } grouplist = Array.from(new Set(grouplist)); for (i = 0; i < grouplist.length; i++) {     groupname = grouplist[i];     appletlist[i] = [];     html.forEach(element => {         if (element.group == groupname) {             appletlist[i].push({                 'title': element.title,                 'icon': element.icon             });         }     });     var applist = appletlist[i];     url = $('#noLoading#').lazyRule((applist) => {         return $(applist, 2, '选择小程序').select(() => {             return 'hiker://home@' + input         })     }, applist);     grouplist[i] = {         'name': groupname,         'url': url,     }; } var list = grouplist.map(group => group.name); $(list, 3, '选择分组').select((grouplist) => {     let fz = grouplist.findIndex(group => group.name == input);     return grouplist[fz].url; }, grouplist)","icon":"hiker://files/Jm/vinua/vKY98.jpeg","desc":"@js:'程序('+getRuleCount()+')'","type":"movie_2"},{"status":false,"pattern":0,"name":"我的小程序全部","title":"","url":"@js: var html = JSON.parse(request(\"hiker://home\")); var appletlist = []; html.forEach(element => {     appletlist.push({         'title': element.title,         'icon': element.icon     }); }); var applist = appletlist; url = $('#noLoading#').lazyRule((applist) => {     return $(applist, 3, '我的小程序(全部)').select(() => {         return 'hiker://home@' + input     }) }, applist);","icon":"hiker://files/Jm/vinua/vKY98.jpeg","desc":"@js:'程序('+getRuleCount()+')'","type":"movie_2"}],"fold_status":true,"pattern":3},{"name":"四标题","mark":"","list":[{"status":true,"pattern":0,"name":"最近","title":"最近","url":"@js: $('#noLoading#').lazyRule(() => {     var rules = getLastRules(16).map(r => {         return {             title: r.title,             icon: r.icon         };         });     return $(rules, 2, '最近使用').select(() => {         return \"hiker://home@\" + input     }) })","icon":"","desc":"","type":"text_4"},{"status":true,"pattern":2,"name":"常用","code":"if (!fileExist('hiker://files/Jm/program.json')) {\n    saveFile('hiker://files/Jm/program.json', '[{\"title\":\"长按常用添加\",\"icon\":\"hiker://images/home_bg\"}]');\n}\nlet program = JSON.parse(request('hiker://files/Jm/program.json'));\n[{\n    title: '常用',\n    col_type: 'text_4',\n    url: $(program, 2, '常用小程序').select(() => {\n        if (input == '长按常用添加') {\n            return 'toast://长按常用管理添加'\n        } else {\n            return 'hiker://home@' + input;\n        }\n    }),\n    extra: {\n        longClick: [{\n            title: '🕹 常用小程序管理',\n            js: $.toString(() => {\n                return $('hiker://empty#noRecordHistory#').rule(() => {\n                    setPageTitle('小程序管理');\n                    let d = [];\n                    d.push({\n                        title: '示例: 聚影@https://api.xinac.net/icon/?url=https://github.com',\n                        col_type: 'text_1',\n                        url: 'copy://聚影@https://api.xinac.net/icon/?url=https://github.com',\n                        extra: {\n                            lineVisible: false\n                        }\n                    }, {\n                        title: '➕',\n                        desc: '程序名称@图片链接',\n                        col_type: 'input',\n                        url: $.toString(() => {\n                            if (!input) return 'toast://输入为空';\n                            let name = input.split('@');\n                            let program_name = {\n                                title: name[0],\n                                icon: name[1]\n                            };\n                            let program = JSON.parse(request('hiker://files/Jm/program.json'));\n                            program = program.concat(program_name);\n                            saveFile('hiker://files/Jm/program.json', JSON.stringify(program));\n                            refreshPage(false);\n                            return \"toast://添加成功~\";\n                        }),\n                        extra: {\n                            type: 'textarea',\n                            height: 2\n                        }\n                    }, {\n                        title: '👉 从最近添加',\n                        col_type: 'text_2',\n                        url: $('#noLoading#').lazyRule(() => {\n                            var rules = getLastRules(50).map(r => {\n                                return {\n                                    title: r.title,\n                                    icon: r.icon\n                                };                                \n                            });\n                            return $(rules, 2, '点击添加').select((rules) => {\n                                let a = rules.findIndex(r => r.title == input);\n                                let b = rules[a].icon;\n                                let data = {\n                                    title: input,\n                                    icon: b\n                                };\n                                let program = JSON.parse(request('hiker://files/Jm/program.json'));\n                                program = program.concat(data);\n                                saveFile('hiker://files/Jm/program.json', JSON.stringify(program));\n                                refreshPage(false);\n                                return \"toast://添加成功~\";\n                            }, rules)\n                        }),\n                    }, {\n                        title: '✔️操作完点我',\n                        col_type: 'text_2',\n                        url: $('#noLoading#').lazyRule(() => {\n                            back(true);\n                            return 'hiker://empty'\n                        }),\n                    }, {\n                        col_type: 'big_blank_block',\n                    }, {\n                        col_type: 'line',\n                    }, {\n                        col_type: 'big_blank_block',\n                    });\n                    let program = JSON.parse(request('hiker://files/Jm/program.json'));\n                    var index = 0;\n                    program.forEach(item => {\n                        d.push({\n                            title: index + '.' + item.title,\n                            col_type: 'icon_2_round',\n                            pic: item.icon,\n                            url: $(['编辑', '移位', '删除'], 3, '请选择操作').select((index, item) => {\n                                if (input == '编辑') {\n                                    return $(item.title + '@' + item.icon, '请输入想更换的小程序名').input((index) => {\n                                        let program = JSON.parse(request('hiker://files/Jm/program.json'));\n                                        let show = input.split('@');\n                                        program[index] = {\n                                            title: show[0],\n                                            icon: show[1]\n                                        };\n                                        saveFile('hiker://files/Jm/program.json', JSON.stringify(program));\n                                        refreshPage(false);\n                                        return 'toast://更改成功~';\n                                    }, index)\n                                } else if (input == '移位') {\n                                    return $('', '请输入要移动到哪个序号前面').input((index) => {\n                                        let program = JSON.parse(request('hiker://files/Jm/program.json'));\n                                        let temp = program[index];\n                                        program.splice(input, 0, temp);\n                                        if (input < index) {\n                                            program.splice(index + 1, 1);\n                                        } else {\n                                            program.splice(index, 1);\n                                        }\n                                        saveFile('hiker://files/Jm/program.json', JSON.stringify(program));\n                                        refreshPage(false);\n                                        return 'toast://移位成功~';\n                                    }, index)\n                                } else {\n                                    let program = JSON.parse(request('hiker://files/Jm/program.json'));\n                                    program.splice(index, 1);\n                                    saveFile('hiker://files/Jm/program.json', JSON.stringify(program));\n                                    refreshPage(false);\n                                    return 'toast://删除成功~';\n                                }\n                            }, index, item),\n                            extra: {\n                                textAlign: 'left'\n                            }\n                        });\n                        index++;\n                    });\n                    setResult(d);\n                })\n\n            })\n        }],\n    }\n}]"},{"status":true,"pattern":0,"name":"日常","title":"@js:fastGrammarForText(\"<Tab>@[' ‘‘’’<font color=#1AB16B>日常</font>','日常']\",\"<Tab>@['日常书签组']\",order)","url":"@js:fastGrammar(\"<Tab>@['日常书签组','开关']\",order)","icon":"","desc":"","type":"text_4"},{"status":true,"pattern":0,"name":"娱乐","title":"@js:fastGrammarForText(\"<Tab>@[' ‘‘’’<font color=#2eb7fe>娱乐</font>','娱乐']\",\"<Tab>@['娱乐书签组']\",order)","url":"@js:fastGrammar(\"<Tab>@['娱乐书签组','开关']\",order)","icon":"","desc":"","type":"text_4"}],"fold_status":true,"pattern":3},{"name":"日常书签组","mark":"开关","list":[{"status":true,"pattern":0,"name":"雅听","title":"雅听","url":"@js: $('hiker://empty#fullTheme##noHistory##noRecordHistory#').rule(() => {     setPageTitle('');     let d = [];     d.push({         title: '喜马拉雅',         col_type: 'avatar',         pic: 'hiker://files/Jm/lm/more/258.png',         desc: '管理',         url: \"select://\" + JSON.stringify({             options: [\"管理\", \"默认\"],             attachView: true,             js: $.toString(() => {                 if (input == '管理') {                     return $('hiker://empty#noRecordHistory#').rule(() => {                         setPageTitle('数据管理');                         let d = [];                         d.push({                             title: '添加',                             col_type: 'input',                             desc: '名称@id@图片链接@主播名称',                             url: $.toString(() => {                                 if (!input) return \"toast://请根据提示输入内容\";                                 let xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                                 xmly = xmly.concat(input);                                 saveFile('hiker://files/Jm/xmly.json', JSON.stringify(xmly));                                 refreshPage(false);                                 return 'toast://添加成功'                             }),                             extra: {                                 type: 'textarea',                                 height: 2                             }                         });                         var xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                         var index = 0;                         for (let i = 0; i < xmly.length; i++) {                             var item = xmly[i];                             let list = item.split('@');                             d.push({                                 title: index + '.' + list[0],                                 col_type: 'card_pic_3',                                 pic: list[2],                                 url: $(['编辑', '移位', '删除'], 3, '请选择操作').select((index, item) => {                                     if (input == '编辑') {                                         return $(item, '想要更换的内容\\n名称-id-图片链接-主播名称').input((index) => {                                             let xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                                             xmly[index] = input;                                             saveFile('hiker://files/Jm/xmly.json', JSON.stringify(xmly));                                             refreshPage(false);                                             return 'toast://更改成功~'                                         }, index)                                     } else if (input == '移位') {                                         return $('', '要移动到哪个序号前面/后面').input((index) => {                                             let xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                                             let temp = xmly[index];                                             xmly.splice(input, 0, temp);                                             if (input < index) {                                                 xmly.splice(index + 1, 1);                                             } else {                                                 xmly.splice(index, 1);                                             }                                             saveFile('hiker://files/Jm/xmly.json', JSON.stringify(xmly));                                             refreshPage(false);                                             return 'toast://移位成功~'                                         }, index)                                     } else {                                         let xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                                         xmly.splice(index, 1);                                         saveFile('hiker://files/Jm/xmly.json', JSON.stringify(xmly));                                         refreshPage(false);                                         return 'toast://删除成功~'                                     }                                 }, index, item),                             });                             index++;                         }                         setResult(d);                     })                 } else {                     deleteFile('hiker://files/Jm/xmly.json');                     refreshPage(false);                     return 'toast://已恢复默认'                 }             })         }),     });     d.push({         title: '搜索',         desc: '输入你想搜索的',         col_type: 'input',         url: $.toString(() => {             if (!input) return \"toast://请输入关键词\";             var txt = input;             setItem('雅听', txt);             return $('hiker://empty##fypage#fullTheme##noRecordHistory#').rule((txt) => {                 let d = [];                 var json = JSON.parse(fetch('http://search.ximalaya.com/front/v1?device=android&condition=relation&core=album&spellchecker=true&kw=' + txt + '&page=' + MY_PAGE + '&rows=60')).response.docs;                 json.map(l => {                     let img = l.cover_path.split('!')[0];                     d.push({                         title: l.title,                         col_type: 'movie_1_vertical_pic',                         desc: '‘‘’’<font color=#FA7298>' + l.intro + '</font>',                         pic: img,                         url: $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule((l, img) => {                             setPageTitle(l.title);                             let d = [];                             let page = getVar('xmly_page', '1');                             var asc = getVar('排序', 'true');                             let json = JSON.parse(fetch('http://mobile.ximalaya.com/mobile/others/ca/album/track/' + l.id + '/' + asc + '/' + page + '/60?albumId=' + l.id + '&pageSize=60&isAsc=' + asc + '&position=1&device=android'));                             if (MY_PAGE == 1) {                                 var total = Math.ceil(json.album.tracks / 60);                                 d.push({                                     col_type: 'pic_1_full',                                     pic: img,                                     url: $('', '需要翻页的数字，每页60。\\n\\n共：' + json.album.tracks + '条节目，' + page + '/' + total + '页。').input((total) => {                                         if (!input) {                                             return 'toast://请输入页码';                                         } else if (input > total) {                                             return 'toast://请输入正常页码';                                         }                                         putVar('xmly_page', input);                                         refreshPage(false);                                         return 'hiker://empty'                                     }, total),                                 });                                 d.push({                                     title: '主播: ' + l.nickname + '\\t\\t节目(' + json.album.tracks + ')',                                     col_type: 'avatar',                                     pic: asc == 'true' ? 'hiker://files/Jm/lm/messy/123.svg' : 'hiker://files/Jm/lm/messy/124.svg',                                     desc: asc == 'true' ? '<font color=#FA7298>最新</font>' : '<font color=#FA7298>顺序</font>',                                     url: $('#noLoading#').lazyRule(() => {                                         if (getVar('排序', 'true') == 'false') {                                             clearVar('排序');                                         } else {                                             putVar('排序', 'false');                                         }                                         refreshPage(false);                                         return 'hiker://empty'                                     }),                                 }, {                                     col_type: 'line',                                 });                             }                             json.tracks.list.forEach((j) => {                                 d.push({                                     title: j.title,                                     col_type: 'text_1',                                     url: j.playUrl64 + '#isMusic=true#',                                     extra: {                                         inheritTitle: false                                     }                                 });                             });                             setResult(d);                         }, l, img),                         extra: {                             longClick: [{                                 title: '添加到首页',                                 js: $.toString((l, img) => {                                     var link = (l.title + '@' + l.id + '@' + img + '@' + l.nickname);                                     xmly = JSON.parse(request('hiker://files/Jm/xmly.json'));                                     xmly = xmly.concat(link);                                     saveFile('hiker://files/Jm/xmly.json', JSON.stringify(xmly));                                     back(true);                                     return 'toast://添加成功'                                 }, l, img)                             }],                         }                     });                 });                 setResult(d);             }, txt)         }),         extra: {             defaultValue: getItem('雅听', ''),             onChange: 'setItem(\"雅听\",input)',         }     });     let xmly_title = ['有声书', '音乐', '相声评书', '广播剧', '娱乐', '影视', '儿童', '历史', '商业财经', '人文', '教育培训', 'IT科技', '外语', '头条', '二次元', '戏曲', '旅游', '健康养生', '时尚生活'];     var xmly_id = ['youshengshu', 'yinyue', 'xiangsheng', 'guangbojv', 'yule', 'yingshi', 'ertong', 'lishi', 'shangye', 'renwen', 'jiaoyu', 'keji', 'waiyu', 'toutiao', 'erciyuan', 'xiqu', 'lvyou', 'jiankang', 'shishang'];     let xmly_fl = xmly_title.map((item, index) => {         return {             name: item,             id: xmly_id[index]         };     });     xmly_fl.map(j => {         d.push({             title: j.name,             col_type: 'scroll_button',             url: $('hiker://empty#fullTheme##noRecordHistory#').rule((j) => {                 let d = [];                 var json = JSON.parse(fetch('https://m.ximalaya.com/m-revision/page/rank/queryRank?clusterCode=rise&page=1&categoryCode=' + j.id)).data;                 json.rankModuleInfoList.map(l => {                     var img = 'https://imagev2.xmcdn.com/' + l.albumInfo.cover;                     d.push({                         title: l.albumInfo.title,                         col_type: 'movie_1_vertical_pic',                         desc: l.albumInfo.shortIntro ? '‘‘’’<font color=#FA7298>' + l.albumInfo.shortIntro + '</font>' : '‘‘’’<font color=#FA7298>' + l.albumInfo.salePoint + '</font>',                         pic: img,                         url: $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule((l, img) => {                             setPageTitle(l.albumInfo.title);                             let d = [];                             let page = getVar('xmly_page', '1');                             var asc = getVar('排序', 'true');                             let json = JSON.parse(fetch('http://mobile.ximalaya.com/mobile/others/ca/album/track/' + l.id + '/' + asc + '/' + page + '/60?albumId=' + l.id + '&pageSize=60&isAsc=' + asc + '&position=1&device=android'));                             if (MY_PAGE == 1) {                                 var total = Math.ceil(json.album.tracks / 60);                                 d.push({                                     col_type: 'pic_1_full',                                     pic: img,                                     url: $('', '需要翻页的数字，每页60。\\n\\n共：' + json.album.tracks + '条节目，' + page + '/' + total + '页。').input((total) => {                                         if (!input) {                                             return 'toast://请输入页码';                                         } else if (input > total) {                                             return 'toast://请输入正常页码';                                         }                                         putVar('xmly_page', input);                                         refreshPage(false);                                         return 'hiker://empty'                                     }, total),                                 });                                 d.push({                                     title: '主播: ' + json.album.nickname + '\\t\\t节目(' + json.album.tracks + ')',                                     col_type: 'avatar',                                     pic: asc == 'true' ? 'hiker://files/Jm/lm/messy/123.svg' : 'hiker://files/Jm/lm/messy/124.svg',                                     desc: asc == 'true' ? '<font color=#FA7298>最新</font>' : '<font color=#FA7298>顺序</font>',                                     url: $('#noLoading#').lazyRule(() => {                                         if (getVar('排序', 'true') == 'false') {                                             clearVar('排序');                                         } else {                                             putVar('排序', 'false');                                         }                                         refreshPage(false);                                         return 'hiker://empty'                                     }),                                 }, {                                     col_type: 'line',                                 });                             }                             json.tracks.list.forEach((j) => {                                 d.push({                                     title: j.title,                                     col_type: 'text_1',                                     url: j.playUrl64 + '#isMusic=true#',                                     extra: {                                         inheritTitle: false                                     }                                 });                             });                             setResult(d);                         }, l, img),                     });                 });                 setResult(d);             }, j),         });     });     if (fileExist('hiker://files/Jm/xmly.json') == false) {         saveFile('hiker://files/Jm/xmly.json', '[\"10分钟新闻早餐@68589357@https://imagev2.xmcdn.com/storages/0f34-audiofreehighqps/9D/67/GKwRIRwGeHSbAAF5lAFoTCXi.jpeg@喜马头条\", \"给你歌一曲@364178@https://imagev2.xmcdn.com/storages/592c-audiofreehighqps/3F/39/GKwRIDoI4xcpAA7W_AJe33US.jpeg@张羊\", \"音乐优品@2650009@https://imagev2.xmcdn.com/group40/M0B/42/9A/wKgJVFqjufDwJ-27AAEtYzy2Sws017.jpg@主播叶子\", \"生活杂志@36630606@https://imagev2.xmcdn.com/group75/M06/83/0E/wKgO016RQ4ewix-MACap1_b_JKc207.jpg@MakeVoice\", \"非常溜佳期|爆笑吐槽欢乐解压@249020@https://imagev2.xmcdn.com/group30/M0B/BE/11/wKgJXlnSZlzhov6rAAGyRtHPJBg254.jpg@佳期\", \"段子来了@203355@https://imagev2.xmcdn.com/group5/M03/A6/D8/wKgDtlR1MD_T1DQHAANqZDyk48s720.jpg@采采\", \"一千零一笑｜睡着都能笑醒的段子@23742269@https://imagev2.xmcdn.com/group60/M06/40/83/wKgLb1zkHIeglr6VAB-x06KhWJM917.jpg@饼干GAN\", \"东北讲笑话@3555870@https://imagev2.xmcdn.com/group44/M00/AF/BC/wKgKjFswLrvBiTCCAAhPED0zi3Q786.jpg@阿哈东北\", \"妙宇连朱│趣闻吐槽 爆笑有料！@270535@https://imagev2.xmcdn.com/group76/M09/06/B4/wKgO3l5GRveBy9PfAAREO-jtWF0047.jpg@朱宇\", \"今晚脱口秀@4735422@https://imagev2.xmcdn.com/storages/aa63-audiofreehighqps/9A/94/CMCoOSQDy4_XAACPhgB4_BiN.jpg@今晚脱口秀\", \"总有这样的歌只想一个人听@3595841@https://imagev2.xmcdn.com/group54/M03/BE/89/wKgLclw1y2PjEND8AAGN2SKPPNM391.jpg@灰姑娘音乐\", \"总有一首歌丨会让你单曲循环到想哭@45525192@https://imagev2.xmcdn.com/storages/173d-audiofreehighqps/1D/AC/GKwRIJEGDg_IAAOPYQEtP7vi.jpeg@烟花迷人眼\", \"音乐记事本|一首歌一个故事@47210030@https://imagev2.xmcdn.com/storages/923a-audiofreehighqps/9E/8F/GKwRIUEHjDzGAAGGDAHo09MM.jpg@柠檬香香FM\", \"那些好听的女生翻唱@31751522@https://imagev2.xmcdn.com/group69/M05/CF/D9/wKgMb133KMCCQmiSAADqJUKGfNE375.jpg@花小小茵\", \"潮流音乐@19521365@https://imagev2.xmcdn.com/group49/M07/07/AD/wKgKl1v39kaQRiOHAAFpXOGk7Jk501.png@小松推荐\", \"那些一听就感动的经典电影名曲@39163725@https://imagev2.xmcdn.com/group83/M02/EF/8D/wKg5HV8NUf7A8yz3AAThw8LhuZY621.jpg@叶云川的瑞鸣音乐台\", \"晚安妈妈睡前故事@260744@https://imagev2.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg@晚安妈妈\", \"民间诡故事@29535750@https://imagev2.xmcdn.com/group69/M08/B2/E5/wKgMeV3glSTQPNMdACyt1_k_lDI813.jpg@阿浩说事儿\", \"古筝名曲欣赏古筝经典名曲@16792854@https://imagev2.xmcdn.com/group46/M04/AA/B8/wKgKlltqiiLAzjyJAADLZMy6vZI136.jpg@喜马来啦\", \"经典古乐-古琴十大名曲@6317265@https://img2.baidu.com/it/u=1333807900,2948630331&fm=253&fmt=auto&app=138&f=JPEG@xiexiexiexie\", \"【世界上最美的钢琴曲】催眠音乐@4050639@https://imagev2.xmcdn.com/group13/M00/40/F6/wKgDXVcKCg_C6mIlAAUDrv1fONk145.png@若似晴天绍钧\", \"《夜色钢琴曲》@291718@https://imagev2.xmcdn.com/storages/b3d2-audiofreehighqps/91/8E/GMCoOSAFquG2AAU4zwEKNohZ.png@夜色钢琴曲赵海洋\", \"8分钟，3D环境减压冥想|音乐疗愈@28246572@https://imagev2.xmcdn.com/group65/M02/6D/3E/wKgMal1l_CrDd62jAAIVsjylJTs506.jpg@耳界_Earmersion\", \"迷人瑾-车载劲爆DJ电音舞曲@5899507@https://imagev2.xmcdn.com/group86/M05/C3/16/wKg5Jl8IZhuz_a9kAAGfsoxS7B8876.jpg@DJ迷人瑾\", \"民谣精选 | 唱尽人间百态@31380962@https://imagev2.xmcdn.com/group68/M02/B3/A9/wKgMbl3grtSzMEGWAAA4bH-ZnSo913.jpg@花小小茵\", \"经典留声机@290996@https://imagev2.xmcdn.com/group50/M08/FA/D2/wKgKnVvr9vHzmc2XAAUu-Wm_RSg359.jpg@主播小D\", \"让你循环百遍以上的经典英文歌@4866361@https://imagev2.xmcdn.com/group77/M07/55/6C/wKgO1V6NxEShlxVHAAAJW2ZhsM8516.jpg@一点抒情音乐频道\", \"1000首听不腻的好歌丨优质歌单@32519824@https://imagev2.xmcdn.com/storages/7824-audiofreehighqps/8E/10/GKwRIMAFlyD8AAHNJgEFBoZa.jpeg@陈臻臻\", \"小七的私房歌@237771@https://imagev2.xmcdn.com/storages/a740-audiofreehighqps/58/20/GMCoOR8HgrlzAAO9tQHl7bVs.jpeg@小七\", \"世界上最好听的纯音乐@11659873@https://imagev2.xmcdn.com/group35/M03/8B/5C/wKgJnFoT4AqDZz_EAAC_AaRpjvA497.jpg@孤_零\", \"经典豫剧名家名段1000首@53403876@https://imagev2.xmcdn.com/storages/83c7-audiofreehighqps/68/F5/CKwRIW4FJwg6AAEtEQDnEwha.jpg@戏曲传承人\", \"黄梅戏经典名家名段1000首@53831644@https://imagev2.xmcdn.com/storages/fe46-audiofreehighqps/BF/7E/GKwRIDoFu-VWAAIGNAEOQUad.jpeg@戏曲传承人\", \"国粹京剧@2822479@https://imagev2.xmcdn.com/group56/M07/02/DC/wKgLgFyOCSOBgKaqAAKVGBL0Sqk894.jpg@弘然\"]');     }     var xmly = eval(JSON.parse(request('hiker://files/Jm/xmly.json')));     for (var i = 0; i < xmly.length; i++) {         var k = xmly[i].split('@');         d.push({             title: k[0],             col_type: 'card_pic_3',             pic: k[2],             url: $('hiker://empty#noHistory##noRecordHistory##immersiveTheme#').rule((k) => {                 let d = [];                 let page = getVar('xmly_page', '1');                 var asc = getVar('排序', 'true');                 let json = JSON.parse(fetch('http://mobile.ximalaya.com/mobile/others/ca/album/track/' + k[1] + '/' + asc + '/' + page + '/60?albumId=' + k[1] + '&pageSize=60&isAsc=' + asc + '&position=1&device=android'));                 if (MY_PAGE == 1) {                     var total = Math.ceil(json.album.tracks / 60);                     d.push({                         col_type: 'pic_1_full',                         pic: k[2],                         url: $('', '需要翻页的数字，每页60。\\n\\n共：' + json.album.tracks + '条节目，' + page + '/' + total + '页。').input((total) => {                             if (!input) {                                 return 'toast://请输入页码';                             } else if (input > total) {                                 return 'toast://请输入正常页码';                             }                             putVar('xmly_page', input);                             refreshPage(false);                             return 'hiker://empty'                         }, total),                     });                     d.push({                         title: '主播: ' + k[3] + '\\t\\t节目(' + json.album.tracks + ')',                         col_type: 'avatar',                         pic: asc == 'true' ? 'hiker://files/Jm/lm/messy/123.svg' : 'hiker://files/Jm/lm/messy/124.svg',                         desc: asc == 'true' ? '<font color=#FA7298>最新</font>' : '<font color=#FA7298>顺序</font>',                         url: $('#noLoading#').lazyRule(() => {                             if (getVar('排序', 'true') == 'false') {                                 clearVar('排序');                             } else {                                 putVar('排序', 'false');                             }                             refreshPage(false);                             return 'hiker://empty'                         }),                     }, {                         col_type: 'line',                     });                 }                 json.tracks.list.forEach((j) => {                     d.push({                         title: j.title,                         pic: k[2],                         col_type: 'text_1',                         url: j.playUrl64 + '#isMusic=true#',                         extra: {                             inheritTitle: false                         }                     });                 });                 setResult(d);             }, k)         });     }     setResult(d); })","icon":"hiker://files/Jm/lm/more/7.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"音乐歌单","title":"音乐","url":"@js: $('hiker://empty#fypage#immersiveTheme##noHistory##noRecordHistory#').rule(() => {     setPageTitle('听点音乐');     let d = [];     if (MY_PAGE == 1) {         d.push({             col_type: 'pic_1_full',             pic: 'http://123.56.105.145/weisyr/img/TopImg0.png',             desc: '0',             url: 'hiker://empty',         }, {             title: '小七歌单',             col_type: 'icon_3_round_fill',             pic: 'hiker://files/Jm/lm/music/85.svg',             url: $('#noLoading#').lazyRule(() => {                 if (!fileExist('hiker://files/Jm/gedan.json')) {                     saveFile('hiker://files/Jm/gedan.json', '[{\"title\":\"热搜歌曲\",\"icon\":\"http://qpic.y.qq.com/music_cover/hKFribMhwH4ClwNWJxicuCxjuwIkbZPq4HVT0Qgxsdb8JWQXXC2TFsuQ/600?n=1\",\"id\":7532670538},{\"title\":\"抖音热门\",\"icon\":\"http://qpic.y.qq.com/music_cover/WpvdJXfn798ibD4gcfjw0NSuBkFTJYpY5QOev3ExcBQiamRcobkpN77g/600?n=1\",\"id\":7630303474}]');                 }                 var gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                 return $(gedan, 2, '小七歌单').select((gedan) => {                     let a = gedan.findIndex(t => t.title == input);                     var id = gedan[a].id;                     return $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule((id) => {                         setPageTitle('小七歌单');                         let d = [];                         let html = JSON.parse(fetch('https://api.yaohud.cn/api/qqmusic/v2?key=aUlykA35KgmwPUpehJKNbFjo6v&type=songlist&id=' + id)).data;                         var json = html.list.map(j => {                             return {                                 title: j.title,                                 singer: j.author,                                 album: j.album.name,                                 pic: j.pic,                                 id: j.mid                             };                         });                         d.push({                             title: html.info.title,                             col_type: 'movie_1_vertical_pic_blur',                             desc: '🧸\\t' + html.info.creator.nick + '\\n\\n🎼\\t' + html.info.songnum + '首',                             pic: html.info.picurl,                             url: $('', '曲名或歌手').input((json) => {                                 function search(array, name) {                                     return array.filter(item => {                                         return item.title.toLowerCase().includes(name.toLowerCase()) || item.singer.toLowerCase().includes(name.toLowerCase())                                     })                                 }                                 let results = search(json, input);                                 if (results.length > 0) {                                     return $('hiker://empty').rule((results) => {                                         setPageTitle('搜索结果');                                         let d = [];                                         results.forEach(j => {                                             d.push({                                                 title: j.title,                                                 col_type: 'text_1',                                                 desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                                 pic: j.pic,                                                 url: $('#noLoading#').lazyRule((j) => {                                                     try {                                                         var js = JSON.parse(fetch('https://api.leafone.cn/api/qqmusic?type=14&id=' + j.id)).data;                                                         var url = [js.url + '#isMusic=true#'];                                                         var lrc = js.lrc;                                                     } catch {                                                         var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                                             timeout: 2000                                                         })).url;                                                         var url = [json[3] || json[2] || json[1] || json[0]];                                                     }                                                     return JSON.stringify({                                                         urls: url,                                                         lyric: lrc                                                     })                                                 }, j),                                                 extra: {                                                     inheritTitle: false                                                 }                                             });                                         });                                         setResult(d);                                     }, results)                                 } else {                                     return 'toast://没有找到'                                 }                             }, json),                             extra: {                                 longClick: [{                                     title: '📠复制图片链接',                                     js: $.toString((html) => {                                         return 'copy://' + html.info.picurl;                                     }, html)                                 }],                             }                         });                         json.map(j => {                             d.push({                                 title: j.title,                                 col_type: 'text_1',                                 desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                 pic_url: j.pic + '@Referer=',                                 url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                                     try {                                         var js = JSON.parse(fetch('https://api.leafone.cn/api/qqmusic?type=14&id=' + j.id)).data;                                         var url = [js.url + '#isMusic=true#'];                                         var lrc = js.lrc;                                     } catch (e) {                                         var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                             timeout: 2000                                         })).url;                                         var url = [json[3] || json[2] || json[1] || json[0]];                                     }                                     return JSON.stringify({                                         urls: url,                                         lyric: lrc                                     })                                 }, j),                                 extra: {                                     inheritTitle: false,                                     longClick: [{                                         title: '下载歌曲',                                         js: $.toString((j) => {                                             var js = JSON.parse(fetch('https://api.leafone.cn/api/qqmusic?type=14&id=' + j.id)).data.url;                                             return 'download://' + json                                         }, j)                                     }, {                                         title: '观看MV',                                         js: $.toString((j) => {                                             try {                                                 var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                                     timeout: 2000                                                 })).url;                                                 var url = [json[3] || json[2] || json[1] || json[0]];                                             } catch (e) {                                                 var url = [JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + j.title, {                                                     timeout: 2000                                                 })).data.url];                                             }                                             return JSON.stringify({                                                 urls: url,                                             })                                         }, j)                                     }],                                 }                             });                         });                         setResult(d);                     }, id)                 }, gedan)             }),             extra: {                 longClick: [{                     title: '💞 获取歌单',                     js: $.toString(() => {                         return $('', '❗️歌单如果有新增，则需要重新获取\\n\\nQQ账号获取歌单').input(() => {                             let json = JSON.parse(fetch('https://api.cenguigui.cn/api/music/qq/user_list.php?qq=' + input)).myplaylist.map(j => {                                 return {                                     title: j.name,                                     icon: j.pic,                                     id: j.id                                 };                             });                             gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                             gedan = gedan.concat(json);                             saveFile('hiker://files/Jm/gedan.json', JSON.stringify(gedan));                             refreshPage(false);                             return 'toast://已添加'                         })                     })                 }, {                     title: '🔰 歌单管理',                     js: $.toString(() => {                         return $('hiker://empty#noHistory##noRecordHistory#').rule(() => {                             setPageTitle('歌单管理');                             let d = [];                             d.push({                                 title: '提取id',                                 col_type: 'input',                                 desc: '请输入分享后复制的链接',                                 url: $.toString(() => {                                     if (!input) return \"toast://不能为空\";                                     let txt = input;                                     let u1 = txt.split('&')[4];                                     let id = u1.split('=');                                     refreshPage(false);                                     copy(id[1]);                                     return 'toast://已复制' + id[1];                                 })                             });                             d.push({                                 title: '添加',                                 col_type: 'input',                                 desc: '显示名称@图片链接@QQ音乐id',                                 url: $.toString(() => {                                     if (!input) return \"toast://请根据提示输入内容\";                                     let gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                                     let n = input.split('@');                                     data = {                                         title: n[0],                                         icon: n[1],                                         id: n[2]                                     };                                     gedan = gedan.concat(data);                                     saveFile('hiker://files/Jm/gedan.json', JSON.stringify(gedan));                                     refreshPage(false);                                     return 'toast://已添加'                                 }),                                 extra: {                                     type: 'textarea',                                     height: 2                                 }                             });                             d.push({                                 title: '歌单图片链接可以在歌单二级海报长按复制，所以可以先添加歌单再编辑添加歌单图片，或者自己选一张图作为封面。',                                 col_type: 'scroll_button',                                 url: 'hiker://empty',                             });                             let gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                             var index = 0;                             gedan.map(j => {                                 var item = j.title + '@' + j.icon + '@' + j.id;                                 d.push({                                     title: index + '.' + j.title,                                     col_type: 'card_pic_3',                                     pic: j.icon,                                     url: $(['编辑', '移位', '删除'], 3, '请选择').select((index, item) => {                                         if (input == '编辑') {                                             return $(item, '想要更换的歌单名,歌单id,图片链接 ').input((index) => {                                                 let gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                                                 let n = input.split('@');                                                 gedan[index] = {                                                     title: n[0],                                                     icon: n[1],                                                     id: n[2]                                                 };                                                 saveFile('hiker://files/Jm/gedan.json', JSON.stringify(gedan));                                                 refreshPage(false);                                                 return 'toast://更改成功~'                                             }, index)                                         } else if (input == '移位') {                                             return $('', '要移动到哪个序号前面/后面').input((index) => {                                                 let gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                                                 let temp = gedan[index];                                                 gedan.splice(input, 0, temp);                                                 if (input < index) {                                                     gedan.splice(index + 1, 1);                                                 } else {                                                     gedan.splice(index, 1);                                                 }                                                 saveFile('hiker://files/Jm/gedan.json', JSON.stringify(gedan));                                                 refreshPage(false);                                                 return 'toast://移位成功~'                                             }, index)                                         } else {                                             let gedan = JSON.parse(request('hiker://files/Jm/gedan.json'));                                             gedan.splice(index, 1);                                             saveFile('hiker://files/Jm/gedan.json', JSON.stringify(gedan));                                             refreshPage(false);                                             return 'toast://删除成功~'                                         }                                     }, index, item),                                 });                                 index++;                             });                             setResult(d);                         })                     })                 }, {                     title: '♻️ 恢复默认',                     js: $.toString(() => {                         deleteFile('hiker://files/Jm/gedan.json');                         refreshPage(false);                         return 'toast://已恢复默认'                     })                 }],             }         }); /*网易排行榜歌单_开始*/         d.push({             title: '小芸榜单',             col_type: 'icon_3_round_fill',             pic: 'hiker://files/Jm/lm/music/51.svg',             url: $('#noLoading#').lazyRule(() => {                 var gedan = JSON.parse(fc('http://music.163.com/api/toplist', 24)).list.map(l => {                     return {                         title: l.name,                         icon: l.coverImgUrl,                         id: l.id                     };                 });                 return $(gedan, 2, '小芸排行榜').select((gedan) => {                     let a = gedan.findIndex(t => t.title == input);                     let id = gedan[a].id;                     return $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule((id) => {                         let d = [];                         setPageTitle('小芸歌单');                         let html = JSON.parse(fetch('http://music.163.com/api/v6/playlist/detail?n=1000&id=' + id, {                             headers: {                                 \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36\",                                 \"Cookie\": \"os=pc; MUSIC_U=00173997E57DC16112D2E1579F555444812E5133F16C34213D9BB5E3ECEC818845DF8A336A3B9D495EE182F3001AFEAF9E971591CCEDC4713842F3296A1E79DFB7817A8C7BB8154FF15483648F184D0E72D7D26A565E44507380824902C2152CC0BB5DB9A379E80F6F03D0D98B2793A20323034DE4A0BBB4672D48F9362960EF2136153D02E7DF14C9CE84F1F64C16EB307A5BBB58686C6095082AA450583E64EACD3E6B5BE0DFCACA9125F035057FE17B5BDA61D89DF5ABD77906F5E5D858C74DB2E178A3B0E6095DD75518D482DC9D61080A61D9B765D7E98EBE230CF017CD90208392D3E10DE964A68121B6C66D08C902A98ED7113AAE59D1E5559B071DE83126B8C295C780CCD4B0B4DE36E35C09AA634355AEDE2F880998719277E5EF9C7B9CAFFC90E279AAA2BAFCA44C0A83537D609E2DAA5D5D774848C98DD287118895C1C3D6574466F9262DECE07292AC157C1DB70CB703958A7FE55344E273422E69\"                             }                         })).playlist;                         let json = html.tracks.map(j => {                             let singer = j.ar.map(n => n.name);                             return {                                 title: j.name,                                 singer: singer,                                 album: j.tns,                                 pic: j.al.picUrl,                                 id: j.id,                                 vid: j.mv                             };                         });                         d.push({                             title: html.description,                             col_type: 'movie_1_vertical_pic_blur',                             desc: '🧸\\t' + html.creator.nickname + '\\n\\n🎼\\t' + html.trackCount + '首',                             pic: html.coverImgUrl,                             url: 'hiker://empty',                         });                         json.map(j => {                             d.push({                                 title: j.title,                                 col_type: 'text_1',                                 desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                 pic_url: j.pic + '@Referer=',                                 url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                                     try {                                         var js = JSON.parse(fetch('https://api.xingzhige.com/API/NetEase_CloudMusic_new/?br=5&songid=' + j.id)).data.src;                                     } catch (e) {                                         var js = ('https://music.163.com/song/media/outer/url?id=' + j.id);                                     }                                     let url = [js + '#isMusic=true#'];                                     try {                                         var lrc = JSON.parse(fetch('http://music.163.com/api/song/lyric?os=pc&lv=-1&kv=-1&tv=-1&id=' + j.id)).lrc.lyric;                                     } catch {}                                     return JSON.stringify({                                         urls: url,                                         lyric: lrc                                     })                                 }, j),                                 extra: {                                     inheritTitle: false,                                     longClick: [{                                         title: '下载歌曲',                                         js: $.toString((j) => {                                             try {                                                 var json = JSON.parse(fetch('https://api.xingzhige.com/API/NetEase_CloudMusic_new/?br=5&songid=' + j.id)).data.src;                                             } catch (e) {                                                 var json = ('https://music.163.com/song/media/outer/url?id=' + j.id);                                             }                                             return 'download://' + json                                         }, j)                                     }, {                                         title: '观看MV',                                         js: $.toString((j) => {                                             if (j.vid == '0') {                                                 var url = JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + j.title)).data.url;                                             } else {                                                 var url = 'https://hub.onmicrosoft.cn/public/video/ncm?raw=true&vid=' + j.vid;                                             }                                             return 'video://' + url                                         }, j)                                     }],                                 }                             });                         });                         setResult(d);                     }, id)                 }, gedan)             }),         }); /*网易排行榜歌单_结束*/         d.push({             title: getItem('kwgd', 'new') == 'new' ? '最新歌单' : '最热歌单',             col_type: 'icon_3_round_fill',             pic: 'hiker://files/Jm/lm/music/82.svg',             /*desc:getItem('kwgd', 'new') == 'new' ? '最新歌单' : '最热歌单',*/             url: $('#noLoading#').lazyRule(() => {                 setItem('kwgd', getItem('kwgd', 'new') == 'new' ? 'hot' : 'new');                 refreshPage(false);                 toast('已切换' + (getItem('kwgd', 'new') == 'new' ? '最新歌单' : '最热歌单'));                 return 'hiker://empty'             }),         }, {             title: '搜索',             col_type: 'input',             desc: '👉🏻 歌名、歌手、榜单名称',             url: $.toString(() => { /*if (!input) return \"toast://请输入关键词搜索\";*/                 if (!input) return 'hiker://localMedia';                 var txt = input;                 setItem('sspt_input', txt); /*音乐搜索引擎_开始*/                 return \"select://\" + JSON.stringify({                     options: [\"小七\", \"小芸\", \"小莴\"],                     attachView: true,                     js: $.toString((txt) => {                         if (input == '小七') {                             return $('hiker://empty#fypage#immersiveTheme##noHistory##noRecordHistory#').rule((txt) => {                                 setPageTitle('小七搜索');                                 let d = [];                                 let yiyan = JSON.parse(fetch('hiker://files/Jm/yiyan.json'));                                 let max = yiyan.length - 1;                                 let min = 0;                                 let num = Math.floor(Math.random() * (max - min + 1)) + min;                                 var Display = yiyan[num];                                 let json = JSON.parse(fetch('https://api.yaohud.cn/api/qqmusic/v2?key=aUlykA35KgmwPUpehJKNbFjo6v&type=so&page=' + MY_PAGE + '&per_page=30&word=' + txt)).data.list.map(j => {                                     return {                                         title: j.title,                                         singer: j.author,                                         pic: j.pic,                                         album: j.album.name,                                         id: j.mid                                     };                                 });                                 if (MY_PAGE == 1) {                                     d.push({                                         title: '🔎\\t' + txt,                                         col_type: 'movie_1_vertical_pic_blur',                                         desc: '🧸\\t小七音乐\\n\\n🎨\\t' + Display.replace(/，|。/g, ' '),                                         pic: json[0].pic,                                         url: 'hiker://empty',                                     });                                 }                                 json.forEach(j => {                                     d.push({                                         title: j.title,                                         col_type: 'text_1',                                         desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                         pic_url: j.pic + '@Referer=',                                         url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                                             try {                                                 var js = JSON.parse(fetch('https://api.leafone.cn/api/qqmusic?type=14&id=' + j.id)).data;                                                 var url = [js.url + '#isMusic=true#'];                                                 var lrc = js.lrc;                                             } catch {                                                 var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                                     timeout: 2000                                                 })).url;                                                 var url = [json[3] || json[2] || json[1] || json[0]];                                             }                                             return JSON.stringify({                                                 urls: url,                                                 lyric: lrc                                             })                                         }, j),                                         extra: {                                             inheritTitle: false,                                             longClick: [{                                                 title: '下载歌曲',                                                 js: $.toString((j) => {                                                     var js = JSON.parse(fetch('https://api.leafone.cn/api/qqmusic?type=14&id=' + j.id)).data.url;                                                     return 'download://' + json                                                 }, j)                                             }, {                                                 title: '观看MV',                                                 js: $.toString((j) => {                                                     try {                                                         var json = JSON.parse(fetch('https://xiaoapi.cn/API/mv_sq.php?n=1&msg=' + j.title, {                                                             timeout: 2000                                                         })).url;                                                         var url = [json[3] || json[2] || json[1] || json[0]];                                                     } catch (e) {                                                         var url = [JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + j.title, {                                                             timeout: 2000                                                         })).data.url];                                                     }                                                     return JSON.stringify({                                                         urls: url,                                                     })                                                 }, j)                                             }],                                         }                                     });                                 });                                 setResult(d);                             }, txt)                         } else if (input == '小芸') {                             return $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule((txt) => {                                 setPageTitle('小芸搜索');                                 let d = [];                                 let yiyan = JSON.parse(fetch('hiker://files/Jm/yiyan.json'));                                 let max = yiyan.length - 1;                                 let min = 0;                                 let num = Math.floor(Math.random() * (max - min + 1)) + min;                                 var Display = yiyan[num];                                 var json = JSON.parse(fetch('http://music.163.com/api/search/get/web?type=1&offset=0&limit=90&s=' + txt)).result.songs.map(j => {                                     let singer = j.artists.map(s => s.name);                                     return {                                         title: j.name,                                         singer: singer[0],                                         pic: 'https://wanghun.top/qqmusic/wymusic.php?type=pic&id=' + j.id,                                         album: j.album.name,                                         id: j.id,                                         vid: j.mvid                                     };                                 });                                 if (MY_PAGE == 1) {                                     d.push({                                         title: '🔎\\t' + txt,                                         col_type: 'movie_1_vertical_pic_blur',                                         desc: '🧸\\t小芸音乐\\n\\n🎨\\t' + Display.replace(/，|。/g, ' '),                                         pic: json[0].pic,                                         url: 'hiker://empty',                                     });                                 }                                 json.map(j => {                                     d.push({                                         title: j.title,                                         col_type: 'text_1',                                         pic_url: j.pic + '@Referer=',                                         desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                         url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                                             try {                                                 var js = JSON.parse(fetch('https://api.xingzhige.com/API/NetEase_CloudMusic_new/?br=5&songid=' + j.id)).data.src;                                             } catch (e) {                                                 var js = ('https://music.163.com/song/media/outer/url?id=' + j.id);                                             }                                             var url = [js + '#isMusic=true#'];                                             try {                                                 var lrc = JSON.parse(fetch('http://music.163.com/api/song/lyric?os=pc&lv=-1&kv=-1&tv=-1&id=' + j.id)).lrc.lyric;                                             } catch {}                                             return JSON.stringify({                                                 urls: url,                                                 lyric: lrc                                             })                                         }, j),                                         extra: {                                             inheritTitle: false,                                             longClick: [{                                                 title: '下载歌曲',                                                 js: $.toString((j) => {                                                     try {                                                         var json = JSON.parse(fetch('https://api.xingzhige.com/API/NetEase_CloudMusic_new/?br=5&songid=' + j.id)).data.src;                                                     } catch (e) {                                                         var json = ('https://music.163.com/song/media/outer/url?id=' + j.id);                                                     }                                                     return 'download://' + json                                                 }, j)                                             }, {                                                 title: '观看MV',                                                 js: $.toString((j) => {                                                     if (j.vid == '0') {                                                         var url = JSON.parse(fetch('https://api.cenguigui.cn/api/juhe/api.php?type=kgmv&n=1&msg=' + j.title)).data.url;                                                     } else {                                                         var url = 'https://hub.onmicrosoft.cn/public/video/ncm?raw=true&vid=' + j.vid;                                                     }                                                     return 'video://' + url                                                 }, j)                                             }],                                         }                                     });                                 });                                 setResult(d);                             }, txt)                         } else {                             return $('hiker://empty#fypage#immersiveTheme##noHistory##noRecordHistory#').rule((txt) => {                                 setPageTitle('小莴搜索');                                 let d = [];                                 let yiyan = JSON.parse(fetch('hiker://files/Jm/yiyan.json'));                                 let max = yiyan.length - 1;                                 let min = 0;                                 let num = Math.floor(Math.random() * (max - min + 1)) + min;                                 var Display = yiyan[num];                                 var json = JSON.parse(fetch('https://search.kuwo.cn/r.s?client=kt&pn=' + (MY_PAGE - 1) + '&rn=30&vipver=1&ft=music&encoding=utf8&rformat=json&mobi=1&all=' + txt)).abslist.map(j => {                                     let img = ('http://img1.kwcdn.kuwo.cn/star/albumcover/500' + j.web_albumpic_short.split('120')[1]);                                     return {                                         title: j.SONGNAME,                                         singer: j.ARTIST,                                         pic: img,                                         album: j.ALBUM,                                         rid: j.DC_TARGETID,                                         vid: j.mvpayinfo.vid                                     };                                 });                                 if (MY_PAGE == 1) {                                     d.push({                                         title: '🔎\\t' + txt,                                         pic: json[0].pic,                                         col_type: 'movie_1_vertical_pic_blur',                                         desc: '🧸\\t小莴音乐\\n\\n🎨\\t' + Display.replace(/，|。/g, ' '),                                         url: 'hiker://empty',                                     });                                 }                                 json.map(j => {                                     d.push({                                         title: j.title,                                         col_type: 'text_1',                                         pic: j.pic + '@Referer=',                                         desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                                         url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                                             try {                                                 var js = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_kuwomusic.php?n=1&type=json&msg=' + j.title)).flac_url;                                             } catch (e) {                                                 var js = JSON.parse(fetch('https://oiapi.net/API/Kuwo/?n=1&br=1&msg=' + j.title)).data.url;                                             }                                             let url = [js + '#isMusic=true#'];                                             try {                                                 var lrc = JSON.parse(fetch(\"https://m.kuwo.cn/newh5/singles/songinfoandlrc?musicId=\" + j.rid)).data.lrclist.map(d => {​​                                                     let s = (d.time % 60).toFixed(2).padStart(5, '0');                                                     let m = ((d.time - s) / 60).toFixed(0).padStart(2, '0');                                                     return '[' + m + ':' + s + ']' + d.lineLyric​                                                 }).join('\\n');                                             } catch {}                                             return JSON.stringify({                                                 urls: url,                                                 lyric: lrc                                             })                                         }, j),                                         extra: {                                             inheritTitle: false,                                             longClick: [{                                                 title: '下载歌曲',                                                 js: $.toString((j) => {                                                     try {                                                         var json = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_kuwomusic.php?n=1&type=json&msg=' + j.title)).flac_url;                                                     } catch (e) {                                                         var json = JSON.parse(fetch('https://oiapi.net/API/Kuwo/?n=1&br=1&msg=' + j.title)).data.url;                                                     }                                                     return 'download://' + json                                                 }, j)                                             }, {                                                 title: '观看MV',                                                 js: $.toString((j) => {                                                     if (j.vid == '0') {                                                         var url = JSON.parse(fetch('https://api.suyanw.cn/api/kg_mv.php?n=1&msg=' + j.title)).data.url;                                                     } else {                                                         let html = fetch('https://anymatch.kuwo.cn/mobi.s?f=web&user=6f173cf9a2a9da4c&source=kwplayer_ar_10.8.2.2_138.apk&type=get_url_by_vid&quality=MP4HV&p2pid=1&vid=' + j.vid);                                                         let a = html.split('=')[3];                                                         let b = a.split('?')[0];                                                         var url = b;                                                     }                                                     return 'video://' + url                                                 }, j)                                             }],                                         }                                     });                                 });                                 setResult(d);                             }, txt)                         }                     }, txt)                 })             }),             extra: {                 defaultValue: getItem('sspt_input', ''),                 onChange: 'setItem(\"sspt_input\",input)'             }         }); /*音乐搜索引擎_结束*/     } /*固定翻页1结束*/ /*酷我音乐歌单_开始*/     let kwgd = getItem('kwgd', 'new');     let html = ('http://wapi.kuwo.cn/api/pc/classify/playlist/getRcmPlayList?loginUid=0&loginSid=0&appUid=76039576&&pn=' + MY_PAGE + '&rn=36&order=' + kwgd);     var json = JSON.parse(fetch(html)).data;     json.data.map(data => {         d.push({             title: data.name,             col_type: 'card_pic_3',             pic: data.img,             url: $('hiker://empty#fypage#immersiveTheme##noHistory##noRecordHistory#').rule((data) => {                 setPageTitle('小莴歌单');                 let d = [];                 let html = JSON.parse(fetch('https://m.kuwo.cn/newh5app/wapi/api/www/playlist/playListInfo?pid=' + data.id + '&rn=30&ua=&ip=&pn=' + MY_PAGE)).data;                 var json = html.musicList.map(j => {                     return {                         title: j.name,                         singer: j.artist,                         album: j.album,                         pic: j.pic,                         id: j.rid,                         vid: j.mvpayinfo.vid,                         time: j.songTimeMinutes                     };                 });                 if (MY_PAGE == 1) {                     d.push({                         title: html.name,                         col_type: 'movie_1_vertical_pic_blur',                         pic: html.img700 || html.uPic,                         desc: '🧸\\t' + html.userName + '\\n\\n🎼\\t' + data.total + '首',                         url: 'hiker://empty',                     });                 }                 json.map(j => {                     d.push({                         title: j.title,                         col_type: 'text_1',                         desc: j.album ? j.singer + ' -- ' + j.album : j.singer + ' -- ' + j.title,                         pic: j.pic + '@Referer=',                         url: $('#noLoading##noHistory##noRecordHistory#').lazyRule((j) => {                             try {                                 var js = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_kuwomusic.php?n=1&type=json&msg=' + j.title)).flac_url;                             } catch (e) {                                 var js = JSON.parse(fetch('https://oiapi.net/API/Kuwo/?n=1&br=1&msg=' + j.title)).data.url;                             }                             let url = [js + '#isMusic=true#'];                             try {                                 var lrc = JSON.parse(fetch(\"https://m.kuwo.cn/newh5/singles/songinfoandlrc?musicId=\" + j.id)).data.lrclist.map(d => {​​                                     let s = (d.time % 60).toFixed(2).padStart(5, '0');                                     let m = ((d.time - s) / 60).toFixed(0).padStart(2, '0');                                     return '[' + m + ':' + s + ']' + d.lineLyric​                                 }).join('\\n');                             } catch {}                             return JSON.stringify({                                 urls: url,                                 lyric: lrc                             })                         }, j),                         extra: {                             inheritTitle: false,                             longClick: [{                                 title: '下载歌曲',                                 js: $.toString((j) => {                                     try {                                         var json = JSON.parse(fetch('https://www.hhlqilongzhu.cn/api/dg_kuwomusic.php?n=1&type=json&msg=' + j.title)).flac_url;                                     } catch (e) {                                         var json = JSON.parse(fetch('https://oiapi.net/API/Kuwo/?n=1&br=1&msg=' + j.title)).data.url;                                     }                                     return 'download://' + json                                 }, j)                             }, {                                 title: '观看MV',                                 js: $.toString((j) => {                                     if (j.vid == '0') {                                         var url = JSON.parse(fetch('https://api.suyanw.cn/api/kg_mv.php?n=1&msg=' + j.title)).data.url;                                     } else {                                         let html = fetch('https://anymatch.kuwo.cn/mobi.s?f=web&user=6f173cf9a2a9da4c&source=kwplayer_ar_10.8.2.2_138.apk&type=get_url_by_vid&quality=MP4HV&p2pid=1&vid=' + j.vid);                                         let a = html.split('=')[3];                                         let b = a.split('?')[0];                                         var url = b;                                     }                                     return 'video://' + url                                 }, j)                             }],                         }                     });                 });                 setResult(d);             }, data),         });     }); /*酷我音乐歌单_结束*/     setResult(d); })​","icon":"hiker://files/Jm/lm/more/18.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"虎牙直播","title":"虎牙","url":"@js: $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule(() => {     let d = [];     let gid = getItem('虎牙', '');     let img = 'hiker://files/Jm/lm/more/93.png';     var fenlei = [{         title: \"星秀\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/1663-MS.jpg\",         id: \"1663\"     }, {         title: \"颜值\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/2168-MS.jpg\",         id: \"2168\"     }, {         title: \"原创\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/6861-MS.jpg\",         id: \"6861\"     }, {         title: \"音乐\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/3793-MS.jpg\",         id: \"3793\"     }, {         title: \"一起看\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/2135-MS.jpg\",         id: \"2135\"     }, {         title: \"二次元\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/2633-MS.jpg\",         id: \"2633\"     }, {         title: \"娱乐天地\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/100022-MS.jpg\",         id: \"100022\"     }, {         title: \"吃喝玩乐\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/100044-MS.jpg\",         id: \"100044\"     }, {         title: \"交友\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/4079-MS.jpg\",         id: \"4079\"     }, {         title: \"户外\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/2165-MS.jpg\",         id: \"2165\"     }, {         title: \"旅游\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/6791-MS.jpg\",         id: \"6791\"     }, {         title: \"体育\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/2356-MS.jpg\",         id: \"2356\"     }, {         title: \"科技\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/2408-MS.jpg\",         id: \"2408\"     }, {         title: \"派对\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/7785-MS.jpg\",         id: \"7785\"     }, {         title: \"英雄联盟\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/1-MS.jpg\",         id: \"1\"     }, {         title: \"王者荣耀\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/2336-MS.jpg\",         id: \"2336\"     }, {         title: \"和平精英\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/3203-MS.jpg\",         id: \"3203\"     }, {         title: \"CF手游\",         icon: \"https://huyaimg.msstatic.com/cdnimage/game/2413-MS.jpg\",         id: \"2413\"     }];     if (MY_PAGE == 1) {         d.push({             title: '虎牙直播',             col_type: 'avatar',             desc: '切换',             pic: img,             url: $(fenlei, 3, '切换分类').select((fenlei) => {                 let i = fenlei.findIndex(t => t.title == input);                 let url = fenlei[i].id;                 setItem('虎牙', url);                 refreshPage(false);                 return 'hiker://empty'             }, fenlei),         }, {             col_type: 'line',         }, {             title: '搜索',             col_type: 'input',             desc: '输入你想搜索的',             url: $.toString(() => {                 if (!input) return \"toast://请输入关键词搜索\";                 var txt = input;                 return $('hiker://empty#fypage#noHistory##noRecordHistory#').rule((txt) => {                     setPageTitle('搜索' + '“' + txt + '”');                     let d = [];                     try {                         var json = JSON.parse(fetch('https://search.cdn.huya.com/?m=Search&do=getSearchContent&plt=m&q=' + txt + '&uid=0&app=11&v=4&typ=-5&start=' + MY_PAGE + '&rows=2'));                     } catch {}                     let j = json.response[\"3\"].docs.forEach(j => {                         var id = j.room_id;                         d.push({                             desc: j.game_introduction,                             title: j.gameName + '•' + j.game_nick,                             img: j.game_screenshot,                             col_type: 'movie_2',                             url: $('#noLoading#').lazyRule((id) => {                                 let url = ['video://https://cfss.cc/cdn/hy/' + id + '.flv', 'video://https://m.huya.com/' + id, 'video://https://epg.112114.xyz/huya/' + id];                                 return JSON.stringify({                                     urls: url,                                 })                             }, id),                         });                     });                     setResult(d);                 }, txt)             }),         });     }     try {         var json = JSON.parse(fetch('https://www.huya.com/cache.php?m=LiveList&do=getLiveListByPage&tagAll=0&page=' + MY_PAGE + '&gameId=' + gid)).data.datas;     } catch {}     json.map(data => {         var id = data.profileRoom;         d.push({             title: data.nick,             desc: data.introduction,             col_type: 'movie_2',             pic_url: data.screenshot,             url: $('#noLoading#').lazyRule((id) => {                 let url = ['video://https://cfss.cc/cdn/hy/' + id + '.flv', 'video://https://m.huya.com/' + id, 'video://https://epg.112114.xyz/huya/' + id];                 return JSON.stringify({                     urls: url,                 })             }, id),         });     });     setResult(d); })","icon":"hiker://files/Jm/lm/more/221.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"电视电台","title":"电视","url":"@js: var live = [{    'name': '🎗 电视频道',    'url': 'hiker://files/Jm/live/live.json'}, {    'name': '🪅 超级电视',    'url': 'hiker://files/Jm/live/livePro.json'}, {    'name': '🐯 虎牙影院',    'url': 'hiker://files/Jm/live/hyyy.json'}, {    'name': '🧲 星驰电影',    'url': 'hiker://files/Jm/live/zxcdy.json'}, {    'name': '📻 直播中国',    'url': 'hiker://files/Jm/live/zbzg.json'}, {    'name': '🎙 红歌音乐',    'url': 'hiker://files/Jm/live/hgyy.json'}, {    'name': '📡 电台广播',    'url': 'hiker://files/Jm/live/dtgb.json'}, {    'name': '👘 韩国女团',    'url': 'hiker://files/Jm/live/hgnt.json'}, {    'name': '💃 广场舞蹈',    'url': 'hiker://files/Jm/live/gcwd.json'}, {    'name': '📀 动感舞曲',    'url': 'hiker://files/Jm/live/dgwq.json'}, {    'name': '🐬 斗鱼影院',    'url': 'hiker://files/Jm/live/dyyqk.json'}, {    'name': '📺 怀旧影片',    'url': 'hiker://files/Jm/live/hjyp.json'}];var t = live.map(l => l.name);$(t, 2, '请选择').select((live) => {    var txt = input;    let t = live.findIndex(l => l.name == txt);    var u = live[t].url;    return $('hiker://empty#noHistory##noRecordHistory#').rule((u, txt) => {        setPageTitle(txt);        let d = [];        try {                        var json = JSON.parse(fetch(u)).data;            d.push({                title: '搜索',                col_type: 'input',                desc: '请输入关键词',                url: $.toString((json) => {                    function search(name) {                        return json.filter(item => item.name.toLowerCase().includes(name.toLowerCase()));                    }                    let results = search(input);                    if (results.length > 0) {                        return $('hiker://empty').rule((results) => {                            let d = [];                            let img = ('hiker://files/Jm/lm/more/195.png');                            results.forEach(r => {                                d.push({                                    title: r.name,                                    col_type: 'icon_2_round',                                    pic: img,                                    url: $('#noLoading#').lazyRule((r) => {                                        return JSON.stringify({                                            urls: r.url,                                        })                                    }, r),                                    extra: {                                        inheritTitle: false                                    }                                });                            });                            setResult(d);                        }, results)                    } else {                        return 'toast://没有找到'                    }                }, json)            });            json.forEach(a => {                let url = ('hiker://files/Jm/live/dtgb.json');                let img = ('hiker://files/Jm/lm/more/221.png');                let imgs = ('hiker://files/Jm/lm/more/258.png');                d.push({                    title: a.name,                    col_type: 'icon_2_round',                    pic: u == url ? imgs : img,                    url: $('#noLoading#').lazyRule((a) => {                        if (a.url == \"\") return 'toast://你咋不放链接嘞！';                        let url = a.url;                        return JSON.stringify({                            urls: url,                        })                    }, a),                    extra: {                        inheritTitle: false                    }                });            });        } catch {}        setResult(d);    }, u, txt)}, live);","icon":"hiker://files/Jm/lm/more/205.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":2,"name":"安卓壁纸T","code":"trr = [{\n    'title': '最新',\n    'id': ''\n}, {\n    'title': '美女',\n    'id': '/category/4e4d610cdf714d2966000000'\n}, {\n    'title': '动漫',\n    'id': '/category/4e4d610cdf714d2966000003'\n}, {\n    'title': '风景',\n    'id': '/category/4e4d610cdf714d2966000002'\n}, {\n    'title': '游戏',\n    'id': '/category/4e4d610cdf714d2966000007'\n}, {\n    'title': '文字',\n    'id': '/category/5109e04e48d5b9364ae9ac45'\n}, {\n    'title': '视觉',\n    'id': '/category/4fb479f75ba1c65561000027'\n}, {\n    'title': '情感',\n    'id': '/category/4ef0a35c0569795756000000'\n}, {\n    'title': '设计',\n    'id': '/category/4fb47a195ba1c60ca5000222'\n}, {\n    'title': '明星',\n    'id': '/category/5109e05248d5b9368bb559dc'\n}, {\n    'title': '物语',\n    'id': '/category/4fb47a465ba1c65561000028'\n}, {\n    'title': '男人',\n    'id': '/category/4e4d610cdf714d2966000006'\n}, {\n    'title': '机械',\n    'id': '/category/4e4d610cdf714d2966000005'\n}, {\n    'title': '城市',\n    'id': '/category/4fb47a305ba1c60ca5000223'\n}, {\n    'title': '动物',\n    'id': '/category/4e4d610cdf714d2966000001'\n}];\nvar tii = getItem('tid', '');\nvar tid = trr.map(i => i.id);\nno = '#gameTheme##noHistory##noRecordHistory#';\nurl = 'http://service.picasso.adesk.com/v1/vertical' + tii + '/vertical?limit=30&skip=fypage@-1@*30@#autoPage#' + no;\n[{\n    title: '壁纸',\n    col_type: 'icon_round_4',\n    img: 'hiker://files/Jm/lm/more/167.png',\n    url: $(url).rule(() => {\n        d = JSON.parse(getResCode()).res.vertical.map(html => ({\n            title: '',\n            url: html.preview + '#.jpg',\n            img: html.preview,\n            col_type: 'pic_1_full'\n        }));\n        setResult(d);\n    }),\n    extra: {\n        longClick: [{\n            title: '🔄切换分类',\n            js: $.toString((trr, tid) => {\n                var name = trr.map(t => t.title);\n                return $(name, 3, '请选择').select((trr, tid) => {\n                    var title = trr.findIndex(t => t.title == input);\n                    var url = trr[title].id;\n                    setItem('tid', url);\n                    refreshPage(false);\n                    return 'toast://已切换'\n                }, trr, tid)\n            }, trr, tid)\n        }]\n    }\n}];"},{"status":true,"pattern":0,"name":"聚合短视频解析","title":"解析","url":"@js: $([{    title: '视频解析',    icon: 'hiker://files/Jm/lm/q/35.png'}, {    title: '图集解析',    icon: 'hiker://files/Jm/lm/q/5.png'}, {    title: '音频解析',    icon: 'hiker://files/Jm/lm/q/125.png'}, {    title: '全民K歌',    icon: 'hiker://files/Jm/lm/q/20.png'}], 2, '请选择').select(() => {    if (input == '视频解析') {        return $('{{clipboard}}', '抖音/快手等视频分享链接').input(() => {            if (!input) return \"toast://请输入分享链接\";            var url = input.match(/(http:\\/\\/|https:\\/\\/)((\\w|=|\\?|\\.|\\/|&|-)+)/g);            return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule((url) => {                setPageTitle('');                let d = [];                try {                    CryptoUtil = $.require(\"hiker://assets/crypto-java.js\");                    str_key = CryptoUtil.Data.parseUTF8(\"BH6MxHTGX2cUUGRdWAg5Vt20awucQsiQ\");                    str_iv = CryptoUtil.Data.parseUTF8(\"7RUK0XQYLDMqNWob\");                    aes = word => CryptoUtil.AES.decrypt(word, str_key, {                        mode: \"AES/CBC/PKCS5Padding\",                        iv: str_iv                    }).toString();                    var json = JSON.parse(JSON.parse(aes(request(\"https://alldown.magictool.cn/pro/qsyApi.php?url=\" + url + \"/&token=lKKln239WEOjfweLLAP02JNs\")))).data;                    var sp = {                        title: json.title,                        url: json.video ? json.url : json.down,                    };                } catch (e) {                    var json = JSON.parse(fetch('https://vdds.mayisoso.com/api/v2/2EDE571298155469E945ADC9BE8BD80C100D19/53/?url=' + url)).data;                    var sp = {                        title: json.title,                        url: json.video ? json.url : json.down,                    };                }                let title = sp.title.replace(/[ ]|#|&|/g, '');                d.push({                    col_type: 'x5_webview_single',                    desc: 'float&&640',                    url: sp.url,                    extra: {                        autoPlay: true                    }                }, {                    title: title,                    col_type: 'rich_text',                }, {                    title: '下载视频',                    col_type: 'text_center_1',                    url: 'download://' + sp.url,                    extra: {                        pageTitle: title,                        lineVisible: false                    }                });                setResult(d);            }, url)        })    } else if (input == '图集解析') {        return $('{{clipboard}}', '抖音/快手图集分享链接').input(() => {            if (!input) return \"toast://请输入分享链接\";            var url = input.match(/(http:\\/\\/|https:\\/\\/)((\\w|=|\\?|\\.|\\/|&|-)+)/g);            return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule((url) => {                setPageTitle('');                let d = [];                if (/douyin/.test(url)) {                    var json = JSON.parse(fetch('https://vip.apihz.cn/api/fun/douyin.php?id=10001727&key=c3dd7cf3a6fc0306ba6d8a870ee500b4&url=' + url));                    var tj = {                        music: json.yvideo,                        pic: json.images,                    };                } else {                    var json = JSON.parse(fetch('https://vdds.mayisoso.com/api/v2/2EDE571298155469E945ADC9BE8BD80C100D19/53/?url=' + url)).data;                    var tj = {                        music: '',                        pic: json.images,                    };                }                d.push({                    col_type: 'x5_webview_single',                    desc: '0',                    url: tj.music,                    extra: {                        autoPlay: true                    }                });                tj.pic.map(img => d.push({                    col_type: 'pic_1_full',                    pic: img + '#.jpg',                    url: img + '#.jpg',                }));                setResult(d);            }, url)        })    } else if (input == '音频解析') {        return $('{{clipboard}}', '抖音/快手等音视频分享链接').input(() => {            if (!input) return \"toast://请输入分享链接\";            var url = input.match(/(http:\\/\\/|https:\\/\\/)((\\w|=|\\?|\\.|\\/|&|-)+)/g);            return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule((url) => {                setPageTitle('');                let d = [];                try {                    var json = JSON.parse(request(\"https://api.zm.io.vn/v1/social/autolink?apikey=tele_tq&url=\" + url));                    var yp = {                        title: json.title,                        music: json.medias[3].url,                        pic: json.thumbnail,                    };                } catch (e) {                    CryptoUtil = $.require(\"hiker://assets/crypto-java.js\");                    str_key = CryptoUtil.Data.parseUTF8(\"BH6MxHTGX2cUUGRdWAg5Vt20awucQsiQ\");                    str_iv = CryptoUtil.Data.parseUTF8(\"7RUK0XQYLDMqNWob\");                    aes = word => CryptoUtil.AES.decrypt(word, str_key, {                        mode: \"AES/CBC/PKCS5Padding\",                        iv: str_iv                    }).toString();                    var json = JSON.parse(JSON.parse(aes(request(\"https://alldown.magictool.cn/pro/qsyApi.php?url=\" + url + \"/&token=lKKln239WEOjfweLLAP02JNs\")))).data;                    var yp = {                        title: json.title,                        music: json.url ? json.down : json.video,                        pic: json.cover ? json.cover : json.download_image,                    };                }                var title = yp.title.replace(/[ ]|#|&|/g, '');                d.push({                    title: title,                    col_type: 'pic_1_full',                    pic: yp.pic + '@Referer=',                    url: $('#noHistory##noRecordHistory#').lazyRule((yp) => {                        refreshX5WebView('');                        return yp.music + '#isMusic=true#'                    }, yp),                });                d.push({                    col_type: 'x5_webview_single',                    desc: '0',                    url: yp.music,                    extra: {                        autoPlay: true                    }                });                d.push({                    title: '下载音频',                    col_type: 'text_center_1',                    url: 'download://' + yp.music,                    extra: {                        pageTitle: title,                    }                });                setResult(d);            }, url)        })    } else {        return $('{{clipboard}}', '请输入全民K歌分享链接').input(() => {            if (!input) return \"toast://请输入分享链接\";            var url = input.match(/(http:\\/\\/|https:\\/\\/)((\\w|=|\\?|\\.|\\/|&|-)+)/g);            return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule((url) => {                setPageTitle('');                let d = [];                try {                    var json = JSON.parse(fetch('https://api.uomg.com/api/get.kg?songurl=' + url)).data;                    var kg = {                        name: json.song_name,                        author: json.kg_nick,                        pic: json.pic,                        url: json.playurl,                    };                } catch (e) {                    var json = JSON.parse(fetch('http://api.cmvip.cn/API/qmkgzljx.php?url=' + url)).data;                    var kg = {                        name: json.song_name,                        author: json.author.avatar,                        pic: json.pic,                        url: json.musiclink,                    };                }                d.push({                    title: kg.name + '•' + kg.author,                    col_type: 'pic_1_full',                    pic: kg.pic + '@Referer=',                    url: $('#noHistory##noRecordHistory#').lazyRule((kg) => {                        var url = kg.url + '#isMusic=true#';​                        try {                            var lrc = fetch('https://api.52vmy.cn/api/music/lrc?token=430edc03c878d6c3545b73323db06ed2&n=1&msg=' + kg.name + ' ' + kg.author);                        } catch {                            toast('歌词获取失败');                        }                        refreshX5WebView('');                        return JSON.stringify({                            urls: [url],                            lyric: lrc                        })                    }, kg),                });                d.push({                    col_type: 'x5_webview_single',                    desc: '0',                    url: kg.url,                    extra: {                        autoPlay: true                    }                });                d.push({                    title: '下载音频',                    col_type: 'text_center_1',                    url: 'download://' + kg.url,                    extra: {                        pageTitle: kg.name + '•' + kg.author,                    }                });                setResult(d);            }, url)        })    }})","icon":"hiker://files/Jm/lm/more/253.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"抖鱼直播","title":"抖鱼","url":"@js: $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule(() => {     let d = [];     let fl_id = getItem('斗鱼', '');     let img = 'https://api.xinac.net/icon/?url=https://m.douyu.com';     var fenlei = [{         title: \"原创IP\",         icon: \"https://cs-op.douyucdn.cn/dycatr/1c4f9b3e0db24610879faf1e041d53d5.jpg\",         id: \"ip\"     }, {         title: \"一起看\",         icon: \"https://sta-op.douyucdn.cn/dycatr/af69eeb1943a9444d2362a7f06c22dc6.png\",         id: \"yqk\"     }, {         title: \"二次元\",         icon: \"https://sta-op.douyucdn.cn/dycatr/346f48f437946cd2ef2a00bb0314e6f3.jpg\",         id: \"ecy\"     }, {         title: \"音乐\",         icon: \"https://cs-op.douyucdn.cn/dycatr/game_cate/fe21193c72537bad3cd9917d67e4b02c.png\",         id: \"music\"     }, {         title: \"户外\",         icon: \"https://cs-op.douyucdn.cn/dycatr/game_cate/b24b716b2a13bc0b758632e5b20e0835.png\",         id: \"HW\"     }, {         title: \"美食\",         icon: \"https://sta-op.douyucdn.cn/dycatr/695949a51d22548a26880235cb6f9c13.png\",         id: \"ms\"     }, {         title: \"心动派对\",         icon: \"https://sta-op.douyucdn.cn/dycatr/19da1f24bc54c3fc5b5dca9af3993a85.png\",         id: \"xdpd\"     }, {         title: \"音遇恋人\",         icon: \"https://sta-op.douyucdn.cn/dycatr/fa56a271305bfd86421dee8851e0a077.png\",         id: \"yinyu\"     }, {         title: \"星秀\",         icon: \"https://sta-op.douyucdn.cn/dycatr/13054bd5068b08d7716a207efe6e4b01.png\",         id: \"xingxiu\"     }, {         title: \"心动FM\",         icon: \"https://sta-op.douyucdn.cn/dycatr/d8cd4a9bfd0425cba1739a6392c46215.png\",         id: \"dtxs\"     }, {         title: \"娱乐推荐\",         icon: \"https://sta-op.douyucdn.cn/dycatr/6def7235dc5e010575ec3254425cc2bf.png\",         id: \"yltj\"     }, {         title: \"颜值\",         icon: \"https://cs-op.douyucdn.cn/dycatr/game_cate/d1546cfd3f7f985719f894496f2a7b2e.png\",         id: \"yz\"     }, {         title: \"推荐\",         icon: \"https://cs-op.douyucdn.cn/dycatr/game_cate/06d8d4d79ed2f444dd6d88e374c7cd42.png\",         id: \"\"     }, {         title: \"王者荣耀\",         icon: \"https://sta-op.douyucdn.cn/dycatr/0d96d63ee9550728acd899d66eee3625.png\",         id: \"wzry\"     }, {         title: \"和平精英\",         icon: \"https://sta-op.douyucdn.cn/dycatr/8560eb4cba9e734a0d7408f6a9b9efb8.png\",         id: \"hpjy\"     }, {         title: \"英雄联盟\",         icon: \"https://sta-op.douyucdn.cn/dycatr/1de1ea5215b513cf4f5b3c326f5f9657.png\",         id: \"LOL\"     }, {         title: \"热门游戏\",         icon: \"https://sta-op.douyucdn.cn/dycatr/e8d2f2deca2025ec12874d6d6792489a.png\",         id: \"rmyx\"     }, {         title: \"CF手游\",         icon: \"https://sta-op.douyucdn.cn/dycatr/fb26cc75b5d8777f287b2ca0947f5df6.png\",         id: \"CFSY\"     }];     if (MY_PAGE == 1) {         d.push({             title: '斗鱼直播',             col_type: 'avatar',             desc: '切换',             pic: img,             url: $(fenlei, 3, '请选择').select((fenlei) => {                 let i = fenlei.findIndex(t => t.title == input);                 let url = fenlei[i].id;                 setItem('斗鱼', url);                 refreshPage(false);                 return 'hiker://empty'             }, fenlei),         }, {             col_type: 'line',         }, {             title: '搜索',             col_type: 'input',             desc: '输入你想搜索的',             url: $.toString(() => {                 if (!input) return 'toast://请输入关键词搜索';                 var txt = input;                 return $('hiker://empty#fypage#noHistory##noRecordHistory#').rule((txt) => {                     setPageTitle('搜索' + '“' + txt + '”');                     let d = [];                     try {                         var json = JSON.parse(fetch('https://www.douyu.com/japi/search/api/searchShow?kw=' + txt + '&page=' + MY_PAGE + '&pageSize=20')).data;                     } catch {}                     let js = json.relateShow.forEach(j => {                         var id = j.rid;                         d.push({                             desc: j.nickName + '🔹' + j.hot,                             title: j.cateName + '•' + j.roomName,                             img: j.roomSrc,                             col_type: 'movie_2',                             url: $('#noLoading#').lazyRule((id) => {                                 let a = 'http://zzy789.xyz/douyu1.php?id=' + id;                                 let b = 'http://maomao.kandiantv.cn/douyu1.php?id=' + id;                                 let url = ['video://' + a, 'video://' + b];                                 return JSON.stringify({                                     urls: url,                                 })                             }, id),                         });                     });                     setResult(d);                 }, txt)             }),         });     }     try {         var json = JSON.parse(fetch('https://m.douyu.com/api/room/list?limit=20&page=' + MY_PAGE + '&type=' + fl_id)).data;     } catch {}     json.list.map(data => {         var id = data.rid;         d.push({             title: data.roomName,             desc: data.nickname + '🔹' + data.hn,             col_type: 'movie_2',             pic_url: data.roomSrc,             url: $('#noLoading#').lazyRule((id) => {                 let a= 'http://zzy789.xyz/douyu1.php?id=' + id;                 let b = 'http://maomao.kandiantv.cn/douyu1.php?id=' + id;                 let url = ['video://' + a, 'video://' + b];                 return JSON.stringify({                     urls: url,                 })             }, id),         });     });     setResult(d); })","icon":"hiker://files/Jm/lm/more/263.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"一个图文","title":"图文","url":"@js: $([{     title: '今日热榜',     icon: 'hiker://files/Jm/lm/more/10.png' }, {     title: '猫眼电影',     icon: 'hiker://files/Jm/lm/more/171.png' }, {     title: '秒懂新闻',     icon: 'hiker://files/Jm/lm/more/1.png' }, {     title: '日常聊天',     icon: 'hiker://files/Jm/lm/more/25.png' }, {     title: '一个图文',     icon: 'hiker://files/Jm/lm/more/48.png' }, {     title: '开眼视频',     icon: 'hiker://files/Jm/lm/more/161.png' }, {     title: '历史今天',     icon: 'hiker://files/Jm/lm/more/303.png' }, {     title: '组件展示',     icon: 'hiker://files/Jm/lm/more/213.png' }, {     title: '猫看白噪音',     icon: 'https://www.maokan.cc/favicon.ico' }, {     title: '二维码生成',     icon: 'hiker://files/Jm/lm/q/70.png' }, ], 2, '请选择').select(() => {     if (input == '今日热榜') {         return $('hiker://empty#fullTheme##noHistory##noRecordHistory#').rule(() => {             let d = [];             let url = \"https://rebang.today/\";             d.push({                 col_type: \"x5_webview_single\",                 url: url,                 desc: \"float&&100%\",                 title: \"\",                 extra: {                     canBack: true,                     showProgress: false,                     urlInterceptor: $.toString((my) => {                         if (input.startsWith(my)) {                             return false;                         }                         return $.toString((url) => {                             fy_bridge_app.open(JSON.stringify({                                 title: \"详情\",                                 url: \"hiker://empty\",                                 findRule: \"js:\" + $$$.toString((u) => {                                     let js = $.toString(() => {                                         try {                                             if (document.title && document.title.length) {                                                 let r = $$$().lazyRule((t) => {                                                     setPageTitle(t);                                                 }, document.title);                                                 fy_bridge_app.parseLazyRule(r);                                             }                                         } catch (e) {                                             fy_bridge_app.log(e.toString());                                         }                                     });                                     setResult([{                                         url: u,                                         col_type: \"x5_webview_single\",                                         extra: {                                             canBack: true,                                             showProgress: false,                                             js: js                                         },                                         desc: \"100%&&float\"                                     }]);                                 }, url)                             }))                         }, input)                     }, url)                 }             });             setResult(d);         })     } else if (input == '猫眼电影') {         return $('hiker://empty#fypage#noHistory##noRecordHistory##fullTheme#').rule(() => {             setPageTitle('猫眼电影');             let d = [];             let my_list = getItem('maoyan', 'movieOnInfoList');             let json = JSON.parse(fc('https://m.maoyan.com/ajax/' + my_list + '?ci=&token=&limit=0', 12)).movieIds;             if (MY_PAGE == 1) {                 d.push({                     title: '猫眼电影',                     desc: getItem('maoyan', 'movieOnInfoList') == 'movieOnInfoList' ? '正在热映' : '即将上映',                     col_type: 'avatar',                     pic: 'https://favicon.qqsuu.cn/https://m.maoyan.com/',                     url: $('#noLoading#').lazyRule(() => {                         setItem('maoyan', getItem('maoyan', 'movieOnInfoList') == 'movieOnInfoList' ? 'comingList' : 'movieOnInfoList');                         refreshPage(false);                         toast('已切换' + (getItem('maoyan', 'movieOnInfoList') == 'movieOnInfoList' ? '正在热映' : '即将上映'));                         return 'hiker://empty'                     }),                 }, {                     col_type: 'line',                 });             }             let n = MY_PAGE;             if (MY_PAGE == 1) {                 var data = json.slice(0, 6);             } else if (MY_PAGE => 2) {                 var data = json.slice(n * 6 - 6, n * 6);             }             data.map(j => {                 let js = JSON.parse(fetch('https://m.maoyan.com/ajax/detailmovie?movieId=' + j));                 let xq = js.detailMovie;                 let desc = (xq.cat + '\\n' + xq.star + '\\n' + xq.pubDesc).replace(/undefined/g, '');                 d.push({                     title: xq.nm + '\\n\\n🔹' + xq.dir,                     desc: desc,                     col_type: 'movie_1_vertical_pic',                     pic_url: xq.img ? xq.img : xq.videoImg,                     url: $('hiker://empty#noHistory##noRecordHistory##fullTheme#').rule((xq) => {                         setPageTitle(xq.nm);                         let d = [];                         d.push({                             title: xq.nm,                             desc: '图片',                             col_type: 'avatar',                             pic: xq.img ? xq.img : xq.videoImg,                             url: $('hiker://empty#noHistory##noRecordHistory##gameTheme#').rule((xq) => {                                 if (xq.photos == null) return 'toast://木有图片哦。';                                 let d = [];                                 xq.photos.map(img => {                                     d.push({                                         col_type: 'pic_1_full',                                         pic: img + '#.jpg',                                         url: img + '#.jpg',                                     });                                 });                                 setResult(d);                             }, xq),                         }, {                             col_type: 'big_blank_block',                         });                         d.push({                             col_type: 'x5_webview_single',                             desc: 'list&&200',                             url: xq.videourl ? xq.vd : '',                             extra: {                                 autoPlay: true,                                 showProgress: false                             }                         }, {                             col_type: 'big_blank_block',                         }, {                             col_type: 'big_blank_block',                         });                         var list = storage0.getItem('maoyan_search', '[\"青豆\", \"聚影\", \"风影\", \"云盘君.简\"]');                         list.forEach(function(l) {                             d.push({                                 title: l,                                 col_type: 'text_4',                                 url: 'hiker://search?rule=' + l + '&s=' + xq.nm,                                 extra: {                                     longClick: [{                                         title: '更改搜索',                                         js: $.toString((list) => {                                             return $(list, '想要更改的搜索小程序名称').input(() => {                                                 storage0.setItem('maoyan_search', input);                                                 refreshPage(false);                                                 return 'hiker://empty'                                             }, list)                                         }, list),                                     }, {                                         title: '恢复默认',                                         js: $.toString(() => {                                             clearItem('maoyan_search', input);                                             refreshPage(false);                                             return 'hiker://empty'                                         })                                     }],                                 }                             });                         });                         d.push({                             col_type: 'big_blank_block',                         }, {                             col_type: 'line_blank',                         });                         d.push({                             title: xq.videoName ? xq.videoName + '\\n\\n' + xq.dra : xq.dra,                             col_type: 'long_text',                         });                         setResult(d);                     }, xq),                 });             });             setResult(d);         })     } else if (input == '秒懂新闻') {         return $('hiker://empty#noHistory##noRecordHistory#').rule(() => {             setPageTitle('秒懂新闻');             try {                 let d = [];                 let json = JSON.parse(fc('http://excerpt.rubaoo.com/toolman/getMiniNews', 8)).data;                 let yy = 'https://yuanxiapi.cn/api/voice/?per=0&pit=-5&spd=5.5&text=现在为您播报新闻' + json.news;                 d.push({                     col_type: 'x5_webview_single',                     desc: '0&&float',                 });                 d.push({                     col_type: 'pic_1_card',                     img: json.head_image,                     title: '日期：' + json.date,                     url: $('#noLoading#').lazyRule((yy) => {                         refreshX5WebView(yy);                         return 'hiker://empty'                     }, yy)                 });                 d.push({                     title: json.weiyu,                     col_type: 'text_1',                     url: 'copy://' + json.weiyu,                 });                 json.news.map(item => {                     d.push({                         col_type: 'long_text',                         title: item,                         extra: {                             textSize: '17'                         }                     });                     d.push({                         col_type: 'line'                     });                 });                 setResult(d);             } catch {}         })     } else if (input == '日常聊天') {         return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule(() => {             setPageTitle('日常聊天室');             let d = [];             d.push({                 col_type: 'x5_webview_single',                 desc: 'float&&100%',                 url: 'https://nichijou.cn/',                 extra: {                     canBack: true,                     autoPlay: true,                     showProgress: false,                 }             });             setResult(d);         })     } else if (input == '一个图文') {         return $('hiker://empty#fullTheme##noHistory##noRecordHistory#').rule(() => {             let d = [];             d.push({                 col_type: 'x5_webview_single',                 desc: 'float&&100%',                 url: 'http://m.wufazhuce.com/one',                 extra: {                     canBack: true,                     showProgress: false,                 }             });             setResult(d);         })     } else if (input == '猫看白噪音') {         return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule(() => {             setPageTitle('猫看白噪音');             let d = [];             d.push({                 col_type: 'x5_webview_single',                 desc: 'float&&100%',                 url: 'https://www.maokan.cc/',                 extra: {                     canBack: true,                     autoPlay: true,                     showProgress: false,                 }             });             setResult(d);         })     } else if (input == '二维码生成') {         return $('hiker://empty#noHistory##noRecordHistory#').rule(() => {             setPageTitle('二维码生成');             let d = [];             if (!fileExist('hiker://files/Jm/png/QR.json')) {                 saveFile('hiker://files/Jm/png/QR.json', '[]');             }             try {                 var json = JSON.parse(request('hiker://files/Jm/png/QR.json'));             } catch {}             d.push({                 title: '生成',                 desc: '内容+(.|空格|换行)标题',                 col_type: 'input',                 url: $.toString(() => {                     try {                         var txt = input.split(/\\n?\\n|[\\.]|\\t/);                     } catch (e) {                         var txt = input;                     }                     let time = new Date().getTime();                     let file = 'hiker://files/Jm/png/QR/' + time + '.png';                     let url = 'https://api.shwgij.com/api/qrcode/get?key=E05UkxoHdJGRpDnpo8g0gqibVR&size=10&margin=2&level=3&text=' + txt[0];                     setItem('二维码图片', url);                     saveImage(url, file);                     let data = {                         title: txt == null ? txt : txt[1],                         pic: file                     };                     QR = JSON.parse(request('hiker://files/Jm/png/QR.json'));                     QR = QR.concat(data);                     saveFile('hiker://files/Jm/png/QR.json', JSON.stringify(QR));                     refreshPage(false);                     return 'hiker://empty'                 }),             });             json.map(j => {                 d.push({                     title: j.title || '不取个名字吗？',                     col_type: 'card_pic_3_center',                     pic: getItem('二维码图片') || j.pic,                     desc: '0',                     url: \"select://\" + JSON.stringify({                         options: [\"查看\", \"删除\"],                         attachView: true,                         js: $.toString((j) => {                             if (input == '查看') {                                 return getPath(j.pic) + '#.jpg'                             } else {                                 QR = JSON.parse(request('hiker://files/Jm/png/QR.json'));                                 let indexToRemove = QR.indexOf(j.pic);                                 let removedElements = QR.splice(indexToRemove, 1);                                 saveFile('hiker://files/Jm/png/QR.json', JSON.stringify(QR));                                 deleteFile(j.pic);                                 refreshPage(false);                                 return 'toast://删除成功~'                             }                         }, j)                     }),                 });             });             setResult(d);         })     } else if (input == '开眼视频') {         return $('hiker://empty#fypage#noHistory##noRecordHistory#').rule(() => {             setPageTitle('开眼视频');             let d = [];              function json(url) {                 try {                     var json = JSON.parse(fetch(url));                     var item = json.itemList;                 } catch {}                 item.forEach((item, index) => {                     if (item.type == \"video\") {                         let img = item.data.cover.feed.replace('ali-ali-', 'ali-').split('?')[0];                         d.push({                             title: item.data.title,                             col_type: 'movie_2',                             pic_url: img,                             url: 'video://' + item.data.playUrl,                         });                     };                 });                 putVar('n', json.nextPageUrl);             };             if (MY_PAGE == 1) {                 json('http://baobab.kaiyanapp.com/api/v4/tabs/selected');             } else {                 nextp = getVar('n');                 json(nextp);             }             setResult(d);         })     } else if (input == '历史今天') {         return $('hiker://empty#immersiveTheme##noHistory##noRecordHistory#').rule(() => {             setPageTitle('历史上的今天');             try {                 var json = JSON.parse(fc('https://qqlykm.cn/api/history/get?key=79R8W024fwEhPaqbkccpxLaLim', 8));             } catch {}             let d = [];             let img = 'https://qqlykm.cn/api/bing/get?key=79R8W024fwEhPaqbkccpxLaLim&type=rand' + '#' + Date.now() + '#.jpg';             d.push({                 title: '必须认真对待历史事实,以正视听正面向未来。',                 col_type: 'movie_1_vertical_pic_blur',                 desc: '历史是一面永不褪色的镜子，它展现着人类文明的进程，也记录着人类的罪恶与悲剧。' + json.date,                 pic: img,                 url: img,             });             json.data.map(u => d.push({                 title: u.year + '年: ' + u.title,                 col_type: 'text_1',                 desc: '点击查看人物详情',                 url: $('hiker://empty#fullTheme##noHistory##noRecordHistory').rule((u) => {                     let d = [];                     d.push({                         col_type: 'x5_webview_single',                         desc: 'float&&100%',                         url: u.url,                         extra: {                             canBack: true,                             showProgress: false,                         }                     });                     setResult(d);                 }, u),             }));             setResult(d);         })     } else {         return $('hiker://empty#noHistory##noRecordHistory#').rule(() => {             setPageTitle('组件展示');             let d = [];             let img = 'hiker://images/home_bg';             let baseElements = ['text_1', 'text_center_1', 'text_2', 'text_3', 'text_4', 'text_5', 'flex_button', 'scroll_button'];             let picElements = ['pic_1_full', 'pic_3', 'pic_3_square'];             let iconElements = ['text_icon', 'avatar', 'icon_1_search', 'movie_1', 'movie_1_left_pic', 'movie_1_vertical_pic', 'movie_1_vertical_pic_blur', 'movie_2', 'movie_3', 'movie_3_marquee', 'pic_1', 'pic_1_card', 'pic_2', 'pic_2_card', 'icon_2', 'icon_2_round', 'icon_small_3', 'icon_3_round_fill', 'icon_4', 'icon_4_card', 'icon_small_4', 'icon_round_4', 'icon_round_small_4', 'icon_5', 'card_pic_2_2', 'card_pic_2_2_left', 'card_pic_3', 'card_pic_3_center'];             d.push({                 title: 'input',                 col_type: 'input',                 desc: '说明：点击即复制样式!',                 url: $.toString(() => {                     return 'copy://input'                 }),             });             baseElements.forEach(w => d.push({                 title: w,                 col_type: w,                 url: 'copy://' + w,             }));             picElements.forEach(p => {                 d.push({                     title: p,                     col_type: 'text_1',                     url: 'copy://' + p,                 });                 d.push({                     col_type: p,                     pic: img,                     url: 'copy://' + p,                 });             });             iconElements.forEach(i => {                 d.push({                     title: i,                     col_type: i,                     pic: img,                     url: 'copy://' + i,                 });             });             d.push({                 title: 'card_pic_1',                 col_type: 'card_pic_1',                 desc: '0',                 pic: img,                 url: 'copy://card_pic_1',             }, {                 title: 'card_pic_2',                 col_type: 'card_pic_2',                 desc: '0',                 pic: img,                 url: 'copy://card_pic_2',             }, {                 title: 'x5_webview_single',                 col_type: 'text_1',                 url: 'copy://x5_webview_single',             }, {                 title: 'long_text',                 col_type: 'text_2',                 url: 'copy://long_text',             }, {                 title: 'rich_text',                 col_type: 'text_2',                 url: 'copy://rich_text',             }, {                 title: 'line',                 col_type: 'flex_button',                 url: 'copy://line',             }, {                 col_type: 'line',             }, {                 title: 'line_blank',                 col_type: 'flex_button',                 url: 'copy://line_blank',             }, {                 col_type: 'line_blank',             }, {                 title: 'blank_block',                 col_type: 'flex_button',                 url: 'copy://blank_block',             }, {                 col_type: 'blank_block',             }, {                 title: 'big_blank_block',                 col_type: 'flex_button',                 url: 'copy://big_blank_block',             }, {                 col_type: 'big_blank_block',             }, {                 title: 'big_big_blank_block',                 col_type: 'flex_button',                 url: 'copy://big_big_blank_block',             }, {                 col_type: 'big_big_blank_block',             });             setResult(d);         })     } })","icon":"hiker://files/Jm/lm/more/213.png","desc":"","type":"icon_round_4"}],"fold_status":true,"pattern":3},{"name":"娱乐书签组","mark":"开关","list":[{"status":true,"pattern":0,"name":"哔哩舞蹈视频","title":"哔哩","url":"@js: $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule(() => {     setPageTitle('B站舞蹈');     let d = [];     let rid = getItem('rid', '199');     if (MY_PAGE == 1) {         d.push({             title: '哔哩舞蹈',             col_type: 'avatar',             desc: '切换',             pic: 'hiker://files/Jm/lm/more/336.png',             url: $('#noLoading#').lazyRule(() => {                 var list = [{                     'title': '日常',                     'rid': '21'                 }, {                     'title': '音乐',                     'rid': '28'                 }, {                     'title': '现场',                     'rid': '29'                 }, {                     'title': '宅舞',                     'rid': '20'                 }, {                     'title': '街舞',                     'rid': '198'                 }, {                     'title': '明星',                     'rid': '199'                 }, {                     'title': '国风',                     'rid': '200'                 }, {                     'title': '网红',                     'rid': '255'                 }, {                     'title': '综合',                     'rid': '154'                 }];                 let title = list.map(i => i.title);                 return $(title, 3, '请选择一个分类').select((list) => {                     let u = list.findIndex(i => i.title == input);                     let id = list[u].rid;                     setItem('rid', id);                     refreshPage(false);                     return 'toast://已切换'                 }, list)             }),             extra: {                 longClick: [{                     title: '输入Cookie_sessdata',                     js: $.toString(() => {                         let bili = getItem('bili_input', '');                         return $(bili, 'Cookie中的sessdata\\n输入后才可观看高清视频').input(() => {                             if (!input) return \"toast://不能为空\";                             let txt = input;                             setItem('Cookie_sessdata', txt);                             setItem('bili_input', txt);                             refreshPage(false);                             return 'toast://可以观看高清视频啦'                         })                     })                 }],             }         }, {             col_type: 'line',         });     }     let json = JSON.parse(fetch('https://api.bilibilI.com/x/web-interface/newlist?type=0&pn=' + MY_PAGE + '&ps=100&jsonp=jsonp&rid=' + rid)).data;     json.archives.map(html => {         var bvid = html.bvid;         d.push({             title: html.title,             desc: html.tname,             col_type: 'movie_3_marquee',             pic_url: html.pic + '@Referer=',             url: $('hiker://empty#noHistory##noRecordHistory#').lazyRule((bvid) => {                 var url = JSON.parse(fetch('https://api.pearktrue.cn/api/bilibili/parse.php?bvid=' + bvid + '&sessdata=' + getItem('Cookie_sessdata'))).data.videos.map(data => data.videourl);                 return JSON.stringify({                     urls: url,                 })             }, bvid),         });     });     setResult(d); })","icon":"hiker://files/Jm/lm/more/336.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"休闲游戏","title":"游戏","url":"@js: $([{     title: '游侠游戏',     icon: 'hiker://files/Jm/lm/more/59.png' }, {     title: '精选游戏',     icon: 'hiker://files/Jm/lm/more/300.png' }, {     title: '街机游戏',     icon: 'hiker://files/Jm/lm/more/157.png' }], 2, '请选择').select(() => {​     if (input == '游侠游戏') {​         return $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule(() => {             setPageTitle('');             let d = [];             let id = getItem('游侠', '4');             var html = ('https://u.ali213.net');             let page = MY_PAGE;             let url = fetch(html + '/list/' + page + '_' + id + '.html');;             let list = pdfa(url, 'body&&.col-lg-3.col-md-4.col-sm-6.col-xs-12');             if (MY_PAGE == 1) {                 d.push({                     title: '游侠小游戏',                     col_type: 'avatar',                     pic: 'hiker://files/Jm/lm/more/300.png',                     desc: '切换',                     url: $('#noLoading#').lazyRule(() => {                         var list = [{                             'name': '女孩专题',                             'id': '1'                         }, {                             'name': '体育竞技',                             'id': '2'                         }, {                             'name': '模拟游戏',                             'id': '3'                         }, {                             'name': '休闲益智',                             'id': '4'                         }, {                             'name': '角色扮演',                             'id': '5'                         }, {                             'name': '飞行射击',                             'id': '6'                         }, {                             'name': '棋牌娱乐',                             'id': '7'                         }];                         let name = list.map(list => list.name);                         return $(name, 3, '请选择分类').select((list) => {                             let i = list.findIndex(list => list.name == input);                             let url = list[i].id;                             setItem('游侠', url);                             refreshPage(false);                             return 'toast://已切换'                         }, list)                     }),                 });                 d.push({                     title: '搜索',                     desc: '输入你想搜索的',                     col_type: 'input',                     url: $.toString((html) => {                         if (!input) return \"toast://请输入关键词搜索\";                         var txt = input;                         return $('https://u.ali213.net/search.php?keyword=' + txt + '#noHistory##noRecordHistory#').rule((html) => {                             let d = [];                             var list = pdfa(getResCode(), '.container-fluid,1&&.col-lg-3');                             for (var i in list) {                                 title = pdfh(list[i], '.transformbarlink&&Text');                                 desc = pdfh(list[i], '.transformbarhits&&Text');                                 pic = pdfh(list[i], 'img&&src');                                 url = pdfh(list[i], '.transformbarlink&&a&&href');                                 d.push({                                     title: title,                                     desc: desc,                                     pic: html + pic,                                     col_type: 'movie_2',                                     url: $(html + url + '#gameTheme#').rule(() => {                                         let d = [];                                         let url = pd(getResCode(), 'body&&.dtplay&&a&&href');                                         d.push({                                             col_type: 'x5_webview_single',                                             desc: 'float&&100%',                                             url: url,                                         });                                         setResult(d);                                     }),                                 });                             }                             setResult(d);                         }, html)                     }, html),                 });             }             for (var i in list) {                 title = pdfh(list[i], '.transformbarlink&&Text');                 desc = pdfh(list[i], '.transformbarhits&&Text');                 pic = pdfh(list[i], 'img&&src');                 url = pdfh(list[i], '.transformbarlink&&a&&href');                 d.push({                     title: title,                     desc: desc,                     pic: html + pic,                     col_type: 'movie_2',                     url: $(html + url + '#gameTheme#').rule(() => {                         let d = [];                         let url = pd(getResCode(), 'body&&.dtplay&&a&&href');                         d.push({                             col_type: 'x5_webview_single',                             desc: 'float&&100%',                             url: url,                         });                         setResult(d);                     }),                 });             }             setResult(d);         })     } else if (input == '精选游戏') {         return $('hiker://empty#noHistory##noRecordHistory').rule(() => {             setPageTitle('精选游戏');             let d = [];             let list = ['FC游戏机@https://xiaobapi.top/function/fc/', '一个都不能死@https://tool.suyanw.cn/tool/xiuxian/yxmb/2/index.html', '天天消消乐@https://tool.suyanw.cn/tool/xiuxian/yxmb/17/index.html', '星球防御@https://tool.suyanw.cn/tool/xiuxian/yxmb/21/index.html', '开心消消乐@https://tool.suyanw.cn/tool/xiuxian/yxmb/23/index.html', '3D熊出没@https://tool.suyanw.cn/tool/xiuxian/yxmb/56/index.html', '3D拼图@https://tool.suyanw.cn/tool/xiuxian/yxmb/57/index.html', '简约打地鼠@https://tool.suyanw.cn/tool/xiuxian/yxmb/67/index.html', '一笔连珠@https://tool.suyanw.cn/tool/xiuxian/yxmb/74/index.html', '疯狂打企鹅@https://tool.suyanw.cn/tool/xiuxian/yxmb/50/index.html', '猜成语@https://tool.suyanw.cn/tool/xiuxian/yxmb/71/index.html', '健康消消乐@https://tool.suyanw.cn/tool/xiuxian/yxmb/80/index.html', '架子鼓@http://guozhivip.com/jzg', '喵喵手鼓@https://linzimu.com/MusicCat', '中国象棋@https://u.ali213.net/games/chinachess/index.html?game_code=313', '中国象棋1@https://tool.suyanw.cn/tool/xiuxian/yxmb/65/index.html', '俄罗斯方块@https://game.ur1.fun/tetris/', '坑爹游戏@https://u.ali213.net/games/kengdie8/index.html?game_code=965', '就是跑@https://u.ali213.net/games/xiaohuozi/index.html?game_code=997', '二战风云@https://u.ali213.net/games/erzhan/index.html?game_code=877', '维京战争@https://xiaobapi.top/function/game/yxmb/1/index.html', '青蛙吃苍蝇@https://xiaobapi.top/function/game/yxmb/6/index.html', '双人五子棋@https://xiaobapi.top/function/game/yxmb/29/index.html', '飞机大战@https://xiaobapi.top/function/game/yxmb/31/index.html', '最强眼力@https://xiaobapi.top/function/game/yxmb/36/index.html', '灌篮投球@https://xiaobapi.top/function/game/yxmb/49/index.html', '初音解压@https://toolwa.com/mikutap/', '蜘蛛纸牌@https://game.ur1.fun/poker/', '飞机大战2.0@https://game.ur1.fun/plane-wars/', '积木切切乐@https://game.ur1.fun/menja/', '兔子快跑@https://game.ur1.fun/hop/', '3D魔方@https://game.ur1.fun/cube/'];             let img = 'hiker://files/Jm/lm/more/300.png';             for (var i = 0; i < list.length; i++) {                 let k = list[i].split(/@/);                 if (k.length < 2) continue;                 var url = k[1];                 d.push({                     title: k[0],                     col_type: 'icon_2_round',                     pic_url: img,                     url: $('hiker://empty##gameTheme##noHistory##noRecordHistory#').rule((url) => {                         let d = [];                         d.push({                             col_type: 'x5_webview_single',                             desc: 'float&&100%',                             url: url,                             extra: {                                 ua: MOBILE_UA,                                 canBack: true,                                 showProgress: false,                             }                         });                         setResult(d);                     }, url),                 });             }             setResult(d);         })     } else {         return $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule(() => {             setPageTitle('街机游戏');             let d = [];             let t = getItem('街机游戏', 'FC');             var js = JSON.parse(fetch('https://service-m9yegcn9-1311248022.sh.apigw.tencentcs.com/release/games?t=' + t + '&p=' + MY_PAGE));             if (MY_PAGE == 1) {                 d.push({                     title: '街机游戏',                     col_type: 'avatar',                     desc: '切换',                     pic: 'hiker://files/Jm/lm/more/300.png',                     url: $(['街机', 'FC', 'SFC', 'GBA', 'MD', 'H5'], 3, '请选择操作').select(() => {                         setItem('街机游戏', input);                         refreshPage(false);                         return 'hiker://empty'                     }),                 });             }             js.map(y => {                 var url = y.url;                 d.push({                     title: y.name,                     col_type: 'movie_2',                     desc: y.type,                     pic: y.img,                     url: $('hiker://empty#gameTheme#').rule((url) => {                         let d = [];                         d.push({                             col_type: 'x5_webview_single',                             desc: 'float&&100%',                             url: url,                             extra: {                                 showProgress: false,                             }                         });                         setResult(d);                     }, url),                 });             });             setResult(d);         });     } })","icon":"hiker://files/Jm/lm/more/300.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"脑筋急转弯","title":"问答","url":"@js: $('hiker://empty#fypage#noHistory##noRecordHistory#').rule(() => {     setPageTitle('脑筋急转弯');     let d = [];     try {         let js = JSON.parse(fetch('https://api.qqsuu.cn/api/dm-naowan?num=10&apiKey=58820a7c7e99ef8cb195cb39db1b7b5c')).data;         d.push({             col_type: 'x5_webview_single',             desc: '0',             extra: {                 canBack: true,                 showProgress: false,             }         });         js.list.map(data => {             d.push({                 title: data.quest,                 desc: '▶️ 点击播放',                 col_type: \"text_1\",                 url: $('#noLoading#').lazyRule((data) => {                     let url = ('https://yuanxiapi.cn/api/voice/?per=0&pit=-5&spd=5.5&text=' + data.quest);                     refreshX5WebView(url);                     return 'hiker://empty'                 }, data),                 extra: {                     longClick: [{                         title: '答案: ' + data.result,                         js: $.toString((data) => {                             let url = ('https://api.shenke.love/API/other/tts_youdao.php?msg=' + data.result);                             refreshX5WebView(url);                             return 'hiker://empty'                         }, data)                     }],                 }             });         });     } catch {}     setResult(d); })","icon":"hiker://files/Jm/lm/more/251.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":2,"name":"极致靓丽","code":"[{\n    title: '靓丽',\n    col_type: 'icon_round_4',\n    pic: 'hiker://files/Jm/lm/more/202.png',\n    url: $('#noLoading#').lazyRule(() => {\n        return $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule(() => {\n            let d = [];\n            setPageTitle('极致靓丽');\n            let 链接 = getItem('极客', 'https://p.txqq.pro/#/');\n            d.push({\n                title: '',\n                desc: 'float&&100%',\n                col_type: 'x5_webview_single',\n                url: 链接,\n                extra: {\n                    canBack: true,\n                    autoPlay: true,\n                    blockRules: ['baidu.*.png', '.jpg'],\n                }\n            });\n            setResult(d);\n        })\n    }),\n    extra: {\n        longClick: [{\n            title: '随机姐姐',\n            js: $.toString(() => {\n                setItem('极客', 'http://119.91.196.247:7778/xjj');\n                refreshPage(false);\n                return 'toast://已切换'\n            })\n\n        }, {\n            title: '极客美女',\n            js: $.toString(() => {\n                setItem('极客', 'https://t.xxgeek.com/tools/mmvod/m.php');\n                refreshPage(false);\n                return 'toast://已切换'\n            })\n\n        }, {\n            title: '随机美女',\n            js: $.toString(() => {\n                setItem('极客', 'https://api.cnmcom.com/dsp/');\n                refreshPage(false);\n                return 'toast://已切换'\n            })\n        }, {\n            title: '输入更换',\n            js: $.toString(() => {\n                var jk = getItem('jk_input', '');\n                return $(jk, '想要更换的短视频地址').input(() => {\n                    var txt = input;\n                    setItem('极客', txt);\n                    setItem('jk_input', txt);\n\n                    refreshPage(false);\n                    return 'toast://已更换'\n                })\n            })\n        }, {\n            title: '默认靓丽',\n            js: $.toString(() => {\n                clearItem('极客');\n                refreshPage(false);\n                return 'toast://已恢复默认'\n            })\n        }],\n    }\n}]"},{"status":true,"pattern":0,"name":"画板","title":"画板","url":"@js: $('hiker://empty#gameTheme##noHistory##noRecordHistory#').rule(() => {     setPageTitle('');     let d = [];     d.push({         col_type: 'x5_webview_single',         desc: 'float&&100%',         url: 'http://tool.mkblog.cn/whiteboard/',         extra: {             canBack: true,             showProgress: false,         }     });     setResult(d); })","icon":"hiker://files/Jm/lm/more/232.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"星座运势","title":"星座","url":"@js: $('hiker://empty#noHistory##noRecordHistory#').rule(() => {     setPageTitle('星座运势');     let d = [];     try {         let name = storage0.getItem('星座', 'gemini');         let img = ('https://api.vvhan.com/api/bing' + '#' + new Date().getTime());         let json = JSON.parse(fc('https://api.vvhan.com/api/horoscope?time=today&type=' + name, 8)).data;         d.push({             title: json.title,             col_type: 'card_pic_1',             desc: '0',             pic: img,             url: $('#noLoading#').lazyRule(() => {                 var list = [{                     'name': '白羊座',                     'id': 'aries'                 }, {                     'name': '金牛座',                     'id': 'taurus'                 }, {                     'name': '双子座',                     'id': 'gemini'                 }, {                     'name': '巨蟹座',                     'id': 'cancer'                 }, {                     'name': '狮子座',                     'id': 'leo'                 }, {                     'name': '处女座',                     'id': 'virgo'                 }, {                     'name': '天秤座',                     'id': 'libra'                 }, {                     'name': '天蝎座',                     'id': 'scorpio'                 }, {                     'name': '射手座',                     'id': 'sagittarius'                 }, {                     'name': '魔蝎座',                     'id': 'capricorn'                 }, {                     'name': '水瓶座',                     'id': 'aquarius'                 }, {                     'name': '双鱼座',                     'id': 'pisces'                 }];                 let name = list.map(list => list.name);                 return $(name, 3, '请选择').select((list) => {                     let i = list.findIndex(list => list.name == input);                     let url = list[i].id;                     storage0.setItem('星座', url);                     refreshPage(false);                     return 'toast://已切换星座'                 }, list)             }),         }, {             col_type: 'line',         }, {             title: '时间：' + json.time + '\\n宜：' + json.todo.yi + '\\n忌：' + json.todo.ji + '\\n幸运数字：' + json.luckynumber + '\\n幸运颜色：' + json.luckycolor + '\\n速配星座：' + json.luckyconstellation + '\\n短评：' + json.shortcomment,             col_type: 'long_text',             url: 'hiker://empty',         }, {             col_type: 'line',         }, {             title: '综合运势：' + json.fortune.all + ' ♥' + '\\n爱情运势：' + json.fortune.love + ' ♥' + '\\n学业工作：' + json.fortune.work + ' ♥' + '\\n财富运势：' + json.fortune.money + ' ♥' + '\\n健康运势：' + json.fortune.health + ' ♥',             col_type: 'long_text',             url: 'hiker://empty',         }, {             col_type: 'line',         }, {             title: '综合指数：' + json.index.all + '\\n爱情指数：' + json.index.love + '\\n学业工作：' + json.index.work + '\\n财富指数：' + json.index.money + '\\n健康指数：' + json.index.health,             col_type: 'long_text',             url: 'hiker://empty',         }, {             col_type: 'line',         }, {             title: '综合运势：' + json.fortunetext.all + '\\n\\n爱情运势：' + json.fortunetext.love + '\\n\\n学业工作：' + json.fortunetext.work + '\\n\\n财富运势：' + json.fortunetext.money + '\\n\\n健康运势：' + json.fortunetext.health,             col_type: 'long_text',             url: 'hiker://empty',         });     } catch {}     setResult(d); })","icon":"hiker://files/Jm/lm/more/67.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"王者语音包","title":"语音","url":"@js: $('hiker://empty#noHistory##noRecordHistory#').rule(() => {     setPageTitle('王者语音');     let d = [];     let yx = getItem('王者语音', '鲁班');     try {         try {             var json = JSON.parse(fetch('https://free.wqwlkj.cn/wqwlapi/wzheroyy.php?hero=' + yx));         } catch {             var json = JSON.parse(fetch('https://api.ahfi.cn/api/wzryyy?msg=' + yx));         }         d.push({             title: json.hero,             desc: '0',             col_type: 'card_pic_1',             pic: json.img,             url: json.img,         }, {             title: '搜索',             col_type: 'input',             desc: '请输入王者英雄名',             url: $.toString(() => {                 if (!input) return \"toast://请输入关键词\";                 setItem('王者语音', input);                 refreshPage(false);                 return 'hiker://empty';             }),         });         json.data.map(y => {             d.push({                 title: y.id ? y.id + '. ' + y.lines : y.lines,                 col_type: 'text_1',                 pic: json.img,                 url: y.voice,             });         });     } catch {         toast('没有找到该英雄');         clearItem('王者语音');         refreshPage(false);         return 'hiker://empty'     }     setResult(d); })","icon":"hiker://files/Jm/lm/more/73.png","desc":"","type":"icon_round_4"},{"status":true,"pattern":0,"name":"云知","title":"云知","url":"@js: var mima=getVar('mima_1','');var exp=new Date();        \t\tlet h=exp.getHours();let m=exp.getMinutes();let s=exp.getSeconds();let mi=h+m;if(mima==mi){fastGrammar(\"<Tab>@['云知书签组','保险箱']@['保险箱已被打开',(60-new Date().getSeconds())+'秒后自动上锁']\",order)}else{$('', \"云知密码\").clickInput(mi => {  putVar('mima_1',input);  if (input!=mi) {        return \"toast://⛔ 密码错误\";    } else {     return ((rule, toast) => {            const Localfile = HikerHome.getLocalfile();            const bookMark = HikerHome.getBookmarksList(Localfile.getItem(\"BookmarksList\"));            eval(\"var [h,tab]=\" + rule + \";var [t_1,t_2]=\" + (toast || \"['','']\"));            let index = bookMark.getIndex(h);            let json = bookMark.get(index);            if (json === undefined || json.pattern !== 3) {                return \"toast://\\u672a\\u5b9a\\u4e49\\u8be5\\u4e66\\u7b7e\\u7ec4\";            }            if (json.fold_status) {                var toast = t_2 || \"\\u5df2\\u6298\\u53e0\";            } else {                var toast = t_1 || \"\\u5df2\\u5c55\\u5f00\";            }            json.fold_status = !json.fold_status;            bookMark.modify(index, json);            let list = bookMark.getList();            for (let i = 0; i < list.length; i++) {                let item = list[i];                if (item.pattern === 3 && item.name !== h && item.mark !== \"\" && item.mark === tab) {                    item.fold_status = json.fold_status ? false : false;                    bookMark.modify(i, item);                }            }            refreshPage(false);            if (toast === \"hiker://empty\") {                return toast;            } else {                return \"toast://\" + toast;            }        })(\"['云知书签组','保险箱']\", \"['已打开保险箱','关闭保险箱']\");  }},mi)}","icon":"hiker://files/Jm/lm/more/101.png","desc":"","type":"icon_round_4"}],"fold_status":false,"pattern":3},{"mark":"保险箱","list":[{"title":"","url":"","icon":"","desc":"","type":"line","name":"线","status":true,"pattern":0},{"status":true,"pattern":0,"name":"云知保险箱","title":"<big>云知</big>","url":"@js:fastGrammar(\"<Tab>@['云知书签组','保险箱']\",order)","icon":"hiker://files/Jm/lm/more/65.png","desc":"","type":"avatar"},{"status":true,"pattern":0,"name":"美图","title":"美图","url":"@js: $('hiker://empty#fypage#gameTheme##noHistory##noRecordHistory#').rule(() => {     setPageTitle('美图');     let d = [];     let url = (\"http://se.csnmb.com/API/ql.php\" + '#' + new Date().getTime()​);              let img = url + '#.jpg';         d.push({             col_type: 'pic_1_full',             pic: img,             url: img,         });          setResult(d); });","icon":"","desc":"","type":"text_4"},{"status":true,"pattern":0,"name":"遇见","title":"遇见","url":"@js: $('hiker://empty#noRecordHistory##gameTheme#').rule(() => {     let d = [];     var xjj = getPath('hiker://files/Jm/file/xjj.html');     if (!fileExist(xjj)) {         confirm({             title: '导入',             content: '检测到你没有本地文件，是否导入',             confirm: $.toString((xjj) => {                 writeFile(xjj, fetch('https://raw.gitmirror.com/jmeng123/files/main/xjj.html'));                 refreshPage(false);             }, xjj),             cancel: $.toString(() => {})         });     };     d.push({         col_type: 'x5_webview_single',         url: xjj,         desc: 'float&&100%',         extra: {             autoPlay: true,             showProgress: false,             ua: MOBILE_UA         }     });     setResult(d); });","icon":"hiker://files/Jm/lm/more/202.png","desc":"","type":"text_4"},{"status":true,"pattern":0,"name":"Swagger图片","title":"图片","url":"@js: $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule(() => {     setPageTitle('Swagger图片');     let d = [];     var p = (MY_PAGE - 1);     var s = getItem('size', '10');     var t = getItem('type', 'car');     var html = ('https://api.apiopen.top/api/getImages?token=eyJ1aWQiOjEyODUsImlkIjoxMjg1LCJjcmVhdGVkQXQiOiIyMDI0LTA2LTEzIDEwOjU0OjE5IiwidXBkYXRlZEF0IjoiMjAyNC0wNi0xMyAxMDo1NDoxOSIsImRlbGV0ZWRBdCI6bnVsbCwiYWNjb3VudCI6IjE4&page=' + p + '&size=' + s + '&type=' + t);     try {         if (MY_PAGE == 1) {             d.push({                 title: 'Swagger图片',                 col_type: 'avatar',                 desc: '切换',                 pic: 'https://hikerfans.com/tubiao/movie/19.svg',                 url: $('#noLoading#').lazyRule(() => {                     var type = [{                         'n': '动物',                         'u': 'animal'                     }, {                         'n': '美女',                         'u': 'beauty'                     }, {                         'n': '汽车',                         'u': 'car'                     }, {                         'n': '漫画',                         'u': 'comic'                     }, {                         'n': '食物',                         'u': 'food'                     }, {                         'n': '游戏',                         'u': 'game'                     }, {                         'n': '电影',                         'u': 'movie'                     }, {                         'n': '人物',                         'u': 'person'                     }, {                         'n': '手机',                         'u': 'phone'                     }, {                         'n': '风景',                         'u': 'scenery'                     }];                     var t = type.map(a => a.n);                     return $(t, 3, '请选择').select((type) => {                         var a = type.findIndex(b => b.n == input);                         var id = type[a].u;                         setItem('type', id);                         refreshPage(false);                         return 'hiker://empty'                     }, type)                 }),                 extra: {                     longClick: [{                         title: '设置每页显示数量',                         js: $.toString(() => {                             return $('', '每页显示数量，默认10').input(() => {                                 setItem('size', input);                                 return 'toast://已设置为' + input                             })                         })                     }],                 }             });         }         var json = JSON.parse(fetch(html)).result;         json.list.map(l => {             d.push({                 title: l.title,                 url: l.url + '#.jpg',                 col_type: 'pic_1_card',                 pic: l.url + '#.jpg',                 extra: {                     longClick: [{                         title: '添加到动漫',                         js: $.toString((l) => {                             var time = new Date().getTime();                              var file = ('hiker://files/Jm/png/dongman.json');                             if (!fileExist(file)) {                                 saveFile(file, '[]');                             }                             var img = ('hiker://files/Jm/png/dongman/' + time + '.png');                             saveImage(l.url, img);                             dongman = JSON.parse(request(file));                             dongman = dongman.concat(img);                             saveFile(file, JSON.stringify(dongman));                             return 'toast://添加成功'                         }, l)                     }, {                         title: '添加到美女',                         js: $.toString((l) => {                             var time = new Date().getTime();                              var file = ('hiker://files/Jm/png/meinv.json');                             if (!fileExist(file)) {                                 saveFile(file, '[]');                             }                             var img = ('hiker://files/Jm/png/meinv/' + time + '.png');                             saveImage(l.url, img);                             meinv = JSON.parse(request(file));                             meinv = meinv.concat(img);                             saveFile(file, JSON.stringify(meinv));                             return 'toast://添加成功'                         }, l)                     }, {                         title: '添加到风景',                         js: $.toString((l) => {                             var time = new Date().getTime();                              var file = ('hiker://files/Jm/png/fengjing.json');                             if (!fileExist(file)) {                                 saveFile(file, '[]');                             }                             var img = ('hiker://files/Jm/png/fengjing/' + time + '.png');                             saveImage(l.url, img);                             fengjing = JSON.parse(request(file));                             fengjing = fengjing.concat(img);                             saveFile(file, JSON.stringify(fengjing));                             return 'toast://添加成功'                         }, l)                     }],                 }             });         });     } catch (e) {}     setResult(d); })","icon":"","desc":"","type":"text_4"},{"status":true,"pattern":0,"name":"Huang盘","title":"网盘","url":"@js: $('hiker://empty#fypage#fullTheme##noHistory##noRecordHistory#').rule(() => {     setPageTitle('huang网盘');     let d = [];     d.push({         title: 'Huang网盘',         desc: '登录',         col_type: 'avatar',         pic: 'https://a.h1static.cn/pan/Logohuang1111.ico',         url: $('hiker://empty').rule(() => {             let d = [];             d.push({                 url: \"https://pan.huang1111.cn/login\",                 col_type: \"x5_webview_single\",                 desc: \"100%&&float\",                 extra: {                     js: $.toString(() => {                         var url = location.href;                         if (url.includes(\"https://pan.huang1111.cn/home?path=%2F\")) {                             fba.writeFile(\"hiker://files/Jm/huang.txt\", fba.getCookie(\"\"));                             alert(\"已获取到cookie，返回即可\");                             fba.back();                         }                     }),                     ua: MOBILE_UA,                     canBack: true                 }             });             setResult(d);         }),     });     try {         var html = ('https://pan.huang1111.cn/api/v3/directory%2FMV');         var ck = fetch('hiker://files/Jm/huang.txt');         var json = JSON.parse(fetch(html, {             headers: {                 \"Cookie\": ck,                 \"Accept\": \"application/json;charset=UTF-8\",                 \"Referer\": \"https://pan.huang1111.cn\",                 \"User-Agent\": MOBILE_UA             },         })).data.objects;         eval('data=' + JSON.stringify(json));         data.map(list => {             d.push({                 title: list.name,                 /*img: ('https://pan.huang1111.cn/api/v3/file/thumb/' + list.id + '@headers={\"Referer\":\"https://pan.huang1111.cn\",\"User-Agent\":MOBILE_UA,\"Cookie\":'+ ck+'}'),*/                 url: 'video://https://pan.huang1111.cn/api/v3/file/preview/' + list.id,                 col_type: 'text_2',             });         });     } catch {         toast('获取失败');     }     setResult(d); })","icon":"","desc":"","type":"text_4"},{"status":true,"pattern":0,"name":"星河直播","title":"直播","url":"@js: $('hiker://empty#noHistory##noRecordHistory##fullTheme#').rule(() => {     setPageTitle('星河直播');     let d = [];     let id = getItem('星河直播', 'lovePro');     d.push({         title: '星河直播',         desc: getItem('星河直播', 'lovePro') == 'lovePro' ? '①' : '②',         col_type: 'avatar',         pic: 'https://favicon.qqsuu.cn/https://m.maoyan.com/',         url: $('#noLoading#').lazyRule(() => {             setItem('星河直播', getItem('星河直播', 'lovePro') == 'lovePro' ? 'love' : 'lovePro');             refreshPage(false);             toast('已切换' + (getItem('星河直播', 'lovePro') == 'lovePro' ? '①' : '②'));             return 'hiker://empty'         }),     });     try {         eval('a=' + fetch('hiker://files/Jm/live/' + id + '.json'));         a.forEach(function(b) {             var c = b.split('@');             d.push({                 title: c[0],                 col_type: 'avatar',                 pic: 'hiker://files/Jm/lm/more/221.png',                 url: 'video://' + c[1],             });         });     } catch {}     setResult(d); });","icon":"","desc":"","type":"text_4"},{"status":true,"pattern":0,"name":"学习资料","title":"学习","url":"@js: $('hiker://empty#noHistory##noRecordHistory#').rule(() => {     setPageTitle('学习资料');     let titles = ['THXFG03','超极品身材舞蹈学院学姐女神','美少女', '生物女教师和学生的私房授课','火爆网红鹿少女剧情演绎', '激情','魔鬼身材网红鹿少女无码露脸制服','黑丝美腿女神','多人火拼','推荐-棒棒哒','小姐姐','秀色可餐','杨幂','欣赏小姐姐','女神小小的性辅导'];     let d = [];     let img = 'hiker://files/Jm/lm/movie/22.svg';     titles.forEach(function(t) {         let url = getPath('hiker://files/Jm/video/' + t + '.mp4');         d.push({             title: t,             pic: img,             col_type: 'text_1',             url: 'video://'+url,         });     });     setResult(d); })","icon":"","desc":"","type":"text_4"}],"fold_status":false,"pattern":3,"name":"云知书签组"},{"name":"海报书签组","mark":"海报开关","list":[{"status":true,"pattern":0,"name":"Tab阴影","title":"","url":"","icon":"","desc":"","type":"line"},{"status":true,"pattern":0,"name":"海报","title":"海报","url":"@js:fastGrammar(\"<Tab>@['海报书签组','海报开关']\",order)","icon":"hiker://files/Jm/lm/more/38.png","desc":"","type":"avatar"},{"status":true,"pattern":0,"name":"Tab_顺搜元素","title":"@js:fastGrammarForText(\"<Tab>@['‘‘’’<font color=#1AB16B>顺搜</font>','顺搜']\",\"<Tab>@['顺搜']\",order)","url":"@js:fastGrammar(\"<Tab>@['顺搜','海报']\",order)","icon":"","desc":"","type":"text_5"},{"status":true,"pattern":0,"name":"Tab_天气海报","title":"@js:fastGrammarForText(\"<Tab>@['‘‘’’<font color=#1AB16B>天气</font>','天气']\",\"<Tab>@['天气']\",order)","url":"@js:fastGrammar(\"<Tab>@['天气','海报']\",order)","icon":"","desc":"","type":"text_5"},{"status":true,"pattern":0,"name":"Tab_豆瓣海报","title":"@js:fastGrammarForText(\"<Tab>@['‘‘’’<font color=#1AB16B>豆瓣</font>','豆瓣']\",\"<Tab>@['豆瓣']\",order)","url":"@js:fastGrammar(\"<Tab>@['豆瓣','海报']\",order)","icon":"","desc":"","type":"text_5"},{"status":true,"pattern":0,"name":"Tab_轮播海报","title":"@js:fastGrammarForText(\"<Tab>@['‘‘’’<font color=#1AB16B>轮播</font>','轮播']\",\"<Tab>@['轮播']\",order)","url":"@js:fastGrammar(\"<Tab>@['轮播','海报']\",order)","icon":"","desc":"","type":"text_5"},{"status":true,"pattern":0,"name":"Tab_视频海报","title":"@js:fastGrammarForText(\"<Tab>@['‘‘’’<font color=#1AB16B>视频</font>','视频']\",\"<Tab>@['视频']\",order)","url":"@js:fastGrammar(\"<Tab>@['视频','海报']\",order)","icon":"","desc":"","type":"text_5"}],"fold_status":false,"pattern":3},{"name":"主题开关","mark":"","list":[{"status":true,"pattern":0,"name":"开关阴影","title":"","url":"","icon":"","desc":"","type":"line"},{"status":true,"pattern":0,"name":"1","title":"","url":"","icon":"","desc":"","type":"big_blank_block"},{"title":"","url":"","icon":"","desc":"","type":"big_blank_block","name":"2","status":true,"pattern":0},{"status":true,"pattern":0,"name":"海报_开关","title":"@js:fastGrammarForText(\"<Tab>@['‘‘’’<font color=#1AB16B>海报</font>','海报']\",\"<Tab>@['海报书签组']\",order)","url":"@js:fastGrammar(\"<Tab>@['海报书签组','海报开关']\",order)","icon":"","desc":"","type":"scroll_button"},{"status":true,"pattern":0,"name":"一言_日历开关","title":"@js:fastGrammarForText(\"<Tab>@['‘‘’’<font color=#1AB16B>一言</font>','一言']\",\"<Tab>@['一言']\",order)","url":"@js:fastGrammar(\"<Tab>@['一言','一言']\",order)","icon":"","desc":"","type":"scroll_button"},{"status":true,"pattern":0,"name":"收藏_程序开关","title":"@js:fastGrammarForText(\"<Tab>@['‘‘’’<font color=#1AB16B>收藏</font>','收藏']\",\"<Tab>@['收藏']\",order)","url":"@js:fastGrammar(\"<Tab>@['收藏','小海报']\",order)","icon":"","desc":"","type":"scroll_button"},{"status":true,"pattern":2,"name":"更新Q","code":"let 域名 = 'https://haikuo.lanzoui.com/'\n\nvar getNewest = function (url) {\n    let html = request(url);\n    eval(html.match(/var pgs;([\\s\\S]*?)document/)[1]);\n    eval('var body =' + html.match(/data :([\\s\\S]*?\\})/)[1]);\n    let arr = JSON.parse(post(url.match(/https*:\\/\\/[^\\/]+\\//)[0] + 'filemoreajax.php', {\n                body: body\n            })).text;\n    var newArr = arr.filter(function (p) {\n        return p.name_all.startsWith(\"海阔视界_\") && p.name_all.split('_')[2].match(/[0-9]+/)[0] > getAppVersion();\n    });\n    if (newArr.length > 0) {\n        let dict = {};\n        let options = [];\n        for (let i in newArr) {\n            options.push(newArr[i].name_all.replace(/海阔视界_/, ''));\n            dict[newArr[i].name_all] = newArr[i].id;\n        }\n        return $(options, 1).select((d, url) => {\n                let dict = JSON.parse(d);\n                function lazy(fileUrl) {\n                    return $(fileUrl).lazyRule(() => {\n                            return JSON.parse(fetch('https://developer.lanzoug.com/file/' + request(input).match(/'(\\?.*?)'/)[1], {\n                                    headers: {\n                                        'User-Agent': 'Mozilla/5.0'\n                                    },\n                                    redirect: false,\n                                    withHeaders: true\n                                })).headers.location[0]\n                        })\n                }\n                return lazy(url.match(/https*:\\/\\/[^\\/]+\\//)[0] + 'tp/' + dict['海阔视界_' + input]);\n            },\n            JSON.stringify(dict), url);\n    } else\n        return 'toast://没有更新的版本'\n}\nlet g = [];\ng.push({\n    title: '更新',\n    url: $(域名 + \"u/GoldRiver\").lazyRule((getNewest) => {\n\t\treturn getNewest(input)\n\t},getNewest),\n    /*img: 'https://hikerfans.com/tubiao/movie/77.svg',*/\n    col_type: 'scroll_button'\n});\ng\n"},{"status":true,"pattern":0,"name":"添加书签","title":"添加","url":"@js:$().x5cKey('abbBook@' + (This_Group ? This.name : '#空白组#') + '@' + (order_Group === undefined ? order : order_Group));","icon":"hiker://images/添加","desc":"","type":"scroll_button"}],"fold_status":true,"pattern":3},{"name":"测试","title":"测试","type":"text_2"},{"name":"测试1","title":"测试1","type":"text_2"}],"SettingConfig":{"myYiYan":"人生得意须尽欢，莫使金樽空对月。||莫愁前路无知己，天下谁人不识君。","topPic":"hiker://images/logo","avatarPic":"","hitokotoSwitch":true,"logoType":"pic_1_card","maxHomeCount":12,"myVariables":""}}