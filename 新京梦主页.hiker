海阔视界，我的主页「新京梦主页」主题￥my_home_theme￥eyJEYXRlIjoiMjAyNS0wNC0xMyAwMzo1MDowMyIsIk5hbWUiOiLmlrDkuqzmoqbkuLvpobUiLCJCb29rbWFya3NMaXN0IjpbeyJwYXR0ZXJuIjoyLCJuYW1lIjoi6aKE5aSE55CGIiwiY29kZSI6InZhciBjb2xsZWN0aW9uPUpTT04ucGFyc2UoZmV0Y2goJ2hpa2VyOi8vY29sbGVjdGlvbicpKTtcbnZhciBjb2xQaWNVcmw9XCJoaWtlcjovL2ltYWdlcy9jYXJkX2JnXCI7XG5mb3IobGV0IGk9MDtpPGNvbGxlY3Rpb24ubGVuZ3RoO2krKyl7XG4gICAgICAgICAgICAgIGlmKGNvbGxlY3Rpb25baV0ucGljVXJsIT1udWxsKXsgICAgICAgICAgICAgICAgICAgICAgICBjb2xQaWNVcmw9Y29sbGVjdGlvbltpXS5waWNVcmw7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cblxuLyoqdHJ5e1xudmFyIGxvZ29QaWMgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwOi8vYXBpLmJ0c3R1LmNuL3NqYnovYXBpLnBocD9seD1mZW5namluZyZmb3JtYXQ9aW1hZ2VzJl90dD0nK25ldyBEYXRlKCkuZ2V0VGltZSgpLHtyZWRpcmVjdDpmYWxzZSwgd2l0aEhlYWRlcnM6dHJ1ZSwgdGltZW91dDogMTAwMH0pKS5oZWFkZXJzLmxvY2F0aW9uWzBdO1xufWNhdGNoKGUpe30qL1xudmFyIGxvZ29QaWMgPSBcImhpa2VyOi8vaW1hZ2VzL2hvbWVfYmdcIjtcbltdXG5cbi8qXG4vL+acrOWcsOWbvueJh+maj+aculxuLy/nm7TmjqXlvJXnlKhmaWxlSW1n5Y2z5Y+vXG4vL2ZpbGXmm7TmlLnot6/lvoRcbmxldCBmaWxlID0gbmV3IGphdmEuaW8uRmlsZSgnL3N0b3JhZ2UvZW11bGF0ZWQvMC9QaWN0dXJlcy8nKTtcbmxldCBmaWxlTGlzdCA9IGZpbGUubGlzdEZpbGVzKCkuZmlsdGVyKGggPT4gaC5pc0ZpbGUoKSYmL1xcLihqcGd8anBlZ3xwbmd8Z2lmfHdlYnApLy50ZXN0KGgpKTtcbmxldCBpID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZmlsZUxpc3QubGVuZ3RoKTtcbnZhciBmaWxlSW1nID0gZmlsZUxpc3RbaV07Ki9cblxuIn0seyJzdGF0dXMiOmZhbHNlLCJwYXR0ZXJuIjoyLCJuYW1lIjoi5bCP5aeQ5aeQ5rWL6K+VIiwiY29kZSI6Ii8qbGV0IHVybD0gSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwczovL2FwaS5pc3Rlcm8uY29tL3Jlc291cmNlL2RvdXlpbi92aWRlby9yYW5kJywge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIDVlMjMxZjE0MTM2YmIzZDljNzQ1OTlmZTBlNTJmOTU2XCJcbiAgICB9XG59KSk7XG5sb2codXJsKTsqL1xuIn0seyJzdGF0dXMiOmZhbHNlLCJuYW1lIjoi5pCc54uX5Zu+54mH5pCc57SiIiwidGl0bGUiOiLmkJzni5fpmo/mnLrlm77niYciLCJpY29uIjoiQGpzOiBsZXQgaW1nbGlzdCA9IEpTT04ucGFyc2UoZmMoJ2h0dHBzOi8vY24uYXBpaHouY24vYXBpL2ltZy9hcGloemltZ3NvdWdvdS5waHA/aWQ9MTAwMDA4MDcma2V5PTE3OTlmY2U5MjJjMGE0MTdkMDhlYjMyNTg3YzUzYWQ5JnBhZ2U9MSZ3b3Jkcz3nvo7lpbPnlLXohJHlo4HnurgnLDEpKS5yZXM7bGV0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaW1nbGlzdC5sZW5ndGgpO2xldCBpbWcgPSBpbWdsaXN0W2luZGV4XTtpbWciLCJ0eXBlIjoibW92aWVfMiJ9LHsic3RhdHVzIjpmYWxzZSwicGF0dGVybiI6MiwibmFtZSI6InHpn7PkvJrlkZjmtYvor5UiLCJjb2RlIjoibGV0IGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgcmVxXzA6IHtcbiAgICAgICAgbW9kdWxlOiBcInZrZXkuR2V0VmtleVNlcnZlclwiLFxuICAgICAgICBtZXRob2Q6IFwiQ2dpR2V0VmtleVwiLFxuICAgICAgICBwYXJhbToge1xuICAgICAgICAgICAgZ3VpZDogXCIwXCIsXG4gICAgICAgICAgICBwbGF0Zm9ybTogXCIyMFwiLFxuICAgICAgICAgICAgZmlsZW5hbWU6IFtcIkYwMDAwMDFOZ2xqUjBSVWh5MTAwMU5nbGpSMFJVaHkxLmZsYWNcIl0sXG4gICAgICAgICAgICBzb25nbWlkOiBbXCIwMDFOZ2xqUjBSVWh5MVwiXVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmxldCBoZWFkZXJzID0ge1xuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIENvb2tpZTogXCJxbV9rZXlzdD1RX0hfTF82M2szTkcyOW5ycXU5QTFRVFZUWk5ndEV4MUZCTzhFTTlaaGFrSmZIZUdOWmRhSkFlQXJmX09hRWZKSmZpdlhSRGh0NWF4c3VfMWVWX2IzaTFacHg2Wnc7IHVpbj01MTM1MzY2NDFcIlxufTtcblxudmFyIGpzb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoaHR0cHM6Ly91LnkucXEuY29tL2NnaS1iaW4vbXVzaWN1LmZjZywge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgYm9keTogZGF0YSxcbiAgICBoZWFkZXJzOiBoZWFkZXJzXG59KSkucmVxXzAuZGF0YTtcblxudmFyIGluZm8gPSBqc29uLm1pZHVybGluZm87XG5pZiAoaW5mbyAmJiBpbmZvLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgdXJscyA9IGluZm9bMF0ucHVybDtcbiAgICBpZiAodXJscyAmJiB1cmxzICE9PSBcIlwiKSB7XG4gICAgICAgIHZhciBzaXAgPSBqc29uLnNpcDtcbiAgICAgICAgaWYgKHNpcCAmJiBzaXAubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHVybCA9IHNpcFswXSArIHVybHM7XG4gICAgICAgIH1cbiAgICB9XG59XG5sb2coanNvbik7XG5sb2codXJsKTsifSx7InN0YXR1cyI6ZmFsc2UsInBhdHRlcm4iOjIsIm5hbWUiOiLlr7zlhaXlm77moIciLCJjb2RlIjoiLy/oh6rliqjlr7zlhaXvvIzml6DpnIDmiYvliqjmk43kvZzjgIJcbi8v5q2j5bi45pi+56S65Zu+5qCH5ZCO77yM5Y+v5Lul5YWz5o6J5pys5Lmm562+77yM5L2/5Li76aG15pu05rWB55WF44CCXG5sZXQgaWNvbnMgPSBbe1xuICAgICdodG1sJzogJ2h0dHA6Ly8xMjMuNTYuMTA1LjE0NS90dWJpYW8vbW9yZS8nLFxuICAgICdmaWxlJzogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8nLFxuICAgICdpZCc6IFsnMS5wbmcnLCc1LnBuZycsJzcucG5nJywnMTAucG5nJywnMTYucG5nJywnMTgucG5nJywnMjUucG5nJywnMjcucG5nJywnMzUucG5nJywnMzYucG5nJywnMzcucG5nJywnMzgucG5nJywnNDQucG5nJywnNDcucG5nJywnNDgucG5nJywnNTkucG5nJywnNjUucG5nJywnNjcucG5nJywnNzMucG5nJywnOTMucG5nJywnMTAxLnBuZycsJzEzMC5wbmcnLCcxNDYucG5nJywnMTU3LnBuZycsJzE2MS5wbmcnLCcxNjcucG5nJywnMTcxLnBuZycsJzE4Mi5wbmcnLCcxOTUucG5nJywnMjAyLnBuZycsJzIwNS5wbmcnLCcyMTMucG5nJywnMjE1LnBuZycsJzIyMS5wbmcnLCcyMjcucG5nJywnMjMyLnBuZycsJzI1MS5wbmcnLCcyNTMucG5nJywnMjU4LnBuZycsJzI2My5wbmcnLCcyNzkucG5nJywnMjg0LnBuZycsJzI5NC5wbmcnLCczMDAucG5nJywnMzAzLnBuZycsJzMyNS5wbmcnLCczMzYucG5nJ11cbn0sIHtcbiAgICAnaHRtbCc6ICdodHRwOi8vMTIzLjU2LjEwNS4xNDUvdHViaWFvL3EvJyxcbiAgICAnZmlsZSc6ICdoaWtlcjovL2ZpbGVzL0ptL2xtL3EvJyxcbiAgICAnaWQnOiBbJzUucG5nJywnMjAucG5nJywgJzM1LnBuZycsJzcwLnBuZycsJzEyNS5wbmcnXVxufSwge1xuICAgICdodG1sJzogJ2h0dHA6Ly8xMjMuNTYuMTA1LjE0NS90dWJpYW8vbXVzaWMvJyxcbiAgICAnZmlsZSc6ICdoaWtlcjovL2ZpbGVzL0ptL2xtL211c2ljLycsXG4gICAgJ2lkJzogWyc1MS5zdmcnLCc4Mi5zdmcnLCc4NS5zdmcnXVxufSwge1xuICAgICdodG1sJzogJ2h0dHA6Ly8xMjMuNTYuMTA1LjE0NS90dWJpYW8vbW92aWUvJyxcbiAgICAnZmlsZSc6ICdoaWtlcjovL2ZpbGVzL0ptL2xtL21vdmllLycsXG4gICAgJ2lkJzogWyc5LnN2ZycsJzIyLnN2ZyddXG59LCB7XG4gICAgJ2h0bWwnOiAnaHR0cDovLzEyMy41Ni4xMDUuMTQ1L3R1Ymlhby9tZXNzeS8nLFxuICAgICdmaWxlJzogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbWVzc3kvJyxcbiAgICAnaWQnOiBbJzEyMy5zdmcnLCcxMjQuc3ZnJ11cbn0sIHtcbiAgICAnaHRtbCc6ICdodHRwczovL2ltZy52aW51YS5jbi9pbWFnZXMvJyxcbiAgICAnZmlsZSc6ICdoaWtlcjovL2ZpbGVzL0ptL3ZpbnVhLycsXG4gICAgJ2lkJzogWyd2S1k5OC5qcGVnJywndktrUWIuanBlZyddXG59XTtcblxubGV0IGljb249IGljb25zLmZsYXRNYXAoaCA9PiBoLmlkLm1hcChpZCA9PiAoe1xuICAgIHVybDogaC5odG1sICsgaWQsXG4gICAgZmlsZTogaC5maWxlICsgaWRcbn0pKSk7XG5cbmljb24uZm9yRWFjaChqID0+IHtcbiAgICBpZiAoIWZpbGVFeGlzdChqLmZpbGUpKSB7c2F2ZUltYWdlKGoudXJsLCBqLmZpbGUpO1xuICAgIH1cbn0pO1xuXG4ifSx7InN0YXR1cyI6ZmFsc2UsInBhdHRlcm4iOjIsIm5hbWUiOiLlvbHop4Zf5pCc57SiIiwiY29kZSI6ImxldCBybCA9IFtdO1xubGV0IHlzX3NzID0gZ2V0SXRlbSgneXNfc3MnLCAnJyk7XG5ybC5wdXNoKHtcbiAgICB0aXRsZTogJ+aQnOe0oicsXG4gICAgY29sX3R5cGU6ICdpbnB1dCcsXG4gICAgZGVzYzogJ+ivt+i+k+WFpeaQnOe0ouWFs+mUruivjScsXG4gICAgdXJsOiAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuICd0b2FzdDovL+ivt+i+k+WFpeWFs+mUruivjeaQnOe0oic7XG4gICAgICAgIGxldCB0eHQgPSBpbnB1dDtcbiAgICAgICAgc2V0SXRlbSgneXNfc3MnLCB0eHQpO1xuICAgICAgICB2YXIgaHRtbCA9ICgnaHR0cHM6Ly9hcGkubWlsb3JhcGFydC50b3AvYXBpL3NlYXJjaHZlZGlvLz9uYW1lPScgKyB0eHQgKyAnJmlkPScpO1xuICAgICAgICB2YXIganMgPSBKU09OLnBhcnNlKHJlcXVlc3QoaHRtbCkpLmRhdGE7XG4gICAgICAgIHZhciBuID0ganMubWFwKHQgPT4gdC5uYW1lKTtcbiAgICAgICAgcmV0dXJuICQobiwgMSwgJ+ivt+mAieaLqScpLnNlbGVjdCgoanMsIGh0bWwpID0+IHtcbiAgICAgICAgICAgIHZhciB0eHQgPSBpbnB1dDtcbiAgICAgICAgICAgIGxldCBpbmRleCA9IGpzLmZpbmRJbmRleCh0ID0+IHQubmFtZSA9PSBpbnB1dCk7XG4gICAgICAgICAgICB2YXIgaWQgPSBqc1tpbmRleF0uaWQ7XG4gICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eScpLnJ1bGUoKGh0bWwsIGlkLCB0eHQpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUodHh0KTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXF1ZXN0KGh0bWwgKyBpZCkpLmRhdGE7XG4gICAgICAgICAgICAgICAganNvbi5tYXAoYSA9PiBkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogYS5udW0sXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF80JyxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBhLnVybCxcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpO1xuICAgICAgICAgICAgfSwgaHRtbCwgaWQsIHR4dClcbiAgICAgICAgfSwganMsIGh0bWwpXG4gICAgfSksXG4gICAgZXh0cmE6IHtcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRJdGVtKCd5c19zcycsICcnKSxcbiAgICB9XG59KTtcbnJsIn0seyJzdGF0dXMiOmZhbHNlLCJwYXR0ZXJuIjoyLCJuYW1lIjoi6ZqP5py65q2M5puyIiwiY29kZSI6ImxldCBncSA9IFtdXG5cbmZ1bmN0aW9uIHNldEhlYWQocGljLCB0ZXh0LCBkZXNjLCBwbGF5VXJsKSB7XG4gICAgcHV0TXlWYXIoJ3VybCcsIHBsYXlVcmwpO1xuICAgIHVwZGF0ZUl0ZW0oXCJzaW1wbGVQbGF5ZXI6cGljXCIsIHtcbiAgICAgICAgdGl0bGU6IHRleHQgfHwgJ+maj+acuuatjOabsicsXG4gICAgICAgIHBpY191cmw6IHBpYyB8fCBcImhpa2VyOi8vaW1hZ2VzL2hvbWVfcGljNFwiLFxuICAgICAgICAvL3VybDogcGljIHx8IFwiaGlrZXI6Ly9lbXB0eVwiXG4gICAgfSk7XG5cbn1cbmdxLnB1c2goe1xuICAgIHRpdGxlOiAn6ZqP5py65q2M5puyJyxcbiAgICBwaWNfdXJsOiBcImh0dHBzOi8vaGlrZXJmYW5zLmNvbS90dWJpYW8vbW9yZS8xMjkucG5nXCIsXG4gICAgY29sX3R5cGU6IFwiaWNvbl9yb3VuZF80XCIsXG4gICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChzZXRIZWFkKSA9PiB7XG4gICAgICAgIGxldCBHID0gJC5yZXF1aXJlKFwiaHR0cHM6Ly9oaWtlcmZhbnMuY29tL3dlaXN5ci9qcy9HbG9iYWxWYXIuanNcIik7XG4gICAgICAgIGxldCBhdWRpb1NpbmdsZSA9IEcubW9kdWxlTXlWYXIoXCJhdWRpb1NpbmdsZVwiLCBcImh0dHBzOi8vZ2l0Y29kZS5uZXQvbGl1emFveXVlL2hhaS8tL3Jhdy9tYXN0ZXIvamRiZi5qc1wiKTsgICAgICAgIFxuICAgICAgICBsZXQgbW9kZSA9IGdldEl0ZW0oXCJtb2RlXCIsIFwi54Ot5q2M5qacXCIpO1xuICAgICAgICBsZXQgbWlkID0gZ2V0SXRlbShcIm1pZFwiLCBcIlwiKTtcbiAgICAgICAgbGV0IHNvbmdJbmZvID0ge307XG4gICAgICAgIGxldCBpZCA9IFwiXCI7XG4gICAgICAgIGxldCBjdXJsID0gXCJcIjsgICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBwbGF5QXVkaW8odXJsLCBpbmZvKSB7XG4gICAgICAgICAgICBsZXQgY2lkID0gaWQ7XG4gICAgICAgICAgICBjdXJsID0gdXJsO1xuICAgICAgICAgICBhdWRpb1NpbmdsZS5wbGF5TmV0d29yKHVybCwgdm9pZCAwLCAoKSA9PiB7XG4gbG9nKGluZm8ubmFtZSk7ICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc2V0SGVhZChpbmZvLnBpY3VybCwgaW5mby5uYW1lLCBpbmZvLmFydGlzdHNuYW1lLCB1cmwpO1xuICAgICAgICAgICAgICAgIHRvYXN0KFwi5q2j5Zyo5pKt5pS+77yaXCIgKyBpbmZvLm5hbWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0U29uZygpIHtcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBcIuiHquWumuS5ieatjOWNlUlEXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXVkaW9TaW5nbGUuZ2V0UmFuZG9tTGlzdFNvbmcobWlkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF1ZGlvU2luZ2xlLmdldFJhbmRvbVNvbmcobW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgICBmdW5jdGlvbiBwbGF5VmlwKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGZldGNoKFwiaHR0cHM6Ly9hcGkueGluZ3poaWdlLmNvbS9BUEkvTmV0RWFzZV9DbG91ZE11c2ljX25ldy8/c29uZ2lkPVwiICsgaWQgKyBcIiZicj0yXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgcGxheUF1ZGlvKGpzb24uZGF0YS5zcmMsIHNvbmdJbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHNvbmdJbmZvID0gZ2V0U29uZygpO1xuICAgICAgICAgICAgICAgIGlkID0gc29uZ0luZm8uaWQ7XG4gICAgICAgICAgICAgICAgYXVkaW9TaW5nbGUuaWQgPSBzb25nSW5mby5pZDtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjbGVhckl0ZW0oXCJtaWRcIik7XG4gICAgICAgICAgICAgICAgY2xlYXJJdGVtKFwibW9kZVwiKTtcbiAgICAgICAgICAgICAgICB0b2FzdChlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBsYXlBdWRpbyhzb25nSW5mby51cmwsIHNvbmdJbmZvKTtcbiAgICAgICAgfVxuaWYgKCFhdWRpb1NpbmdsZS5oYXNQbGF5ZXIoKSkgeyAgICAgICAgIFxuICAgYXVkaW9TaW5nbGUuc2V0Q29tcGxldGlvbkxpc3RlbmVyKCgpID0+IHtcbmxvZyhnZXRJdGVtKFwi5b6q546vXCIsIFwiMFwiKSk7XG4gICAgICAgICAgICBpZiAoZ2V0SXRlbShcIuW+queOr1wiLCBcIjBcIikgPT0gMCkge1xuXG4gICAgICAgICAgICAgICAgcGxheSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbGF5QXVkaW8oY3VybCwgc29uZ0luZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXVkaW9TaW5nbGUuc2V0RXJyb3JMaXN0ZW5lcigoKSA9PiB7XG4gICAgICAgICAgICAvL3RvYXN0KFwi5pKt5pS+5aSx6LSl5q2j5Zyo6YeN5paw6ZqP5py6XCIpO1xuICAgICAgICAgICAgaWYgKCFwbGF5VmlwKCkpIHtcbiAgICAgICAgICAgICAgICBwbGF5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBwbGF5KCk7XG4gICAgICAgIHJldHVybiBcImhpa2VyOi8vZW1wdHlcIjtcbiAgICAgfVxuICAgICBpZiAoYXVkaW9TaW5nbGUuaGFzUGxheWVyKCkpIHsgICAgICAgICAgIGF1ZGlvU2luZ2xlLnN0YXJ0T3JQYXVzZSgpO1xuICAgICAgICBpZiAoYXVkaW9TaW5nbGUuaXNQbGF5aW5nKCkpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gXCJ0b2FzdDovL+aSreaUvuW3suW8gOWni1wiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcInRvYXN0Oi8v5pKt5pS+5bey5YGc5q2iXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gICBcbiAgICAgICAgICAgIFxuICAgICAgIFxuICAgIH0sIHNldEhlYWQpLFxuICAgIGV4dHJhOiB7XG4gICAgICAgIGlkOiBcInNpbXBsZVBsYXllcjpwaWNcIixcbiAgICAgICAgbG9uZ0NsaWNrOiBbe1xuICAgICAgICAgICAgdGl0bGU6IFwi5LiL5LiA5puyXCIsXG4gICAgICAgICAgICBqczogJC50b1N0cmluZygoc2V0SGVhZCkgPT4ge1xuICAgICAgICBsZXQgRyA9ICQucmVxdWlyZShcImh0dHBzOi8vaGlrZXJmYW5zLmNvbS93ZWlzeXIvanMvR2xvYmFsVmFyLmpzXCIpO1xuICAgICAgICBsZXQgYXVkaW9TaW5nbGUgPSBHLm1vZHVsZU15VmFyKFwiYXVkaW9TaW5nbGVcIiwgXCJodHRwczovL2dpdGNvZGUubmV0L2xpdXphb3l1ZS9oYWkvLS9yYXcvbWFzdGVyL2pkYmYuanNcIik7ICAgICAgICBcbiAgICAgICAgbGV0IG1vZGUgPSBnZXRJdGVtKFwibW9kZVwiLCBcIueDreatjOamnFwiKTtcbiAgICAgICAgbGV0IG1pZCA9IGdldEl0ZW0oXCJtaWRcIiwgXCJcIik7XG4gICAgICAgIGxldCBzb25nSW5mbyA9IHt9O1xuICAgICAgICBsZXQgaWQgPSBcIlwiO1xuICAgICAgICBsZXQgY3VybCA9IFwiXCI7ICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gcGxheUF1ZGlvKHVybCwgaW5mbykge1xuICAgICAgICAgICAgbGV0IGNpZCA9IGlkO1xuICAgICAgICAgICAgY3VybCA9IHVybDtcbiAgICAgICAgICAgYXVkaW9TaW5nbGUucGxheU5ldHdvcih1cmwsIHZvaWQgMCwgKCkgPT4ge1xuIGxvZyhpbmZvLm5hbWUpOyAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNldEhlYWQoaW5mby5waWN1cmwsIGluZm8ubmFtZSwgaW5mby5hcnRpc3RzbmFtZSwgdXJsKTtcbiAgICAgICAgICAgICAgICB0b2FzdChcIuato+WcqOaSreaUvu+8mlwiICsgaW5mby5uYW1lKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldFNvbmcoKSB7XG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCLoh6rlrprkuYnmrYzljZVJRFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF1ZGlvU2luZ2xlLmdldFJhbmRvbUxpc3RTb25nKG1pZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdWRpb1NpbmdsZS5nZXRSYW5kb21Tb25nKG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAgZnVuY3Rpb24gcGxheVZpcCgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmZXRjaChcImh0dHBzOi8vYXBpLnhpbmd6aGlnZS5jb20vQVBJL05ldEVhc2VfQ2xvdWRNdXNpY19uZXcvP3NvbmdpZD1cIiArIGlkICsgXCImYnI9MlwiKSk7XG4gICAgICAgICAgICAgICAgICAgIHBsYXlBdWRpbyhqc29uLmRhdGEuc3JjLCBzb25nSW5mbyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzb25nSW5mbyA9IGdldFNvbmcoKTtcbiAgICAgICAgICAgICAgICBpZCA9IHNvbmdJbmZvLmlkO1xuICAgICAgICAgICAgICAgIGF1ZGlvU2luZ2xlLmlkID0gc29uZ0luZm8uaWQ7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJdGVtKFwibWlkXCIpO1xuICAgICAgICAgICAgICAgIGNsZWFySXRlbShcIm1vZGVcIik7XG4gICAgICAgICAgICAgICAgdG9hc3QoZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwbGF5QXVkaW8oc29uZ0luZm8udXJsLCBzb25nSW5mbyk7XG4gICAgICAgIH1cbmF1ZGlvU2luZ2xlLnNldENvbXBsZXRpb25MaXN0ZW5lcigoKSA9PiB7ICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGdldEl0ZW0oXCLlvqrnjq9cIiwgXCIwXCIpID09IDApIHtcblxuICAgICAgICAgICAgICAgIHBsYXkoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGxheUF1ZGlvKGN1cmwsIHNvbmdJbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGF1ZGlvU2luZ2xlLnNldEVycm9yTGlzdGVuZXIoKCkgPT4ge1xuICAgICAgICAgICAgLy90b2FzdChcIuaSreaUvuWksei0peato+WcqOmHjeaWsOmaj+aculwiKTtcbiAgICAgICAgICAgIGlmICghcGxheVZpcCgpKSB7XG4gICAgICAgICAgICAgICAgcGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcGxheSgpO1xuICAgICAgICByZXR1cm4gXCJoaWtlcjovL2VtcHR5XCI7XG4gICAgICAgICAgICB9LCBzZXRIZWFkKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICB0aXRsZTogXCLkuIvovb1cIixcbiAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Rvd25sb2FkOi8vJyArIGdldE15VmFyKCd1cmwnLCAnJylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCLmrYzljZVcIixcbiAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gW1wi54Ot5q2M5qacXCIsIFwi5paw5q2M5qacXCIsIFwi6aOZ5Y2H5qacXCIsIFwi5oqW6Z+z5qacXCIsIFwi55S16Z+z5qacXCIsIFwi6Ieq5a6a5LmJ5q2M5Y2VSURcIl07XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQobGlzdCwgMSwgJ+mAieaLqeatjOWNlScsIGdldEl0ZW0oJ2knLCAnLTEnKSkuc2VsZWN0KChsaXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IGxpc3QuaW5kZXhPZihpbnB1dCkgKyAnJzsgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2knLCBpKTtcbiAgICAgICAgICAgXG4gICAgICAgIGlmIChpbnB1dCA9PT0gXCLoh6rlrprkuYnmrYzljZVJRFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQoZ2V0SXRlbShcIm1pZFwiLCBcIlwiKSkuaW5wdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0KSByZXR1cm4gXCJ0b2FzdDovL+S4jeiDveS4uuepulwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKE51bWJlcihpbnB1dCkpKSByZXR1cm4gXCJ0b2FzdDovL2lk5Li65bqU57qv5pWw5a2XXCI7XG4gICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oXCJtaWRcIiwgaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKFwibW9kZVwiLCBcIuiHquWumuS5ieatjOWNlUlEXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJ0b2FzdDovL+iuvue9ruWujOaIkOWIh+aNouS4i+S4gOmmluWNs+WPr1wiO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRJdGVtKFwibW9kZVwiLCBpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJ0b2FzdDovL+iuvue9ruWujOaIkOWIh+aNouS4i+S4gOmmluWNs+WPr1wiO1xuICAgICAgICAgICAgICAgICAgICB9LCBsaXN0KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGdldEl0ZW0oJ+W+queOrycsICcwJykgID09IFwiMFwiID8gXCLpmo/mnLrmkq3mlL5cIiA6IFwi5Y2V5puy5b6q546vXCIsXG4gICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0SXRlbSgn5b6q546vJywgJzAnKSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCflvqrnjq8nLCAnMScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3QoJ+WNleabsuW+queOrycpXG4gIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCflvqrnjq8nLCAnMCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3QoJ+maj+acuuaSreaUvicpO1xufSAgICAgICAgICAgICAgICAgICAgXG59KVxufV1cbiAgICB9XG59KTtcbmdxXG4ifSx7Im5hbWUiOiLpobrmkJwiLCJtYXJrIjoi5rW35oqlIiwibGlzdCI6W3sic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjoyLCJuYW1lIjoi6aG65pCc5YWD57SgIiwiY29kZSI6InJlcXVpcmUoJ2h0dHBzOi8vaGlrZXJmYW5zLmNvbS93ZWlzeXIv6aG65pCcX2ludG8uanMnKTtcbumhuuaQnCgyNTApIC8v57uZ5Liq5oyH5a6a6auY5bqmIn1dLCJmb2xkX3N0YXR1cyI6ZmFsc2UsInBhdHRlcm4iOjN9LHsibmFtZSI6IuWkqeawlCIsIm1hcmsiOiLmtbfmiqUiLCJsaXN0IjpbeyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjIsIm5hbWUiOiLlpKnmsJTmkq3miqUiLCJjb2RlIjoibGV0IHRxID0gW107XG5cbkFycmF5LnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbdGhpcy5sZW5ndGggLSAxXTtcbn07XG5cbmZ1bmN0aW9uIGdldENpdHkoKSB7XG4gICAgbGV0IHVybCA9IFwiaHR0cHM6Ly93d3cuaXBzaHVkaS5jb20vXCI7XG4gICAgbGV0IGlwID0gcGRmaChmZXRjaCh1cmwpLCBcImlucHV0W25hbWU9aXBdJiZ2YWx1ZVwiKTtcbiAgICAvL2xvZyhpcClcbiAgICBsZXQgY2l0eSA9IHBkZmgoZmV0Y2godXJsICsgaXApLCBcInRhYmxlJiZ0cjpoYXMoOm1hdGNoZXMo5b2S5bGe5ZywKSkmJnRkLDEmJnNwYW4mJlRleHRcIik7XG4gICAgLy9sb2coY2l0eSlcbiAgICByZXR1cm4gY2l0eS5zcGxpdChcIiBcIikubGFzdCgpO1xufVxuXG5mdW5jdGlvbiB6ZXJvKHMpIHtcbiAgICByZXR1cm4gcyA8IDEwID8gJzAnICsgcyA6IHM7XG59O1xubGV0IG15ZGF0ZSA9IG5ldyBEYXRlKCk7XG5sZXQgeWVhciA9IG15ZGF0ZS5nZXRGdWxsWWVhcigpOyAvL+W5tFxubGV0IG1vbnRoID0gbXlkYXRlLmdldE1vbnRoKCkgKyAxOyAvL+aciFxubGV0IGRhdGUgPSBteWRhdGUuZ2V0RGF0ZSgpOyAvL+aXpVxuLypsZXQgaG91ciA9IG15ZGF0ZS5nZXRIb3VycygpOy8v5pe2XG5sZXQgbWludXRlID0gbXlkYXRlLmdldE1pbnV0ZXMoKTsvL+WIhlxubGV0IHNlY29uZCA9IG15ZGF0ZS5nZXRTZWNvbmRzKCk7Ly/np5IqL1xubGV0IGRheSA9IG5ldyBBcnJheShcIuaYn+acn+aXpVwiLCBcIuaYn+acn+S4gFwiLCBcIuaYn+acn+S6jFwiLCBcIuaYn+acn+S4iVwiLCBcIuaYn+acn+Wbm1wiLCBcIuaYn+acn+S6lFwiLCBcIuaYn+acn+WFrVwiKVtteWRhdGUuZ2V0RGF5KCldO1xuXG4vL+aXpeWOhlxubGV0IHJsID0gKCdoaWtlcjovL2ZpbGVzL0ptL2ZpbGUvcmlsaS5qcycpO1xudHJ5IHtcbiAgICB2YXIgY2RfZmlsZSA9ICQucmVxdWlyZShybCkuZGF0ZTtcbn0gY2F0Y2ggKGUpIHtcbiAgICBsZXQgaHRtbCA9IGZldGNoKCdodHRwczovL2doLXByb3h5LmNvbS9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vam1lbmcxMjMvZmlsZXMvbWFpbi9yaWxpLmpzJyk7XG4gICAgc2F2ZUZpbGUocmwsIGh0bWwpO1xuICAgIHZhciBjZF9maWxlID0gJC5yZXF1aXJlKHJsKS5kYXRlO1xufVxubGV0IGNkID0gY2RfZmlsZTtcbmxldCBjaXR5aWQgPSBnZXRJdGVtKFwiY2l0eV9pZFwiLCBcIlwiKTtcbmlmIChjaXR5aWQgPT0gXCJcIikge1xuICAgIGNsZWFySXRlbSgn5Zyw5Yy6Jylcbn1cbmxldCDkvY3nva4gPSBcIlwiIHx8IGdldEl0ZW0oJ+WcsOWMuicsICcnKTtcbmlmICgh5L2N572uKSB7XG4gICAg5L2N572uID0gZ2V0Q2l0eSgpLnJlcGxhY2UoXCLluIJcIiwgXCJcIik7XG4gICAgc2V0SXRlbShcIuWcsOWMulwiLCDkvY3nva4pO1xufVxuXG5sZXQgSUQgPSBnZXRJdGVtKCfmkq3miqXlkZgnLCAnMicpO1xuXG5sZXQg5paH5a2X5aSp5rCUID0gZ2V0SXRlbSgn5byA5YWzJywgJ+W8gOWQrycpO1xubGV0IHRxX2ltZyA9IGdldEl0ZW0oXCJ0cV9pbWdcIiwgXCJcIik7XG4vL+WbvueJh1xubGV0IGdpZiA9ICgnaGlrZXI6Ly9maWxlcy9KbS9wbmcvZ2lmLmpzb24nKTtcbmlmICghZmlsZUV4aXN0KGdpZikpIHtcbiAgICBzYXZlRmlsZShnaWYsICdbXCJodHRwczovL2ltZy52aW51YS5jbi9pbWFnZXMvelV6Q3kuZ2lmXCIsXCJodHRwczovL2ltZy52aW51YS5jbi9pbWFnZXMvelVhYWkuZ2lmXCIsXCJodHRwczovL2ltZy52aW51YS5jbi9pbWFnZXMvelV2dTEuZ2lmXCIsXCJodHRwczovL2ltZy52aW51YS5jbi9pbWFnZXMvYUxodTIuZ2lmXCJdJyk7XG59XG5sZXQgZl9pZCA9IGdldEl0ZW0oJ0pzX2prJywgJ2RvbmdtYW4nKTtcbmxldCBkaXpoaSA9IGdldEl0ZW0oJ2RpJywgJ2hpa2VyOi8vZmlsZXMvSm0vcG5nLycgKyBmX2lkICsgJy5qc29uJyk7XG5pZiAoIWZpbGVFeGlzdChkaXpoaSkpIHtcbiAgICBzYXZlRmlsZShkaXpoaSwgJ1tdJyk7XG59XG5ldmFsKCdsaXN0PScgKyBmZXRjaChkaXpoaSkpO1xubGV0IFBpYyA9IGdldEl0ZW0oJ1BpYycsICdsaXN0Jyk7XG5sZXQgbnVtID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbGlzdC5sZW5ndGgpO1xubGV0IHNob3dJbWcgPSBsaXN0W251bV07XG5sZXQgaW1hZ2UgPSBnZXRJdGVtKCdmcycsICdpbWcnKTtcbmxldCBodG1sX2xpc3QgPSBbJ2h0dHBzOi8vYmluZy5pbWcucnVuL3JhbmQucGhwP2dsaWRlQ2FjaGU9c2tpcCcsICdodHRwczovL2ltZy44ODQ1LnRvcC9nb29kJywgJ2h0dHBzOi8vcXFseWttLmNuL2FwaS9mZW5namluZy9pbmRleD9rZXk9NzlSOFcwMjRmd0VoUGFxYmtjY3B4TGFMaW0mdHlwZT1pbWcnLCAnaHR0cDovL2ltZ2FwaS54bDA0MDgudG9wL2luZGV4LnBocCcsICdodHRwczovL3NoYW5oZS5raW0vYXBpL3R1L2VyY3kxLnBocCcsJ2h0dHBzOi8vd3d3Lm9uZXhpYW9sYWppLmNuL1JhbmRvbVBpY3R1cmUvYXBpLz9rZXk9cXEyNDk2NjM5MjQmY2xhc3M9MTEwJywnaHR0cHM6Ly93cC51cHg4LmNvbS9hcGkucGhwJ107XG5sZXQgaHRtbF9pbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGh0bWxfbGlzdC5sZW5ndGgpO1xubGV0IGh0bWxfdXJsID0gaHRtbF9saXN0W2h0bWxfaW5kZXhdO1xubGV0IGh0bWwgPSBnZXRJdGVtKCdodG1sJywgaHRtbF91cmwpO1xuLy9sb2cobGlzdClcblxubGV0IHVybCA9IFwiXCI7XG5pZiAodHFfaW1nID09IFwiXCIpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAoaW1hZ2UgPT09ICdpbWcnKSB7XG4gICAgICAgICAgICB1cmwgPSAoaHRtbCArICcjJyArIERhdGUubm93KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGltYWdlID09PSAndXJsJykge1xuICAgICAgICAgICAgdXJsID0gZmV0Y2goaHRtbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRoID0gXCIuZGF0YS5pbWdcIjtcbiAgICAgICAgICAgIGlmIChodG1sLmluY2x1ZGVzKFwiQEBcIikpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IGh0bWwuc3BsaXQoXCJAQFwiKTtcbiAgICAgICAgICAgICAgICBodG1sID0gdGVtcFswXTtcbiAgICAgICAgICAgICAgICBwYXRoID0gdGVtcFsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vbG9nKHBhdGgpXG4gICAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShmZXRjaChodG1sKSk7XG4gICAgICAgICAgICBldmFsKFwidXJsPWpzb25cIiArIHBhdGgpO1xuICAgICAgICAgICAgaWYgKHVybC5zdGFydHNXaXRoKFwiLy9cIikpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSBcImh0dHBzOlwiICsgdXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9sb2codXJsKVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2coZS5tZXNzYWdlKVxuICAgICAgICBsb2coXCLmiqXplJlcIilcbiAgICAgICAgY2xlYXJJdGVtKFwiZnNcIik7XG4gICAgICAgIGNsZWFySXRlbShcImh0bWxcIik7XG4gICAgfVxufVxubGV0IGltZ3MgPSBnZXRJdGVtKCdpbWcnLCB1cmwpO1xubGV0IGltZyA9IChQaWMgPT09ICdsaXN0JykgPyBpbWdzIDogKHNob3dJbWcgPT09IG51bGwgPyBpbWdzIDogc2hvd0ltZyk7XG5cbmxldCB3cGF0aCA9IFwiaGlrZXI6Ly9maWxlcy9jYWNoZS93ZWF0aGVyLmpzb25cIjtcbmxldCB1cGRhdGEgPSB7XG4gICAg5aSpOiAwLFxuICAgIOaXtjogMSxcbiAgICDliIY6IDAsXG59XG5sZXQgdXBkYXRhdGltZSA9ICh1cGRhdGEu5aSpICogODY0MDAwMDApICsgKHVwZGF0YS7ml7YgKiAzNjAwMDAwKSArICh1cGRhdGEu5YiGICogNjAwMDApO1xuXG5sZXQgY29uZCA9IGZhbHNlO1xubGV0IHdwanNvbiA9IHJlYWRGaWxlKHdwYXRoKTtcbmlmICh3cGpzb24gIT0gXCJcIikge1xuICAgIHdwanNvbiA9IEpTT04ucGFyc2Uod3Bqc29uKTtcbiAgICBpZiAobmV3IERhdGUoKS5nZXRUaW1lKCkgPiB3cGpzb25bXCJuZXh0VXBkYXRlVGltZVwiXSkge1xuICAgICAgICBjb25kID0gdHJ1ZTtcbiAgICB9XG4gICAgLyppZijkvY3nva4hPXdwanNvblsnY2l0eSddKXtcbiAgICAgY29uZD10cnVlO1xuICAgIH0qL1xufVxuLy9sb2co5L2N572uKVxuXG5mdW5jdGlvbiBjb2xvclRpdGxlKHRpdGxlLCBjb2xvcnMpIHtcbiAgICBsZXQgZGVmID0ge1xuICAgICAgICBmYzogJyNmZmZmZmYnLFxuICAgICAgICBiYzogJyMzRjhFRDAnLFxuICAgIH1cbiAgICBjb2xvcnMgPSBPYmplY3QuYXNzaWduKGRlZiwgY29sb3JzKTtcbiAgICByZXR1cm4gJzxmb250IGNvbG9yPVwiJyArIGNvbG9ycy5mYyArICdcIj48c3BhbiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6ICcgKyBjb2xvcnMuYmMgKyAnXCI+JyArIHRpdGxlICsgJzwvc3Bhbj48L2ZvbnQ+J1xufVxuXG5mdW5jdGlvbiBkYXRlRm9ybWF0KHRpbWUpIHtcbiAgICBsZXQgdGV4dCA9ICd5eXl5LU1NLWRkIEhIOm1tOnNzJztcbiAgICByZXR1cm4gJC5kYXRlRm9ybWF0KHRpbWUsIHRleHQpXG59XG5cbmZ1bmN0aW9uIHJlcGVhdFN0cmluZyhzdHIsIG51bSkge1xuICAgIHJldHVybiBzdHIucmVwZWF0KG51bSk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VXaXRoUGF0dGVybnModGV4dCwgcGF0dGVybkxpc3QsIHJlcGxhY2VtZW50TGlzdCkge1xuICAgIGxldCByZXBsYWNlZFRleHQgPSB0ZXh0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybkxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHBhdHRlcm4gPSBwYXR0ZXJuTGlzdFtpXTtcbiAgICAgICAgaWYgKHBhdHRlcm4uaW5jbHVkZXMoXCI6OlwiKSkge1xuICAgICAgICAgICAgbGV0IHRlbXAgPSBwYXR0ZXJuLnNwbGl0KFwiOjpcIik7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBuZXcgUmVnRXhwKHRlbXBbMF0sIHRlbXBbMV0pO1xuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgcGF0dGVybiA9IG5ldyBSZWdFeHAodGVtcFswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlcGxhY2VtZW50ID0gcmVwbGFjZW1lbnRMaXN0W2ldO1xuICAgICAgICBpZiAocGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkgeyAvLyDlpoLmnpzliJfooajpobnmmK/mraPliJnooajovr7lvI9cbiAgICAgICAgICAgIC8vbG9nKFwi5q2j5YiZXCIpXG4gICAgICAgICAgICByZXBsYWNlZFRleHQgPSByZXBsYWNlZFRleHQucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlbWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7IC8vIOWmguaenOWIl+ihqOmhueaYr+aWh+acrOWtl+espuS4slxuICAgICAgICAgICAgbGV0IHJlZ2V4UGF0dGVybiA9IHBhdHRlcm47XG4gICAgICAgICAgICByZXBsYWNlZFRleHQgPSByZXBsYWNlZFRleHQucmVwbGFjZShyZWdleFBhdHRlcm4sIHJlcGxhY2VtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVwbGFjZWRUZXh0O1xufVxuXG5cbmxldCB0cV9zaW1wbGUgPSBnZXRJdGVtKFwidHFfc2ltcGxlXCIsIFwiMFwiKSA9PSBcIjBcIiA/IGZhbHNlIDogdHJ1ZTtcblxuZnVuY3Rpb24gZ2V0cWltYWdlKCkge1xuICAgIGxldCBpbWcgPSBcIlwiO1xuICAgIGlmICh0cV9zaW1wbGUpIHtcbiAgICAgICAgbGV0IHRodG1sID0gZmV0Y2goXCJodHRwczovL3RpYW5xaS5tb2ppLmNvbS9cIiArIChjaXR5aWQgIT0gXCJcIiA/IFwiYXBpL3JlZGlyZWN0L1wiICsgY2l0eWlkIDogXCJcIiksIHt9KVxuICAgICAgICAvL2xvZyh0aHRtbClcbiAgICAgICAgaW1nID0gcGRmaCh0aHRtbCwgXCIud2VhX3dlYXRoZXImJmltZyYmc3JjXCIpO1xuICAgIH1cbiAgICByZXR1cm4gaW1nO1xufVxuXG5cbmlmIChjaXR5aWQgPT0gXCJcIikge1xuICAgIGxldCBpdGVtID0gSlNPTi5wYXJzZShwb3N0KFwiaHR0cHM6Ly9zc2NoLmFwaS5tb2ppLmNvbS9jaXR5bWFuYWdlL2pzb24vaDUvc2VhcmNoQ2l0eVwiLCB7XG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgIGtleVdvcmQ6IOS9jee9rixcbiAgICAgICAgfVxuICAgIH0pKS5jaXR5X2xpc3RbMF07XG4gICAgLy9sb2coaXRlbSlcbiAgICAvL3NldEl0ZW0oXCJjaXR5XCIsaXRlbS5uYW1lKTtcbiAgICBjaXR5aWQgPSBpdGVtLmNpdHlJZDtcbiAgICBzZXRJdGVtKFwiY2l0eV9pZFwiLCBTdHJpbmcoaXRlbS5jaXR5SWQpKTtcbn1cbmlmICh3cGpzb24uY2l0eWlkID09IHVuZGVmaW5lZCkge1xuICAgIGNvbmQgPSB0cnVlO1xufVxuaWYgKHdwanNvbi5jaXR5aWQgIT0gY2l0eWlkKSB7XG4gICAgY29uZCA9IHRydWU7XG59XG5cbi8vbG9nKGNpdHlpZClcbmlmICh3cGpzb24gPT0gXCJcIiB8fCBjb25kKSB7XG4gICAgLy9sb2coXCLlpKnmsJTnvJPlrZjnvJPlrZgg5b2T5YmNXCIgKyBKU09OLnN0cmluZ2lmeSh1cGRhdGEpICsgJ+abtOaWsOS4gOasoSwnICsgZGF0ZUZvcm1hdCgobmV3IERhdGUoKS5nZXRUaW1lKCkgKyB1cGRhdGF0aW1lKSkpO1xuICAgIC8vd3Bqc29uPUpTT04ucGFyc2UoZmV0Y2goXCJodHRwOi8vYXV0b2Rldi5vcGVuc3BlZWNoLmNuL2NzcC9hcGkvdjIuMS93ZWF0aGVyP29wZW5JZD1haXVpY3VzJmNsaWVudFR5cGU9YW5kcm9pZCZzaWduPWFuZHJvaWQmY2l0eT1cIivkvY3nva4rXCImbmVlZE1vcmVEYXRhPXRydWUmcGFnZU5vPTEmcGFnZVNpemU9MVwiKSkuZGF0YS5saXN0WzBdO1xuICAgIGxldCBoID0gZmV0Y2goXCJodHRwczovL20ubW9qaS5jb20vXCIgKyAoY2l0eWlkICE9IFwiXCIgPyBcImFwaS9yZWRpcmVjdC9cIiArIGNpdHlpZCA6IFwiXCIpLCB7fSk7XG5cbiAgICB0cnkge1xuICAgICAgICBsZXQgd2FydGV4dCA9IFtdO1xuICAgICAgICBsZXQgd2FybmluZyA9IHBkZmEoaCwgXCIuaW5mb19hcWkmJmxpOm5vdCg6aGFzKFthbHQ9YXFpXSkpXCIpLm1hcCh4ID0+IHBkZmgoeCwgXCJUZXh0XCIpKS5tYXAoKHgpID0+IHtcbiAgICAgICAgICAgIGxldCB0ZXh0ID0geC5zcGxpdChcIiBcIilbMF07XG4gICAgICAgICAgICBsZXQgY29sb3IgPSB4LnNwbGl0KFwiIFwiKVsxXS5yZXBsYWNlKFwi6ImyXCIsIFwiXCIpO1xuICAgICAgICAgICAgc3dpdGNoIChjb2xvcikge1xuICAgICAgICAgICAgICAgIGNhc2UgXCLok51cIjpcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBcIiM0RDdFRjhcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIum7hFwiOlxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9IFwiI0ZGRUQyRFwiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwi5qmZXCI6XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID0gXCIjRjc4RTFCXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCLnuqJcIjpcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBcIiNGNTRCNDZcIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPSBcIiNGRkZGRkZcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdhcnRleHQucHVzaCh4KTtcbiAgICAgICAgICAgIHJldHVybiBjb2xvclRpdGxlKHRleHQsIHtcbiAgICAgICAgICAgICAgICBiYzogY29sb3JcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICB3cGpzb24gPSB7XG4gICAgICAgICAgICBjaXR5aWQ6IGNpdHlpZCxcbiAgICAgICAgICAgIGltZzogZ2V0cWltYWdlKCksXG4gICAgICAgICAgICBjaXR5OiBwZGZoKGgsIFwiLmNpdHkmJlRleHRcIiksXG4gICAgICAgICAgICB3ZWF0aGVyOiBwZGZoKGgsIFwiI2luZm9fd2VhJiZUZXh0XCIpLFxuICAgICAgICAgICAgdGVtcDogcGRmaChoLCBcIi5pbmZvX2Fib3V0JiZlbSYmVGV4dFwiKSxcbiAgICAgICAgICAgIGFpclF1YWxpdHk6IHBkZmgoaCwgXCIuaW5mb19hcWkmJmxpOmhhcyhbYWx0PWFxaV0pJiZUZXh0XCIpLFxuICAgICAgICAgICAgd2luZDogcGRmaChoLCBcIi5pbmZvX2Fib3V0JiZwJiZUZXh0XCIpLFxuICAgICAgICAgICAgd2FybmluZzogd2FybmluZyxcbiAgICAgICAgICAgIHdhcnRleHQ6IHdhcnRleHQsXG4gICAgICAgIH1cbiAgICAgICAgLy9sb2coXCLmraPluLhcIilcbiAgICB9IGNhdGNoIHt9XG5cbiAgICB3cGpzb25bXCJuZXh0VXBkYXRlVGltZVwiXSA9IChuZXcgRGF0ZSgpLmdldFRpbWUoKSArIHVwZGF0YXRpbWUpLnRvU3RyaW5nKCk7XG4gICAgd3Bqc29uW1wibmV4dFVwZGF0ZVRleHRcIl0gPSBkYXRlRm9ybWF0KChuZXcgRGF0ZSgpLmdldFRpbWUoKSArIHVwZGF0YXRpbWUpKTtcbiAgICB3cml0ZUZpbGUod3BhdGgsIEpTT04uc3RyaW5naWZ5KHdwanNvbikpO1xufVxuaWYgKCghd3Bqc29uLmhhc093blByb3BlcnR5KFwiaW1nXCIpIHx8IHdwanNvbltcImltZ1wiXSA9PSBcIlwiKSAmJiB0cV9pbWcgPT0gXCJzaW1wbGVcIikge1xuICAgIHdwanNvbi5pbWcgPSBnZXRxaW1hZ2UoKTtcbiAgICB3cml0ZUZpbGUod3BhdGgsIEpTT04uc3RyaW5naWZ5KHdwanNvbikpO1xufVxuXG4vL2xvZyh3cGpzb24pXG5cbmxldCB3YXJsaW5lID0gZ2V0SXRlbShcIndhcmxpbmVcIiwgXCI3OjBcIik7XG5sZXQg6aKc6ImyID0gZ2V0SXRlbSgn5paH5a2XJywgJyNmZDI2OGEnKTtcblxubGV0IHdlYXRoZXIgPSB7XG4gICAgY2l0eTogd3Bqc29uLmNpdHksXG4gICAgY29uZDogd3Bqc29uLndlYXRoZXIsXG4gICAgdG1wOiB3cGpzb24udGVtcCxcbiAgICBhaXJxdWFsaXR5OiB3cGpzb24uYWlyUXVhbGl0eSxcbiAgICB3aW5kOiB3cGpzb24ud2luZCxcbiAgICB3YXJuaW5nOiB3cGpzb24ud2FybmluZy5sZW5ndGggPyBcIuW9k+WJjemihOitpjogXCIuZm9udGNvbG9yKOminOiJsikgKyB3cGpzb24ud2FybmluZy5qb2luKFwiIFwiKSArIFwiXCIgOiBcIlwiLFxuICAgIHdhcnRleHQ6IHdwanNvbi53YXJ0ZXh0Lmxlbmd0aCA/IFwi5b2T5YmN6aKE6K2mOiBcIiArIHdwanNvbi53YXJ0ZXh0LmpvaW4oXCIgXCIpIDogXCJcIixcbn1cblxud2FybGluZSA9IHdhcmxpbmUuc3BsaXQoXCI6XCIpO1xuXG5sZXQgZnJ1aXQgPSBbXCLlnLDljLpcIiwgXCLlpKnmsJRcIiwgXCLmuKnluqZcIiwgXCJBUUlcIiwgXCLml6XmnJ9cIiwgXCLlhpzljoZcIiwgXCLpo47lkJFcIiwgXCLpooToraZcIl07XG5sZXQgdHFfc2hvd3MgPSBzdG9yYWdlMC5nZXRJdGVtKFwidHFfc2hvd3NcIiwgZnJ1aXQubWFwKCgpID0+IFwiMVwiKSk7XG5cblxubGV0IHRxX3JlID0gc3RvcmFnZTAuZ2V0SXRlbShcInRxX3JlXCIsIFtdKTtcblxubGV0IHRpdGxlcyA9IFtcbiAgICAnPGZvbnQgY29sb3I9JyArIOminOiJsiArICc+JyArIHdlYXRoZXIuY2l0eSArICc8L2ZvbnQ+JyxcbiAgICAnPHNtYWxsPjxmb250IGNvbG9yPScgKyDpopzoibIgKyAnPuS7iuaXpeWkqeawlDogKCcgKyB3ZWF0aGVyLmNvbmQgKyAnKTwvZm9udD4nLFxuICAgICc8Zm9udCBjb2xvcj0nICsg6aKc6ImyICsgJz7muKnluqY6ICgnICsgd2VhdGhlci50bXAgKyAn4oSDKTwvZm9udD4nLCAnPGZvbnQgY29sb3I9JyArIOminOiJsiArICc+56m65rCU6LSo6YePOiAoJyArIHdlYXRoZXIuYWlycXVhbGl0eSArICcpPC9mb250PicsXG4gICAgJzxmb250IGNvbG9yPScgKyDpopzoibIgKyAnPuaXpeacnzogJyArIHllYXIgKyAn5bm0JyArIHplcm8obW9udGgpICsgJ+aciCcgKyB6ZXJvKGRhdGUpICsgJ+aXpTwvZm9udD4nLFxuICAgICc8Zm9udCBjb2xvcj0nICsg6aKc6ImyICsgJz7lhpzljoY6ICcgKyBjZCArICdcXHQgJyArIGRheSArICc8L2ZvbnQ+JyxcbiAgICAnPGZvbnQgY29sb3I9JyArIOminOiJsiArICc+6aOO5ZCROiAnICsgd2VhdGhlci53aW5kICsgJzwvZm9udD48c21hbGw+Jyxcbl07XG5cblxubGV0IHdhcm5pbmcgPSByZXBlYXRTdHJpbmcoXCJcXHRcIiwgd2FybGluZVsxXSkgKyB3ZWF0aGVyLndhcm5pbmc7XG5cbmxldCB0cV90aXRsZXMgPSBPYmplY3QuYXNzaWduKFtdLCB0aXRsZXMpXG5pZiAod2VhdGhlci53YXJuaW5nICE9IFwiXCIpIHtcbiAgICB0cV90aXRsZXMucHVzaCh3ZWF0aGVyLndhcm5pbmcpXG59XG5zdG9yYWdlMC5wdXRNeVZhcihcInRxX3RpdGxlc1wiLCB0cV90aXRsZXMpO1xuXG5pZiAoT2JqZWN0LmtleXModHFfcmUpLmxlbmd0aCA+IDApIHtcbiAgICBmdW5jdGlvbiB0cmVwbGFjZUFMTCh0aXRsZSwgcGFyYW1zKSB7XG4gICAgICAgIGlmIChwYXJhbXMgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGl0bGU7XG4gICAgICAgIH1cbiAgICAgICAgdGl0bGUgPSByZXBsYWNlV2l0aFBhdHRlcm5zKHRpdGxlLCBwYXJhbXNbXCJyZWdleFwiXSwgcGFyYW1zW1wicmVwbGFjZVwiXSk7XG4gICAgICAgIHJldHVybiB0aXRsZTtcbiAgICB9XG4gICAgZnJ1aXQuZmlsdGVyKHggPT4geCAhPSBcIumihOitplwiKS5mb3JFYWNoKCh4LCBpKSA9PiB7XG4gICAgICAgIHRpdGxlc1tpXSA9IHRyZXBsYWNlQUxMKHRpdGxlc1tpXSwgdHFfcmVbeF0pXG4gICAgfSlcbiAgICB3YXJuaW5nID0gdHJlcGxhY2VBTEwod2FybmluZywgdHFfcmVbXCLpooToraZcIl0pXG59XG5cbnRpdGxlcyA9IHRpdGxlcy5tYXAoZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcbiAgICByZXR1cm4gdHFfc2hvd3NbaW5kZXhdID09IFwiMVwiID8gdGl0bGVzW2luZGV4XSA6IFwiXCI7XG59KTtcblxuXG5pZiAod2FybmluZyAhPSBcIlwiICYmIHRxX3Nob3dzWzddID09IFwiMVwiKSB7XG4gICAgbGV0IGxlID0gdGl0bGVzLmZpbHRlcih4ID0+IHggIT0gXCJcIikubGVuZ3RoO1xuICAgIC8vbG9nKGxlKVxuICAgIGlmICh3YXJsaW5lWzBdID09IFwiN1wiKSB7XG4gICAgICAgIGlmIChsZSA9PSB3YXJsaW5lWzBdKSB7XG4gICAgICAgICAgICB0aXRsZXNbbGVdID0gd2FybmluZyArICc8L3NtYWxsPic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZXNbd2FybGluZVswXV0gPSB3YXJuaW5nO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHNzID0gXCJcIjtcbiAgICAgICAgbGV0IGVuID0gXCJcIjtcbiAgICAgICAgaWYgKHdhcmxpbmVbMF0gPT0gXCI2XCIgJiYgdHFfc2hvd3NbNl0gPT0gXCIxXCIpIHtcbiAgICAgICAgICAgIFtzcywgZW5kXSA9IFtcIlwiLCBcIjwvc21hbGw+XCJdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aXRsZXMubGVuZ3RoIDwgd2FybGluZVswXSkge1xuICAgICAgICAgICAgdGl0bGVzW3RpdGxlcy5sZW5ndGhdID0gd2FybmluZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpdGxlc1t3YXJsaW5lWzBdXSA9ICh0aXRsZXNbd2FybGluZVswXV0gIT0gdW5kZWZpbmVkID8gdGl0bGVzW3dhcmxpbmVbMF1dIDogXCJcIikgKyBzcyArIHdhcm5pbmcgKyBlbjtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vbG9nKHRpdGxlcy5qb2luKFwiXFxuXCIpKVxuLy9sb2cod2VhdGhlcilcblxubGV0IHRpdGxlID0gJ+KAnOKAnOKAneKAnScgKyB0aXRsZXMuZmlsdGVyKHggPT4geCAhPSBcIlwiKS5qb2luKFwiXFxuXCIpO1xuLy9sb2codGl0bGVzKVxuXG5sZXQgb25seV94NSA9IGdldEl0ZW0oXCJvbmx5eDVcIiwgXCIwXCIpID09IFwiMFwiID8gdHJ1ZSA6IGZhbHNlO1xuXG5mdW5jdGlvbiBsYXp5Uih3ZWF0aGVyLCBtb2RlKSB7XG4gICAgbGV0IHR4dCA9ICh3ZWF0aGVyLmNpdHkgKyAn77yM5LuK5aSpJyArIHdlYXRoZXIuY29uZCArICfvvIzmuKnluqYnICsgd2VhdGhlci50bXAgKyAn77yM56m65rCU6LSo6YePJyArIHdlYXRoZXIuYWlycXVhbGl0eSArICfvvIwnICsgd2VhdGhlci53aW5kLnJlcGxhY2UoLyUvLCBcIlwiKSkgKyAn77yMJyArIHdlYXRoZXIud2FydGV4dDtcbiAgICAvL2xvZyh0eHQpXG4gICAgZnVuY3Rpb24gcGxheUF1ZGlvKHVybCkge1xuICAgICAgICBjb25zdCBNZWRpYVBsYXllciA9IGFuZHJvaWQubWVkaWEuTWVkaWFQbGF5ZXI7XG4gICAgICAgIGxldCBtZWRpYVBsYXllciA9IG5ldyBNZWRpYVBsYXllcigpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWVkaWFQbGF5ZXIuc2V0RGF0YVNvdXJjZSh1cmwpO1xuICAgICAgICAgICAgbWVkaWFQbGF5ZXIucHJlcGFyZUFzeW5jKCk7XG4gICAgICAgICAgICBtZWRpYVBsYXllci5zZXRPblByZXBhcmVkTGlzdGVuZXIobmV3IE1lZGlhUGxheWVyLk9uUHJlcGFyZWRMaXN0ZW5lcih7XG4gICAgICAgICAgICAgICAgb25QcmVwYXJlZChtcCkge1xuICAgICAgICAgICAgICAgICAgICBtZWRpYVBsYXllci5zdGFydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIG1lZGlhUGxheWVyLnNldE9uQ29tcGxldGlvbkxpc3RlbmVyKG5ldyBNZWRpYVBsYXllci5PbkNvbXBsZXRpb25MaXN0ZW5lcih7XG4gICAgICAgICAgICAgICAgb25Db21wbGV0aW9uKG1wKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lZGlhUGxheWVyLnJlbGVhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFQbGF5ZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbWVkaWFQbGF5ZXIucmVsZWFzZSgpO1xuICAgICAgICAgICAgbWVkaWFQbGF5ZXIgPSBudWxsO1xuICAgICAgICAgICAgbG9nKGUudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy/nm7TmjqXmkq3mlL7nvZHnu5zop4bpopHpk77mjqXvvIzmnInlj6/og73mkq3mlL7lpLHotKXov5jmsqHmnInnvJPlrZjvvIzov5jmmK/kuIvovb3kuIDkuIvmr5TovoPnqLPlpqVcbiAgICBmdW5jdGlvbiBwbGF5TmV0d29yQXVkaW8odXJsKSB7XG4gICAgICAgIGxldCBwYXRoID0gXCJoaWtlcjovL2ZpbGVzL19jYWNoZS9cIiArIG1kNSh1cmwpO1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJlcXVpcmVEb3dubG9hZCh1cmwsIHBhdGgpO1xuICAgICAgICAgICAgcGxheUF1ZGlvKGdldFBhdGgocGF0aCkuc2xpY2UoNykpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgdXJsID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly94aWFvYXBpLmNuL0FQSS96c190dHMucGhwP3R5cGU9eHVuZmVpJmlkPScgKyBnZXRJdGVtKCfmkq3miqXlkZgnKSArICcmbXNnPScgKyB0eHQpKS50dHM7XG4gICAgbGV0IGQgPSBbXTtcbiAgICBkLnB1c2goe1xuICAgICAgICB0aXRsZTogdHh0LFxuICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXG4gICAgfSlcbiAgICBkLnB1c2goe1xuICAgICAgICBjb2xfdHlwZTogXCJ4NV93ZWJ2aWV3X3NpbmdsZVwiLFxuICAgICAgICBkZXNjOiBcIjBcIixcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7XG4gICAgICAgICAgICAgICAgZmJhLmxvZyhcImFhXCIpXG4gICAgICAgICAgICAgICAgbGV0IGF1ZGlvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYXVkaW9bY29udHJvbHNdW2F1dG9wbGF5XVtuYW1lPVwibWVkaWFcIl0nKTtcbiAgICAgICAgICAgICAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn6Z+z6aKR5pKt5pS+5a6M5oiQJyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCByID0gJCQkKCkubGF6eVJ1bGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZWZyZXNoUGFnZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZnlfYnJpZGdlX2FwcC5wYXJzZUxhenlSdWxlKHIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBpZiAobW9kZSA9PSBcImxhenlcIikge1xuICAgICAgICAvL2xvZyh1cmwpXG4gICAgICAgIGxldCB7XG4gICAgICAgICAgICBHTVxuICAgICAgICB9ID0gJC5yZXF1aXJlKFwiaHR0cHM6Ly9naC1wcm94eS5jb20vaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2ptZW5nMTIzL2ZpbGVzL21haW4vR2xvYmFsVmFyVjMuanNcIilcbiAgICAgICAgbGV0IGF1ZGlvU2luZ2xlID0gR00uZGVmaW5lTW9kdWxlKFwiYXVkaW9TaW5nbGVcIiwgXCJhdWRpbz9ydWxlPeeugOaYk+aSreaUvuWZqFwiKTtcbiAgICAgICAgaWYgKCFhdWRpb1NpbmdsZS5oYXNQbGF5ZXIoKSB8fCBhdWRpb1NpbmdsZS5nZXRMb2NhbFVybCh1cmwpICE9PSBhdWRpb1NpbmdsZS5nZXRDdXJyZW50VXJsKCkpIHtcbiAgICAgICAgICAgIGF1ZGlvU2luZ2xlLnBsYXlOZXR3b3IodXJsKTtcbiAgICAgICAgICAgIC8vcmV0dXJuIFwidG9hc3Q6Ly/lvIDlp4vmkq3mlL5cIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXVkaW9TaW5nbGUuaGFzUGxheWVyKCkpIHtcbiAgICAgICAgICAgIC8vYXVkaW9TaW5nbGUuc3RhcnRPclBhdXNlKCk7XG4gICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5q2j5Zyo5pKt5pS+JztcbiAgICAgICAgfVxuICAgICAgICAvL3BsYXlOZXR3b3JBdWRpbyh1cmwpO1xuXG4gICAgICAgIC8vcmV0dXJuICd0b2FzdDovL+ato+WcqOaSreaKpeWkqeawlCdcbiAgICAgICAgcmV0dXJuICd0b2FzdDovLycgKyB0eHQ7XG4gICAgfVxuICAgIHJldHVybiBzZXRSZXN1bHQoZClcbn1cbnVybCA9ICQoJ2hpa2VyOi8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKGxhenlSLCB3ZWF0aGVyLCBcImxhenlcIik7XG5cbmxldCB0cV9jb2wgPSBnZXRJdGVtKFwidHFfY29sXCIsIFwiY2FyZF9waWNfMVwiKTtcbi8vbG9nKHRxX2NvbClcbmlmICh0cV9pbWcgIT0gXCJcIikge1xuICAgIGlmICh0cV9pbWcuaW5jbHVkZXMoXCJAQFwiKSkge1xuICAgICAgICBsZXQgdGVtcCA9IHRxX2ltZy5zcGxpdChcIkBAXCIpO1xuICAgICAgICB0aCA9IGZldGNoKHRlbXBbMF0pO1xuICAgICAgICB0cV9pbWcgPSBwZGZoKHRoLCB0ZW1wWzFdKTtcbiAgICB9XG4gICAgaW1nID0gdHFfaW1nO1xufVxuXG5pZiAoW1widGV4dF9pY29uXCIsIFwiYXZhdGFyXCJdLmluY2x1ZGVzKHRxX2NvbCkpIHtcbiAgICB0aXRsZSA9IHRpdGxlLnJlcGxhY2UoJ+KAnOKAnOKAneKAnScsIFwiXCIpO1xufVxuaWYgKHRxX3NpbXBsZSAmJiB3cGpzb25bXCJpbWdcIl0pIHtcbiAgICBpbWcgPSB3cGpzb25bXCJpbWdcIl07XG59XG5cbnRxLnB1c2goe1xuICAgIGNvbF90eXBlOiB0cV9jb2wsXG4gICAgdGl0bGU6IOaWh+Wtl+WkqeawlCA9PSAn5byA5ZCvJyA/IHRpdGxlIDogJycsXG4gICAgZGVzYzogdHFfY29sLmluY2x1ZGVzKFwiY2FyZFwiKSA/IFwiMFwiIDogXCJcIixcbiAgICBpbWc6IGltZyxcbiAgICB1cmw6IHVybCxcbiAgICBleHRyYToge1xuICAgICAgICAvL25ld1dpbmRvdzp0cnVlLFxuICAgICAgICBpZDogXCLkuLvpobXlhYPntKAj5aSp5rCU5pKt5oqlXCIsXG4gICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgcGFnZVRpdGxlOiAn5aSp5rCU5pKt5oqlJyxcbiAgICAgICAgbG9uZ0NsaWNrOiBbe1xuICAgICAgICAgICAgdGl0bGU6ICfwn5SW5paH5a2XOlxcdCcgKyAoZ2V0SXRlbSgn5byA5YWzJywgJ+W8gOWQrycpID09ICflvIDlkK8nID8gJ+W8gCcgOiAn5YWzJyksXG4gICAgICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0SXRlbSgn5byA5YWzJywgZ2V0SXRlbSgn5byA5YWzJywgJ+W8gOWQrycpID09ICflvIDlkK8nID8gJ+WFs+mXrScgOiAn5byA5ZCvJyk7XG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRvYXN0KCflpKnmsJTmloflrZflt7InICsgKGdldEl0ZW0oJ+W8gOWFsycsICflvIDlkK8nKSA9PSAn5byA5ZCvJyA/ICfmiZPlvIAnIDogJ+WFs+mXrScpKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICB0aXRsZTogJ/CflITliIfmjaInLFxuICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAkKFsn5aSp5rCU5L2N572uJywgJ+WkqeawlOaSreaKpScsICflm77niYfmjqXlj6MnLCAn5paH5a2X6aKc6ImyJywgJ+acrOWcsOmaj+acuicsIFwi6aKE6K2m5omA5Zyo6KGMXCIsIFwi5oyJ6ZKu5qC35byPXCIsIFwi6YCJ5oup5pi+56S6XCIsIFwi5p6B566A5qih5byPOlwiICsgKGdldEl0ZW0oXCJ0cV9zaW1wbGVcIiwgXCIwXCIpID09IFwiMFwiID8gXCLlhbNcIiA6IFwi5byAXCIpLCBcIuaWh+acrOabv+aNolwiLCBcIumHjee9ruiuvuWumlwiXSwgMiwgJ+ivt+mAieaLqScpLnNlbGVjdCgoaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGlrZXJQb3AgPSAkLnJlcXVpcmUoXCJodHRwczovL2doLXByb3h5LmNvbS9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vam1lbmcxMjMvZmlsZXMvbWFpbi9oaWtlclBvcC5qc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID09ICflpKnmsJTkvY3nva4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnJywgJ+aDs+imgeabtOaNoueahOWcsOWMuuS9jee9ru+8jOepuuWImeaMieWumuS9jScpLmlucHV0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NldEl0ZW0oJ+WcsOWMuicsIGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJdGVtKFwiY2l0eV9pZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5oyJ5a6a5L2NJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNpdHlsaXN0ID0gSlNPTi5wYXJzZShwb3N0KFwiaHR0cHM6Ly9zc2NoLmFwaS5tb2ppLmNvbS9jaXR5bWFuYWdlL2pzb24vaDUvc2VhcmNoQ2l0eVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleVdvcmQ6IGlucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLmNpdHlfbGlzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xvZyhjaXR5bGlzdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VsZWN0ID0gY2l0eWxpc3QubWFwKHggPT4geC5uYW1lICsgXCIsXCIgKyB4LnBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hvd1NlbGVjdE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLor7fnoa7lrppcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBzZWxlY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChjaXR5bGlzdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2coY2l0eWxpc3RbTVlfSU5ERVhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oXCJjaXR5X2lkXCIsIFN0cmluZyhjaXR5bGlzdFtNWV9JTkRFWF0uY2l0eUlkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5YiH5o2i5Zyw5Z2A5Li6JyArIGlucHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjaXR5bGlzdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suWIh+aNouWcsOWdgOS4uicgKyBpbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5aSp5rCU5pKt5oqlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRpdGxlID0gW1wi5LiD5ZOlIOeUt+WjsFwiLCBcIuWtkOaZtCDlpbPlo7BcIiwgXCLkuIDoj7Ig5aWz5aOwXCIsIFwi5bCP6ZyyIOWls+WjsFwiLCBcIuWwj+m5jyDnlLflo7BcIiwgXCLlsI/mlrAg55S35aOwXCIsIFwi5bCP6ZuqIOWls+WjsFwiLCBcIui2heWTpSDnlLflo7BcIiwgXCLlsI/lqpsg5aWz5aOwXCIsIFwi5Y+25a2QIOWls+WjsFwiLCBcIuWNg+mbqiDlpbPlo7BcIiwgXCLlsI/lv6Ag55S35aOwXCIsIFwi5LiH5Y+UIOeUt+WjsFwiLCBcIuiZq+iZqyDlpbPlo7BcIiwgXCLmpaDmpaAg55S356ulXCIsIFwi5pmT55KHIOWls+WjsFwiLCBcIuiKs+iKsyDlpbPnq6VcIiwgXCLlmInlmIkg5aWz5aOwXCIsIFwi5bCP5YCpIOWls+WjsFwiLCBcIuiLseaWhyDlpbPlo7BcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCIsIFwiOFwiLCBcIjlcIiwgXCIxMFwiLCBcIjExXCIsIFwiMTJcIiwgXCIxM1wiLCBcIjE0XCIsIFwiMTVcIiwgXCIxNlwiLCBcIjE3XCIsIFwiMThcIiwgXCIxOVwiLCBcIjIwXCJdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IHRpdGxlLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWRbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBsaXN0Lm1hcChsaXN0ID0+IGxpc3QubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChuYW1lLCAzLCAn6K+36YCJ5oupJykuc2VsZWN0KChsaXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG8gPSBsaXN0LmZpbmRJbmRleChsaXN0ID0+IGxpc3QubmFtZSA9PSBpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IGxpc3Rbb10uaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5pKt5oql5ZGYJywgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suabtOaNouaSreaKpeWRmCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGxpc3QpXG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5Zu+54mH5o6l5Y+jJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoWyflm77niYcnLCAnanNvbicsICd1cmwnXSwgMywgJ+ivt+mAieaLqScpLnNlbGVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID09ICflm77niYcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0X2pwZyA9IGdldEl0ZW0oJ3RfanBnJywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCh0X2pwZywgJ+aDs+imgeabtOaNoueahOWbvueJh+aOpeWPo+WcsOWdgO+8jFxcbuaUr+aMgee9kee7nGFwaeWSjOacrOWcsOWbvueJhycpLmlucHV0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiBcInRvYXN0Oi8v5LiN6IO95Li656m6XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHh0ID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ2ltZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJdGVtKCdmcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJdGVtKCdQaWMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2h0bWwnLCB0eHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgndF9qcGcnLCB0eHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suabtOaNouaOpeWPoyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAnanNvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRfanNvbiA9IGdldEl0ZW0oJ3RfanNvbicsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQodF9qc29uLCAn5oOz6KaB5pu05o2i55qEanNvbuWbvueJh+aOpeWPo+WcsOWdgFxcbum7mOiupOaVsOaNruS4umRhdGEuaW1nXFxu5pWw5o2u5LiN5ZCM5Y+vIOaOpeWPo0BA5pWw5o2uJykuaW5wdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIFwidG9hc3Q6Ly/kuI3og73kuLrnqbpcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0eHQgPSBpbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbSgnaW1nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdmcycsICdqc29uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ1BpYycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgnaHRtbCcsIHR4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCd0X2pzb24nLCB0eHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suabtOaNouaOpeWPoyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRfdXJsID0gZ2V0SXRlbSgndF91cmwnLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKHRfdXJsLCAn5oOz6KaB5pu05o2i55qE5Zu+54mH5o6l5Y+j5Zyw5Z2A77yMZmV0Y2godXJsKeiOt+WPlueahOWbvueJh+S4unVybOmTvuaOpeOAgicpLmlucHV0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiBcInRvYXN0Oi8v5LiN6IO95Li656m6XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHh0ID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ2ltZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgnZnMnLCAndXJsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ1BpYycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgnaHRtbCcsIHR4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCd0X3VybCcsIHR4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5pu05o2i5o6l5Y+jJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+aWh+Wtl+minOiJsicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB5cyA9IGdldEl0ZW0oJ3lzX2lucHV0JywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoeXMsICfmg7PopoHmm7TmjaLnmoTpopzoibLku6PnoIFcXG7kvovlpoLvvJojZmQyNjhhJykuaW5wdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiBcInRvYXN0Oi8v5LiN6IO95Li656m6XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR4dCA9IGlucHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ+aWh+WtlycsIHR4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgneXNfaW5wdXQnLCB0eHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5pu05o2i5paH5a2X6aKc6ImyJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+acrOWcsOmaj+acuicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aXRsZSA9IFtcIuWKqOa8q1wiLCBcIue+juWls1wiLCBcIumjjuaZr1wiLCBcIuaxvei9plwiLCBcIuWKqOWbvlwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpZCA9IFtcImRvbmdtYW5cIiwgXCJtZWludlwiLCBcImZlbmdqaW5nXCIsIFwicWljaGVcIiwgXCJnaWZcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IHRpdGxlLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWRbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBsaXN0Lm1hcChqID0+IGoubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChuYW1lLCAyLCAn4p2X77iP5YiG57uE5peg5Zu+54mH5YiZ6buY6K6kJykuc2VsZWN0KChsaXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQgPSBsaXN0LmZpbmRJbmRleChqID0+IGoubmFtZSA9PSBpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlkID0gbGlzdFt0XS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcSA9IGdldEl0ZW0oJ1BpYycpID09ICdnaWYnID8gJ2dpZicgOiAnc2onO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmID0gZ2V0SXRlbSgnSnNfamsnKSA9PSAnZ2lmJyA/ICdoaWtlcjovL2ZpbGVzL0ptL3BuZy9naWYuanNvbicgOiAnaGlrZXI6Ly9maWxlcy9KbS9wbmcvJyArIGlkICsgJy5qc29uJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdQaWMnLCBxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdkaScsIGYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ0pzX2prJywgaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5YiH5o2i6ZqP5py6JyArIGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBsaXN0KVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09IFwi6aKE6K2m5omA5Zyo6KGMXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKGdldEl0ZW0oXCJ3YXJsaW5lXCIsIFwiNzowXCIpLCAn6aKE6K2m5omA5Zyo6KGM6buY6K6kNzowIOWQjumdouaYr1xcXFx0JykuaW5wdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dC5pbmNsdWRlcyhcIjpcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBpbnB1dC5zcGxpdChcIjpcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0ID0gdGVtcFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IHRlbXBbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBOdW1iZXIoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID4gNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSA3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4obGluZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArIFwiOlwiICsgbGluZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCd3YXJsaW5lJywgU3RyaW5nKHJlc3VsdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJ0b2FzdDovL+aJgOWcqOihjFwiICsgcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5pbmNsdWRlcyhcIng15qih5byPXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb25seV94NSA9IGdldEl0ZW0oXCJvbmx5eDVcIiwgXCIwXCIpID09IFwiMFwiID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbShcIm9ubHl4NVwiLCBvbmx5X3g1ID8gXCIxXCIgOiBcIjBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gXCLmjInpkq7moLflvI9cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGlrZXJQb3AuaW5wdXRUd29Sb3coe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlSGludDogXCLmoLflvI8g6buY6K6kY2FyZF9waWNfMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlRGVmYXVsdDogZ2V0SXRlbShcInRxX2NvbFwiLCBcImNhcmRfcGljXzFcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsSGludDogXCLlm77niYcg56m65L2/55So5o6l5Y+j5Zu+54mHXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsRGVmYXVsdDogZ2V0SXRlbShcInRxX2ltZ1wiLCBcIlwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub0F1dG9Tb2Z0OiB0cnVlLCAvL+S4jeiHquWKqOaJk+W8gOi+k+WFpeazlVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIuaMiemSruagt+W8j1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaGlkZUNhbmNlbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtKHMxLCBzMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKFwidHFfY29sXCIsIHMxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbShcInRxX2ltZ1wiLCBzMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidG9hc3Q6Ly/moLflvI9cIiArIHMxICsgXCIg5Zu+54mHXCIgKyBzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidG9hc3Q6Ly/kvaDlj5bmtojkuoZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09IFwi6YCJ5oup5pi+56S6XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGVja2VkTmFtZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZydWl0ID0gW1wi5Zyw5Yy6XCIsIFwi5aSp5rCUXCIsIFwi5rip5bqmXCIsIFwi5pel5pyfXCIsIFwi5Yac5Y6GXCIsIFwiQVFJXCIsIFwi6aOO5ZCRXCIsIFwi6aKE6K2mXCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRxX3Nob3dzID0gc3RvcmFnZTAuZ2V0SXRlbShcInRxX3Nob3dzXCIsIGZydWl0Lm1hcCgoKSA9PiBcIjFcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHFfc2hvd3MgPSB0cV9zaG93cy5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBlbGVtZW50LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ID09PSBcIjFcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2MucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZyh0cV9zaG93cylcblxuICAgICAgICAgICAgICAgICAgICAgICAgaGlrZXJQb3AubXVsdGlDaG9pY2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIumAieaLqemcgOimgeaYvuekuueahOWGheWuuVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGZydWl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWRJbmRleHM6IHRxX3Nob3dzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hvaWNlKGksIGlzQ2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xvZyhpICsgXCI6XCIgKyBpc0NoZWNrZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHRUaXRsZTogXCLnoa7orqRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodENsaWNrKG9wdGlvbnMsIGNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3QoXCLkvaDpgInkuobvvJpcIiArIG9wdGlvbnMuZmlsdGVyKCh2LCBpKSA9PiBjaGVja2VkW2ldKS5qb2luKFwiLFwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMubWFwKCh4LCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWROYW1lLnB1c2goXCIxXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkTmFtZS5wdXNoKFwiMFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2coY2hlY2tlZE5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UwLnNldEl0ZW0oXCJ0cV9zaG93c1wiLCBjaGVja2VkTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRUaXRsZTogXCLlhajpgIlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0Q2xpY2soKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0KFwi5YWo6YCJXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlMC5zZXRJdGVtKFwidHFfc2hvd3NcIiwgZnJ1aXQubWFwKCgpID0+IFwiMVwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlclRpdGxlOiBcIuWPlua2iFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQuaW5jbHVkZXMoXCLmnoHnroDmqKHlvI9cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaW1wbGUgPSBnZXRJdGVtKFwidHFfc2ltcGxlXCIsIFwiMFwiKSA9PSBcIjBcIiA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaW1wbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKFwidHFfc2ltcGxlXCIsIFwiMFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oXCJ0cV9pbWdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJdGVtKFwidHFfc2hvd3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9iaiA9IHN0b3JhZ2UwLmdldEl0ZW0oXCJ0cV9yZVwiLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9ialtcIua4qeW6plwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlMC5zZXRJdGVtKFwidHFfcmVcIiwgb2JqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2ltcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFsbF9jb2xzID0gWycnXS5jb25jYXQoZ2V0Q29sVHlwZXMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsX2NvbHMgPSBhbGxfY29scy5maWx0ZXIoeCA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKHRleHRffGZsZXh8YXZhdGFyfGNhcmR8aWNvbikuKi8udGVzdCh4KSAmJiB4ICE9IFwiaWNvbl8xX3NlYXJjaFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChhbGxfY29scywgMiwgJ+ivt+mAieaLqScpLnNlbGVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oXCJ0cV9pbWdcIiwgXCJzaW1wbGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oXCJ0cV9zaW1wbGVcIiwgXCIxXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKFwidHFfY29sXCIsIGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9iaiA9IHN0b3JhZ2UwLmdldEl0ZW0oXCJ0cV9yZVwiLCB7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtcIua4qeW6plwiXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVnZXhcIjogW1wi5rip5bqmOiBcXFxcKCguKj8pXFxcXCk6OmdcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlcGxhY2VcIjogW1wiJDFcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFtcIua4qeW6pjogXFxcXCgoLio/KVxcXFwpOjpnfHwkMVwiXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UwLnNldEl0ZW0oXCJ0cV9yZVwiLCBvYmopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlMC5zZXRJdGVtKFwidHFfc2hvd3NcIiwgW1wiMFwiLCBcIjBcIiwgXCIxXCIsIFwiMFwiLCBcIjBcIiwgXCIwXCIsIFwiMFwiLCBcIjBcIl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRvYXN0Oi8v5beyXCIgKyAoc2ltcGxlID8gXCLlhbPpl61cIiA6IFwi5byA5ZCvXCIpICsgXCLmnoHnroDmqKHlvI9cIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSBcIuaWh+acrOabv+aNolwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcImhpa2VyOi8vZW1wdHlcIikucnVsZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHFfdGl0bGVzID0gc3RvcmFnZTAuZ2V0TXlWYXIoXCJ0cV90aXRsZXNcIiwgW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvYmogPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IFtcIuWcsOWMulwiLCBcIuWkqeawlFwiLCBcIua4qeW6plwiLCBcIkFRSVwiLCBcIuaXpeacn1wiLCBcIuWGnOWOhlwiLCBcIumjjuWQkVwiLCBcIumihOitplwiXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0IHRxX3JlPXN0b3JhZ2UwLmdldEl0ZW0oXCJ0cV9yZVwiLGxpc3QubWFwKCgpPT57fSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2l0ZW1dID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXg6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gc3RvcmFnZTAuZ2V0SXRlbShcInRxX3JlXCIsIG9iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gc3RvcmFnZTAuZ2V0TXlWYXIoXCJ0cV9yZVwiLCBvYmopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkoeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialt4XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleDogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRpdGxlcyA9IHRxX3RpdGxlcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRyZXBsYWNlQUxMKHRpdGxlLCBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IHJlcGxhY2VXaXRoUGF0dGVybnModGl0bGUsIHBhcmFtc1tcInJlZ2V4XCJdLCBwYXJhbXNbXCJyZXBsYWNlXCJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRpdGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmZpbHRlcih4ID0+IHggIT0gXCLpooToraZcIikuZm9yRWFjaCgoeCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZXNbaV0gPSB0cmVwbGFjZUFMTCh0aXRsZXNbaV0sIG9ialt4XSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlc1s3XSA9IHRyZXBsYWNlQUxMKHRpdGxlc1s3XSwgb2JqW1wi6aKE6K2mXCJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn4oCc4oCc4oCd4oCdJyArIHRpdGxlcy5qb2luKFwiXFxuXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAnMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZzogXCJodHRwOi8vcGljLnFxYml6aGkuY29tL2FsbGltZy8yMDIzMTAvMTMzNTl6aDk4Ymhvc3M3cWFzazFfdmlldy5qcGdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdjYXJkX3BpY18xJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5mb3JFYWNoKChlLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IFwi5p+l5om+fHzmm7/mjaLlhoXlrrkg5LiA6KGM5LiA5LiqIDo6Z+ato+WImVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFwiaW5wdXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJC50b1N0cmluZygob2JqLCBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gaW5wdXQuc3BsaXQoL1tcXHJcXG5dLykuZmlsdGVyKHggPT4geCAhPSBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xvZyh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpbZV1bXCJ2YWx1ZVwiXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWdleGxpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVwbGFjZWxpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhcnRzID0gaXRlbS5zcGxpdChcInx8XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleGxpc3QucHVzaChwYXJ0c1swXSB8fCBpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZWxpc3QucHVzaChwYXJ0c1sxXSB8fCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpbZV1bXCJyZWdleFwiXSA9IHJlZ2V4bGlzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpbZV1bXCJyZXBsYWNlXCJdID0gcmVwbGFjZWxpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZTAucHV0TXlWYXIoXCJ0cV9yZVwiLCBvYmopXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9iaiwgZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0YXJlYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogb2JqW2VdW1widmFsdWVcIl0uam9pbihcIlxcclxcblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwi4oCc4oCc4oCd4oCdXCIgKyBcIjxzbWFsbD7muIXnqbpcIi5mb250Y29sb3IoXCJncmV5XCIpICsgXCI8L3NtYWxsPlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXCJ0ZXh0X2NlbnRlcl8xXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJChcIiNub0xvYWRpbmcjXCIpLmxhenlSdWxlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbShcInRxX3JlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJNeVZhcihcInRxX3JlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImhpa2VyOi8vZW1wdHlcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn4oCc4oCc4oCd4oCdPHNtYWxsPuehruiupDwvc21hbGw+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoXCIjbm9Mb2FkaW5nI1wiKS5sYXp5UnVsZSgob2JqKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhck15VmFyKFwidHFfcmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlMC5zZXRJdGVtKFwidHFfcmVcIiwgb2JqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImhpa2VyOi8vZW1wdHlcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb2JqKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ08c21hbGw+5Y+W5raIPC9zbWFsbD4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJChcIiNub0xvYWRpbmcjXCIpLmxhenlSdWxlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoXCJ0cV9yZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJoaWtlcjovL2VtcHR5XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlcGxhY2VXaXRoUGF0dGVybnModGV4dCwgcGF0dGVybkxpc3QsIHJlcGxhY2VtZW50TGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVwbGFjZWRUZXh0ID0gdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXR0ZXJuTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhdHRlcm4gPSBwYXR0ZXJuTGlzdFtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXR0ZXJuLmluY2x1ZGVzKFwiOjpcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IHBhdHRlcm4uc3BsaXQoXCI6OlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuID0gbmV3IFJlZ0V4cCh0ZW1wWzBdLCB0ZW1wWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IG5ldyBSZWdFeHAodGVtcFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlcGxhY2VtZW50ID0gcmVwbGFjZW1lbnRMaXN0W2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHsgLy8g5aaC5p6c5YiX6KGo6aG55piv5q2j5YiZ6KGo6L6+5byPXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2coXCLmraPliJlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlZFRleHQgPSByZXBsYWNlZFRleHQucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykgeyAvLyDlpoLmnpzliJfooajpobnmmK/mlofmnKzlrZfnrKbkuLJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVnZXhQYXR0ZXJuID0gcGF0dGVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlZFRleHQgPSByZXBsYWNlZFRleHQucmVwbGFjZShyZWdleFBhdHRlcm4sIHJlcGxhY2VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVwbGFjZWRUZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gXCLph43nva7orr7lrppcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJdGVtKFwid2FybGluZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbShcInRxX2NvbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbShcInRxX2ltZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbShcInRxX3NpbXBsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbShcInRxX3Nob3dzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJdGVtKFwidHFfcmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJoaWtlcjovL2VtcHR5XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdGl0bGU6ICfwn5a85re75YqgJyxcbiAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChpbWcpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdGl0bGUgPSBbXCLliqjmvKtcIiwgXCLnvo7lpbNcIiwgXCLpo47mma9cIiwgXCLmsb3ovaZcIiwgXCLliqjlm75cIl07XG4gICAgICAgICAgICAgICAgbGV0IGlkID0gW1wiZG9uZ21hblwiLCBcIm1laW52XCIsIFwiZmVuZ2ppbmdcIiwgXCJxaWNoZVwiLCBcImdpZlwiXTtcbiAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IHRpdGxlLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogaWRbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBsaXN0Lm1hcChqID0+IGoubmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQobmFtZSwgMiwgJ+a3u+WKoOWIsCcpLnNlbGVjdCgoaW1nLCBsaXN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBhID0gbGlzdC5maW5kSW5kZXgoaiA9PiBqLm5hbWUgPT0gaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBsaXN0W2FdLmlkO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSBpbnB1dCA9PT0gJ+WKqOWbvicgPyAoJ2hpa2VyOi8vZmlsZXMvSm0vcG5nL2dpZi8nICsgdGltZSArICcuZ2lmJykgOiAoJ2hpa2VyOi8vZmlsZXMvSm0vcG5nLycgKyBpZCArICcvJyArIHRpbWUgKyAnLnBuZycpO1xuICAgICAgICAgICAgICAgICAgICBsZXQganNvblBhdGggPSAnaGlrZXI6Ly9maWxlcy9KbS9wbmcvJyArIGlkICsgJy5qc29uJztcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKGZldGNoKGpzb25QYXRoKSk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLmNvbmNhdCh1cmwpO1xuICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZShqc29uUGF0aCwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICBzYXZlSW1hZ2UoaW1nLCB1cmwpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdKc19qaycsIGlkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3sua3u+WKoOWIsCcgKyBpbnB1dCArICfliIbnu4QnO1xuICAgICAgICAgICAgICAgIH0sIGltZywgbGlzdClcbiAgICAgICAgICAgIH0sIGltZylcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdGl0bGU6ICfwn5OM6ZSB5a6aJyxcbiAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChpbWcsIHNob3dJbWcpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaW1nID09PSBzaG93SW1nKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2ltZycsIHNob3dJbWcpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ1BpYycpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey6ZSB5a6aJ1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9ICgnaGlrZXI6Ly9maWxlcy9KbS9wbmcvY2FjaGUucG5nJyk7XG4gICAgICAgICAgICAgICAgICAgIHNhdmVJbWFnZShpbWcsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2ltZycsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbSgnUGljJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7LplIHlrponXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgaW1nLCBzaG93SW1nKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICB0aXRsZTogJ/CflIDpmo/mnLonLFxuICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFySXRlbSgnaHRtbCcpO1xuICAgICAgICAgICAgICAgIGNsZWFySXRlbSgnaW1nJyk7XG4gICAgICAgICAgICAgICAgY2xlYXJJdGVtKCdmcycpO1xuICAgICAgICAgICAgICAgIGNsZWFySXRlbSgnZGknKTtcbiAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ1BpYycpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0vcG5nL2NhY2hlLnBuZycpO1xuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5oGi5aSN6ZqP5py6J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdGl0bGU6ICfinY7vuI/liKDpmaQnLFxuICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKHNob3dJbWcpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdXJsID0gKCdoaWtlcjovL2ZpbGVzL0ptL3BuZy8nICsgZ2V0SXRlbSgnSnNfamsnKSArICcuanNvbicpO1xuICAgICAgICAgICAgICAgIFBpYyA9IEpTT04ucGFyc2UoZmV0Y2godXJsKSk7XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4VG9SZW1vdmUgPSBQaWMuaW5kZXhPZihzaG93SW1nKTtcbiAgICAgICAgICAgICAgICBsZXQgcmVtb3ZlZEVsZW1lbnRzID0gUGljLnNwbGljZShpbmRleFRvUmVtb3ZlLCAxKTtcbiAgICAgICAgICAgICAgICBzYXZlRmlsZSh1cmwsIEpTT04uc3RyaW5naWZ5KFBpYykpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZUZpbGUoc2hvd0ltZyk7XG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/liKDpmaTmiJDlip9+J1xuICAgICAgICAgICAgfSwgc2hvd0ltZylcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdGl0bGU6ICfwn5uh566h55CGJyxcbiAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgn6ZqP5py65Zu+54mH566h55CGJyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107XG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSAnaGlrZXI6Ly9maWxlcy9KbS9wbmcvJyArIGdldEl0ZW0oJ0pzX2prJykgKyAnLmpzb24nO1xuXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+a3u+WKoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2lucHV0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfor7fovpPlhaXlm77niYfpk77mjqUv5pys5Zyw5Zu+54mH6Lev5b6EJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJC50b1N0cmluZygodXJsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIFwidG9hc3Q6Ly/or7fovpPlhaXlm77niYfpk77mjqVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG5nX2xpc3QgPSBKU09OLnBhcnNlKGZldGNoKHVybCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBuZ19saXN0ID0gcG5nX2xpc3QuY29uY2F0KGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSh1cmwsIEpTT04uc3RyaW5naWZ5KHBuZ19saXN0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/mt7vliqDmiJDlip8nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdXJsKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpdGxlID0gW1wi5Yqo5ryrXCIsIFwi576O5aWzXCIsIFwi6aOO5pmvXCIsIFwi5rG96L2mXCIsIFwi5Yqo5Zu+XCJdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBbXCJkb25nbWFuXCIsIFwibWVpbnZcIiwgXCJmZW5namluZ1wiLCBcInFpY2hlXCIsIFwiZ2lmXCJdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IHRpdGxlLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWRbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbGlzdC5tYXAoaiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBnZXRJdGVtKCdKc19qaycpID09IGouaWQgPyAn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9I2ZkMjY4YT4nICsgai5uYW1lICsgJzwvZm9udD4nIDogai5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChqKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSAnaGlrZXI6Ly9maWxlcy9KbS9wbmcvJyArIGouaWQgKyAnLmpzb24nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGVFeGlzdCh1cmwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSh1cmwsICdbXScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ0pzX2prJywgai5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+KZu++4j+mHjee9ricsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSAnaGlrZXI6Ly9maWxlcy9KbS9wbmcvJyArIGouaWQgKyAnLmpzb24nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUZpbGUodXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7Lph43nva4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgailcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgUGljID0gSlNPTi5wYXJzZShmZXRjaCh1cmwpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQaWMgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgUGljLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW1nID0gUGljW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogaW5kZXgudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoWyfnvJbovpEnLCAn5p+l55yLJywgJ+WIoOmZpCddLCAzLCAn6K+36YCJ5oupJykuc2VsZWN0KCh1cmwsIGluZGV4LCBpbWcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID09ICfnvJbovpEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChpbWcsICfmg7PopoHmm7TmjaLnmoTlm77niYfpk77mjqUnKS5pbnB1dCgodXJsLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBpYyA9IEpTT04ucGFyc2UoZmV0Y2godXJsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGljW2luZGV4XSA9IGlucHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKHVybCwgSlNPTi5zdHJpbmdpZnkoUGljKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/mm7TmlLnmiJDlip9+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdXJsLCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5p+l55yLJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpwZyA9IGdldFBhdGgoaW1nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBqcGcgKyAnIy5qcGcnXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBpYyA9IEpTT04ucGFyc2UoZmV0Y2godXJsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQaWMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKHVybCwgSlNPTi5zdHJpbmdpZnkoUGljKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVGaWxlKGltZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5Yig6Zmk5oiQ5YqffidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHVybCwgaW5kZXgsIGltZyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGltZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1dLFxuICAgIH1cbn0pXG50cSJ9XSwiZm9sZF9zdGF0dXMiOnRydWUsInBhdHRlcm4iOjN9LHsibmFtZSI6IuixhueToyIsIm1hcmsiOiLmtbfmiqUiLCJsaXN0IjpbeyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjIsIm5hbWUiOiLosYbnk6PmtbfmiqV4NeaUuSIsImNvZGUiOiJsZXQgZGJhcnIgPSBbXTtcbnZhciByID0gJC5yZXF1aXJlKFwiaHR0cHM6Ly9naXRlZS5jb20vemV0YWxwaGEvaGlrZXJ2aWV3L3Jhdy9tYXN0ZXIvZ2xvYmFsL2pzL3g1dWkuanNcIiwgdW5kZWZpbmVkLCAyNClcbnZhciBzZXRwYWdlID0gJC50b1N0cmluZygoKSA9PiB7XG4gICAgdmFyIGRib2JqID0ge1xuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICB0aXRsZTogJ+exu+WeiycsXG4gICAgICAgICAgICBzZWxlY3Q6IHtcbiAgICAgICAgICAgICAgICBcIjBcIjogXCLnlLXlvbFcIixcbiAgICAgICAgICAgICAgICBcIjFcIjogXCLnlLXop4bliadcIixcbiAgICAgICAgICAgICAgICBcIjJcIjogXCLliqjmvKtcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0XzEnLFxuICAgICAgICAgICAgdGlwczogJycsXG4gICAgICAgICAgICB2YWx1ZTogXCIwXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGNvdW50cmllczoge1xuICAgICAgICAgICAgdGl0bGU6ICfljLrln58nLFxuICAgICAgICAgICAgc2VsZWN0OiBbXCJcIiwgXCLkuK3lm73lpKfpmYZcIiwgXCLkuK3lm73pppnmuK9cIiwgXCLkuK3lm73lj7Dmub5cIiwgXCLml6XmnKxcIiwgXCLpn6nlm71cIiwgXCLnvo7lm71cIl0sXG4gICAgICAgICAgICB0eXBlOiAnaW5wdXQnLFxuICAgICAgICAgICAgdGlwczogJycsXG4gICAgICAgICAgICB2YWx1ZTogXCJcIixcbiAgICAgICAgfSxcbiAgICAgICAgeWVhcjoge1xuICAgICAgICAgICAgdGl0bGU6ICflubTku70nLFxuICAgICAgICAgICAgZGVzYzogJ+i+k+WFpeW5tOS7veavlOWmgjIwMjAsMjAyMScsXG4gICAgICAgICAgICB0eXBlOiAnaW5wdXQnLFxuICAgICAgICAgICAgdmFsdWU6IFwiXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHNvcnQ6IHtcbiAgICAgICAgICAgIHRpdGxlOiAn5o6S5bqPJyxcbiAgICAgICAgICAgIHNlbGVjdDoge1xuICAgICAgICAgICAgICAgIFwiVFwiOiBcIuaMieeDreW6puaOkuW6j1wiLFxuICAgICAgICAgICAgICAgIFwiUlwiOiBcIuaMieaXtumXtOaOkuW6j1wiLFxuICAgICAgICAgICAgICAgIFwiU1wiOiBcIuaMieivhOWIhuaOkuW6j1wiLFxuICAgICAgICAgICAgICAgIFwiVVwiOiBcIuaMiei/keacn+eDremXqFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGlwczogJ+m7mOiupOi/keacn+eDremXqCcsXG4gICAgICAgICAgICB0eXBlOiAndGV4dF8xJyxcbiAgICAgICAgICAgIHZhbHVlOiBcIlVcIixcbiAgICAgICAgfVxuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKGRib2JqKS5mb3JFYWNoKHggPT4ge1xuICAgICAgICBmdW5jdGlvbiBzZWxlY3RmdW5jKHNlbGVjdHMsIGtleSwgb2JqKSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PSBcIuWFqOmDqFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2V0SXRlbShcImRiX1wiICsga2V5LCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBcImhpa2VyOi8vZW1wdHlcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvYmoudHlwZSA9PSBcImlucHV0XCIpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RzLnVuc2hpZnQoaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRiID0gZ2V0SXRlbShcImRiX1wiICsga2V5LCBvYmoudmFsdWUpO1xuICAgICAgICAgICAgc2VsZWN0cyA9IHNlbGVjdHMubWFwKChpdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdC5zcGxpdChcIjpcIilbMV0gPT09IGRiID8gJ+Keoe+4jycgKyBpdCA6IGl0O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiAkKHNlbGVjdHMsIDEsIG9iai50aXBzKVxuICAgICAgICAgICAgICAgIC5zZWxlY3QoKGspID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKFwi4p6h77iPXCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuaW5jbHVkZXMoXCI6XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnNwbGl0KFwiOlwiKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gXCLlhajpg6hcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxvZyhpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oXCJkYl9cIiArIGssIGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknO1xuICAgICAgICAgICAgICAgIH0sIGtleSlcbiAgICAgICAgfVxuICAgICAgICBsZXQgZGVmID0gZ2V0SXRlbShcImRiX1wiICsgeCwgZGJvYmpbeF0udmFsdWUpO1xuICAgICAgICAvL2xvZyhkZWYpXG4gICAgICAgIHZhciBzZWxlY3QgPSBbXTtcbiAgICAgICAgaWYgKGRib2JqW3hdLnNlbGVjdCkge1xuICAgICAgICAgICAgaWYgKGRib2JqW3hdLnNlbGVjdC5jb25zdHJ1Y3RvciA9PSBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3QgPSBPYmplY3QuZW50cmllcyhkYm9ialt4XS5zZWxlY3QpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB2YWx1ZSsnOicra2V5KTtcblxuICAgICAgICAgICAgICAgIGRlZiA9IGRib2JqW3hdLnNlbGVjdFtkZWZdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRib2JqW3hdLnNlbGVjdC5jb25zdHJ1Y3RvciA9PSBBcnJheSkge1xuICAgICAgICAgICAgICAgIHNlbGVjdCA9IGRib2JqW3hdLnNlbGVjdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmID09IFwiXCIpIHtcbiAgICAgICAgICAgIGRlZiA9IFwi5YWo6YOoXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWYgPSBkZWY7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRpdGxlID0gZGJvYmpbeF0udGl0bGU7XG4gICAgICAgIGxldCB1cmwgPSBcImhpa2VyOi8vZW1wdHlcIjtcbiAgICAgICAgaWYgKGRib2JqW3hdLnR5cGUuaW5jbHVkZXMoXCJ0ZXh0XCIpKSB7XG4gICAgICAgICAgICB1cmwgPSAkKFwiI25vTG9hZGluZyNcIikubGF6eVJ1bGUoc2VsZWN0ZnVuYywgc2VsZWN0LCB4LCBkYm9ialt4XSk7XG4gICAgICAgICAgICB0aXRsZSA9IGRib2JqW3hdLnRpdGxlICsgJzonICsgZGVmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYm9ialt4XS50eXBlID09IFwiaW5wdXRcIikge1xuICAgICAgICAgICAgdXJsID0gJC50b1N0cmluZyhzZWxlY3RmdW5jLCBzZWxlY3QsIHgsIGRib2JqW3hdKTtcbiAgICAgICAgICAgIHRpdGxlID0gZGJvYmpbeF0udGl0bGU7XG4gICAgICAgIH1cblxuICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgZGVzYzogZGJvYmpbeF0uZGVzYyxcbiAgICAgICAgICAgIGNvbF90eXBlOiBkYm9ialt4XS50eXBlLFxuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBleHRyYToge1xuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KVxuXG4gICAgLypkLnB1c2goe1xuICAgICAgICB0aXRsZTogJ+iuvue9ricsXG4gICAgICAgIGltZzogJ2h0dHBzOi8vaTIuMTAwMDI0Lnh5ei8yMDIzLzA0LzI2L3UwNHV4bi53ZWJwJyxcbiAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLFxuICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2Uvc2V0dGluZ1BhZ2U/cnVsZT3pnZLosYYnXG4gICAgfSkqL1xufSlcblxuXG5sZXQgZGJfZGljdCA9IHtcbiAgICBcImNvdW50cmllc1wiOiBnZXRJdGVtKFwiZGJfY291bnRyaWVzXCIsIFwiXCIpLFxuICAgIFwic29ydFwiOiBnZXRJdGVtKFwiZGJfc29ydFwiLCBcIlVcIiksXG4gICAgXCJ5ZWFyX3JhbmdlXCI6IGdldEl0ZW0oXCJkYl95ZWFyXCIsIFwiXCIpLFxufVxuXG5mdW5jdGlvbiBjb21wYXJlT2JqZWN0cyhvYmoxLCBvYmoyKSB7XG4gICAgdmFyIGtleXMxID0gT2JqZWN0LmtleXMob2JqMSkuc29ydCgpO1xuICAgIHZhciBrZXlzMiA9IE9iamVjdC5rZXlzKG9iajIpLnNvcnQoKTtcbiAgICB2YXIgaW5kZXggPSBrZXlzMS5pbmRleE9mKCd0aW1lJyk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBrZXlzMS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICBpbmRleCA9IGtleXMyLmluZGV4T2YoJ3RpbWUnKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIGtleXMyLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5czEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMxW2ldO1xuICAgICAgICBpZiAob2JqMVtrZXldICE9PSBvYmoyW2tleV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxubGV0IGRiX3R5cGVzID0gW1wibW92aWVcIiwgXCJ0dlwiLCBcInR2XCJdO1xubGV0IGRiX3RwID0gW1wi55S15b2xXCIsIFwi55S16KeG5YmnXCIsIFwi5Yqo5ryrXCJdO1xubGV0IG51bXM9WzAsMjAsNDAsNjAsODAsMTAwXTtcblxubGV0IERPVUJBTl9VUkwgPSAnaHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL2ovbmV3X3NlYXJjaF9zdWJqZWN0cz9yYW5nZT0wLDEwJnN0YXJ0PTAmdGFncz0nICsgZGJfdHBbZ2V0SXRlbShcImRiX3R5cGVcIiwgXCIwXCIpXSArICcmJyArIE9iamVjdC5rZXlzKGRiX2RpY3QpLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4ga2V5ICsgXCI9XCIgKyBkYl9kaWN0W2tleV1cbn0pLmpvaW4oXCImXCIpO1xuXG4vL2xvZyhET1VCQU5fVVJMKVxuXG5kYl9kaWN0Wyd0YWdzJ10gPSBnZXRJdGVtKFwiZGJfdHlwZVwiLCBcIjBcIik7XG5kYl9kaWN0Wyd0aW1lJ10gPSAobmV3IERhdGUoKS5nZXRUaW1lKCkgKyA4NjQwMDAwMCkudG9TdHJpbmcoKTtcblxubGV0IHBhdGhfZGF0YSA9IFwiaGlrZXI6Ly9maWxlcy9jYWNoZS9cIiArIE1ZX1JVTEUudGl0bGUgKyBcImRkb3ViYW5fZGF0YS50eHRcIjtcbmxldCBwYXRoX2RhdGUgPSBcImhpa2VyOi8vZmlsZXMvY2FjaGUvXCIgKyBNWV9SVUxFLnRpdGxlICsgXCJkZG91YmFuX2RhdGUudHh0XCI7XG5sZXQgcmVzdWx0ID0gW107XG5sZXQgZGJfZGF0YSA9IHJlYWRGaWxlKHBhdGhfZGF0YSk7XG5sZXQgZGJfZGF0ZSA9IHJlYWRGaWxlKHBhdGhfZGF0ZSk7XG5pZiAoZGJfZGF0ZSAhPSBcIlwiKSB7XG4gICAgZGJfZGF0ZSA9IEpTT04ucGFyc2UoZGJfZGF0ZSlcbn1cbmxldCBub3dfZGF0ZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xubGV0IGRiX3JlID0gZmFsc2U7XG4vL2xvZyhub3dfZGF0ZT5kYl9kYXRlLnRpbWUpXG5pZiAobm93X2RhdGUgPiBkYl9kYXRlLnRpbWUpIHtcbiAgICBkYl9yZSA9IHRydWU7XG59XG5pZiAoIWNvbXBhcmVPYmplY3RzKGRiX2RpY3QsIGRiX2RhdGUpKSB7XG4gICAgZGJfcmUgPSB0cnVlO1xufVxuaWYgKGRiX2RhdGEgPT0gXCJcIiB8fCBkYl9yZSkge1xuICAgIC8vbG9nKCdkb3dubG9hZCcpXG4gICAgZGJfZGF0YSA9IGZldGNoKERPVUJBTl9VUkwpO1xuICAgIHdyaXRlRmlsZShwYXRoX2RhdGEsIGRiX2RhdGEpO1xuICAgIHdyaXRlRmlsZShwYXRoX2RhdGUsIEpTT04uc3RyaW5naWZ5KGRiX2RpY3QpKTtcbiAgICBkYl9kYXRhID0gSlNPTi5wYXJzZShkYl9kYXRhKTtcbn0gZWxzZSB7XG4gICAgZGJfZGF0YSA9IEpTT04ucGFyc2UoZGJfZGF0YSk7XG59XG5cblxuaWYgKGRiX2RhdGEuaGFzT3duUHJvcGVydHkoXCJkYXRhXCIpKSB7XG4gICAgcmVzdWx0ID0gZGJfZGF0YS5kYXRhLm1hcCh4ID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpdGxlOiB4LnRpdGxlLFxuICAgICAgICAgICAgaW1nOiB4LmNvdmVyLFxuICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL1NkZXRhaWwjbm9IaXN0b3J5IyNpbW1lcnNpdmVUaGVtZSM/cnVsZT3pnZLosYYmaWQ9JyArIHguaWQgKyAnJnR5cGU9JyArIGRiX3R5cGVzW2RiX2RpY3RbXCJ0YWdzXCJdXSxcbiAgICAgICAgfVxuICAgIH0pXG59XG5pZiAocmVzdWx0Lmxlbmd0aCA9PSAwKSB7XG4gICAgZGJhcnIucHVzaCh7XG4gICAgICAgIHRpdGxlOiAn5b2T5YmN6YCJ5oup5peg57uT5p6cJyxcbiAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcbiAgICAgICAgdXJsOiAkKFwiI25vTG9hZGluZyNcIikubGF6eVJ1bGUoKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJJdGVtKFwiZGJfdHlwZVwiKTtcbiAgICAgICAgICAgIGNsZWFySXRlbShcImRiX2NvdW50cmllc1wiKTtcbiAgICAgICAgICAgIGNsZWFySXRlbShcImRiX3llYXJcIik7XG4gICAgICAgICAgICBjbGVhckl0ZW0oXCJkYl9zb3J0XCIpO1xuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcbiAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSc7XG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuci5zaG93KGRiYXJyLCByZXN1bHQsIHtcbiAgICB0aXRsZTogJ+mdkuixhicsXG4gICAgdXJsOiBcInt1cmx9XCIsXG4gICAgcGFyYW1zOntcbiAgICAgIHBhZ2VzOmZhbHNlXG4gICAgfSxcbiAgICBtYXJrOiBcIlwiLFxufSwge1xuICAgIHg1cGx1c1J1bGU6IHNldHBhZ2VcbiAgICAvL3g1dWk6ICdmaWxlOi8vL3N0b3JhZ2UvZW11bGF0ZWQvMC9Eb3dubG9hZC93ZWIvaGlrZXJ2aWV3L2dsb2JhbC9qcy94NXVpLmpzJyxcbiAgICAvL3g1ZjogXCJmaWxlOi8vL3N0b3JhZ2UvZW11bGF0ZWQvMC9Eb3dubG9hZC93ZWIvaGlrZXJ2aWV3L2dsb2JhbC9odG1sL1NsaWRlWC5odG1sXCIsXG59KVxuXG5kYmFycjsifV0sImZvbGRfc3RhdHVzIjpmYWxzZSwicGF0dGVybiI6M30seyJuYW1lIjoi6L2u5pKtIiwibWFyayI6Iua1t+aKpSIsImxpc3QiOlt7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MiwibmFtZSI6Iui9ruaSreWFg+e0oCIsImNvZGUiOiJsZXQgZCA9IFtdO1xucmMoJ2h0dHBzOi8vZ2l0bGFiLmNvbS9saXV6YW95dWUvbC8tL3Jhdy9tYWluLyVFOCVCRCVBRSVFNiU5MiVBRC5qcycsIDI0KTtcbmJhbm5lcihkLCBhcnIsIDMwMDAsICdzMScpIn1dLCJmb2xkX3N0YXR1cyI6ZmFsc2UsInBhdHRlcm4iOjN9LHsibmFtZSI6IuinhumikSIsIm1hcmsiOiLmtbfmiqUiLCJsaXN0IjpbeyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjIsIm5hbWUiOiLop4bpopHmtbfmiqUiLCJjb2RlIjoicHV0VmFyKCflsI/nqIvluo/lkI0nLCBNWV9SVUxFLnRpdGxlKTtcblxucHV0VmFyKE1ZX1JVTEUudGl0bGUgKyAn6KeG6aKR6auY5bqmJywgJzE2OCcpO1xucHV0VmFyKE1ZX1JVTEUudGl0bGUgKyAn6KeG6aKR5a695bqmJywgJzkzJScpO1xuLy/mnIDlpKcxMDAlXG5wdXRWYXIoTVlfUlVMRS50aXRsZSArIFwi6KeG6aKR5ZyG6KeSXCIsICcxNScpOy8vMOaYr+ebtOinklxudmFyIOacrOWcsCA9IGdldFBhdGgoJ2hpa2VyOi8vZmlsZXMveXVhbi92aWRlb0Nhcm91c2VsLmh0bWwnKTtcbmlmICghZmlsZUV4aXN0KOacrOWcsCkpIHtcbiAgICBjb25maXJtKHtcbiAgICAgICAgdGl0bGU6ICflr7zlhaUnLFxuICAgICAgICBjb250ZW50OiAn5qOA5rWL5Yiw5L2g5rKh5pyJ5pys5Zyw5paH5Lu277yM5piv5ZCm5a+85YWlJyxcbiAgICAgICAgY29uZmlybTogJC50b1N0cmluZygo5pys5ZywKSA9PiB7XG4gICAgICAgICAgICB3cml0ZUZpbGUo5pys5ZywLCBmZXRjaCgnaHR0cHM6Ly9naXRsYWIuY29tL2xpdXphb3l1ZS9sLy0vcmF3L21haW4vdmlkZW9DYXJvdXNlbC5odG1sJykpO1xuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICB9LCDmnKzlnLApLFxuICAgICAgICBjYW5jZWw6ICQudG9TdHJpbmcoKCkgPT4ge30pXG4gICAgfSk7XG59O1xuW3tcbiAgICAgICAgICAgIGNvbF90eXBlOiAneDVfd2Vidmlld19zaW5nbGUnLFxuICAgICAgICAgICAgdXJsOiDmnKzlnLAsXG4gICAgICAgICAgICBkZXNjOiAnbGlzdCYmJyArIGdldFZhcihNWV9SVUxFLnRpdGxlICsgJ+inhumikemrmOW6picsICd2aWRlbycpLFxuICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBhdXRvUGxheTogdHJ1ZSwgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBzaG93UHJvZ3Jlc3M6IGZhbHNlXG4gICAgICAgICAgfVxufV0ifV0sImZvbGRfc3RhdHVzIjpmYWxzZSwicGF0dGVybiI6M30seyJuYW1lIjoi5LiA6KiAIiwibWFyayI6IuS4gOiogCIsImxpc3QiOlt7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MiwibmFtZSI6IuS4gOiogF/ml6XljoYiLCJjb2RlIjoiZnVuY3Rpb24gemVybyhzKSB7XG4gICAgcmV0dXJuIHMgPCAxMCA/ICcwJyArIHMgOiBzO1xufTtcbmxldCBteWRhdGUgPSBuZXcgRGF0ZSgpO1xubGV0IHllYXIgPSBteWRhdGUuZ2V0RnVsbFllYXIoKTsgLy/lubRcbmxldCBtb250aCA9IG15ZGF0ZS5nZXRNb250aCgpICsgMTsgLy/mnIhcbmxldCBkYXRlID0gbXlkYXRlLmdldERhdGUoKTsgLy/ml6Vcbi8qbGV0IGhvdXIgPSBteWRhdGUuZ2V0SG91cnMoKTsvL+aXtlxubGV0IG1pbnV0ZSA9IG15ZGF0ZS5nZXRNaW51dGVzKCk7Ly/liIZcbmxldCBzZWNvbmQgPSBteWRhdGUuZ2V0U2Vjb25kcygpOy8v56eSKi9cbmxldCBkYXkgPSBuZXcgQXJyYXkoXCLmmJ/mnJ/ml6VcIiwgXCLmmJ/mnJ/kuIBcIiwgXCLmmJ/mnJ/kuoxcIiwgXCLmmJ/mnJ/kuIlcIiwgXCLmmJ/mnJ/lm5tcIiwgXCLmmJ/mnJ/kupRcIiwgXCLmmJ/mnJ/lha1cIilbbXlkYXRlLmdldERheSgpXTtcblxuLy/ml6XljoZcbmxldCBybCA9ICgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3JpbGkuanMnKTtcbnRyeSB7XG4gICAgdmFyIGNkX2ZpbGUgPSAkLnJlcXVpcmUocmwpLmRhdGU7XG59IGNhdGNoIChlKSB7XG4gICAgbGV0IGh0bWwgPSBmZXRjaCgnaHR0cHM6Ly9naC1wcm94eS5jb20vaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2ptZW5nMTIzL2ZpbGVzL21haW4vcmlsaS5qcycpO1xuICAgIHNhdmVGaWxlKHJsLCBodG1sKTsgICAgXG4gICAgdmFyIGNkX2ZpbGUgPSAkLnJlcXVpcmUocmwpLmRhdGU7XG59XG5sZXQgY2QgPSBjZF9maWxlO1xubGV0IOaYvuekuiA9IGdldEl0ZW0oJ3RpdGxlJywgJ+aXpeWOhicpO1xubGV0IGdldFJhbmRvbUNvbG9yID0gZnVuY3Rpb24oKSB7wqDCoMKgXG4gICAgcmV0dXJuICcjJyArICgnMDAwMDAnICsgKE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAgPDwgMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNik7wqDCoFxufcKgwqBcbmxldCDml6XljoYgPSAoJ+KAnOKAnOKAneKAnTxmb250IGNvbG9yPScgKyBnZXRSYW5kb21Db2xvcigpICsgJz7ij7DvuI9cXHQnICsgeWVhciArICflubQnICsgemVybyhtb250aCkgKyAn5pyIJyArIHplcm8oZGF0ZSkgKyAn5pelICcgKyBjZCArICcgICcgKyBkYXkgKyAnPC9mb250PicpO1xuXG50cnkge1xuICAgIHZhciBkaXpoaSA9ICgnaGlrZXI6Ly9maWxlcy9KbS95aXlhbi5qc29uJyk7XG4gICAgaWYgKCFmaWxlRXhpc3QoZGl6aGkpKSB7XG4gICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL3lpeWFuLmpzb24nLCAnW1wi55aP5b2x5qiq5pac5rC05riF5rWF77yM5pqX6aaZ5rWu5Yqo5pyI6buE5piP44CCXCIsXCLlkozpo47nu4bliqjluJjluLfmmpbvvIzmuIXpnLLlvq7lh53mnpXnsJ/lh4njgIJcIixcIuaiqOiKsea7oemZoumjmOmmmembqu+8jOmrmOalvOWknOmdmemjjuetneWSveOAglwiLFwi6I276Iqx56eL77yM5r2H5rmY5aSc77yM5qmY5rSy5L2z5pmv5aaC5bGP55S744CCXCIsXCLmmpfmn7PokKfokKfvvIzpo57mmJ/lhonlhonvvIzlpJzkuYXnn6Xnp4vkv6HjgIJcIixcIue6ouiho+WFpeahqO+8jOmdkueBr+aRh+a1qu+8jOW+ruWHieaEj+aAneOAglwiXScpO1xuICAgIH1cblxuICAgIGxldCB1cmwgPSBnZXRJdGVtKCfkuIDoqIAnLCBkaXpoaSk7XG4gICAgaWYgKHVybCA9PT0gZGl6aGkpIHtcbiAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGZldGNoKHVybCkpOyAgICAgICAgXG4gICAgICAgIGxldCBudW0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBqc29uLmxlbmd0aCk7XG4gICAgICAgIHZhciBEaXNwbGF5ID0ganNvbltudW1dO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBnZXNoaSA9IGdldEl0ZW0oJ+agvOW8jycsICdqc29uJyk7XG4gICAgICAgIHZhciBEaXNwbGF5ID0gZ2VzaGkgPT0gJ2pzb24nID8gSlNPTi5wYXJzZShmZXRjaCh1cmwsIHtcbiAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDBcbiAgICAgICAgfSkpLmRhdGEuY29udGVudCA6IGZldGNoKHVybCwge1xuICAgICAgICAgICAgdGltZW91dDogMzAwMFxuICAgICAgICB9KTtcblxuICAgIH1cbiAgICB2YXIg5LiA6KiAID0gKCfigJzigJzigJ3igJ08Zm9udCBjb2xvcj0nICsgZ2V0UmFuZG9tQ29sb3IoKSArICc+8J+OgFxcdCcgKyBnZXRJdGVtKCd5aXlhbicsIERpc3BsYXkpICsgJzwvZm9udD4nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgICB2YXIg5LiA6KiAID0gKCfigJzigJzigJ3igJ08Zm9udCBjb2xvcj0nICsgZ2V0UmFuZG9tQ29sb3IoKSArICc+4p2X77iPXFx0JyArIGdldEl0ZW0oJ3lpeWFuJywgJ+iOt+WPluaVsOaNruWksei0pe+8jOivt+WIt+aWsOmHjeivleaIluabtOaNouaOpeWPo+OAgicpICsgJzwvZm9udD4nKTtcbn1cblxuW3tcbiAgICB0aXRsZTog5pi+56S6ID09ICfml6XljoYnID8g5pel5Y6GIDog5LiA6KiALFxuICAgIGNvbF90eXBlOiAndGV4dF8xJyxcbiAgICB1cmw6ICdjb3B5Oi8vJyArIERpc3BsYXksXG4gICAgZXh0cmE6IHtcbiAgICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxuICAgICAgICBsb25nQ2xpY2s6IFt7XG4gICAgICAgICAgICB0aXRsZTogJ/Cfk7LmmL7npLo6XFx0JyArIChnZXRJdGVtKCd0aXRsZScsICfml6XljoYnKSA9PSAn5pel5Y6GJyA/ICfml6XljoYnIDogJ+S4gOiogCcpLFxuICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldEl0ZW0oJ3RpdGxlJywgZ2V0SXRlbSgndGl0bGUnLCAn5pel5Y6GJykgPT0gJ+aXpeWOhicgPyAn5LiA6KiAJyA6ICfml6XljoYnKTtcbiAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ+S4gOiogCcpO1xuICAgICAgICAgICAgICAgIGNsZWFySXRlbSgneWl5YW4nKTtcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgdG9hc3QoJ+W3suWIh+aNouiHsycgKyAoZ2V0SXRlbSgndGl0bGUnLCAn5pel5Y6GJykgPT0gJ+aXpeWOhicgPyAn5pel5Y6GJyA6ICfkuIDoqIAnKSk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdGl0bGU6ICfwn5Od5LiA6KiAJyxcbiAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJChbJ+mAoOWRlycsICfmnKzlnLAnLCAn5o6l5Y+jJywgJ+ivl+ivjScsICfmg4Xor50nLCAn6aqa6K+dJywgJ+Wui+ivjScsICfpuKHmsaQnLCAn5Y+k57GNJ10sIDMsICfor7fpgInmi6knKS5zZWxlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+mAoOWRlycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBMID0gZ2V0SXRlbSgnTCcsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKEwsICflhpnkuIDlj6Xoh6rlt7HllpzmrKLnmoTlj6XlrZDlkKfjgIInKS5pbnB1dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIFwidG9hc3Q6Ly/kuI3og73kuLrnqbpcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdMJywgaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ3lpeWFuJywgaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ3RpdGxlJywgJ+S4gOiogCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5pu05o2i5LiA6KiAJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5o6l5Y+jJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoWyd0ZXh05qC85byPJywgJ2pzb27moLzlvI8nXSwgMiwgJ+ivt+mAieaLqScpLnNlbGVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID09ICd0ZXh05qC85byPJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgVCA9IGdldEl0ZW0oJ1QnLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKFQsICfmg7Pmm7TmjaLnmoTkuIDoqIDmjqXlj6PlnLDlnYBcXG50ZXh05paH5a2X5qC85byP44CCXFxuXFxu5rOo5oSP77ya5aaC6YGH5Li76aG15Yqg6L295Y2h6aG/77yM6K+35pu05o2i5LiA6KiA5o6l5Y+j77yM5oiW6ICF5oGi5aSN6buY6K6k77yM5oiW6ICF6Ieq5bex5p2l5LiA5Y+l77yM5YaN6ICF5YiH5o2i5pel5Y6G5pi+56S644CCJykuaW5wdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIFwidG9hc3Q6Ly/kuI3og73kuLrnqbpcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ1QnLCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCfkuIDoqIAnLCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCd0aXRsZScsICfkuIDoqIAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ+agvOW8jycsICd0eHQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbSgneWl5YW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7Lmm7TmjaLkuIDoqIAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAnanNvbuagvOW8jycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IEogPSBnZXRJdGVtKCdKJywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChKLCAn5oOz5pu05o2i55qE5LiA6KiA5o6l5Y+j5Zyw5Z2AXFxu6YCC55So5LqOanNvbuaVsOaNruS4umRhdGEuY29udGVudFxcblxcbuazqOaEj++8muWmgumBh+S4u+mhteWKoOi9veWNoemhv++8jOivt+abtOaNouS4gOiogOaOpeWPo++8jOaIluiAheaBouWkjem7mOiupO+8jOaIluiAheiHquW3seadpeS4gOWPpe+8jOWGjeiAheWIh+aNouaXpeWOhuaYvuekuuOAgicpLmlucHV0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiBcInRvYXN0Oi8v5LiN6IO95Li656m6XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdKJywgaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5LiA6KiAJywgaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgndGl0bGUnLCAn5LiA6KiAJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ+agvOW8jycsICdqc29uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ3lpeWFuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5pu05o2i5LiA6KiAJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn6K+X6K+NJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5LiA6KiAJywgJ2h0dHBzOi8vdjIuamlucmlzaGljaS5jb20vb25lLmpzb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ3RpdGxlJywgJ+S4gOiogCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5qC85byPJywgJ2pzb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbSgneWl5YW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7LliIfmjaLkuIDoqIDlj6Tor5for40nXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+aDheivnScpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCfkuIDoqIAnLCAnaHR0cHM6Ly9hcGkudnZoYW4uY29tL2FwaS90ZXh0L2xvdmU/dHlwZT1qc29uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCfmoLzlvI8nLCAnanNvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgndGl0bGUnLCAn5LiA6KiAJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ3lpeWFuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5YiH5o2i5LiA6KiA5oOF6K+dJ1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09ICfpqpror50nKSB7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5LiA6KiAJywgJ2h0dHBzOi8vYXBpLnZ2aGFuLmNvbS9hcGkvdGV4dC9zZXh5P3R5cGU9anNvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgndGl0bGUnLCAn5LiA6KiAJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCfmoLzlvI8nLCAnanNvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJdGVtKCd5aXlhbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suWIh+aNouS4gOiogOmqmuivnSdcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5a6L6K+NJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5LiA6KiAJywgJ2h0dHBzOi8vYXBpLnFxc3V1LmNuL2FwaS9kbS16bXNjJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCd0aXRsZScsICfkuIDoqIAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ+agvOW8jycsICdqc29uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ3lpeWFuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5YiH5o2i5LiA6KiA5pyA576O5a6L6K+NJ1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09ICfpuKHmsaQnKSB7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5LiA6KiAJywgJ2h0dHBzOi8vYXBpLnFxc3V1LmNuL2FwaS9kbS1kanRhbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ3RpdGxlJywgJ+S4gOiogCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5qC85byPJywgJ2pzb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbSgneWl5YW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7LliIfmjaLkuIDoqIDmr5LpuKHmsaQnXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+WPpOexjScpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCfkuIDoqIAnLCAnaHR0cHM6Ly9hcGkucXFzdXUuY24vYXBpL2RtLWdqbWonKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ3RpdGxlJywgJ+S4gOiogCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5qC85byPJywgJ2pzb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbSgneWl5YW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7LliIfmjaLkuIDoqIDlj6TnsY3lkI3lj6UnXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5LiA6KiAJywgJ2hpa2VyOi8vZmlsZXMvSm0veWl5YW4uanNvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgndGl0bGUnLCAn5LiA6KiAJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ3lpeWFuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5YiH5o2i5pys5Zyw6ZqP5py65LiA6KiAJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHRpdGxlOiAn8J+UsOeuoeeQhicsXG4gICAgICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ+acrOWcsOS4gOiogOeuoeeQhicpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfinpUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+ivt+i+k+WFpeWPpeWtkO+8jOWkmuS4quivt+aNouihjOmalOW8gOOAglxcbijlj6XlrZDmnKvlsL7kuLrlj6Xlj7fjgILkuK3oi7Hmlofpl67lj7fvvJ8/5Lya6Ieq5Yqo5re75Yqg5o2i6KGM56ymKScsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2lucHV0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJC50b1N0cmluZygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuICd0b2FzdDovL+i+k+WFpeS4uuepuic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR4dCA9IGlucHV0LnJlcGxhY2UoL+OAgnzvvJ98XFw/L2csIFwi44CCXFxuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnB1dF9uYW1lID0gdHh0LnNwbGl0KC9cXG4/XFxuLyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IGlucHV0X25hbWUuZmlsdGVyKHBhcnQgPT4gcGFydC50cmltKCkubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHlpeWFuID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS95aXlhbi5qc29uJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpeWFuID0geWl5YW4uY29uY2F0KG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL3lpeWFuLmpzb24nLCBKU09OLnN0cmluZ2lmeSh5aXlhbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJ0b2FzdDovL+a3u+WKoOaIkOWKn35cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dGFyZWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+KclO+4j+aTjeS9nOWujOeCueaIkScsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHlpeWFuID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS95aXlhbi5qc29uJykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgICB5aXlhbi5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogaW5kZXggKyAnLicgKyBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoWyfnvJbovpEnLCAn56e75L2NJywgJ+WIoOmZpCddLCAzLCAn6K+36YCJ5oup5pON5L2cJykuc2VsZWN0KChpbmRleCwgaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+e8lui+kScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKGl0ZW0sICfor7fovpPlhaXmg7Pmm7TmjaLnmoTlj6XlrZAnKS5pbnB1dCgoaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgeWl5YW4gPSBKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL2ZpbGVzL0ptL3lpeWFuLmpzb24nKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNob3cgPSBpbnB1dC5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWl5YW5baW5kZXhdID0gc2hvdztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS95aXlhbi5qc29uJywgSlNPTi5zdHJpbmdpZnkoeWl5YW4pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+abtOaUueaIkOWKn34nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+enu+S9jScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCcnLCAn6K+36L6T5YWl6KaB56e75Yqo5Yiw5ZOq5Liq5bqP5Y+35YmN6Z2iJykuaW5wdXQoKGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHlpeWFuID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS95aXlhbi5qc29uJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0geWl5YW5baW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpeWFuLnNwbGljZShpbnB1dCwgMCwgdGVtcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0IDwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWl5YW4uc3BsaWNlKGluZGV4ICsgMSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWl5YW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0veWl5YW4uanNvbicsIEpTT04uc3RyaW5naWZ5KHlpeWFuKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/np7vkvY3miJDlip9+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHlpeWFuID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS95aXlhbi5qc29uJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWl5YW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL3lpeWFuLmpzb24nLCBKU09OLnN0cmluZ2lmeSh5aXlhbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+WIoOmZpOaIkOWKn34nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaW5kZXgsIGl0ZW0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICB0aXRsZTogJ+KZu++4j+mHjee9ricsXG4gICAgICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2xlYXJJdGVtKCfkuIDoqIAnKTtcbiAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ3lpeWFuJyk7XG4gICAgICAgICAgICAgICAgY2xlYXJJdGVtKCdMJyk7XG4gICAgICAgICAgICAgICAgY2xlYXJJdGVtKCdUJyk7XG4gICAgICAgICAgICAgICAgY2xlYXJJdGVtKCdKJyk7XG4gICAgICAgICAgICAgICAgY2xlYXJJdGVtKCfmoLzlvI8nKTtcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS95aXlhbi5qc29uJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suaBouWkjem7mOiupCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1dLFxuICAgIH1cbn1dIn0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLliIblibLnur8iLCJ0aXRsZSI6IiIsInVybCI6IiIsImljb24iOiIiLCJkZXNjIjoiIiwidHlwZSI6ImxpbmVfYmxhbmsifV0sImZvbGRfc3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjozfSx7Im5hbWUiOiLmkJzntKIiLCJtYXJrIjoiIiwibGlzdCI6W3sic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi5Y6G5Y+y6K6w5b2VIiwidGl0bGUiOiLljoblj7IiLCJ1cmwiOiJoaWtlcjovL2hpc3RvcnkiLCJpY29uIjoiaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzUucG5nIiwiZGVzYyI6IiIsInR5cGUiOiJpY29uX3JvdW5kX3NtYWxsXzQifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6IuaIkeeahOS5puetviIsInRpdGxlIjoi5Lmm562+IiwidXJsIjoiaGlrZXI6Ly9ib29rbWFyayIsImljb24iOiJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMTYucG5nIiwiZGVzYyI6IiIsInR5cGUiOiJpY29uX3JvdW5kX3NtYWxsXzQifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6IuaIkeeahOS4i+i9vSIsInRpdGxlIjoi5LiL6L29IiwidXJsIjoiaGlrZXI6Ly9kb3dubG9hZCIsImljb24iOiJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMzUucG5nIiwiZGVzYyI6IiIsInR5cGUiOiJpY29uX3JvdW5kX3NtYWxsXzQifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6IuS4u+mhteiuvue9riIsInRpdGxlIjoi6K6+572uIiwidXJsIjoiQGpzOiBsZXQgdGl0bGUgPSBbeyAgICAgdGl0bGU6IFwi5Li76aG16K6+572uXCIsICAgICBpY29uOiBcImhpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS80Ny5wbmdcIiwgICAgIHVybDogYCR7c2V0dGluZ31gIH0sIHsgICAgIHRpdGxlOiBcIuabtOWkmuiuvue9rlwiLCAgICAgaWNvbjogXCJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvNDQucG5nXCIsICAgICB1cmw6IFwiaGlrZXI6Ly9zZXR0aW5nTW9yZVwiIH0sIHsgICAgIHRpdGxlOiBcIuaWh+S7tueuoeeQhlwiLCAgICAgaWNvbjogXCJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMzcucG5nXCIsICAgICB1cmw6IFwiaGlrZXI6Ly9leHBsb3JlXCIgfSwgeyAgICAgdGl0bGU6IFwi6YGT6ZW/5LuT5bqTXCIsICAgICBpY29uOiBcImhpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8xODIucG5nXCIsICAgICB1cmw6IFwiaGlrZXI6Ly9ob21lQOmBk+mVv+S7k+W6k1Byb1wiIH0sIHsgICAgIHRpdGxlOiBcIui1hOa6kOeuoeeQhlwiLCAgICAgaWNvbjogXCJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMzYucG5nXCIsICAgICB1cmw6IFwiaGlrZXI6Ly9ob21lQOacrOWcsOi1hOa6kOeuoeeQhlwiIH0sIHsgICAgIHRpdGxlOiBcIuWlh+WmmeW3peWFt1wiLCAgICAgaWNvbjogXCJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMjcucG5nXCIsICAgICB1cmw6IFwiaGlrZXI6Ly90b29sc1wiIH0sIHsgICAgIHRpdGxlOiBcIuaJi+WKqOWkh+S7vVwiLCAgICAgaWNvbjogXCJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMjc5LnBuZ1wiLCAgICAgdXJsOiBcImhpa2VyOi8vd2ViZGF2XCIgfSwgeyAgICAgdGl0bGU6IFwi572R5Z2A6L+H5rukXCIsICAgICBpY29uOiBcImhpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8yOTQucG5nXCIsICAgICB1cmw6IFwiaGlrZXI6Ly9hZFVybFwiIH0sIHsgICAgIHRpdGxlOiBcIue9kemhteaPkuS7tlwiLCAgICAgaWNvbjogXCJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMjg0LnBuZ1wiLCAgICAgdXJsOiBcImhpa2VyOi8vanNcIiB9LCB7ICAgICB0aXRsZTogXCLlhYPntKDmi6bmiKpcIiwgICAgIGljb246IFwiaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzMyNS5wbmdcIiwgICAgIHVybDogXCJoaWtlcjovL2FkUnVsZVwiIH1dOyAkKHRpdGxlLCAyLCBcIuabtOWkmuWKn+iDvVwiKS5zZWxlY3QodGl0bGUgPT4geyAgICAgbGV0IHNlbGVjdGVkID0gdGl0bGUuZmluZChpdGVtID0+IGl0ZW0udGl0bGUgPT09IGlucHV0KTsgICAgIHJldHVybiBzZWxlY3RlZC51cmwgfSwgdGl0bGUpOyIsImljb24iOiJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvNDQucG5nIiwiZGVzYyI6IiIsInR5cGUiOiJpY29uX3JvdW5kX3NtYWxsXzQifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MiwibmFtZSI6IuiHquWumuS5iV/mkJzntKIiLCJjb2RlIjoibGV0IHNvID0gW107XG5pZiAoIWZpbGVFeGlzdCgnaGlrZXI6Ly9maWxlcy9KbS9zZWFyY2guanNvbicpKSB7XG4gICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0vc2VhcmNoLmpzb24nLCAnW3tcIm5hbWVcIjpcIueZvuW6plwiLFwidXJsXCI6XCJodHRwczovL20uYmFpZHUuY29tL3M/d29yZD1cIn0se1wibmFtZVwiOlwi546p5YG2XCIsXCJ1cmxcIjpcImhpa2VyOi8vc2VhcmNoP3J1bGU9546p5YG25ZOl5ZOlJnM9XCJ9LHtcIm5hbWVcIjpcIuiBmuW9sVwiLFwidXJsXCI6XCJoaWtlcjovL3NlYXJjaD9ydWxlPeiBmuW9sSZzPVwifSx7XCJuYW1lXCI6XCLlvbHop4ZcIixcInVybFwiOlwiaGlrZXI6Ly9zZWFyY2g/c2ltcGxlPWZhbHNlJnJ1bGU95Lq65Lq66KeG6aKRQVBQJnM9XCJ9LHtcIm5hbWVcIjpcIuefreWJp1wiLFwidXJsXCI6XCJoaWtlcjovL3NlYXJjaD9zaW1wbGU9ZmFsc2UmcnVsZT3msrPpqazliaflnLpBUFAmcz1cIn0se1wibmFtZVwiOlwi6Z+z5LmQXCIsXCJ1cmxcIjpcImhpa2VyOi8vc2VhcmNoP3NpbXBsZT1mYWxzZSZydWxlPeatjOivjemAgumFjSZzPVwifSx7XCJuYW1lXCI6XCLku5PlupNcIixcInVybFwiOlwiaGlrZXI6Ly9zZWFyY2g/cnVsZT3pgZPplb/ku5PlupNQcm8mcz1cIn0se1wibmFtZVwiOlwi5pCc54uXXCIsXCJ1cmxcIjpcImh0dHBzOi8vbS5zb2dvdS5jb20vd2ViL3NlYXJjaExpc3QuanNwP3NfZnJvbT1wY3NlYXJjaCZrZXl3b3JkPVwifSx7XCJuYW1lXCI6XCIzNjBcIixcInVybFwiOlwiaHR0cHM6Ly9tLnNvLmNvbS9zP2llPXV0Zi04JmZyPW5vbmUmc3NpZD0mcT1cIn0se1wibmFtZVwiOlwi5b+F5bqUXCIsXCJ1cmxcIjpcImh0dHBzOi8vY24uYmluZy5jb20vc2VhcmNoP3E9XCJ9LHtcIm5hbWVcIjpcIuWkuOWFi1wiLFwidXJsXCI6XCJodHRwczovL3F1YXJrLnNtLmNuL3M/cT1cIn1dJyk7XG59XG5cbmxldCBzZWFyY2hfdXJsID0gZ2V0SXRlbSgnc2VhcmNoX3VybCcsICdodHRwczovL20uYmFpZHUuY29tL3M/d29yZD0nKTtcbmxldCBzZWFyY2hfaW5wdXQgPSBnZXRJdGVtKCdzZWFyY2hfaW5wdXQnLCAnJyk7XG5sZXQgc2VhcmNoX2NvbG9yID0gZ2V0SXRlbSgnc2VhcmNoX2NvbG9yJywgJ+eZvuW6picpO1xubGV0IHNlYXJjaF9saXN0ID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS9zZWFyY2guanNvbicpKTtcbnNvLnB1c2goe1xuICAgIHRpdGxlOiAn5pCc57SiJyxcbiAgICBjb2xfdHlwZTogJ2lucHV0JyxcbiAgICBkZXNjOiAn6L6T5YWl5L2g5oOz5pCc57Si55qEJyxcbiAgICB1cmw6ICQudG9TdHJpbmcoKHNlYXJjaF91cmwpID0+IHtcbiAgICAgICAgaWYgKCFpbnB1dCkge1xuICAgICAgICAgICAgc3RhcnRRUlNjYW5QYWdlKCk7XG4gICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRJdGVtKCdzZWFyY2hfaW5wdXQnLCBpbnB1dCk7XG4gICAgICAgICAgICB2YXIgdXJsID0gc2VhcmNoX3VybCArIGlucHV0O1xuICAgICAgICAgICAgcmV0dXJuIHVybFxuICAgICAgICB9XG4gICAgfSwgc2VhcmNoX3VybCksXG4gICAgZXh0cmE6IHtcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRJdGVtKCdzZWFyY2hfaW5wdXQnLCAnJyksXG4gICAgICAgIG9uQ2hhbmdlOiAnc2V0SXRlbShcInNlYXJjaF9pbnB1dFwiLGlucHV0KSdcbiAgICB9XG59KTtcbnNvLnB1c2goe1xuICAgIHRpdGxlOiAn8J+RiScsXG4gICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcbiAgICB1cmw6IFwic2VsZWN0Oi8vXCIgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgIFwi566h55CGXCIsXG4gICAgICAgICAgICBcIumHjee9rlwiXG4gICAgICAgIF0sXG4gICAgICAgIGF0dGFjaFZpZXc6IHRydWUsXG4gICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PSBcIueuoeeQhlwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ+aQnOe0oueuoeeQhicpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfnpLrkvos6IOeZvuW6pkBodHRwczovL20uYmFpZHUuY29tL3M/d29yZD0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnY29weTovL+WQjeensEDmkJzntKLpk77mjqUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfinpUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+WQjeensEDmkJzntKLpk77mjqUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdpbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQudG9TdHJpbmcoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiAndG9hc3Q6Ly/ovpPlhaXkuLrnqbonO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gaW5wdXQuc3BsaXQoJ0AnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hfbmFtZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBuYW1lWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VhcmNoID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS9zZWFyY2guanNvbicpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2ggPSBzZWFyY2guY29uY2F0KHNlYXJjaF9uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9zZWFyY2guanNvbicsIEpTT04uc3RyaW5naWZ5KHNlYXJjaCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJ0b2FzdDovL+a3u+WKoOaIkOWKn35cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dGFyZWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+KclO+4j+aTjeS9nOWujOeCueaIkScsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2JpZ19ibGFua19ibG9jaycsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2VhcmNoID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS9zZWFyY2guanNvbicpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpbmRleCArICcuJyArIGl0ZW0ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogaXRlbS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBpdGVtLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoWyfnvJbovpEnLCAn56e75L2NJywgJ+WIoOmZpCddLCAzLCAn6K+36YCJ5oup5pON5L2cJykuc2VsZWN0KChpbmRleCwgaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+e8lui+kScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKGl0ZW0ubmFtZSArICdAJyArIGl0ZW0udXJsLCAn5ZCN56ewQOaQnOe0oumTvuaOpScpLmlucHV0KChpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZWFyY2ggPSBKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL2ZpbGVzL0ptL3NlYXJjaC5qc29uJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaG93ID0gaW5wdXQuc3BsaXQoJ0AnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hbaW5kZXhdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBzaG93WzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNob3dbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL3NlYXJjaC5qc29uJywgSlNPTi5zdHJpbmdpZnkoc2VhcmNoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/mm7TmlLnmiJDlip9+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09ICfnp7vkvY0nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnJywgJ+ivt+i+k+WFpeimgeenu+WKqOWIsOWTquS4quW6j+WPt+WJjemdoicpLmlucHV0KChpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzZWFyY2ggPSBKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL2ZpbGVzL0ptL3NlYXJjaC5qc29uJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gc2VhcmNoW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2guc3BsaWNlKGlucHV0LCAwLCB0ZW1wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2guc3BsaWNlKGluZGV4ICsgMSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL3NlYXJjaC5qc29uJywgSlNPTi5zdHJpbmdpZnkoc2VhcmNoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/np7vkvY3miJDlip9+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlYXJjaCA9IEpTT04ucGFyc2UoZmV0Y2goJ2hpa2VyOi8vZmlsZXMvSm0vc2VhcmNoLmpzb24nKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2guc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL3NlYXJjaC5qc29uJywgSlNPTi5zdHJpbmdpZnkoc2VhcmNoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5Yig6Zmk5oiQ5Yqffic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpbmRleCwgaXRlbSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9zZWFyY2guanNvbicpO1xuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5oGi5aSN6buY6K6kJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pLFxufSk7XG5zZWFyY2hfbGlzdC5tYXAocyA9PiB7XG4gICAgc28ucHVzaCh7XG4gICAgICAgIHRpdGxlOiBzZWFyY2hfY29sb3IgPT0gcy5uYW1lID8gJ+KAmOKAmOKAmeKAmTxmb250IGNvbG9yPSNmZDI2OGE+JyArIHMubmFtZSArICc8L2ZvbnQ+JyA6IHMubmFtZSxcbiAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcbiAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChzKSA9PiB7XG4gICAgICAgICAgICBzZXRJdGVtKCdzZWFyY2hfdXJsJywgcy51cmwpO1xuICAgICAgICAgICAgc2V0SXRlbSgnc2VhcmNoX2NvbG9yJywgcy5uYW1lKVxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xuICAgICAgICB9LCBzKSxcbiAgICB9KTtcbn0pO1xuc28ifV0sImZvbGRfc3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjozfSx7Im5hbWUiOiLmlLbol48iLCJtYXJrIjoi5bCP5rW35oqlIiwibGlzdCI6W3sic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi5oiR55qE5pS26JePIiwidGl0bGUiOiIiLCJ1cmwiOiJoaWtlcjovL2NvbGxlY3Rpb24iLCJpY29uIjoiaGlrZXI6Ly9maWxlcy9KbS92aW51YS92S2tRYi5qcGVnIiwiZGVzYyI6IkBqczon5pS26JePKCcrY29sbGVjdGlvbi5sZW5ndGgrJyknIiwidHlwZSI6Im1vdmllXzIifSx7InN0YXR1cyI6ZmFsc2UsInBhdHRlcm4iOjAsIm5hbWUiOiLmiJHnmoTlsI/nqIvluo8iLCJ0aXRsZSI6IiIsInVybCI6Imhpa2VyOi8vaG9tZSIsImljb24iOiJoaWtlcjovL2ZpbGVzL0ptL3ZpbnVhL3ZLWTk4LmpwZWciLCJkZXNjIjoiQGpzOifnqIvluo8oJytnZXRSdWxlQ291bnQoKSsnKSciLCJ0eXBlIjoibW92aWVfMiJ9LHsic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi5oiR55qE5bCP56iL5bqP5by556qX5YiG57uE5bim5Zu+5qCHIiwidGl0bGUiOiIiLCJ1cmwiOiJAanM6IGxldCBodG1sID0gSlNPTi5wYXJzZShmZXRjaChcImhpa2VyOi8vaG9tZVwiKSk7IGxldCBncm91cCA9IEFycmF5LmZyb20obmV3IFNldChodG1sLm1hcChpdGVtID0+IGl0ZW0uZ3JvdXApKSk7IGxldCBsaXN0ID0gZ3JvdXAubWFwKHQgPT4geyAgICAgbGV0IGFwcExpc3QgPSBodG1sLmZpbHRlcihpdGVtID0+IGl0ZW0uZ3JvdXAgPT09IHQpLm1hcChpdGVtID0+ICh7ICAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGUsICAgICAgICAgaWNvbjogaXRlbS5pY29uICAgICB9KSk7ICAgICByZXR1cm4geyAgICAgICAgIG5hbWU6IHQsICAgICAgICAgdXJsOiAkKGFwcExpc3QsIDIsICfpgInmi6nlsI/nqIvluo8nKS5zZWxlY3QoKCkgPT4gJ2hpa2VyOi8vaG9tZUAnICsgaW5wdXQpICAgICB9OyB9KTsgbGV0IGdyb3VwTGlzdCA9IGxpc3QubWFwKGdyb3VwID0+IGdyb3VwLm5hbWUpOyAkKGdyb3VwTGlzdCwgMywgJ+mAieaLqeWIhue7hCcpLnNlbGVjdCgobGlzdCkgPT4geyAgICAgbGV0IGluZGV4ID0gbGlzdC5maW5kSW5kZXgoZ3JvdXAgPT4gZ3JvdXAubmFtZSA9PT0gaW5wdXQpOyAgICAgcmV0dXJuIGxpc3RbaW5kZXhdLnVybDsgfSwgbGlzdCk7IiwiaWNvbiI6Imhpa2VyOi8vZmlsZXMvSm0vdmludWEvdktZOTguanBlZyIsImRlc2MiOiJAanM6J+eoi+W6jygnK2dldFJ1bGVDb3VudCgpKycpJyIsInR5cGUiOiJtb3ZpZV8yIn0seyJzdGF0dXMiOmZhbHNlLCJwYXR0ZXJuIjowLCJuYW1lIjoi5oiR55qE5bCP56iL5bqP5YWo6YOoIiwidGl0bGUiOiIiLCJ1cmwiOiJAanM6IGxldCBodG1sID0gSlNPTi5wYXJzZShyZXF1ZXN0KFwiaGlrZXI6Ly9ob21lXCIpKTtsZXQgYXBwTGlzdCA9IGh0bWwubWFwKGl0ZW0gPT4gKHsgICAgdGl0bGU6IGl0ZW0udGl0bGUsICAgIGljb246IGl0ZW0uaWNvbn0pKTskKGFwcExpc3QsIDIsICfpgInmi6nlsI/nqIvluo8nKS5zZWxlY3QoKCkgPT4gJ2hpa2VyOi8vaG9tZUAnICsgaW5wdXQpOyIsImljb24iOiJoaWtlcjovL2ZpbGVzL0ptL3ZpbnVhL3ZLWTk4LmpwZWciLCJkZXNjIjoiQGpzOifnqIvluo8oJytnZXRSdWxlQ291bnQoKSsnKSciLCJ0eXBlIjoibW92aWVfMiJ9XSwiZm9sZF9zdGF0dXMiOnRydWUsInBhdHRlcm4iOjN9LHsibmFtZSI6IuWbm+agh+mimCIsIm1hcmsiOiIiLCJsaXN0IjpbeyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLmnIDov5EiLCJ0aXRsZSI6IuacgOi/kSIsInVybCI6IkBqczogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7ICAgICBsZXQgcnVsZSA9IGdldExhc3RSdWxlcygxNikubWFwKHIgPT4geyAgICAgICAgIHJldHVybiB7ICAgICAgICAgICAgIHRpdGxlOiByLnRpdGxlLCAgICAgICAgICAgICBpY29uOiByLmljb24gICAgICAgICB9OyAgICAgICAgIH0pOyAgICAgcmV0dXJuICQocnVsZSwgMiwgJ+acgOi/keS9v+eUqCcpLnNlbGVjdCgoKSA9PiB7ICAgICAgICAgcmV0dXJuIFwiaGlrZXI6Ly9ob21lQFwiICsgaW5wdXQgICAgIH0pIH0pIiwiaWNvbiI6IiIsImRlc2MiOiIiLCJ0eXBlIjoidGV4dF80In0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjIsIm5hbWUiOiLluLjnlKgiLCJjb2RlIjoiaWYgKCFmaWxlRXhpc3QoJ2hpa2VyOi8vZmlsZXMvSm0vcHJvZ3JhbS5qc29uJykpIHtcbiAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9wcm9ncmFtLmpzb24nLCAnW3tcInRpdGxlXCI6XCLplb/mjInluLjnlKjmt7vliqBcIixcImljb25cIjpcImhpa2VyOi8vaW1hZ2VzL2hvbWVfYmdcIn1dJyk7XG59XG5sZXQgcHJvZ3JhbSA9IEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9maWxlcy9KbS9wcm9ncmFtLmpzb24nKSk7XG5be1xuICAgIHRpdGxlOiAn5bi455SoJyxcbiAgICBjb2xfdHlwZTogJ3RleHRfNCcsXG4gICAgdXJsOiAkKHByb2dyYW0sIDIsICfluLjnlKjlsI/nqIvluo8nKS5zZWxlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoaW5wdXQgPT0gJ+mVv+aMieW4uOeUqOa3u+WKoCcpIHtcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/plb/mjInluLjnlKjnrqHnkIbmt7vliqAnXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vaG9tZUAnICsgaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KSxcbiAgICBleHRyYToge1xuICAgICAgICBsb25nQ2xpY2s6IFt7XG4gICAgICAgICAgICB0aXRsZTogJ/Cflbkg5bi455So5bCP56iL5bqP566h55CGJyxcbiAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgn5bCP56iL5bqP566h55CGJyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107XG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+ekuuS+izog6IGa5b2xQGh0dHBzOi8vYXBpLnhpbmFjLm5ldC9pY29uLz91cmw9aHR0cHM6Ly9naXRodWIuY29tJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2NvcHk6Ly/ogZrlvbFAaHR0cHM6Ly9hcGkueGluYWMubmV0L2ljb24vP3VybD1odHRwczovL2dpdGh1Yi5jb20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfinpUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+eoi+W6j+WQjeensEDlm77niYfpk77mjqUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdpbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQudG9TdHJpbmcoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiAndG9hc3Q6Ly/ovpPlhaXkuLrnqbonO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gaW5wdXQuc3BsaXQoJ0AnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcHJvZ3JhbV9uYW1lID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbmFtZVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogbmFtZVsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByb2dyYW0gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vZmlsZXMvSm0vcHJvZ3JhbS5qc29uJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyYW0gPSBwcm9ncmFtLmNvbmNhdChwcm9ncmFtX25hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL3Byb2dyYW0uanNvbicsIEpTT04uc3RyaW5naWZ5KHByb2dyYW0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidG9hc3Q6Ly/mt7vliqDmiJDlip9+XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHRhcmVhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfwn5GJIOS7juacgOi/kea3u+WKoCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMicsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBydWxlcyA9IGdldExhc3RSdWxlcyg1MCkubWFwKHIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHIudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiByLmljb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKHJ1bGVzLCAyLCAn54K55Ye75re75YqgJykuc2VsZWN0KChydWxlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IHJ1bGVzLmZpbmRJbmRleChyID0+IHIudGl0bGUgPT0gaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYiA9IHJ1bGVzW2FdLmljb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGlucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcHJvZ3JhbSA9IEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9maWxlcy9KbS9wcm9ncmFtLmpzb24nKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyYW0gPSBwcm9ncmFtLmNvbmNhdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0vcHJvZ3JhbS5qc29uJywgSlNPTi5zdHJpbmdpZnkocHJvZ3JhbSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRvYXN0Oi8v5re75Yqg5oiQ5YqfflwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJ1bGVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn4pyU77iP5pON5L2c5a6M54K55oiRJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFjayh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdiaWdfYmxhbmtfYmxvY2snLFxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnLFxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2JpZ19ibGFua19ibG9jaycsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcHJvZ3JhbSA9IEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9maWxlcy9KbS9wcm9ncmFtLmpzb24nKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGluZGV4ICsgJy4nICsgaXRlbS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2ljb25fMl9yb3VuZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBpdGVtLmljb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKFsn57yW6L6RJywgJ+enu+S9jScsICfliKDpmaQnXSwgMywgJ+ivt+mAieaLqeaTjeS9nCcpLnNlbGVjdCgoaW5kZXgsIGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID09ICfnvJbovpEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChpdGVtLnRpdGxlICsgJ0AnICsgaXRlbS5pY29uLCAn6K+36L6T5YWl5oOz5pu05o2i55qE5bCP56iL5bqP5ZCNJykuaW5wdXQoKGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByb2dyYW0gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vZmlsZXMvSm0vcHJvZ3JhbS5qc29uJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaG93ID0gaW5wdXQuc3BsaXQoJ0AnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmFtW2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHNob3dbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IHNob3dbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL3Byb2dyYW0uanNvbicsIEpTT04uc3RyaW5naWZ5KHByb2dyYW0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+abtOaUueaIkOWKn34nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+enu+S9jScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCcnLCAn6K+36L6T5YWl6KaB56e75Yqo5Yiw5ZOq5Liq5bqP5Y+35YmN6Z2iJykuaW5wdXQoKGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByb2dyYW0gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vZmlsZXMvSm0vcHJvZ3JhbS5qc29uJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gcHJvZ3JhbVtpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5zcGxpY2UoaW5wdXQsIDAsIHRlbXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCA8IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyYW0uc3BsaWNlKGluZGV4ICsgMSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9wcm9ncmFtLmpzb24nLCBKU09OLnN0cmluZ2lmeShwcm9ncmFtKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/np7vkvY3miJDlip9+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByb2dyYW0gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vZmlsZXMvSm0vcHJvZ3JhbS5qc29uJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0vcHJvZ3JhbS5qc29uJywgSlNPTi5zdHJpbmdpZnkocHJvZ3JhbSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+WIoOmZpOaIkOWKn34nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaW5kZXgsIGl0ZW0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpO1xuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1dLFxuICAgIH1cbn1dIn0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLml6XluLgiLCJ0aXRsZSI6IkBqczpmYXN0R3JhbW1hckZvclRleHQoXCI8VGFiPkBbJyDigJjigJjigJnigJk8Zm9udCBjb2xvcj0jMUFCMTZCPuaXpeW4uDwvZm9udD4nLCfml6XluLgnXVwiLFwiPFRhYj5AWyfml6XluLjkuabnrb7nu4QnXVwiLG9yZGVyKSIsInVybCI6IkBqczpmYXN0R3JhbW1hcihcIjxUYWI+QFsn5pel5bi45Lmm562+57uEJywn5byA5YWzJ11cIixvcmRlcikiLCJpY29uIjoiIiwiZGVzYyI6IiIsInR5cGUiOiJ0ZXh0XzQifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6IuWoseS5kCIsInRpdGxlIjoiQGpzOmZhc3RHcmFtbWFyRm9yVGV4dChcIjxUYWI+QFsnIOKAmOKAmOKAmeKAmTxmb250IGNvbG9yPSMyZWI3ZmU+5aix5LmQPC9mb250PicsJ+WoseS5kCddXCIsXCI8VGFiPkBbJ+WoseS5kOS5puetvue7hCddXCIsb3JkZXIpIiwidXJsIjoiQGpzOmZhc3RHcmFtbWFyKFwiPFRhYj5AWyflqLHkuZDkuabnrb7nu4QnLCflvIDlhbMnXVwiLG9yZGVyKSIsImljb24iOiIiLCJkZXNjIjoiIiwidHlwZSI6InRleHRfNCJ9XSwiZm9sZF9zdGF0dXMiOnRydWUsInBhdHRlcm4iOjN9LHsibmFtZSI6IuaXpeW4uOS5puetvue7hCIsIm1hcmsiOiLlvIDlhbMiLCJsaXN0IjpbeyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLpm4XlkKwiLCJ0aXRsZSI6IumbheWQrCIsInVybCI6IkBqczogJCgnaGlrZXI6Ly9lbXB0eSNmdWxsVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKCkgPT4geyAgICAgc2V0UGFnZVRpdGxlKCcnKTsgICAgIGxldCBkID0gW107ICAgICBkLnB1c2goeyAgICAgICAgIHRpdGxlOiAn5Zac6ams5ouJ6ZuFJywgICAgICAgICBjb2xfdHlwZTogJ2F2YXRhcicsICAgICAgICAgcGljOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzI1OC5wbmcnLCAgICAgICAgIGRlc2M6ICfnrqHnkIYnLCAgICAgICAgIHVybDogXCJzZWxlY3Q6Ly9cIiArIEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgb3B0aW9uczogW1wi566h55CGXCIsIFwi6buY6K6kXCJdLCAgICAgICAgICAgICBhdHRhY2hWaWV3OiB0cnVlLCAgICAgICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7ICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+euoeeQhicpIHsgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgn5pWw5o2u566h55CGJyk7ICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+a3u+WKoCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2lucHV0JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICflkI3np7BAaWRA5Zu+54mH6ZO+5o6lQOS4u+aSreWQjeensCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQudG9TdHJpbmcoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiBcInRvYXN0Oi8v6K+35qC55o2u5o+Q56S66L6T5YWl5YaF5a65XCI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHhtbHkgPSBKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL2ZpbGVzL0ptL3htbHkuanNvbicpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWx5ID0geG1seS5jb25jYXQoaW5wdXQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL3htbHkuanNvbicsIEpTT04uc3RyaW5naWZ5KHhtbHkpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+a3u+WKoOaIkOWKnycgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dGFyZWEnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHhtbHkgPSBKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL2ZpbGVzL0ptL3htbHkuanNvbicpKTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB4bWx5Lmxlbmd0aDsgaSsrKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbSA9IHhtbHlbaV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IGl0ZW0uc3BsaXQoJ0AnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGluZGV4ICsgJy4nICsgbGlzdFswXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzMnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogbGlzdFsyXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoWyfnvJbovpEnLCAn56e75L2NJywgJ+WIoOmZpCddLCAzLCAn6K+36YCJ5oup5pON5L2cJykuc2VsZWN0KChpbmRleCwgaXRlbSkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+e8lui+kScpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKGl0ZW0sICfmg7PopoHmm7TmjaLnmoTlhoXlrrlcXG7lkI3np7AtaWQt5Zu+54mH6ZO+5o6lLeS4u+aSreWQjeensCcpLmlucHV0KChpbmRleCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4bWx5ID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS94bWx5Lmpzb24nKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1seVtpbmRleF0gPSBpbnB1dDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS94bWx5Lmpzb24nLCBKU09OLnN0cmluZ2lmeSh4bWx5KSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/mm7TmlLnmiJDlip9+JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaW5kZXgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+enu+S9jScpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCcnLCAn6KaB56e75Yqo5Yiw5ZOq5Liq5bqP5Y+35YmN6Z2iL+WQjumdoicpLmlucHV0KChpbmRleCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4bWx5ID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS94bWx5Lmpzb24nKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXAgPSB4bWx5W2luZGV4XTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWx5LnNwbGljZShpbnB1dCwgMCwgdGVtcCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0IDwgaW5kZXgpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1seS5zcGxpY2UoaW5kZXggKyAxLCAxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWx5LnNwbGljZShpbmRleCwgMSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL3htbHkuanNvbicsIEpTT04uc3RyaW5naWZ5KHhtbHkpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+enu+S9jeaIkOWKn34nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpbmRleCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4bWx5ID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS94bWx5Lmpzb24nKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWx5LnNwbGljZShpbmRleCwgMSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS94bWx5Lmpzb24nLCBKU09OLnN0cmluZ2lmeSh4bWx5KSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5Yig6Zmk5oiQ5YqfficgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGluZGV4LCBpdGVtKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKzsgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgZGVsZXRlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS94bWx5Lmpzb24nKTsgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suaBouWkjem7mOiupCcgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgfSkgICAgICAgICB9KSwgICAgIH0pOyAgICAgZC5wdXNoKHsgICAgICAgICB0aXRsZTogJ+aQnOe0oicsICAgICAgICAgZGVzYzogJ+i+k+WFpeS9oOaDs+aQnOe0oueahCcsICAgICAgICAgY29sX3R5cGU6ICdpbnB1dCcsICAgICAgICAgdXJsOiAkLnRvU3RyaW5nKCgpID0+IHsgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIFwidG9hc3Q6Ly/or7fovpPlhaXlhbPplK7or41cIjsgICAgICAgICAgICAgbGV0IHR4dCA9IGlucHV0OyAgICAgICAgICAgICBzZXRJdGVtKCfpm4XlkKwnLCB0eHQpOyAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSMjZnlwYWdlI2Z1bGxUaGVtZSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKHR4dCkgPT4geyAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cDovL3NlYXJjaC54aW1hbGF5YS5jb20vZnJvbnQvdjE/ZGV2aWNlPWFuZHJvaWQmY29uZGl0aW9uPXJlbGF0aW9uJmNvcmU9YWxidW0mc3BlbGxjaGVja2VyPXRydWUma3c9JyArIHR4dCArICcmcGFnZT0nICsgTVlfUEFHRSArICcmcm93cz02MCcpKS5yZXNwb25zZS5kb2NzOyAgICAgICAgICAgICAgICAganNvbi5tYXAobCA9PiB7ICAgICAgICAgICAgICAgICAgICAgbGV0IGltZyA9IGwuY292ZXJfcGF0aC5zcGxpdCgnIScpWzBdOyAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljJywgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+KAmOKAmOKAmeKAmTxmb250IGNvbG9yPSNGQTcyOTg+JyArIGwuaW50cm8gKyAnPC9mb250PicsICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogaW1nLCAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjaW1tZXJzaXZlVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKGwsIGltZykgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKGwudGl0bGUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYWdlID0gZ2V0VmFyKCd4bWx5X3BhZ2UnLCAnMScpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFzYyA9IGdldFZhcign5o6S5bqPJywgJ3RydWUnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cDovL21vYmlsZS54aW1hbGF5YS5jb20vbW9iaWxlL290aGVycy9jYS9hbGJ1bS90cmFjay8nICsgbC5pZCArICcvJyArIGFzYyArICcvJyArIHBhZ2UgKyAnLzYwP2FsYnVtSWQ9JyArIGwuaWQgKyAnJnBhZ2VTaXplPTYwJmlzQXNjPScgKyBhc2MgKyAnJnBvc2l0aW9uPTEmZGV2aWNlPWFuZHJvaWQnKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTVlfUEFHRSA9PSAxKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRvdGFsID0gTWF0aC5jZWlsKGpzb24uYWxidW0udHJhY2tzIC8gNjApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncGljXzFfZnVsbCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogaW1nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJycsICfpnIDopoHnv7vpobXnmoTmlbDlrZfvvIzmr4/pobU2MOOAglxcblxcbuWFse+8micgKyBqc29uLmFsYnVtLnRyYWNrcyArICfmnaHoioLnm67vvIwnICsgcGFnZSArICcvJyArIHRvdGFsICsgJ+mhteOAgicpLmlucHV0KCh0b3RhbCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fovpPlhaXpobXnoIEnOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA+IHRvdGFsKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ivt+i+k+WFpeato+W4uOmhteeggSc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXRWYXIoJ3htbHlfcGFnZScsIGlucHV0KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdG90YWwpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5Li75pKtOiAnICsgbC5uaWNrbmFtZSArICdcXHRcXHToioLnm64oJyArIGpzb24uYWxidW0udHJhY2tzICsgJyknLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2F2YXRhcicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogYXNjID09ICd0cnVlJyA/ICdoaWtlcjovL2ZpbGVzL0ptL2xtL21lc3N5LzEyMy5zdmcnIDogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbWVzc3kvMTI0LnN2ZycsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGFzYyA9PSAndHJ1ZScgPyAnPGZvbnQgY29sb3I9I0ZBNzI5OD7mnIDmlrA8L2ZvbnQ+JyA6ICc8Zm9udCBjb2xvcj0jRkE3Mjk4PumhuuW6jzwvZm9udD4nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldFZhcign5o6S5bqPJywgJ3RydWUnKSA9PSAnZmFsc2UnKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJWYXIoJ+aOkuW6jycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXRWYXIoJ+aOkuW6jycsICdmYWxzZScpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uLnRyYWNrcy5saXN0LmZvckVhY2goKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGoucGxheVVybDY0ICsgJyNpc011c2ljPXRydWUjJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRUaXRsZTogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGwsIGltZyksICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfmt7vliqDliLDpppbpobUnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChsLCBpbWcpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmsgPSAobC50aXRsZSArICdAJyArIGwuaWQgKyAnQCcgKyBpbWcgKyAnQCcgKyBsLm5pY2tuYW1lKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1seSA9IEpTT04ucGFyc2UoZmV0Y2goJ2hpa2VyOi8vZmlsZXMvSm0veG1seS5qc29uJykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWx5ID0geG1seS5jb25jYXQobGluayk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL3htbHkuanNvbicsIEpTT04uc3RyaW5naWZ5KHhtbHkpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFjayh0cnVlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+a3u+WKoOaIkOWKnycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBsLCBpbWcpICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSwgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgIH0sIHR4dCkgICAgICAgICB9KSwgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGdldEl0ZW0oJ+mbheWQrCcsICcnKSwgICAgICAgICAgICAgb25DaGFuZ2U6ICdzZXRJdGVtKFwi6ZuF5ZCsXCIsaW5wdXQpJywgICAgICAgICB9ICAgICB9KTsgICAgIGxldCB4bWx5X3RpdGxlID0gWyfmnInlo7DkuaYnLCAn6Z+z5LmQJywgJ+ebuOWjsOivhOS5picsICflub/mkq3liacnLCAn5aix5LmQJywgJ+W9seinhicsICflhL/nq6UnLCAn5Y6G5Y+yJywgJ+WVhuS4mui0oue7jycsICfkurrmlocnLCAn5pWZ6IKy5Z+56K6tJywgJ0lU56eR5oqAJywgJ+WkluivrScsICflpLTmnaEnLCAn5LqM5qyh5YWDJywgJ+aIj+absicsICfml4XmuLgnLCAn5YGl5bq35YW755SfJywgJ+aXtuWwmueUn+a0uyddOyAgICAgbGV0IHhtbHlfaWQgPSBbJ3lvdXNoZW5nc2h1JywgJ3lpbnl1ZScsICd4aWFuZ3NoZW5nJywgJ2d1YW5nYm9qdicsICd5dWxlJywgJ3lpbmdzaGknLCAnZXJ0b25nJywgJ2xpc2hpJywgJ3NoYW5neWUnLCAncmVud2VuJywgJ2ppYW95dScsICdrZWppJywgJ3dhaXl1JywgJ3RvdXRpYW8nLCAnZXJjaXl1YW4nLCAneGlxdScsICdsdnlvdScsICdqaWFua2FuZycsICdzaGlzaGFuZyddOyAgICAgbGV0IHhtbHlfZmwgPSB4bWx5X3RpdGxlLm1hcCgoaXRlbSwgaW5kZXgpID0+IHsgICAgICAgICByZXR1cm4geyAgICAgICAgICAgICBuYW1lOiBpdGVtLCAgICAgICAgICAgICBpZDogeG1seV9pZFtpbmRleF0gICAgICAgICB9OyAgICAgfSk7ICAgICB4bWx5X2ZsLm1hcChqID0+IHsgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICB0aXRsZTogai5uYW1lLCAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLCAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjZnVsbFRoZW1lIyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoaikgPT4geyAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9tLnhpbWFsYXlhLmNvbS9tLXJldmlzaW9uL3BhZ2UvcmFuay9xdWVyeVJhbms/Y2x1c3RlckNvZGU9cmlzZSZwYWdlPTEmY2F0ZWdvcnlDb2RlPScgKyBqLmlkKSkuZGF0YTsgICAgICAgICAgICAgICAgIGpzb24ucmFua01vZHVsZUluZm9MaXN0Lm1hcChsID0+IHsgICAgICAgICAgICAgICAgICAgICBsZXQgaW1nID0gJ2h0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vJyArIGwuYWxidW1JbmZvLmNvdmVyOyAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsLmFsYnVtSW5mby50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX3ZlcnRpY2FsX3BpYycsICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGwuYWxidW1JbmZvLnNob3J0SW50cm8gPyAn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9I0ZBNzI5OD4nICsgbC5hbGJ1bUluZm8uc2hvcnRJbnRybyArICc8L2ZvbnQ+JyA6ICfigJjigJjigJnigJk8Zm9udCBjb2xvcj0jRkE3Mjk4PicgKyBsLmFsYnVtSW5mby5zYWxlUG9pbnQgKyAnPC9mb250PicsICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogaW1nLCAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjaW1tZXJzaXZlVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKGwsIGltZykgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKGwuYWxidW1JbmZvLnRpdGxlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFnZSA9IGdldFZhcigneG1seV9wYWdlJywgJzEnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhc2MgPSBnZXRWYXIoJ+aOkuW6jycsICd0cnVlJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHA6Ly9tb2JpbGUueGltYWxheWEuY29tL21vYmlsZS9vdGhlcnMvY2EvYWxidW0vdHJhY2svJyArIGwuaWQgKyAnLycgKyBhc2MgKyAnLycgKyBwYWdlICsgJy82MD9hbGJ1bUlkPScgKyBsLmlkICsgJyZwYWdlU2l6ZT02MCZpc0FzYz0nICsgYXNjICsgJyZwb3NpdGlvbj0xJmRldmljZT1hbmRyb2lkJykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0b3RhbCA9IE1hdGguY2VpbChqc29uLmFsYnVtLnRyYWNrcyAvIDYwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3BpY18xX2Z1bGwnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGltZywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcnLCAn6ZyA6KaB57+76aG155qE5pWw5a2X77yM5q+P6aG1NjDjgIJcXG5cXG7lhbHvvJonICsganNvbi5hbGJ1bS50cmFja3MgKyAn5p2h6IqC55uu77yMJyArIHBhZ2UgKyAnLycgKyB0b3RhbCArICfpobXjgIInKS5pbnB1dCgodG90YWwpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v6K+36L6T5YWl6aG156CBJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPiB0b3RhbCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fovpPlhaXmraPluLjpobXnoIEnOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0VmFyKCd4bWx5X3BhZ2UnLCBpbnB1dCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRvdGFsKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+S4u+aSrTogJyArIGpzb24uYWxidW0ubmlja25hbWUgKyAnXFx0XFx06IqC55uuKCcgKyBqc29uLmFsYnVtLnRyYWNrcyArICcpJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGFzYyA9PSAndHJ1ZScgPyAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tZXNzeS8xMjMuc3ZnJyA6ICdoaWtlcjovL2ZpbGVzL0ptL2xtL21lc3N5LzEyNC5zdmcnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBhc2MgPT0gJ3RydWUnID8gJzxmb250IGNvbG9yPSNGQTcyOTg+5pyA5pawPC9mb250PicgOiAnPGZvbnQgY29sb3I9I0ZBNzI5OD7pobrluo88L2ZvbnQ+JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRWYXIoJ+aOkuW6jycsICd0cnVlJykgPT0gJ2ZhbHNlJykgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVmFyKCfmjpLluo8nKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0VmFyKCfmjpLluo8nLCAnZmFsc2UnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbi50cmFja3MubGlzdC5mb3JFYWNoKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBqLnBsYXlVcmw2NCArICcjaXNNdXNpYz10cnVlIycsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0VGl0bGU6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICAgICAgICAgICAgICB9LCBsLCBpbWcpLCAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgIH0sIGopLCAgICAgICAgIH0pOyAgICAgfSk7ICAgICBpZiAoZmlsZUV4aXN0KCdoaWtlcjovL2ZpbGVzL0ptL3htbHkuanNvbicpID09IGZhbHNlKSB7ICAgICAgICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0veG1seS5qc29uJywgJ1tcIjEw5YiG6ZKf5paw6Ze75pep6aSQQDY4NTg5MzU3QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vc3RvcmFnZXMvMGYzNC1hdWRpb2ZyZWVoaWdocXBzLzlELzY3L0dLd1JJUndHZUhTYkFBRjVsQUZvVENYaS5qcGVnQOWWnOmprOWktOadoVwiLCBcIue7meS9oOatjOS4gOabskAzNjQxNzhAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9zdG9yYWdlcy81OTJjLWF1ZGlvZnJlZWhpZ2hxcHMvM0YvMzkvR0t3UklEb0k0eGNwQUE3V19BSmUzM1VTLmpwZWdA5byg576KXCIsIFwi6Z+z5LmQ5LyY5ZOBQDI2NTAwMDlAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDQwL00wQi80Mi85QS93S2dKVkZxanVmRHdKLTI3QUFFdFl6eTJTd3MwMTcuanBnQOS4u+aSreWPtuWtkFwiLCBcIueUn+a0u+adguW/l0AzNjYzMDYwNkBodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwNzUvTTA2LzgzLzBFL3dLZ08wMTZSUTRld2l4LU1BQ2FwMV9iX0pLYzIwNy5qcGdATWFrZVZvaWNlXCIsIFwi6Z2e5bi45rqc5L2z5pyffOeIhueskeWQkOanveasouS5kOino+WOi0AyNDkwMjBAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDMwL00wQi9CRS8xMS93S2dKWGxuU1psemhvdjZyQUFHeVJ0SFBKQmcyNTQuanBnQOS9s+acn1wiLCBcIuauteWtkOadpeS6hkAyMDMzNTVAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDUvTTAzL0E2L0Q4L3dLZ0R0bFIxTURfVDFEUUhBQU5xWkR5azQ4czcyMC5qcGdA6YeH6YeHXCIsIFwi5LiA5Y2D6Zu25LiA56yR772c552h552A6YO96IO956yR6YaS55qE5q615a2QQDIzNzQyMjY5QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA2MC9NMDYvNDAvODMvd0tnTGIxemtISWVnbHI2VkFCLXgwNktoV0pNOTE3LmpwZ0DppbzlubJHQU5cIiwgXCLkuJzljJforrLnrJHor51AMzU1NTg3MEBodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwNDQvTTAwL0FGL0JDL3dLZ0tqRnN3THJ2QmlUQ0NBQWhQRUQwemkzUTc4Ni5qcGdA6Zi/5ZOI5Lic5YyXXCIsIFwi5aaZ5a6H6L+e5pyx4pSC6Laj6Ze75ZCQ5qe9IOeIhueskeacieaWme+8gUAyNzA1MzVAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDc2L00wOS8wNi9CNC93S2dPM2w1R1J2ZUJ5OVBmQUFSRU8tanRXRjAwNDcuanBnQOacseWuh1wiLCBcIuS7iuaZmuiEseWPo+engEA0NzM1NDIyQGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vc3RvcmFnZXMvYWE2My1hdWRpb2ZyZWVoaWdocXBzLzlBLzk0L0NNQ29PU1FEeTRfWEFBQ1BoZ0I0X0JpTi5qcGdA5LuK5pma6ISx5Y+j56eAXCIsIFwi5oC75pyJ6L+Z5qC355qE5q2M5Y+q5oOz5LiA5Liq5Lq65ZCsQDM1OTU4NDFAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDU0L00wMy9CRS84OS93S2dMY2x3MXkyUGpFTkQ4QUFHTjJTS1BQTk0zOTEuanBnQOeBsOWnkeWomOmfs+S5kFwiLCBcIuaAu+acieS4gOmmluatjOS4qOS8muiuqeS9oOWNleabsuW+queOr+WIsOaDs+WTrUA0NTUyNTE5MkBodHRwczovL2ltYWdldjIueG1jZG4uY29tL3N0b3JhZ2VzLzE3M2QtYXVkaW9mcmVlaGlnaHFwcy8xRC9BQy9HS3dSSUpFR0RnX0lBQU9QWVFFdFA3dmkuanBlZ0Dng5/oirHov7fkurrnnLxcIiwgXCLpn7PkuZDorrDkuovmnKx85LiA6aaW5q2M5LiA5Liq5pWF5LqLQDQ3MjEwMDMwQGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vc3RvcmFnZXMvOTIzYS1hdWRpb2ZyZWVoaWdocXBzLzlFLzhGL0dLd1JJVUVIakR6R0FBR0dEQUhvMDlNTS5qcGdA5p+g5qqs6aaZ6aaZRk1cIiwgXCLpgqPkupvlpb3lkKznmoTlpbPnlJ/nv7vllLFAMzE3NTE1MjJAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDY5L00wNS9DRi9EOS93S2dNYjEzM0tNQ0NRbWlTQUFEcUpVS0dmTkUzNzUuanBnQOiKseWwj+Wwj+iMtVwiLCBcIua9rua1gemfs+S5kEAxOTUyMTM2NUBodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwNDkvTTA3LzA3L0FEL3dLZ0tsMXYzOWthUVJpT0hBQUZwWE9HazdKazUwMS5wbmdA5bCP5p2+5o6o6I2QXCIsIFwi6YKj5Lqb5LiA5ZCs5bCx5oSf5Yqo55qE57uP5YW455S15b2x5ZCN5puyQDM5MTYzNzI1QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA4My9NMDIvRUYvOEQvd0tnNUhWOE5VZjdBOHl6M0FBVGh3OExodVpZNjIxLmpwZ0Dlj7bkupHlt53nmoTnkZ7puKPpn7PkuZDlj7BcIiwgXCLmmZrlronlpojlpojnnaHliY3mlYXkuotAMjYwNzQ0QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA1OC9NMDYvMDgvOUIvd0tnTGdselR5VGppT3kwb0FBY09UdjE2b2hnODE1LmpwZ0DmmZrlronlpojlpohcIiwgXCLmsJHpl7Tor6HmlYXkuotAMjk1MzU3NTBAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDY5L00wOC9CMi9FNS93S2dNZVYzZ2xTVFFQTk1kQUN5dDFfa19sREk4MTMuanBnQOmYv+a1qeivtOS6i+WEv1wiLCBcIuWPpOetneWQjeabsuaso+i1j+WPpOetnee7j+WFuOWQjeabskAxNjc5Mjg1NEBodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwNDYvTTA0L0FBL0I4L3dLZ0tsbHRxaWlMQXpqeUpBQURMWk15NnZaSTEzNi5qcGdA5Zac6ams5p2l5ZWmXCIsIFwi57uP5YW45Y+k5LmQLeWPpOeQtOWNgeWkp+WQjeabskA2MzE3MjY1QGh0dHBzOi8vaW1nMi5iYWlkdS5jb20vaXQvdT0xMzMzODA3OTAwLDI5NDg2MzAzMzEmZm09MjUzJmZtdD1hdXRvJmFwcD0xMzgmZj1KUEVHQHhpZXhpZXhpZXhpZVwiLCBcIuOAkOS4lueVjOS4iuacgOe+jueahOmSoueQtOabsuOAkeWCrOecoOmfs+S5kEA0MDUwNjM5QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXAxMy9NMDAvNDAvRjYvd0tnRFhWY0tDZ19DNm1JbEFBVURydjFmT05rMTQ1LnBuZ0Doi6XkvLzmmbTlpKnnu43pkqdcIiwgXCLjgIrlpJzoibLpkqLnkLTmm7LjgItAMjkxNzE4QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vc3RvcmFnZXMvYjNkMi1hdWRpb2ZyZWVoaWdocXBzLzkxLzhFL0dNQ29PU0FGcXVHMkFBVTR6d0VLTm9oWi5wbmdA5aSc6Imy6ZKi55C05puy6LW15rW35rSLXCIsIFwiOOWIhumSn++8jDNE546v5aKD5YeP5Y6L5Yal5oOzfOmfs+S5kOeWl+aEiEAyODI0NjU3MkBodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwNjUvTTAyLzZELzNFL3dLZ01hbDFsX0NyRGQ2MmpBQUlWc2p5bEpUczUwNi5qcGdA6ICz55WMX0Vhcm1lcnNpb25cIiwgXCLov7fkurrnkb4t6L2m6L295Yqy54iGRErnlLXpn7PoiJ7mm7JANTg5OTUwN0BodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwODYvTTA1L0MzLzE2L3dLZzVKbDhJWmh1el9hOWtBQUdmc294UzdCODg3Ni5qcGdARErov7fkurrnkb5cIiwgXCLmsJHosKPnsr7pgIkgfCDllLHlsL3kurrpl7Tnmb7mgIFAMzEzODA5NjJAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDY4L00wMi9CMy9BOS93S2dNYmwzZ3J0U3pNRUdXQUFBNGJILVpuU285MTMuanBnQOiKseWwj+Wwj+iMtVwiLCBcIue7j+WFuOeVmeWjsOacukAyOTA5OTZAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDUwL00wOC9GQS9EMi93S2dLblZ2cjl2SHptYzJYQUFVdS1XbV9SU2czNTkuanBnQOS4u+aSreWwj0RcIiwgXCLorqnkvaDlvqrnjq/nmb7pgY3ku6XkuIrnmoTnu4/lhbjoi7HmlofmrYxANDg2NjM2MUBodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwNzcvTTA3LzU1LzZDL3dLZ08xVjZOeEVTaGx4VkhBQUFKVzJaaHNNODUxNi5qcGdA5LiA54K55oqS5oOF6Z+z5LmQ6aKR6YGTXCIsIFwiMTAwMOmmluWQrOS4jeiFu+eahOWlveatjOS4qOS8mOi0qOatjOWNlUAzMjUxOTgyNEBodHRwczovL2ltYWdldjIueG1jZG4uY29tL3N0b3JhZ2VzLzc4MjQtYXVkaW9mcmVlaGlnaHFwcy84RS8xMC9HS3dSSU1BRmx5RDhBQUhOSmdFRkJvWmEuanBlZ0DpmYjoh7voh7tcIiwgXCLlsI/kuIPnmoTnp4HmiL/mrYxAMjM3NzcxQGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vc3RvcmFnZXMvYTc0MC1hdWRpb2ZyZWVoaWdocXBzLzU4LzIwL0dNQ29PUjhIZ3JsekFBTzl0UUhsN2JWcy5qcGVnQOWwj+S4g1wiLCBcIuS4lueVjOS4iuacgOWlveWQrOeahOe6r+mfs+S5kEAxMTY1OTg3M0BodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwMzUvTTAzLzhCLzVDL3dLZ0puRm9UNEFxRFp6X0VBQUNfQWFScGp2QTQ5Ny5qcGdA5a2kX+mbtlwiLCBcIue7j+WFuOixq+WJp+WQjeWutuWQjeautTEwMDDpppZANTM0MDM4NzZAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9zdG9yYWdlcy84M2M3LWF1ZGlvZnJlZWhpZ2hxcHMvNjgvRjUvQ0t3UklXNEZKd2c2QUFFdEVRRG5Fd2hhLmpwZ0DmiI/mm7LkvKDmib/kurpcIiwgXCLpu4TmooXmiI/nu4/lhbjlkI3lrrblkI3mrrUxMDAw6aaWQDUzODMxNjQ0QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vc3RvcmFnZXMvZmU0Ni1hdWRpb2ZyZWVoaWdocXBzL0JGLzdFL0dLd1JJRG9GdS1WV0FBSUdOQUVPUVVhZC5qcGVnQOaIj+absuS8oOaJv+S6ulwiLCBcIuWbveeyueS6rOWJp0AyODIyNDc5QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA1Ni9NMDcvMDIvREMvd0tnTGdGeU9DU09CZ0thcUFBS1ZHQkwwU3FrODk0LmpwZ0DlvJjnhLZcIl0nKTsgICAgIH0gICAgIGxldCB4bWx5ID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS94bWx5Lmpzb24nKSk7ICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhtbHkubGVuZ3RoOyBpKyspIHsgICAgICAgICBsZXQgayA9IHhtbHlbaV0uc3BsaXQoJ0AnKTsgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICB0aXRsZToga1swXSwgICAgICAgICAgICAgY29sX3R5cGU6ICdjYXJkX3BpY18zJywgICAgICAgICAgICAgcGljOiBrWzJdLCAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjI2ltbWVyc2l2ZVRoZW1lIycpLnJ1bGUoKGspID0+IHsgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICBsZXQgcGFnZSA9IGdldFZhcigneG1seV9wYWdlJywgJzEnKTsgICAgICAgICAgICAgICAgIGxldCBhc2MgPSBnZXRWYXIoJ+aOkuW6jycsICd0cnVlJyk7ICAgICAgICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHA6Ly9tb2JpbGUueGltYWxheWEuY29tL21vYmlsZS9vdGhlcnMvY2EvYWxidW0vdHJhY2svJyArIGtbMV0gKyAnLycgKyBhc2MgKyAnLycgKyBwYWdlICsgJy82MD9hbGJ1bUlkPScgKyBrWzFdICsgJyZwYWdlU2l6ZT02MCZpc0FzYz0nICsgYXNjICsgJyZwb3NpdGlvbj0xJmRldmljZT1hbmRyb2lkJykpOyAgICAgICAgICAgICAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgICAgICAgICAgICAgIGxldCB0b3RhbCA9IE1hdGguY2VpbChqc29uLmFsYnVtLnRyYWNrcyAvIDYwKTsgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3BpY18xX2Z1bGwnLCAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGtbMl0sICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnJywgJ+mcgOimgee/u+mhteeahOaVsOWtl++8jOavj+mhtTYw44CCXFxuXFxu5YWx77yaJyArIGpzb24uYWxidW0udHJhY2tzICsgJ+adoeiKguebru+8jCcgKyBwYWdlICsgJy8nICsgdG90YWwgKyAn6aG144CCJykuaW5wdXQoKHRvdGFsKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0KSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ivt+i+k+WFpemhteeggSc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID4gdG90YWwpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v6K+36L6T5YWl5q2j5bi46aG156CBJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dFZhcigneG1seV9wYWdlJywgaW5wdXQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5JyAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0b3RhbCksICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkuLvmkq06ICcgKyBrWzNdICsgJ1xcdFxcdOiKguebrignICsganNvbi5hbGJ1bS50cmFja3MgKyAnKScsICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJywgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBhc2MgPT0gJ3RydWUnID8gJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbWVzc3kvMTIzLnN2ZycgOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tZXNzeS8xMjQuc3ZnJywgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogYXNjID09ICd0cnVlJyA/ICc8Zm9udCBjb2xvcj0jRkE3Mjk4PuacgOaWsDwvZm9udD4nIDogJzxmb250IGNvbG9yPSNGQTcyOTg+6aG65bqPPC9mb250PicsICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0VmFyKCfmjpLluo8nLCAndHJ1ZScpID09ICdmYWxzZScpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclZhcign5o6S5bqPJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dFZhcign5o6S5bqPJywgJ2ZhbHNlJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAgICAgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJywgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgIGpzb24udHJhY2tzLmxpc3QuZm9yRWFjaCgoaikgPT4geyAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGtbMl0sICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJywgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBqLnBsYXlVcmw2NCArICcjaXNNdXNpYz10cnVlIycsICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0VGl0bGU6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICB9LCBrKSAgICAgICAgIH0pOyAgICAgfSAgICAgc2V0UmVzdWx0KGQpOyB9KSIsImljb24iOiJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvNy5wbmciLCJkZXNjIjoiIiwidHlwZSI6Imljb25fcm91bmRfc21hbGxfNCJ9LHsic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi5ZCs54K56Z+z5LmQIiwidGl0bGUiOiLpn7PkuZAiLCJ1cmwiOiJAanM6ICQoJ2hpa2VyOi8vZW1wdHkjZnlwYWdlI2dhbWVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7ICAgICBzZXRQYWdlVGl0bGUoJ+WQrOeCuemfs+S5kCcpOyAgICAgbGV0IGQgPSBbXTsgICAgIGxldCBmaWxlX3NpZ24gPSAnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3NpZ24uanMnOyAgICAgbGV0IHNpZ24gPSBgZnVuY3Rpb24gc2lnbihwYXJhbXMpIHsgICAgICBmdW5jdGlvbiBtaWRkbGUobHMpIHsgICAgICAgICBsZXQgcmVzTnVtID0gW107ICAgICAgICAgIGZ1bmN0aW9uIHRlc3QoYSwgYiwgYykgeyAgICAgICAgICAgICBsZXQgcjI1ID0gYSA+PiAyOyAgICAgICAgICAgICBpZiAoYiAhPT0gdW5kZWZpbmVkICYmIGMgIT09IHVuZGVmaW5lZCkgeyAgICAgICAgICAgICAgICAgbGV0IHIyNiA9IGEgJiAzOyAgICAgICAgICAgICAgICAgbGV0IHIyNl8yID0gcjI2IDw8IDQ7ICAgICAgICAgICAgICAgICBsZXQgcjI2XzMgPSBiID4+IDQ7ICAgICAgICAgICAgICAgICBsZXQgcjI2XzQgPSByMjZfMiB8IHIyNl8zOyAgICAgICAgICAgICAgICAgbGV0IHIyNyA9IGIgJiAxNTsgICAgICAgICAgICAgICAgIGxldCByMjdfMiA9IHIyNyA8PCAyOyAgICAgICAgICAgICAgICAgbGV0IHIyN18zID0gcjI3XzIgfCAoYyA+PiA2KTsgICAgICAgICAgICAgICAgIGxldCByMjggPSBjICYgNjM7ICAgICAgICAgICAgICAgICByZXNOdW0ucHVzaChyMjUpOyAgICAgICAgICAgICAgICAgcmVzTnVtLnB1c2gocjI2XzQpOyAgICAgICAgICAgICAgICAgcmVzTnVtLnB1c2gocjI3XzMpOyAgICAgICAgICAgICAgICAgcmVzTnVtLnB1c2gocjI4KTsgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgIGxldCByMTAgPSBhID4+IDI7ICAgICAgICAgICAgICAgICBsZXQgcjExID0gYSAmIDM7ICAgICAgICAgICAgICAgICBsZXQgcjExXzIgPSByMTEgPDwgNDsgICAgICAgICAgICAgICAgIHJlc051bS5wdXNoKHIxMCk7ICAgICAgICAgICAgICAgICByZXNOdW0ucHVzaChyMTFfMik7ICAgICAgICAgICAgIH0gICAgICAgICB9ICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBscy5sZW5ndGg7IGkgKz0gMykgeyAgICAgICAgICAgICBpZiAobHNbaV0gIT09IHVuZGVmaW5lZCAmJiBsc1tpICsgMV0gIT09IHVuZGVmaW5lZCAmJiBsc1tpICsgMl0gIT09IHVuZGVmaW5lZCkgeyAgICAgICAgICAgICAgICAgdGVzdChsc1tpXSwgbHNbaSArIDFdLCBsc1tpICsgMl0pICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICB0ZXN0KGxzW2ldLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkgICAgICAgICAgICAgfSAgICAgICAgIH0gICAgICAgICBsZXQgcmVzID0gW107ICAgICAgICAgcmVzTnVtLmZvckVhY2goKGl0ZW0pID0+IHsgICAgICAgICAgICAgbGV0IHpkID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JzsgICAgICAgICAgICAgcmVzLnB1c2goemRbaXRlbV0pICAgICAgICAgfSk7ICAgICAgICAgcmVzID0gcmVzLmpvaW4oJycpOyAgICAgICAgIHJldHVybiByZXM7ICAgICB9ICAgICAgZnVuY3Rpb24gaGVhZChtZDVTdHIpIHsgICAgICAgICBsZXQgcmVzID0gW107ICAgICAgICAgWzIxLCA0LCA5LCAyNiwgMTYsIDIwLCAyNywgMzBdLm1hcCh4ID0+IHsgICAgICAgICAgICAgcmVzLnB1c2gobWQ1U3RyW3hdKTsgICAgICAgICB9KTsgICAgICAgICByZXR1cm4gcmVzLmpvaW4oJycpOyAgICAgfSAgICAgIGZ1bmN0aW9uIHRhaWwobWQ1U3RyKSB7ICAgICAgICAgbGV0IHJlcyA9IFtdOyAgICAgICAgIFsxOCwgMTEsIDMsIDIsIDEsIDcsIDYsIDI1XS5tYXAoeCA9PiB7ICAgICAgICAgICAgIHJlcy5wdXNoKG1kNVN0clt4XSk7ICAgICAgICAgfSk7ICAgICAgICAgcmV0dXJuIHJlcy5qb2luKCcnKTsgICAgIH0gICAgICBmdW5jdGlvbiBnZXRMcyhtZDVTdHIpIHsgICAgICAgICBsZXQgemQgPSB7ICAgICAgICAgICAgIFwiMFwiOiAwLCAgICAgICAgICAgICBcIjFcIjogMSwgICAgICAgICAgICAgXCIyXCI6IDIsICAgICAgICAgICAgIFwiM1wiOiAzLCAgICAgICAgICAgICBcIjRcIjogNCwgICAgICAgICAgICAgXCI1XCI6IDUsICAgICAgICAgICAgIFwiNlwiOiA2LCAgICAgICAgICAgICBcIjdcIjogNywgICAgICAgICAgICAgXCI4XCI6IDgsICAgICAgICAgICAgIFwiOVwiOiA5LCAgICAgICAgICAgICBcIkFcIjogMTAsICAgICAgICAgICAgIFwiQlwiOiAxMSwgICAgICAgICAgICAgXCJDXCI6IDEyLCAgICAgICAgICAgICBcIkRcIjogMTMsICAgICAgICAgICAgIFwiRVwiOiAxNCwgICAgICAgICAgICAgXCJGXCI6IDE1ICAgICAgICAgfTsgICAgICAgICBsZXQgb2wgPSBbMjEyLCA0NSwgODAsIDY4LCAxOTUsIDE2MywgMTYzLCAyMDMsIDE1NywgMjIwLCAyNTQsIDkxLCAyMDQsIDc5LCAxMDQsIDZdOyAgICAgICAgIGxldCByZXMgPSBbXTsgICAgICAgICBsZXQgaiA9IDA7ICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZDVTdHIubGVuZ3RoOyBpICs9IDIpIHsgICAgICAgICAgICAgbGV0IG9uZSA9IHpkW21kNVN0cltpXV07ICAgICAgICAgICAgIGxldCB0d28gPSB6ZFttZDVTdHJbaSArIDFdXTsgICAgICAgICAgICAgbGV0IHIgPSBvbmUgKiAxNiBeIHR3bzsgICAgICAgICAgICAgcmVzLnB1c2gociBeIG9sW2pdKTsgICAgICAgICAgICAgaiArPSAxOyAgICAgICAgIH0gICAgICAgICByZXR1cm4gcmVzOyAgICAgfSAgICAgbGV0IG1kNVN0ciA9IG1kNShwYXJhbXMpLnRvVXBwZXJDYXNlKCk7ICAgICBsZXQgaCA9IGhlYWQobWQ1U3RyKTsgICAgIGxldCBlID0gdGFpbChtZDVTdHIpOyAgICAgbGV0IGxzID0gZ2V0THMobWQ1U3RyKTsgICAgIGxldCBtID0gbWlkZGxlKGxzKTsgICAgIGxldCByZXMgPSAoJ3p6YicgKyBoICsgbSArIGUpLnRvTG93ZXJDYXNlKCk7ICAgICBsZXQgciA9IFJlZ0V4cCgvW1xcXFwvK10vZyk7ICAgICByZXMgPSByZXMucmVwbGFjZShyLCAnJyk7ICAgICByZXR1cm4gcmVzOyB9YDsgICAgIGlmICghZmlsZUV4aXN0KGZpbGVfc2lnbikpIHsgICAgICAgICBzYXZlRmlsZShmaWxlX3NpZ24sIHNpZ24pOyAgICAgfSAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgIHRpdGxlOiAn4oCY4oCY4oCZ4oCZPGJpZz48Zm9udCBjb2xvcj1cIiMxQUIxNkJcIj7lkKzngrnpn7PkuZA8L2ZvbnQ+PC9iaWc+PHNtYWxsPjxzbWFsbD4g5q2M5Y2VPC9zbWFsbD48L3NtYWxsPicsICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJywgICAgICAgICAgICAgcGljOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tdXNpYy84NS5zdmcnLCAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4geyAgICAgICAgICAgICAgICAgaWYgKCFmaWxlRXhpc3QoJ2hpa2VyOi8vZmlsZXMvSm0vZ2VkYW4uanNvbicpKSB7ICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0vZ2VkYW4uanNvbicsICdbe1widGl0bGVcIjpcIueDreaQnOatjOabslwiLFwiaWNvblwiOlwiaHR0cDovL3FwaWMueS5xcS5jb20vbXVzaWNfY292ZXIvaEtGcmliTWh3SDRDbHdOV0p4aWN1Q3hqdXdJa2JaUHE0SFZUMFFneHNkYjhKV1FYWEMyVEZzdVEvNjAwP249MVwiLFwiaWRcIjo3NTMyNjcwNTM4fSx7XCJ0aXRsZVwiOlwi5oqW6Z+z54Ot6ZeoXCIsXCJpY29uXCI6XCJodHRwOi8vcXBpYy55LnFxLmNvbS9tdXNpY19jb3Zlci9XcHZkSlhmbjc5OGliRDRnY2ZqdzBOU3VCa0ZUSllwWTVRT2V2M0V4Y0JRaWFtUmNvYmtwTjc3Zy82MDA/bj0xXCIsXCJpZFwiOjc2MzAzMDM0NzR9XScpOyAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgbGV0IGdlZGFuID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJykpOyAgICAgICAgICAgICAgICAgcmV0dXJuICQoZ2VkYW4sIDIsICflsI/kuIPmrYzljZUnKS5zZWxlY3QoKGdlZGFuKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBnZWRhbi5maW5kSW5kZXgodCA9PiB0LnRpdGxlID09IGlucHV0KTsgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBnZWRhblthXS5pZDsgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNpbW1lcnNpdmVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoaWQpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCflsI/kuIPmrYzljZUnKTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3NpZ24uanMnKTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlcV8xXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1vZHVsZVwiOiBcIm11c2ljLnNyZkRpc3NJbmZvLmFpRGlzc0luZm9cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1ldGhvZFwiOiBcInVuaWZvcm1fZ2V0X0Rpc3NpbmZvXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXJhbVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzc3RpZFwiOiBOdW1iZXIoaWQpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJpbmZvXCI6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGFnXCI6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JkZXJsaXN0XCI6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic29uZ19iZWdpblwiOiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNvbmdfbnVtXCI6IDEwMDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib25seXNvbmdsaXN0XCI6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZW5jX2hvc3RfdWluXCI6IFwiXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganMgPSBKU09OLnBhcnNlKHBvc3QoYnVpbGRVcmwoJ2h0dHBzOi8vdS55LnFxLmNvbS9jZ2ktYmluL211c2ljcy5mY2cnLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfOiBEYXRlLm5vdygpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbjogc2lnbihib2R5KSAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSAgICAgICAgICAgICAgICAgICAgICAgICB9KSkucmVxXzEuZGF0YTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBqcy5zb25nbGlzdC5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmdlcjogai5zaW5nZXJbMF0ubmFtZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGJ1bTogai5hbGJ1bS5uYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogXCJodHRwczovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDJSNTAweDUwME0wMDBcIiArIGouYWxidW0ubWlkICsgXCIuanBnXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGoubWlkICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqcy5kaXJpbmZvLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX3ZlcnRpY2FsX3BpY19ibHVyJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfwn6e4XFx0JyArIGpzLmRpcmluZm8uaG9zdF9uaWNrICsgJ1xcblxcbvCfjrxcXHQnICsganMuZGlyaW5mby5zb25nbnVtICsgJ+mmlicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGpzLmRpcmluZm8ucGljdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcnLCAn5puy5ZCN5oiW5q2M5omLJykuaW5wdXQoKGpzb24pID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZWFyY2goYXJyYXksIG5hbWUpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5LmZpbHRlcihpdGVtID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMobmFtZS50b0xvd2VyQ2FzZSgpKSB8fCBpdGVtLnNpbmdlci50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG5hbWUudG9Mb3dlckNhc2UoKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdHMgPSBzZWFyY2goanNvbiwgaW5wdXQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHknKS5ydWxlKChyZXN1bHRzKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ+aQnOe0oue7k+aenCcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMuZm9yRWFjaChqID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBqLmFsYnVtID8gai5zaW5nZXIgKyAnIC0tICcgKyBqLmFsYnVtIDogai5zaW5nZXIgKyAnIC0tICcgKyBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGoucGljLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9hcGkueGh0a2UuY24vYXBpL3NlbXVzaWM/dHlwZT1xcSZuPTEmbXNnPScgKyBqLnRpdGxlICsgai5zaW5nZXIpKS5oaWdodXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBbanMgKyAnI2lzTXVzaWM9dHJ1ZSMnXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdoaWtlcjovL2ZpbGVzL0ptL2ZpbGUvc2lnbi5qcycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbW1cIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjdlwiOiA0NzQ3NDc0LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjdFwiOiAyNCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IFwianNvblwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbkNoYXJzZXRcIjogXCJ1dGYtOFwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvdXRDaGFyc2V0XCI6IFwidXRmLThcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibm90aWNlXCI6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBsYXRmb3JtXCI6IFwieXFxLmpzb25cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmVlZE5ld0NvZGVcIjogMSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidWluXCI6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImdfdGtfbmV3XzIwMjAwMzAzXCI6IDUzODEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImdfdGtcIjogNTM4MSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlcV8xXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibW9kdWxlXCI6IFwibXVzaWMubXVzaWNoYWxsU29uZy5QbGF5THlyaWNJbmZvXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1ldGhvZFwiOiBcIkdldFBsYXlMeXJpY0luZm9cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1cIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic29uZ01JRFwiOiBqLmlkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbHlyaWMgPSBKU09OLnBhcnNlKHBvc3QoYnVpbGRVcmwoJ2h0dHBzOi8vdS55LnFxLmNvbS9jZ2ktYmluL211c2ljcy5mY2cnLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF86IERhdGUubm93KCksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ246IHNpZ24oYm9keSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBib2R5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnJlcV8xLmRhdGEubHlyaWM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxyYyA9IGJhc2U2NERlY29kZShseXJpYyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8veGlhb2FwaS5jbi9BUEkvbXZfc3EucGhwP249MSZtc2c9JyArIGoudGl0bGUsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMjAwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtqc29uWzNdIHx8IGpzb25bMl0gfHwganNvblsxXSB8fCBqc29uWzBdXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGx5cmljOiBscmMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdFRpdGxlOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVzdWx0cykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5rKh5pyJ5om+5YiwJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGpzb24pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+ToOWkjeWItuWbvueJh+mTvuaOpScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqcykgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdjb3B5Oi8vJyArIGpzLmRpcmluZm8ucGljdXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqcykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24ubWFwKGogPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogai5hbGJ1bSA/IGouc2luZ2VyICsgJyAtLSAnICsgai5hbGJ1bSA6IGouc2luZ2VyICsgJyAtLSAnICsgai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWNfdXJsOiBqLnBpYyArICdAUmVmZXJlcj0nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykubGF6eVJ1bGUoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqcyA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vYXBpLnhodGtlLmNuL2FwaS9zZW11c2ljP3R5cGU9cXEmbj0xJm1zZz0nICsgai50aXRsZSArIGouc2luZ2VyKSkuaGlnaHVybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBbanMgKyAnI2lzTXVzaWM9dHJ1ZSMnXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmUoJ2hpa2VyOi8vZmlsZXMvSm0vZmlsZS9zaWduLmpzJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbW1cIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImN2XCI6IDQ3NDc0NzQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3RcIjogMjQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IFwianNvblwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImluQ2hhcnNldFwiOiBcInV0Zi04XCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3V0Q2hhcnNldFwiOiBcInV0Zi04XCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibm90aWNlXCI6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGxhdGZvcm1cIjogXCJ5cXEuanNvblwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5lZWROZXdDb2RlXCI6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidWluXCI6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZ190a19uZXdfMjAyMDAzMDNcIjogNTM4MSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJnX3RrXCI6IDUzODEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVxXzFcIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1vZHVsZVwiOiBcIm11c2ljLm11c2ljaGFsbFNvbmcuUGxheUx5cmljSW5mb1wiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1ldGhvZFwiOiBcIkdldFBsYXlMeXJpY0luZm9cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXJhbVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNvbmdNSURcIjogai5pZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbHlyaWMgPSBKU09OLnBhcnNlKHBvc3QoYnVpbGRVcmwoJ2h0dHBzOi8vdS55LnFxLmNvbS9jZ2ktYmluL211c2ljcy5mY2cnLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXzogRGF0ZS5ub3coKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduOiBzaWduKGJvZHkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5yZXFfMS5kYXRhLmx5cmljOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxyYyA9IGJhc2U2NERlY29kZShseXJpYyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly94aWFvYXBpLmNuL0FQSS9tdl9zcS5waHA/bj0xJm1zZz0nICsgai50aXRsZSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDIwMDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gW2pzb25bM10gfHwganNvblsyXSB8fCBqc29uWzFdIHx8IGpzb25bMF1dOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxzOiB1cmwsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBseXJpYzogbHJjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaiksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdFRpdGxlOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ0NsaWNrOiBbeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkuIvovb3mrYzmm7InLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXJsID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9hcGkueGh0a2UuY24vYXBpL3NlbXVzaWM/dHlwZT1xcSZuPTEmbXNnPScgKyBqLnRpdGxlICsgai5zaW5nZXIpKS5oaWdodXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnZG93bmxvYWQ6Ly8nICsgdXJsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+ingueci01WJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL3hpYW9hcGkuY24vQVBJL212X3NxLnBocD9uPTEmbXNnPScgKyBqLnRpdGxlLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBbanNvblszXSB8fCBqc29uWzJdIHx8IGpzb25bMV0gfHwganNvblswXV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gW0pTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vYXBpLmNlbmd1aWd1aS5jbi9hcGkvanVoZS9hcGkucGhwP3R5cGU9a2dtdiZuPTEmbXNnPScgKyBqLnRpdGxlLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5kYXRhLnVybF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybHM6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgfSwgaWQpICAgICAgICAgICAgICAgICB9LCBnZWRhbikgICAgICAgICAgICAgfSksICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2UsICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfwn5KeIOiOt+WPluatjOWNlScsICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnJywgJ+Kdl++4j+atjOWNleWmguaenOacieaWsOWinu+8jOWImemcgOimgemHjeaWsOiOt+WPllxcblxcblFR6LSm5Y+36I635Y+W5q2M5Y2VJykuaW5wdXQoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5jZW5ndWlndWkuY24vYXBpL211c2ljL3FxL3VzZXJfbGlzdC5waHA/cXE9JyArIGlucHV0KSkubXlwbGF5bGlzdC5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGoubmFtZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogai5waWMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBqLmlkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VkYW4gPSBKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL2ZpbGVzL0ptL2dlZGFuLmpzb24nKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZWRhbiA9IGdlZGFuLmNvbmNhdChqc29uKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL2dlZGFuLmpzb24nLCBKU09OLnN0cmluZ2lmeShnZWRhbikpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3sua3u+WKoCcgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+UsCDmrYzljZXnrqHnkIYnLCAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ+atjOWNleeuoeeQhicpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfmj5Dlj5ZpZCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdpbnB1dCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+ivt+i+k+WFpeWIhuS6q+WQjuWkjeWItueahOmTvuaOpScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkLnRvU3RyaW5nKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIFwidG9hc3Q6Ly/kuI3og73kuLrnqbpcIjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR4dCA9IGlucHV0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB0eHQuc3BsaXQoJyYnKVs0XTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlkID0gdTEuc3BsaXQoJz0nKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5KGlkWzFdKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suWkjeWIticgKyBpZFsxXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5re75YqgJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2lucHV0JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5pi+56S65ZCN56ewQOWbvueJh+mTvuaOpUBRUemfs+S5kGlkJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQudG9TdHJpbmcoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0KSByZXR1cm4gXCJ0b2FzdDovL+ivt+agueaNruaPkOekuui+k+WFpeWGheWuuVwiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ2VkYW4gPSBKU09OLnBhcnNlKGZldGNoKCdoaWtlcjovL2ZpbGVzL0ptL2dlZGFuLmpzb24nKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuID0gaW5wdXQuc3BsaXQoJ0AnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuWzBdLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogblsxXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBuWzJdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlZGFuID0gZ2VkYW4uY29uY2F0KGRhdGEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJywgSlNPTi5zdHJpbmdpZnkoZ2VkYW4pKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5re75YqgJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+atjOWNleWbvueJh+mTvuaOpeWPr+S7peWcqOatjOWNleS6jOe6p+a1t+aKpemVv+aMieWkjeWItu+8jOaJgOS7peWPr+S7peWFiOa3u+WKoOatjOWNleWGjee8lui+kea3u+WKoOatjOWNleWbvueJh++8jOaIluiAheiHquW3semAieS4gOW8oOWbvuS9nOS4uuWwgemdouOAgicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdlZGFuID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlZGFuLm1hcChqID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGoudGl0bGUgKyAnQCcgKyBqLmljb24gKyAnQCcgKyBqLmlkOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpbmRleCArICcuJyArIGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnY2FyZF9waWNfMycsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogai5pY29uLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoWyfnvJbovpEnLCAn56e75L2NJywgJ+WIoOmZpCddLCAzLCAn6K+36YCJ5oupJykuc2VsZWN0KChpbmRleCwgaXRlbSkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID09ICfnvJbovpEnKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoaXRlbSwgJ+aDs+imgeabtOaNoueahOatjOWNleWQjSzmrYzljZVpZCzlm77niYfpk77mjqUgJykuaW5wdXQoKGluZGV4KSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBnZWRhbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2hpa2VyOi8vZmlsZXMvSm0vZ2VkYW4uanNvbicpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBpbnB1dC5zcGxpdCgnQCcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZWRhbltpbmRleF0gPSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogblswXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IG5bMV0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogblsyXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJywgSlNPTi5zdHJpbmdpZnkoZ2VkYW4pKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5pu05pS55oiQ5YqfficgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpbmRleCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+enu+S9jScpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnJywgJ+imgeenu+WKqOWIsOWTquS4quW6j+WPt+WJjemdoi/lkI7pnaInKS5pbnB1dCgoaW5kZXgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdlZGFuID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IGdlZGFuW2luZGV4XTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VkYW4uc3BsaWNlKGlucHV0LCAwLCB0ZW1wKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0IDwgaW5kZXgpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlZGFuLnNwbGljZShpbmRleCArIDEsIDEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VkYW4uc3BsaWNlKGluZGV4LCAxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJywgSlNPTi5zdHJpbmdpZnkoZ2VkYW4pKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v56e75L2N5oiQ5YqfficgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpbmRleCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdlZGFuID0gSlNPTi5wYXJzZShmZXRjaCgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlZGFuLnNwbGljZShpbmRleCwgMSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0vZ2VkYW4uanNvbicsIEpTT04uc3RyaW5naWZ5KGdlZGFuKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/liKDpmaTmiJDlip9+JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpbmRleCwgaXRlbSksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfimbvvuI8g5oGi5aSN6buY6K6kJywgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0vZ2VkYW4uanNvbicpOyAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7LmgaLlpI3pu5jorqQnICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgIH1dLCAgICAgICAgICAgICB9ICAgICAgICAgfSwgeyAgICAgICAgICAgICB0aXRsZTogJ+KAmOKAmOKAmeKAmeWwj+S4gzxzbWFsbD4g5qac5Y2VPC9zbWFsbD4nLCAgICAgICAgICAgICBjb2xfdHlwZTogJ2ljb25fM19yb3VuZF9maWxsJywgICAgICAgICAgICAgcGljOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tdXNpYy84NS5zdmcnLCAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4geyAgICAgICAgICAgICAgICAgbGV0IGdlZGFuID0gW3sgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMGlzaVl0MmJrMjNkLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNjIsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIumjmeWNh+amnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDJOS1V6UjBJdGg2ai5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDI2LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLng63mrYzmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAxNDlEdmQyZDZEZkwuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiAyNywgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi5paw5q2M5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMFRpN3NMMUFGVEtRLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNCwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi5rWB6KGM5oyH5pWw5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMkRKSWlOMW1maWpBLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNTIsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuiFvuiur+mfs+S5kOS6uuWOn+WIm+amnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDB6Z0ptQjQzczdYOC5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDY3LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLlkKzmrYzor4bmm7LmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAxS1o5WmYyU283ZTUuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA1LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLlhoXlnLDmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAwM0FDa20zcnF2NFYuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA1OSwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi6aaZ5riv5Zyw5Yy65qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwM3FoT2JYMzluYWpwLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNjEsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuWPsOa5vuWcsOWMuuamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDRMTVpzWjFYQUlaci5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDMsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuasp+e+juamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDM0QTY3SzNFRnhMMy5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDE2LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLpn6nlm73mppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAyWVlmZGUwWkFESkUuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiAxNywgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi5pel5pys5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMWh5NVVTMndtR2xtLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogMTI2LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJKT09Y5pys5Zyw54Ot5pKt5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwM1ZiSUNVMjlIYlhLLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogMTMwLCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLpppnmuK9UVkLlirLmrYzph5HmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDA0RWpGSXIwT1JNbFMuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiAxMjcsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuWPsOa5vktLQk9Y5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMXZJTWNoMlhnWlBMLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNTgsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuivtOWUseamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDJGWk1VTzIxTkVuQS5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDU3LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLnlLXpn7PmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDA0WDcwQncwdzdYN24uanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA3MywgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi5ri45oiP6Z+z5LmQ5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwM2hrTjAwMGVaak5kLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNzIsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuWKqOa8q+mfs+S5kOamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDBORm1pTzNXVDQ5aC5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDI5LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLlvbHop4bph5Hmm7LmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAzMVBMV0kxaGJJcm4uanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA2NCwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi57u86Im65paw5q2M5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMFl6NTNQM2FiQ2VjLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNjUsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuWbvemjjueDreatjOamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDFiSXhUMjBJQm1tby5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDM2LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJL5q2M6YeR5puy5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMDlkWUxvNDV6VG1iLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNjAsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuaKlumfs+eDreatjOamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDBJeXRjNjBPeGxVQi5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDYzLCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCJESuiInuabsuamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDNwRFp5dzRUcHM4NS5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDI4LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLnvZHnu5zmrYzmm7LmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAxRE5ueFUyc09qbEYuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiAxMDgsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIue+juWbveWFrOWRiueJjOamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDI4UlE4VzBnbGQ4Vi5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDEyOSwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi6Z+p5Zu9TWVsb27mppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAxMlRRd1QxMUp6UmsuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiAxMDcsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuiLseWbvVVL5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMGV4S3ltMVdSaW12LmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogMTA1LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLml6XmnKzlhazkv6HmppxcIiAgICAgICAgICAgICAgICAgfV07ICAgICAgICAgICAgICAgICByZXR1cm4gJChnZWRhbiwgMiwgJ+Wwj+S4g+aOkuihjOamnCcpLnNlbGVjdCgoZ2VkYW4pID0+IHsgICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IGdlZGFuLmZpbmRJbmRleCh0ID0+IHQudGl0bGUgPT0gaW5wdXQpOyAgICAgICAgICAgICAgICAgICAgIGxldCBpZCA9IGdlZGFuW2FdLmlkOyAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I2Z5cGFnZSNpbW1lcnNpdmVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoaWQpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCflsI/kuIPmppzljZUnKTsgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3NpZ24uanMnKTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlcV8xXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGU6IFwibXVzaWNUb3BsaXN0LlRvcGxpc3RJbmZvU2VydmVyXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdldERldGFpbFwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidG9wSWRcIjogaWQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib2Zmc2V0XCI6IChNWV9QQUdFIC0gMSkgKiA2MCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJudW1cIjogNjAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGVyaW9kXCI6IFwiXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzID0gSlNPTi5wYXJzZShwb3N0KGJ1aWxkVXJsKCdodHRwczovL3UueS5xcS5jb20vY2dpLWJpbi9tdXNpY3MuZmNnJywgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXzogRGF0ZS5ub3coKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ246IHNpZ24oYm9keSkgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHkgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnJlcV8xLmRhdGE7ICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0ganMuc29uZ0luZm9MaXN0Lm1hcChqID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2VyOiBqLnNpbmdlclswXS5uYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsYnVtOiBqLmFsYnVtLm5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBqLmFsYnVtLm1pZCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogai5taWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW50cm8gPSBqcy5kYXRhLmludHJvLnJlcGxhY2UoLzxiclxccypcXC8/Pi9naSwgJycpOyAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTVlfUEFHRSA9PSAxKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpbnRybywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljX2JsdXInLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfwn6e4XFx0JyArIGpzLmRhdGEudGl0bGVTaGFyZSArICdcXG5cXG7wn468XFx0JyArIGpzLmRhdGEudG90YWxOdW0gKyAn6aaWJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGpzLmRhdGEuZnJvbnRQaWNVcmwsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICBqc29uLm1hcChqID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGouYWxidW0gPyBqLnNpbmdlciArICcgLS0gJyArIGouYWxidW0gOiBqLnNpbmdlciArICcgLS0gJyArIGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljX3VybDogai5waWMgKyAnQFJlZmVyZXI9JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLmxhenlSdWxlKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganMgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS54aHRrZS5jbi9hcGkvc2VtdXNpYz90eXBlPXFxJm49MSZtc2c9JyArIGoudGl0bGUgKyBqLnNpbmdlcikpLmhpZ2h1cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gW2pzICsgJyNpc011c2ljPXRydWUjJ107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdoaWtlcjovL2ZpbGVzL0ptL2ZpbGUvc2lnbi5qcycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjdlwiOiA0NzQ3NDc0LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImN0XCI6IDI0LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvcm1hdFwiOiBcImpzb25cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbkNoYXJzZXRcIjogXCJ1dGYtOFwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm91dENoYXJzZXRcIjogXCJ1dGYtOFwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vdGljZVwiOiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBsYXRmb3JtXCI6IFwieXFxLmpzb25cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuZWVkTmV3Q29kZVwiOiAxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVpblwiOiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImdfdGtfbmV3XzIwMjAwMzAzXCI6IDUzODEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZ190a1wiOiA1MzgxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlcV8xXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtb2R1bGVcIjogXCJtdXNpYy5tdXNpY2hhbGxTb25nLlBsYXlMeXJpY0luZm9cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRob2RcIjogXCJHZXRQbGF5THlyaWNJbmZvXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1cIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzb25nTUlEXCI6IGouaWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGx5cmljID0gSlNPTi5wYXJzZShwb3N0KGJ1aWxkVXJsKCdodHRwczovL3UueS5xcS5jb20vY2dpLWJpbi9tdXNpY3MuZmNnJywgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF86IERhdGUubm93KCksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbjogc2lnbihib2R5KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBib2R5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkucmVxXzEuZGF0YS5seXJpYzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBscmMgPSBiYXNlNjREZWNvZGUobHlyaWMpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8veGlhb2FwaS5jbi9BUEkvbXZfc3EucGhwP249MSZtc2c9JyArIGoudGl0bGUsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtqc29uWzNdIHx8IGpzb25bMl0gfHwganNvblsxXSB8fCBqc29uWzBdXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHlyaWM6IGxyYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRUaXRsZTogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5LiL6L295q2M5puyJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vYXBpLnhodGtlLmNuL2FwaS9zZW11c2ljP3R5cGU9cXEmbj0xJm1zZz0nICsgai50aXRsZSArIGouc2luZ2VyKSkuaGlnaHVybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2Rvd25sb2FkOi8vJyArIHVybCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfop4LnnItNVicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly94aWFvYXBpLmNuL0FQSS9tdl9zcS5waHA/bj0xJm1zZz0nICsgai50aXRsZSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMjAwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gW2pzb25bM10gfHwganNvblsyXSB8fCBqc29uWzFdIHx8IGpzb25bMF1dOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5jZW5ndWlndWkuY24vYXBpL2p1aGUvYXBpLnBocD90eXBlPWtnbXYmbj0xJm1zZz0nICsgai50aXRsZSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMjAwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkuZGF0YS51cmxdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3ZpZGVvOi8vJyArIHVybCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgfSwgaWQpICAgICAgICAgICAgICAgICB9LCBnZWRhbikgICAgICAgICAgICAgfSksICAgICAgICAgfSk7IC8q572R5piT5o6S6KGM5qac5q2M5Y2VX+W8gOWniyovICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgdGl0bGU6ICfigJjigJjigJnigJnlsI/oirg8c21hbGw+IOamnOWNlTwvc21hbGw+JywgICAgICAgICAgICAgY29sX3R5cGU6ICdpY29uXzNfcm91bmRfZmlsbCcsICAgICAgICAgICAgIHBpYzogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbXVzaWMvNTEuc3ZnJywgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHsgICAgICAgICAgICAgICAgIGxldCBnZWRhbiA9IEpTT04ucGFyc2UoZmMoJ2h0dHA6Ly9tdXNpYy4xNjMuY29tL2FwaS90b3BsaXN0JywgMjQpKS5saXN0Lm1hcChsID0+IHsgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbC5uYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBsLmNvdmVySW1nVXJsLCAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbC5pZCAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIHJldHVybiAkKGdlZGFuLCAyLCAn5bCP6Iq45o6S6KGM5qacJykuc2VsZWN0KChnZWRhbikgPT4geyAgICAgICAgICAgICAgICAgICAgIGxldCBhID0gZ2VkYW4uZmluZEluZGV4KHQgPT4gdC50aXRsZSA9PSBpbnB1dCk7ICAgICAgICAgICAgICAgICAgICAgbGV0IGlkID0gZ2VkYW5bYV0uaWQ7ICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjaW1tZXJzaXZlVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKGlkKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgn5bCP6Iq45q2M5Y2VJyk7ICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBodG1sID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cDovL211c2ljLjE2My5jb20vYXBpL3Y2L3BsYXlsaXN0L2RldGFpbD9uPTEwMDAmaWQ9JyArIGlkLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJVc2VyLUFnZW50XCI6IFwiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDIuMC4wLjAgU2FmYXJpLzUzNy4zNlwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29va2llXCI6IFwib3M9cGM7IE1VU0lDX1U9MDAxNzM5OTdFNTdEQzE2MTEyRDJFMTU3OUY1NTU0NDQ4MTJFNTEzM0YxNkMzNDIxM0Q5QkI1RTNFQ0VDODE4ODQ1REY4QTMzNkEzQjlENDk1RUUxODJGMzAwMUFGRUFGOUU5NzE1OTFDQ0VEQzQ3MTM4NDJGMzI5NkExRTc5REZCNzgxN0E4QzdCQjgxNTRGRjE1NDgzNjQ4RjE4NEQwRTcyRDdEMjZBNTY1RTQ0NTA3MzgwODI0OTAyQzIxNTJDQzBCQjVEQjlBMzc5RTgwRjZGMDNEMEQ5OEIyNzkzQTIwMzIzMDM0REU0QTBCQkI0NjcyRDQ4RjkzNjI5NjBFRjIxMzYxNTNEMDJFN0RGMTRDOUNFODRGMUY2NEMxNkVCMzA3QTVCQkI1ODY4NkM2MDk1MDgyQUE0NTA1ODNFNjRFQUNEM0U2QjVCRTBERkNBQ0E5MTI1RjAzNTA1N0ZFMTdCNUJEQTYxRDg5REY1QUJENzc5MDZGNUU1RDg1OEM3NERCMkUxNzhBM0IwRTYwOTVERDc1NTE4RDQ4MkRDOUQ2MTA4MEE2MUQ5Qjc2NUQ3RTk4RUJFMjMwQ0YwMTdDRDkwMjA4MzkyRDNFMTBERTk2NEE2ODEyMUI2QzY2RDA4QzkwMkE5OEVENzExM0FBRTU5RDFFNTU1OUIwNzFERTgzMTI2QjhDMjk1Qzc4MENDRDRCMEI0REUzNkUzNUMwOUFBNjM0MzU1QUVERTJGODgwOTk4NzE5Mjc3RTVFRjlDN0I5Q0FGRkM5MEUyNzlBQUEyQkFGQ0E0NEMwQTgzNTM3RDYwOUUyREFBNUQ1RDc3NDg0OEM5OEREMjg3MTE4ODk1QzFDM0Q2NTc0NDY2RjkyNjJERUNFMDcyOTJBQzE1N0MxREI3MENCNzAzOTU4QTdGRTU1MzQ0RTI3MzQyMkU2OVwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5wbGF5bGlzdDsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBodG1sLnRyYWNrcy5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2luZ2VyID0gai5hci5tYXAobiA9PiBuLm5hbWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai5uYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmdlcjogc2luZ2VyLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsYnVtOiBqLnRucywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGouYWwucGljVXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBqLmlkLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZDogai5tdiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogaHRtbC5kZXNjcmlwdGlvbiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWNfYmx1cicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn8J+nuFxcdCcgKyBodG1sLmNyZWF0b3Iubmlja25hbWUgKyAnXFxuXFxu8J+OvFxcdCcgKyBodG1sLnRyYWNrQ291bnQgKyAn6aaWJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogaHRtbC5jb3ZlckltZ1VybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLCAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAganNvbi5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBqLmFsYnVtID8gai5zaW5nZXIgKyAnIC0tICcgKyBqLmFsYnVtIDogai5zaW5nZXIgKyAnIC0tICcgKyBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpY191cmw6IGoucGljICsgJ0BSZWZlcmVyPScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5sYXp5UnVsZSgoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpzID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly93d3cuaGhscWlsb25nemh1LmNuL2FwaS9kZ193eXltdXNpYy5waHA/YnI9NyZuPTEmbnVtPSZ0eXBlPWpzb24maWQ9JyArIGouaWQpKS5tdXNpY191cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqcyA9ICgnaHR0cHM6Ly9tdXNpYy4xNjMuY29tL3NvbmcvbWVkaWEvb3V0ZXIvdXJsP2lkPScgKyBqLmlkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXJsID0gW2pzICsgJyNpc011c2ljPXRydWUjJ107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHJjID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cDovL211c2ljLjE2My5jb20vYXBpL3NvbmcvbHlyaWM/b3M9cGMmbHY9LTEma3Y9LTEmdHY9LTEmaWQ9JyArIGouaWQpKS5scmMubHlyaWM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2gge30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybHM6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGx5cmljOiBscmMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0VGl0bGU6IGZhbHNlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+S4i+i9veatjOabsicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL3d3dy5oaGxxaWxvbmd6aHUuY24vYXBpL2RnX3d5eW11c2ljLnBocD9icj03Jm49MSZudW09JnR5cGU9anNvbiZpZD0nICsgai5pZCkpLm11c2ljX3VybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAoJ2h0dHBzOi8vbXVzaWMuMTYzLmNvbS9zb25nL21lZGlhL291dGVyL3VybD9pZD0nICsgai5pZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnZG93bmxvYWQ6Ly8nICsgdXJsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+ingueci01WJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGoudmlkID09ICcwJykgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9hcGkuY2VuZ3VpZ3VpLmNuL2FwaS9qdWhlL2FwaS5waHA/dHlwZT1rZ212Jm49MSZtc2c9JyArIGoudGl0bGUpKS5kYXRhLnVybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJ2h0dHBzOi8vaHViLm9ubWljcm9zb2Z0LmNuL3B1YmxpYy92aWRlby9uY20/cmF3PXRydWUmdmlkPScgKyBqLnZpZDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd2aWRlbzovLycgKyB1cmwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICAgICAgICAgIH0sIGlkKSAgICAgICAgICAgICAgICAgfSwgZ2VkYW4pICAgICAgICAgICAgIH0pLCAgICAgICAgIH0pOyAvKue9keaYk+aOkuihjOamnOatjOWNlV/nu5PmnZ8qLyAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgIHRpdGxlOiBnZXRJdGVtKCdrd2dkJywgJ25ldycpID09ICduZXcnID8gJ+KAmOKAmOKAmeKAmeWwj+iOtDxzbWFsbD4g5pyA5pawPC9zbWFsbD4nIDogJ+KAmOKAmOKAmeKAmeWwj+iOtDxzbWFsbD4g5pyA54OtPC9zbWFsbD4nLCAgICAgICAgICAgICBjb2xfdHlwZTogJ2ljb25fM19yb3VuZF9maWxsJywgICAgICAgICAgICAgcGljOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tdXNpYy84Mi5zdmcnLCAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4geyAgICAgICAgICAgICAgICAgc2V0SXRlbSgna3dnZCcsIGdldEl0ZW0oJ2t3Z2QnLCAnbmV3JykgPT0gJ25ldycgPyAnaG90JyA6ICduZXcnKTsgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgIHRvYXN0KCflt7LliIfmjaInICsgKGdldEl0ZW0oJ2t3Z2QnLCAnbmV3JykgPT0gJ25ldycgPyAn5pyA5paw5q2M5Y2VJyA6ICfmnIDng63mrYzljZUnKSk7ICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknICAgICAgICAgICAgIH0pLCAgICAgICAgIH0sIHsgICAgICAgICAgICAgdGl0bGU6ICfmkJzntKInLCAgICAgICAgICAgICBjb2xfdHlwZTogJ2lucHV0JywgICAgICAgICAgICAgZGVzYzogJ/CfkYnwn4+7IOatjOWQjeOAgeatjOaJi+OAgeamnOWNleWQjeensCcsICAgICAgICAgICAgIHVybDogJC50b1N0cmluZygoKSA9PiB7IC8qaWYgKCFpbnB1dCkgcmV0dXJuIFwidG9hc3Q6Ly/or7fovpPlhaXlhbPplK7or43mkJzntKJcIjsqLyAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuICdoaWtlcjovL2xvY2FsTWVkaWEnOyAgICAgICAgICAgICAgICAgdmFyIHR4dCA9IGlucHV0OyAgICAgICAgICAgICAgICAgc2V0SXRlbSgnc3NwdF9pbnB1dCcsIHR4dCk7IC8q6Z+z5LmQ5pCc57Si5byV5pOOX+W8gOWniyovICAgICAgICAgICAgICAgICByZXR1cm4gXCJzZWxlY3Q6Ly9cIiArIEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBbXCLlsI/kuINcIiwgXCLlsI/oirhcIiwgXCLlsI/ojrRcIl0sICAgICAgICAgICAgICAgICAgICAgYXR0YWNoVmlldzogdHJ1ZSwgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygodHh0KSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PSAn5bCP5LiDJykgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjZnlwYWdlI2ltbWVyc2l2ZVRoZW1lIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCh0eHQpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ+Wwj+S4g+aQnOe0oicpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL3UueS5xcS5jb20vY2dpLWJpbi9tdXNpY3UuZmNnJywgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImN0XCI6IDE5LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3ZcIjogMTg0NSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0ZVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRob2RcIjogXCJEb1NlYXJjaEZvclFRTXVzaWNEZXNrdG9wXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtb2R1bGVcIjogXCJtdXNpYy5zZWFyY2guU2VhcmNoQ2dpU2VydmljZVwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1cIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInF1ZXJ5XCI6IHR4dCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJudW1fcGVyX3BhZ2VcIjogMzAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFnZV9udW1cIjogTVlfUEFHRSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5kYXRlLmRhdGEuYm9keS5zb25nLmxpc3QubWFwKGogPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5nZXI6IGouc2luZ2VyWzBdLm5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IFwiaHR0cHM6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAyUjMwMHgzMDBNMDAwXCIgKyBqLmFsYnVtLm1pZCArIFwiLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxidW06IGouYWxidW0ubmFtZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBqLm1pZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNWV9QQUdFID09IDEpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+UjlxcdCcgKyB0eHQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljX2JsdXInLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ/Cfp7hcXHTlkKzngrnpn7PkuZBcXG5cXG7wn46oXFx05rC46L+c55u45L+h576O5aW955qE5LqL5oOF5Y2z5bCG5Y+R55Sf77yBJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzoganNvblswXS5waWMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24uZm9yRWFjaChqID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogai5hbGJ1bSA/IGouc2luZ2VyICsgJyAtLSAnICsgai5hbGJ1bSA6IGouc2luZ2VyICsgJyAtLSAnICsgai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpY191cmw6IGoucGljICsgJ0BSZWZlcmVyPScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLmxhenlSdWxlKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9hcGkueGh0a2UuY24vYXBpL3NlbXVzaWM/dHlwZT1xcSZuPTEmbXNnPScgKyBqLnRpdGxlICsgai5zaW5nZXIpKS5oaWdodXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gW2pzICsgJyNpc011c2ljPXRydWUjJ107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmUoJ2hpa2VyOi8vZmlsZXMvSm0vZmlsZS9zaWduLmpzJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImN2XCI6IDQ3NDc0NzQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjdFwiOiAyNCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvcm1hdFwiOiBcImpzb25cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImluQ2hhcnNldFwiOiBcInV0Zi04XCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvdXRDaGFyc2V0XCI6IFwidXRmLThcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vdGljZVwiOiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGxhdGZvcm1cIjogXCJ5cXEuanNvblwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmVlZE5ld0NvZGVcIjogMSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVpblwiOiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZ190a19uZXdfMjAyMDAzMDNcIjogNTM4MSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImdfdGtcIjogNTM4MSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVxXzFcIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibW9kdWxlXCI6IFwibXVzaWMubXVzaWNoYWxsU29uZy5QbGF5THlyaWNJbmZvXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRob2RcIjogXCJHZXRQbGF5THlyaWNJbmZvXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXJhbVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic29uZ01JRFwiOiBqLmlkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGx5cmljID0gSlNPTi5wYXJzZShwb3N0KGJ1aWxkVXJsKCdodHRwczovL3UueS5xcS5jb20vY2dpLWJpbi9tdXNpY3MuZmNnJywgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXzogRGF0ZS5ub3coKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ246IHNpZ24oYm9keSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnJlcV8xLmRhdGEubHlyaWM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBscmMgPSBiYXNlNjREZWNvZGUobHlyaWMpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8veGlhb2FwaS5jbi9BUEkvbXZfc3EucGhwP249MSZtc2c9JyArIGoudGl0bGUsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDIwMDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnVybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtqc29uWzNdIHx8IGpzb25bMl0gfHwganNvblsxXSB8fCBqc29uWzBdXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBseXJpYzogbHJjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0VGl0bGU6IGZhbHNlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkuIvovb3mrYzmm7InLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vYXBpLnhodGtlLmNuL2FwaS9zZW11c2ljP3R5cGU9cXEmbj0xJm1zZz0nICsgai50aXRsZSArIGouc2luZ2VyKSkuaGlnaHVybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnZG93bmxvYWQ6Ly8nICsgdXJsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+ingueci01WJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL3hpYW9hcGkuY24vQVBJL212X3NxLnBocD9uPTEmbXNnPScgKyBqLnRpdGxlLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDIwMDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBbanNvblszXSB8fCBqc29uWzJdIHx8IGpzb25bMV0gfHwganNvblswXV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5jZW5ndWlndWkuY24vYXBpL2p1aGUvYXBpLnBocD90eXBlPWtnbXYmbj0xJm1zZz0nICsgai50aXRsZSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLmRhdGEudXJsXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHh0KSAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09ICflsI/oirgnKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNpbW1lcnNpdmVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgodHh0KSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCflsI/oirjmkJzntKInKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cDovL211c2ljLjE2My5jb20vYXBpL3NlYXJjaC9nZXQvd2ViP3R5cGU9MSZvZmZzZXQ9MCZsaW1pdD05MCZzPScgKyB0eHQpKS5yZXN1bHQuc29uZ3MubWFwKGogPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2luZ2VyID0gai5hcnRpc3RzLm1hcChzID0+IHMubmFtZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai5uYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2VyOiBzaW5nZXJbMF0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6ICdodHRwczovL3dhbmdodW4udG9wL3FxbXVzaWMvd3ltdXNpYy5waHA/dHlwZT1waWMmaWQ9JyArIGouaWQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGJ1bTogai5hbGJ1bS5uYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGouaWQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWQ6IGoubXZpZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNWV9QQUdFID09IDEpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+UjlxcdCcgKyB0eHQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljX2JsdXInLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ/Cfp7hcXHTlkKzngrnpn7PkuZBcXG5cXG7wn46oXFx05rC46L+c55u45L+h576O5aW955qE5LqL5oOF5Y2z5bCG5Y+R55Sf77yBJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzoganNvblswXS5waWMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24ubWFwKGogPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWNfdXJsOiBqLnBpYyArICdAUmVmZXJlcj0nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogai5hbGJ1bSA/IGouc2luZ2VyICsgJyAtLSAnICsgai5hbGJ1bSA6IGouc2luZ2VyICsgJyAtLSAnICsgai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykubGF6eVJ1bGUoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganMgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL3d3dy5oaGxxaWxvbmd6aHUuY24vYXBpL2RnX3d5eW11c2ljLnBocD9icj03Jm49MSZudW09JnR5cGU9anNvbiZpZD0nICsgai5pZCkpLm11c2ljX3VybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqcyA9ICgnaHR0cHM6Ly9tdXNpYy4xNjMuY29tL3NvbmcvbWVkaWEvb3V0ZXIvdXJsP2lkPScgKyBqLmlkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtqcyArICcjaXNNdXNpYz10cnVlIyddOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBscmMgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwOi8vbXVzaWMuMTYzLmNvbS9hcGkvc29uZy9seXJpYz9vcz1wYyZsdj0tMSZrdj0tMSZ0dj0tMSZpZD0nICsgai5pZCkpLmxyYy5seXJpYzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHt9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBseXJpYzogbHJjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0VGl0bGU6IGZhbHNlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkuIvovb3mrYzmm7InLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly93d3cuaGhscWlsb25nemh1LmNuL2FwaS9kZ193eXltdXNpYy5waHA/YnI9NyZuPTEmbnVtPSZ0eXBlPWpzb24maWQ9JyArIGouaWQpKS5tdXNpY191cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICgnaHR0cHM6Ly9tdXNpYy4xNjMuY29tL3NvbmcvbWVkaWEvb3V0ZXIvdXJsP2lkPScgKyBqLmlkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnZG93bmxvYWQ6Ly8nICsgdXJsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+ingueci01WJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqLnZpZCA9PSAnMCcpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9hcGkuY2VuZ3VpZ3VpLmNuL2FwaS9qdWhlL2FwaS5waHA/dHlwZT1rZ212Jm49MSZtc2c9JyArIGoudGl0bGUpKS5kYXRhLnVybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICdodHRwczovL2h1Yi5vbm1pY3Jvc29mdC5jbi9wdWJsaWMvdmlkZW8vbmNtP3Jhdz10cnVlJnZpZD0nICsgai52aWQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3ZpZGVvOi8vJyArIHVybCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0eHQpICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNmeXBhZ2UjaW1tZXJzaXZlVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKHR4dCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgn5bCP6I605pCc57SiJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vc2VhcmNoLmt1d28uY24vci5zP2NsaWVudD1rdCZwbj0nICsgKE1ZX1BBR0UgLSAxKSArICcmcm49MzAmdmlwdmVyPTEmZnQ9bXVzaWMmZW5jb2Rpbmc9dXRmOCZyZm9ybWF0PWpzb24mbW9iaT0xJmFsbD0nICsgdHh0KSkuYWJzbGlzdC5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSAoJ2h0dHA6Ly9pbWcxLmt3Y2RuLmt1d28uY24vc3Rhci9hbGJ1bWNvdmVyLzUwMCcgKyBqLndlYl9hbGJ1bXBpY19zaG9ydC5zcGxpdCgnMTIwJylbMV0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGouU09OR05BTUUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5nZXI6IGouQVJUSVNULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBpbWcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGJ1bTogai5BTEJVTSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZDogai5EQ19UQVJHRVRJRCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZDogai5tdnBheWluZm8udmlkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfwn5SOXFx0JyArIHR4dCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzoganNvblswXS5waWMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljX2JsdXInLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ/Cfp7hcXHTlkKzngrnpn7PkuZBcXG5cXG7wn46oXFx05rC46L+c55u45L+h576O5aW955qE5LqL5oOF5Y2z5bCG5Y+R55Sf77yBJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbi5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogai5waWMgKyAnQFJlZmVyZXI9JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGouYWxidW0gPyBqLnNpbmdlciArICcgLS0gJyArIGouYWxidW0gOiBqLnNpbmdlciArICcgLS0gJyArIGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLmxhenlSdWxlKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpzID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly93d3cuaGhscWlsb25nemh1LmNuL2FwaS9kZ19rdXdvbXVzaWMucGhwP249MSZ0eXBlPWpzb24mbXNnPScgKyBqLnRpdGxlKSkuZmxhY191cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganMgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL29pYXBpLm5ldC9BUEkvS3V3by8/bj0xJmJyPTEmbXNnPScgKyBqLnRpdGxlKSkuZGF0YS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSBbanMgKyAnI2lzTXVzaWM9dHJ1ZSMnXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHJjID0gSlNPTi5wYXJzZShmZXRjaChcImh0dHBzOi8vbS5rdXdvLmNuL25ld2g1L3NpbmdsZXMvc29uZ2luZm9hbmRscmM/bXVzaWNJZD1cIiArIGoucmlkKSkuZGF0YS5scmNsaXN0Lm1hcChkID0+IHvigIvigIsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzID0gKGQudGltZSAlIDYwKS50b0ZpeGVkKDIpLnBhZFN0YXJ0KDUsICcwJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbSA9ICgoZC50aW1lIC0gcykgLyA2MCkudG9GaXhlZCgwKS5wYWRTdGFydCgyLCAnMCcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbJyArIG0gKyAnOicgKyBzICsgJ10nICsgZC5saW5lTHlyaWPigIsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbignXFxuJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCB7fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybHM6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHlyaWM6IGxyYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdFRpdGxlOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5LiL6L295q2M5puyJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vd3d3LmhobHFpbG9uZ3podS5jbi9hcGkvZGdfa3V3b211c2ljLnBocD9uPTEmdHlwZT1qc29uJm1zZz0nICsgai50aXRsZSkpLmZsYWNfdXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL29pYXBpLm5ldC9BUEkvS3V3by8/bj0xJmJyPTEmbXNnPScgKyBqLnRpdGxlKSkuZGF0YS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2Rvd25sb2FkOi8vJyArIHVybCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfop4LnnItNVicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoai52aWQgPT0gJzAnKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vYXBpLnN1eWFudy5jbi9hcGkva2dfbXYucGhwP249MSZtc2c9JyArIGoudGl0bGUpKS5kYXRhLnVybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGh0bWwgPSBmZXRjaCgnaHR0cHM6Ly9hbnltYXRjaC5rdXdvLmNuL21vYmkucz9mPXdlYiZ1c2VyPTZmMTczY2Y5YTJhOWRhNGMmc291cmNlPWt3cGxheWVyX2FyXzEwLjguMi4yXzEzOC5hcGsmdHlwZT1nZXRfdXJsX2J5X3ZpZCZxdWFsaXR5PU1QNEhWJnAycGlkPTEmdmlkPScgKyBqLnZpZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBodG1sLnNwbGl0KCc9JylbM107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGIgPSBhLnNwbGl0KCc/JylbMF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IGI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3ZpZGVvOi8vJyArIHVybCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0eHQpICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICB9LCB0eHQpICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICB9KSwgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0SXRlbSgnc3NwdF9pbnB1dCcsICcnKSwgICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiAnc2V0SXRlbShcInNzcHRfaW5wdXRcIixpbnB1dCknICAgICAgICAgICAgIH0gICAgICAgICB9KTsgLyrpn7PkuZDmkJzntKLlvJXmk45f57uT5p2fKi8gICAgIH0gLyrlm7rlrprnv7vpobUx57uT5p2fKi8gLyrphbfmiJHpn7PkuZDmrYzljZVf5byA5aeLKi8gICAgIGxldCBrd2dkID0gZ2V0SXRlbSgna3dnZCcsICduZXcnKTsgICAgIGxldCBodG1sID0gKCdodHRwOi8vd2FwaS5rdXdvLmNuL2FwaS9wYy9jbGFzc2lmeS9wbGF5bGlzdC9nZXRSY21QbGF5TGlzdD9sb2dpblVpZD0wJmxvZ2luU2lkPTAmYXBwVWlkPTc2MDM5NTc2JiZwbj0nICsgTVlfUEFHRSArICcmcm49MzYmb3JkZXI9JyArIGt3Z2QpOyAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGZldGNoKGh0bWwpKS5kYXRhOyAgICAganNvbi5kYXRhLm1hcChkYXRhID0+IHsgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICB0aXRsZTogZGF0YS5uYW1lLCAgICAgICAgICAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzMnLCAgICAgICAgICAgICBwaWM6IGRhdGEuaW1nLCAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjZnlwYWdlI2ltbWVyc2l2ZVRoZW1lIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKChkYXRhKSA9PiB7ICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ+Wwj+iOtOatjOWNlScpOyAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgIGxldCBodG1sID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9tLmt1d28uY24vbmV3aDVhcHAvd2FwaS9hcGkvd3d3L3BsYXlsaXN0L3BsYXlMaXN0SW5mbz9waWQ9JyArIGRhdGEuaWQgKyAnJnJuPTMwJnVhPSZpcD0mcG49JyArIE1ZX1BBR0UpKS5kYXRhOyAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBodG1sLm11c2ljTGlzdC5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGoubmFtZSwgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2VyOiBqLmFydGlzdCwgICAgICAgICAgICAgICAgICAgICAgICAgYWxidW06IGouYWxidW0sICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogai5waWMsICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBqLnJpZCwgICAgICAgICAgICAgICAgICAgICAgICAgdmlkOiBqLm12cGF5aW5mby52aWQsICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IGouc29uZ1RpbWVNaW51dGVzICAgICAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBodG1sLm5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWNfYmx1cicsICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogaHRtbC5pbWc3MDAgfHwgaHRtbC51UGljLCAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn8J+nuFxcdCcgKyBodG1sLnVzZXJOYW1lICsgJ1xcblxcbvCfjrxcXHQnICsgZGF0YS50b3RhbCArICfpppYnLCAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JywgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgIGpzb24ubWFwKGogPT4geyAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGouYWxidW0gPyBqLnNpbmdlciArICcgLS0gJyArIGouYWxidW0gOiBqLnNpbmdlciArICcgLS0gJyArIGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogai5waWMgKyAnQFJlZmVyZXI9JywgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5sYXp5UnVsZSgoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganMgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL3d3dy5oaGxxaWxvbmd6aHUuY24vYXBpL2RnX2t1d29tdXNpYy5waHA/bj0xJnR5cGU9anNvbiZtc2c9JyArIGoudGl0bGUpKS5mbGFjX3VybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganMgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL29pYXBpLm5ldC9BUEkvS3V3by8/bj0xJmJyPTEmbXNnPScgKyBqLnRpdGxlKSkuZGF0YS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXJsID0gW2pzICsgJyNpc011c2ljPXRydWUjJ107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBscmMgPSBKU09OLnBhcnNlKGZldGNoKFwiaHR0cHM6Ly9tLmt1d28uY24vbmV3aDUvc2luZ2xlcy9zb25naW5mb2FuZGxyYz9tdXNpY0lkPVwiICsgai5pZCkpLmRhdGEubHJjbGlzdC5tYXAoZCA9PiB74oCL4oCLICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzID0gKGQudGltZSAlIDYwKS50b0ZpeGVkKDIpLnBhZFN0YXJ0KDUsICcwJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtID0gKChkLnRpbWUgLSBzKSAvIDYwKS50b0ZpeGVkKDApLnBhZFN0YXJ0KDIsICcwJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnWycgKyBtICsgJzonICsgcyArICddJyArIGQubGluZUx5cmlj4oCLICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbignXFxuJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHt9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybHM6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBseXJpYzogbHJjICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSwgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRUaXRsZTogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkuIvovb3mrYzmm7InLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly93d3cuaGhscWlsb25nemh1LmNuL2FwaS9kZ19rdXdvbXVzaWMucGhwP249MSZ0eXBlPWpzb24mbXNnPScgKyBqLnRpdGxlKSkuZmxhY191cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL29pYXBpLm5ldC9BUEkvS3V3by8/bj0xJmJyPTEmbXNnPScgKyBqLnRpdGxlKSkuZGF0YS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkb3dubG9hZDovLycgKyB1cmwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6KeC55yLTVYnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqLnZpZCA9PSAnMCcpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5zdXlhbncuY24vYXBpL2tnX212LnBocD9uPTEmbXNnPScgKyBqLnRpdGxlKSkuZGF0YS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaHRtbCA9IGZldGNoKCdodHRwczovL2FueW1hdGNoLmt1d28uY24vbW9iaS5zP2Y9d2ViJnVzZXI9NmYxNzNjZjlhMmE5ZGE0YyZzb3VyY2U9a3dwbGF5ZXJfYXJfMTAuOC4yLjJfMTM4LmFwayZ0eXBlPWdldF91cmxfYnlfdmlkJnF1YWxpdHk9TVA0SFYmcDJwaWQ9MSZ2aWQ9JyArIGoudmlkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhID0gaHRtbC5zcGxpdCgnPScpWzNdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGIgPSBhLnNwbGl0KCc/JylbMF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gYjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3ZpZGVvOi8vJyArIHVybCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSwgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgIH0sIGRhdGEpLCAgICAgICAgIH0pOyAgICAgfSk7IC8q6YW35oiR6Z+z5LmQ5q2M5Y2VX+e7k+adnyovICAgICBzZXRSZXN1bHQoZCk7IH0p4oCLIiwiaWNvbiI6Imhpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8xOC5wbmciLCJkZXNjIjoiIiwidHlwZSI6Imljb25fcm91bmRfc21hbGxfNCJ9LHsic3RhdHVzIjpmYWxzZSwicGF0dGVybiI6MCwibmFtZSI6Iumfs+S5kOatjOWNlSIsInRpdGxlIjoi6Z+z5LmQIiwidXJsIjoiQGpzOiAkKCdoaWtlcjovL2VtcHR5I2Z5cGFnZSNnYW1lVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKCkgPT4geyAgICAgc2V0UGFnZVRpdGxlKCflkKzngrnpn7PkuZAnKTsgICAgIGxldCBkID0gW107ICAgICBsZXQgZmlsZV9zaWduID0gJ2hpa2VyOi8vZmlsZXMvSm0vZmlsZS9zaWduLmpzJzsgICAgIGxldCBzaWduID0gYGZ1bmN0aW9uIHNpZ24ocGFyYW1zKSB7ICAgICAgZnVuY3Rpb24gbWlkZGxlKGxzKSB7ICAgICAgICAgbGV0IHJlc051bSA9IFtdOyAgICAgICAgICBmdW5jdGlvbiB0ZXN0KGEsIGIsIGMpIHsgICAgICAgICAgICAgbGV0IHIyNSA9IGEgPj4gMjsgICAgICAgICAgICAgaWYgKGIgIT09IHVuZGVmaW5lZCAmJiBjICE9PSB1bmRlZmluZWQpIHsgICAgICAgICAgICAgICAgIGxldCByMjYgPSBhICYgMzsgICAgICAgICAgICAgICAgIGxldCByMjZfMiA9IHIyNiA8PCA0OyAgICAgICAgICAgICAgICAgbGV0IHIyNl8zID0gYiA+PiA0OyAgICAgICAgICAgICAgICAgbGV0IHIyNl80ID0gcjI2XzIgfCByMjZfMzsgICAgICAgICAgICAgICAgIGxldCByMjcgPSBiICYgMTU7ICAgICAgICAgICAgICAgICBsZXQgcjI3XzIgPSByMjcgPDwgMjsgICAgICAgICAgICAgICAgIGxldCByMjdfMyA9IHIyN18yIHwgKGMgPj4gNik7ICAgICAgICAgICAgICAgICBsZXQgcjI4ID0gYyAmIDYzOyAgICAgICAgICAgICAgICAgcmVzTnVtLnB1c2gocjI1KTsgICAgICAgICAgICAgICAgIHJlc051bS5wdXNoKHIyNl80KTsgICAgICAgICAgICAgICAgIHJlc051bS5wdXNoKHIyN18zKTsgICAgICAgICAgICAgICAgIHJlc051bS5wdXNoKHIyOCk7ICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICBsZXQgcjEwID0gYSA+PiAyOyAgICAgICAgICAgICAgICAgbGV0IHIxMSA9IGEgJiAzOyAgICAgICAgICAgICAgICAgbGV0IHIxMV8yID0gcjExIDw8IDQ7ICAgICAgICAgICAgICAgICByZXNOdW0ucHVzaChyMTApOyAgICAgICAgICAgICAgICAgcmVzTnVtLnB1c2gocjExXzIpOyAgICAgICAgICAgICB9ICAgICAgICAgfSAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbHMubGVuZ3RoOyBpICs9IDMpIHsgICAgICAgICAgICAgaWYgKGxzW2ldICE9PSB1bmRlZmluZWQgJiYgbHNbaSArIDFdICE9PSB1bmRlZmluZWQgJiYgbHNbaSArIDJdICE9PSB1bmRlZmluZWQpIHsgICAgICAgICAgICAgICAgIHRlc3QobHNbaV0sIGxzW2kgKyAxXSwgbHNbaSArIDJdKSAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgdGVzdChsc1tpXSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpICAgICAgICAgICAgIH0gICAgICAgICB9ICAgICAgICAgbGV0IHJlcyA9IFtdOyAgICAgICAgIHJlc051bS5mb3JFYWNoKChpdGVtKSA9PiB7ICAgICAgICAgICAgIGxldCB6ZCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7ICAgICAgICAgICAgIHJlcy5wdXNoKHpkW2l0ZW1dKSAgICAgICAgIH0pOyAgICAgICAgIHJlcyA9IHJlcy5qb2luKCcnKTsgICAgICAgICByZXR1cm4gcmVzOyAgICAgfSAgICAgIGZ1bmN0aW9uIGhlYWQobWQ1U3RyKSB7ICAgICAgICAgbGV0IHJlcyA9IFtdOyAgICAgICAgIFsyMSwgNCwgOSwgMjYsIDE2LCAyMCwgMjcsIDMwXS5tYXAoeCA9PiB7ICAgICAgICAgICAgIHJlcy5wdXNoKG1kNVN0clt4XSk7ICAgICAgICAgfSk7ICAgICAgICAgcmV0dXJuIHJlcy5qb2luKCcnKTsgICAgIH0gICAgICBmdW5jdGlvbiB0YWlsKG1kNVN0cikgeyAgICAgICAgIGxldCByZXMgPSBbXTsgICAgICAgICBbMTgsIDExLCAzLCAyLCAxLCA3LCA2LCAyNV0ubWFwKHggPT4geyAgICAgICAgICAgICByZXMucHVzaChtZDVTdHJbeF0pOyAgICAgICAgIH0pOyAgICAgICAgIHJldHVybiByZXMuam9pbignJyk7ICAgICB9ICAgICAgZnVuY3Rpb24gZ2V0THMobWQ1U3RyKSB7ICAgICAgICAgbGV0IHpkID0geyAgICAgICAgICAgICBcIjBcIjogMCwgICAgICAgICAgICAgXCIxXCI6IDEsICAgICAgICAgICAgIFwiMlwiOiAyLCAgICAgICAgICAgICBcIjNcIjogMywgICAgICAgICAgICAgXCI0XCI6IDQsICAgICAgICAgICAgIFwiNVwiOiA1LCAgICAgICAgICAgICBcIjZcIjogNiwgICAgICAgICAgICAgXCI3XCI6IDcsICAgICAgICAgICAgIFwiOFwiOiA4LCAgICAgICAgICAgICBcIjlcIjogOSwgICAgICAgICAgICAgXCJBXCI6IDEwLCAgICAgICAgICAgICBcIkJcIjogMTEsICAgICAgICAgICAgIFwiQ1wiOiAxMiwgICAgICAgICAgICAgXCJEXCI6IDEzLCAgICAgICAgICAgICBcIkVcIjogMTQsICAgICAgICAgICAgIFwiRlwiOiAxNSAgICAgICAgIH07ICAgICAgICAgbGV0IG9sID0gWzIxMiwgNDUsIDgwLCA2OCwgMTk1LCAxNjMsIDE2MywgMjAzLCAxNTcsIDIyMCwgMjU0LCA5MSwgMjA0LCA3OSwgMTA0LCA2XTsgICAgICAgICBsZXQgcmVzID0gW107ICAgICAgICAgbGV0IGogPSAwOyAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWQ1U3RyLmxlbmd0aDsgaSArPSAyKSB7ICAgICAgICAgICAgIGxldCBvbmUgPSB6ZFttZDVTdHJbaV1dOyAgICAgICAgICAgICBsZXQgdHdvID0gemRbbWQ1U3RyW2kgKyAxXV07ICAgICAgICAgICAgIGxldCByID0gb25lICogMTYgXiB0d287ICAgICAgICAgICAgIHJlcy5wdXNoKHIgXiBvbFtqXSk7ICAgICAgICAgICAgIGogKz0gMTsgICAgICAgICB9ICAgICAgICAgcmV0dXJuIHJlczsgICAgIH0gICAgIGxldCBtZDVTdHIgPSBtZDUocGFyYW1zKS50b1VwcGVyQ2FzZSgpOyAgICAgbGV0IGggPSBoZWFkKG1kNVN0cik7ICAgICBsZXQgZSA9IHRhaWwobWQ1U3RyKTsgICAgIGxldCBscyA9IGdldExzKG1kNVN0cik7ICAgICBsZXQgbSA9IG1pZGRsZShscyk7ICAgICBsZXQgcmVzID0gKCd6emInICsgaCArIG0gKyBlKS50b0xvd2VyQ2FzZSgpOyAgICAgbGV0IHIgPSBSZWdFeHAoL1tcXFxcLytdL2cpOyAgICAgcmVzID0gcmVzLnJlcGxhY2UociwgJycpOyAgICAgcmV0dXJuIHJlczsgfWA7ICAgICBpZiAoIWZpbGVFeGlzdChmaWxlX3NpZ24pKSB7ICAgICAgICAgc2F2ZUZpbGUoZmlsZV9zaWduLCBzaWduKTsgICAgIH0gICAgIGlmIChNWV9QQUdFID09IDEpIHsgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICB0aXRsZTogJ+KAmOKAmOKAmeKAmTxiaWc+PGZvbnQgY29sb3I9XCIjMUFCMTZCXCI+5ZCs54K56Z+z5LmQPC9mb250PjwvYmlnPjxzbWFsbD48c21hbGw+IOatjOWNlTwvc21hbGw+PC9zbWFsbD4nLCAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsICAgICAgICAgICAgIHBpYzogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbXVzaWMvODUuc3ZnJywgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHsgICAgICAgICAgICAgICAgIGlmICghZmlsZUV4aXN0KCdoaWtlcjovL2ZpbGVzL0ptL2dlZGFuLmpzb24nKSkgeyAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL2dlZGFuLmpzb24nLCAnW3tcInRpdGxlXCI6XCLng63mkJzmrYzmm7JcIixcImljb25cIjpcImh0dHA6Ly9xcGljLnkucXEuY29tL211c2ljX2NvdmVyL2hLRnJpYk1od0g0Q2x3TldKeGljdUN4anV3SWtiWlBxNEhWVDBRZ3hzZGI4SldRWFhDMlRGc3VRLzYwMD9uPTFcIixcImlkXCI6NzUzMjY3MDUzOH0se1widGl0bGVcIjpcIuaKlumfs+eDremXqFwiLFwiaWNvblwiOlwiaHR0cDovL3FwaWMueS5xcS5jb20vbXVzaWNfY292ZXIvV3B2ZEpYZm43OThpYkQ0Z2NmancwTlN1QmtGVEpZcFk1UU9ldjNFeGNCUWlhbVJjb2JrcE43N2cvNjAwP249MVwiLFwiaWRcIjo3NjMwMzAzNDc0fV0nKTsgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgIGxldCBnZWRhbiA9IEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJykpOyAgICAgICAgICAgICAgICAgcmV0dXJuICQoZ2VkYW4sIDIsICflsI/kuIPmrYzljZUnKS5zZWxlY3QoKGdlZGFuKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBnZWRhbi5maW5kSW5kZXgodCA9PiB0LnRpdGxlID09IGlucHV0KTsgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBnZWRhblthXS5pZDsgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNpbW1lcnNpdmVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoaWQpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCflsI/kuIPmrYzljZUnKTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3NpZ24uanMnKTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlcV8xXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1vZHVsZVwiOiBcIm11c2ljLnNyZkRpc3NJbmZvLmFpRGlzc0luZm9cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1ldGhvZFwiOiBcInVuaWZvcm1fZ2V0X0Rpc3NpbmZvXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXJhbVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzc3RpZFwiOiBOdW1iZXIoaWQpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJpbmZvXCI6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGFnXCI6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JkZXJsaXN0XCI6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic29uZ19iZWdpblwiOiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNvbmdfbnVtXCI6IDEwMDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib25seXNvbmdsaXN0XCI6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZW5jX2hvc3RfdWluXCI6IFwiXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganMgPSBKU09OLnBhcnNlKHBvc3QoYnVpbGRVcmwoJ2h0dHBzOi8vdS55LnFxLmNvbS9jZ2ktYmluL211c2ljcy5mY2cnLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfOiBEYXRlLm5vdygpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbjogc2lnbihib2R5KSAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSAgICAgICAgICAgICAgICAgICAgICAgICB9KSkucmVxXzEuZGF0YTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBqcy5zb25nbGlzdC5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmdlcjogai5zaW5nZXJbMF0ubmFtZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGJ1bTogai5hbGJ1bS5uYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogXCJodHRwczovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDJSNTAweDUwME0wMDBcIiArIGouYWxidW0ubWlkICsgXCIuanBnXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGoubWlkICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqcy5kaXJpbmZvLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX3ZlcnRpY2FsX3BpY19ibHVyJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfwn6e4XFx0JyArIGpzLmRpcmluZm8uaG9zdF9uaWNrICsgJ1xcblxcbvCfjrxcXHQnICsganMuZGlyaW5mby5zb25nbnVtICsgJ+mmlicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGpzLmRpcmluZm8ucGljdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcnLCAn5puy5ZCN5oiW5q2M5omLJykuaW5wdXQoKGpzb24pID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZWFyY2goYXJyYXksIG5hbWUpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5LmZpbHRlcihpdGVtID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMobmFtZS50b0xvd2VyQ2FzZSgpKSB8fCBpdGVtLnNpbmdlci50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG5hbWUudG9Mb3dlckNhc2UoKSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdHMgPSBzZWFyY2goanNvbiwgaW5wdXQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHknKS5ydWxlKChyZXN1bHRzKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ+aQnOe0oue7k+aenCcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMuZm9yRWFjaChqID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBqLmFsYnVtID8gai5zaW5nZXIgKyAnIC0tICcgKyBqLmFsYnVtIDogai5zaW5nZXIgKyAnIC0tICcgKyBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGoucGljLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7ICAgICByZXFfMDogeyAgICAgICAgIG1vZHVsZTogXCJ2a2V5LkdldFZrZXlTZXJ2ZXJcIiwgICAgICAgICBtZXRob2Q6IFwiQ2dpR2V0VmtleVwiLCAgICAgICAgIHBhcmFtOiB7ICAgICAgICAgICAgIGd1aWQ6IFwiMFwiLCAgICAgICAgICAgICBwbGF0Zm9ybTogXCIyMFwiLCAgICAgICAgICAgICBmaWxlbmFtZTogW1wiRjAwMFwiK2ouaWQrai5pZCtcIi5mbGFjXCJdLCAgICAgICAgICAgICBzb25nbWlkOiBbai5pZF0gICAgICAgICB9ICAgICB9IH0pOyAgICAgICAgICAgICAgbGV0IGh0bWwgPSBcImh0dHBzOi8vdS55LnFxLmNvbS9jZ2ktYmluL211c2ljdS5mY2dcIjsgIGxldCBoZWFkZXJzID0geyAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsICAgICBDb29raWU6IFwicW1fa2V5c3Q9UV9IX0xfNjNrM05HMjlucnF1OUExUVRWVFpOZ3RFeDFGQk84RU05Wmhha0pmSGVHTlpkYUpBZUFyZl9PYUVmSkpmaXZYUkRodDVheHN1XzFlVl9iM2kxWnB4Nlp3OyB1aW49NTEzNTM2NjQxXCIgfTsgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXF1ZXN0KGh0bWwsIHsgICAgIG1ldGhvZDogXCJQT1NUXCIsICAgICBib2R5OiBkYXRhLCAgICAgaGVhZGVyczogaGVhZGVycyB9KSkucmVxXzAuZGF0YTsgIHZhciBpbmZvID0ganNvbi5taWR1cmxpbmZvOyBpZiAoaW5mbyAmJiBpbmZvLmxlbmd0aCA+IDApIHsgICAgIHZhciB1ID0gaW5mb1swXS5wdXJsOyAgICAgaWYgKHUgJiYgdSAhPT0gXCJcIikgeyAgICAgICAgIGxldCBzaXAgPSBqc29uLnNpcDsgICAgICAgICBpZiAoc2lwICYmIHNpcC5sZW5ndGggPiAwKSB7ICAgICAgICAgICAgIHZhciBqcyA9IHNpcFswXSArIHU7ICAgICAgICAgfSAgICAgfSB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gW2pzICsgJyNpc011c2ljPXRydWUjJ107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3NpZ24uanMnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3ZcIjogNDc0NzQ3NCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3RcIjogMjQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvcm1hdFwiOiBcImpzb25cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5DaGFyc2V0XCI6IFwidXRmLThcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3V0Q2hhcnNldFwiOiBcInV0Zi04XCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vdGljZVwiOiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbGF0Zm9ybVwiOiBcInlxcS5qc29uXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5lZWROZXdDb2RlXCI6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVpblwiOiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJnX3RrX25ld18yMDIwMDMwM1wiOiA1MzgxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJnX3RrXCI6IDUzODEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZXFfMVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1vZHVsZVwiOiBcIm11c2ljLm11c2ljaGFsbFNvbmcuUGxheUx5cmljSW5mb1wiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRob2RcIjogXCJHZXRQbGF5THlyaWNJbmZvXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhcmFtXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNvbmdNSURcIjogai5pZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGx5cmljID0gSlNPTi5wYXJzZShwb3N0KGJ1aWxkVXJsKCdodHRwczovL3UueS5xcS5jb20vY2dpLWJpbi9tdXNpY3MuZmNnJywgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfOiBEYXRlLm5vdygpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduOiBzaWduKGJvZHkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5yZXFfMS5kYXRhLmx5cmljOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBscmMgPSBiYXNlNjREZWNvZGUobHlyaWMpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8veGlhb2FwaS5jbi9BUEkvbXZfc3EucGhwP249MSZtc2c9JyArIGoudGl0bGUsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMjAwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtqc29uWzNdIHx8IGpzb25bMl0gfHwganNvblsxXSB8fCBqc29uWzBdXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGx5cmljOiBscmMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdFRpdGxlOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVzdWx0cykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5rKh5pyJ5om+5YiwJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGpzb24pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+ToOWkjeWItuWbvueJh+mTvuaOpScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqcykgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdjb3B5Oi8vJyArIGpzLmRpcmluZm8ucGljdXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqcykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24ubWFwKGogPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogai5hbGJ1bSA/IGouc2luZ2VyICsgJyAtLSAnICsgai5hbGJ1bSA6IGouc2luZ2VyICsgJyAtLSAnICsgai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWNfdXJsOiBqLnBpYyArICdAUmVmZXJlcj0nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykubGF6eVJ1bGUoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoeyAgICAgcmVxXzA6IHsgICAgICAgICBtb2R1bGU6IFwidmtleS5HZXRWa2V5U2VydmVyXCIsICAgICAgICAgbWV0aG9kOiBcIkNnaUdldFZrZXlcIiwgICAgICAgICBwYXJhbTogeyAgICAgICAgICAgICBndWlkOiBcIjBcIiwgICAgICAgICAgICAgcGxhdGZvcm06IFwiMjBcIiwgICAgICAgICAgICAgZmlsZW5hbWU6IFtcIkYwMDBcIitqLmlkK2ouaWQrXCIuZmxhY1wiXSwgICAgICAgICAgICAgc29uZ21pZDogW2ouaWRdICAgICAgICAgfSAgICAgfSB9KTsgICAgICAgICAgICAgIGxldCBodG1sID0gXCJodHRwczovL3UueS5xcS5jb20vY2dpLWJpbi9tdXNpY3UuZmNnXCI7ICBsZXQgaGVhZGVycyA9IHsgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLCAgICAgQ29va2llOiBcInFtX2tleXN0PVFfSF9MXzYzazNORzI5bnJxdTlBMVFUVlRaTmd0RXgxRkJPOEVNOVpoYWtKZkhlR05aZGFKQWVBcmZfT2FFZkpKZml2WFJEaHQ1YXhzdV8xZVZfYjNpMVpweDZadzsgdWluPTUxMzUzNjY0MVwiIH07ICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVxdWVzdChodG1sLCB7ICAgICBtZXRob2Q6IFwiUE9TVFwiLCAgICAgYm9keTogZGF0YSwgICAgIGhlYWRlcnM6IGhlYWRlcnMgfSkpLnJlcV8wLmRhdGE7ICB2YXIgaW5mbyA9IGpzb24ubWlkdXJsaW5mbzsgaWYgKGluZm8gJiYgaW5mby5sZW5ndGggPiAwKSB7ICAgICB2YXIgdSA9IGluZm9bMF0ucHVybDsgICAgIGlmICh1ICYmIHUgIT09IFwiXCIpIHsgICAgICAgICBsZXQgc2lwID0ganNvbi5zaXA7ICAgICAgICAgaWYgKHNpcCAmJiBzaXAubGVuZ3RoID4gMCkgeyAgICAgICAgICAgICB2YXIganMgPSBzaXBbMF0gKyB1OyAgICAgICAgIH0gICAgIH0gfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtqcyArICcjaXNNdXNpYz10cnVlIyddOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3NpZ24uanMnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3ZcIjogNDc0NzQ3NCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjdFwiOiAyNCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmb3JtYXRcIjogXCJqc29uXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5DaGFyc2V0XCI6IFwidXRmLThcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvdXRDaGFyc2V0XCI6IFwidXRmLThcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub3RpY2VcIjogMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbGF0Zm9ybVwiOiBcInlxcS5qc29uXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmVlZE5ld0NvZGVcIjogMSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1aW5cIjogMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJnX3RrX25ld18yMDIwMDMwM1wiOiA1MzgxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImdfdGtcIjogNTM4MSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZXFfMVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibW9kdWxlXCI6IFwibXVzaWMubXVzaWNoYWxsU29uZy5QbGF5THlyaWNJbmZvXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWV0aG9kXCI6IFwiR2V0UGxheUx5cmljSW5mb1wiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhcmFtXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic29uZ01JRFwiOiBqLmlkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBseXJpYyA9IEpTT04ucGFyc2UocG9zdChidWlsZFVybCgnaHR0cHM6Ly91LnkucXEuY29tL2NnaS1iaW4vbXVzaWNzLmZjZycsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfOiBEYXRlLm5vdygpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ246IHNpZ24oYm9keSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnJlcV8xLmRhdGEubHlyaWM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHJjID0gYmFzZTY0RGVjb2RlKGx5cmljKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8veGlhb2FwaS5jbi9BUEkvbXZfc3EucGhwP249MSZtc2c9JyArIGoudGl0bGUsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtqc29uWzNdIHx8IGpzb25bMl0gfHwganNvblsxXSB8fCBqc29uWzBdXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHlyaWM6IGxyYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRUaXRsZTogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5LiL6L295q2M5puyJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7ICAgICByZXFfMDogeyAgICAgICAgIG1vZHVsZTogXCJ2a2V5LkdldFZrZXlTZXJ2ZXJcIiwgICAgICAgICBtZXRob2Q6IFwiQ2dpR2V0VmtleVwiLCAgICAgICAgIHBhcmFtOiB7ICAgICAgICAgICAgIGd1aWQ6IFwiMFwiLCAgICAgICAgICAgICBwbGF0Zm9ybTogXCIyMFwiLCAgICAgICAgICAgICBmaWxlbmFtZTogW1wiRjAwMFwiK2ouaWQrai5pZCtcIi5mbGFjXCJdLCAgICAgICAgICAgICBzb25nbWlkOiBbai5pZF0gICAgICAgICB9ICAgICB9IH0pOyAgICAgICAgICAgICAgbGV0IGh0bWwgPSBcImh0dHBzOi8vdS55LnFxLmNvbS9jZ2ktYmluL211c2ljdS5mY2dcIjsgIGxldCBoZWFkZXJzID0geyAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsICAgICBDb29raWU6IFwicW1fa2V5c3Q9UV9IX0xfNjNrM05HMjlucnF1OUExUVRWVFpOZ3RFeDFGQk84RU05Wmhha0pmSGVHTlpkYUpBZUFyZl9PYUVmSkpmaXZYUkRodDVheHN1XzFlVl9iM2kxWnB4Nlp3OyB1aW49NTEzNTM2NjQxXCIgfTsgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXF1ZXN0KGh0bWwsIHsgICAgIG1ldGhvZDogXCJQT1NUXCIsICAgICBib2R5OiBkYXRhLCAgICAgaGVhZGVyczogaGVhZGVycyB9KSkucmVxXzAuZGF0YTsgIHZhciBpbmZvID0ganNvbi5taWR1cmxpbmZvOyBpZiAoaW5mbyAmJiBpbmZvLmxlbmd0aCA+IDApIHsgICAgIHZhciB1ID0gaW5mb1swXS5wdXJsOyAgICAgaWYgKHUgJiYgdSAhPT0gXCJcIikgeyAgICAgICAgIGxldCBzaXAgPSBqc29uLnNpcDsgICAgICAgICBpZiAoc2lwICYmIHNpcC5sZW5ndGggPiAwKSB7ICAgICAgICAgICAgIHZhciB1cmwgPSBzaXBbMF0gKyB1OyAgICAgICAgIH0gICAgIH0gfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkb3dubG9hZDovLycgKyB1cmwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6KeC55yLTVYnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cHM6Ly94aWFvYXBpLmNuL0FQSS9tdl9zcS5waHA/bj0xJm1zZz0nICsgai50aXRsZSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMjAwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gW2pzb25bM10gfHwganNvblsyXSB8fCBqc29uWzFdIHx8IGpzb25bMF1dOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8vYXBpLmNlbmd1aWd1aS5jbi9hcGkvanVoZS9hcGkucGhwP3R5cGU9a2dtdiZuPTEmbXNnPScgKyBqLnRpdGxlLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5kYXRhLnVybF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybHM6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgfSwgaWQpICAgICAgICAgICAgICAgICB9LCBnZWRhbikgICAgICAgICAgICAgfSksICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2UsICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfwn5KeIOiOt+WPluatjOWNlScsICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnJywgJ+Kdl++4j+atjOWNleWmguaenOacieaWsOWinu+8jOWImemcgOimgemHjeaWsOiOt+WPllxcblxcblFR6LSm5Y+36I635Y+W5q2M5Y2VJykuaW5wdXQoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8vYXBpLmNlbmd1aWd1aS5jbi9hcGkvbXVzaWMvcXEvdXNlcl9saXN0LnBocD9xcT0nICsgaW5wdXQpKS5teXBsYXlsaXN0Lm1hcChqID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai5uYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBqLnBpYywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGouaWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZWRhbiA9IEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VkYW4gPSBnZWRhbi5jb25jYXQoanNvbik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJywgSlNPTi5zdHJpbmdpZnkoZ2VkYW4pKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7Lmt7vliqAnICAgICAgICAgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ/CflLAg5q2M5Y2V566h55CGJywgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfmrYzljZXnrqHnkIYnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5o+Q5Y+WaWQnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnaW5wdXQnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfor7fovpPlhaXliIbkuqvlkI7lpI3liLbnmoTpk77mjqUnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJC50b1N0cmluZygoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiBcInRvYXN0Oi8v5LiN6IO95Li656m6XCI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0eHQgPSBpbnB1dDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUxID0gdHh0LnNwbGl0KCcmJylbNF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpZCA9IHUxLnNwbGl0KCc9Jyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29weShpZFsxXSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7LlpI3liLYnICsgaWRbMV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+a3u+WKoCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdpbnB1dCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+aYvuekuuWQjeensEDlm77niYfpk77mjqVAUVHpn7PkuZBpZCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkLnRvU3RyaW5nKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIFwidG9hc3Q6Ly/or7fmoLnmja7mj5DnpLrovpPlhaXlhoXlrrlcIjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdlZGFuID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL2ZpbGVzL0ptL2dlZGFuLmpzb24nKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuID0gaW5wdXQuc3BsaXQoJ0AnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBuWzBdLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogblsxXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBuWzJdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlZGFuID0gZ2VkYW4uY29uY2F0KGRhdGEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJywgSlNPTi5zdHJpbmdpZnkoZ2VkYW4pKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5re75YqgJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+atjOWNleWbvueJh+mTvuaOpeWPr+S7peWcqOatjOWNleS6jOe6p+a1t+aKpemVv+aMieWkjeWItu+8jOaJgOS7peWPr+S7peWFiOa3u+WKoOatjOWNleWGjee8lui+kea3u+WKoOatjOWNleWbvueJh++8jOaIluiAheiHquW3semAieS4gOW8oOWbvuS9nOS4uuWwgemdouOAgicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdlZGFuID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL2ZpbGVzL0ptL2dlZGFuLmpzb24nKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VkYW4ubWFwKGogPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gai50aXRsZSArICdAJyArIGouaWNvbiArICdAJyArIGouaWQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGluZGV4ICsgJy4nICsgai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdjYXJkX3BpY18zJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBqLmljb24sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJChbJ+e8lui+kScsICfnp7vkvY0nLCAn5Yig6ZmkJ10sIDMsICfor7fpgInmi6knKS5zZWxlY3QoKGluZGV4LCBpdGVtKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+e8lui+kScpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChpdGVtLCAn5oOz6KaB5pu05o2i55qE5q2M5Y2V5ZCNLOatjOWNlWlkLOWbvueJh+mTvuaOpSAnKS5pbnB1dCgoaW5kZXgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdlZGFuID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL2ZpbGVzL0ptL2dlZGFuLmpzb24nKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuID0gaW5wdXQuc3BsaXQoJ0AnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VkYW5baW5kZXhdID0geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IG5bMF0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBuWzFdLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG5bMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0vZ2VkYW4uanNvbicsIEpTT04uc3RyaW5naWZ5KGdlZGFuKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+abtOaUueaIkOWKn34nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaW5kZXgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09ICfnp7vkvY0nKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJycsICfopoHnp7vliqjliLDlk6rkuKrluo/lj7fliY3pnaIv5ZCO6Z2iJykuaW5wdXQoKGluZGV4KSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBnZWRhbiA9IEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IGdlZGFuW2luZGV4XTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VkYW4uc3BsaWNlKGlucHV0LCAwLCB0ZW1wKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0IDwgaW5kZXgpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlZGFuLnNwbGljZShpbmRleCArIDEsIDEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VkYW4uc3BsaWNlKGluZGV4LCAxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJywgSlNPTi5zdHJpbmdpZnkoZ2VkYW4pKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v56e75L2N5oiQ5YqfficgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpbmRleCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGdlZGFuID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL2ZpbGVzL0ptL2dlZGFuLmpzb24nKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VkYW4uc3BsaWNlKGluZGV4LCAxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJywgSlNPTi5zdHJpbmdpZnkoZ2VkYW4pKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+WIoOmZpOaIkOWKn34nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGluZGV4LCBpdGVtKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+KZu++4jyDmgaLlpI3pu5jorqQnLCAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9nZWRhbi5qc29uJyk7ICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suaBouWkjem7mOiupCcgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgfV0sICAgICAgICAgICAgIH0gICAgICAgICB9LCB7ICAgICAgICAgICAgIHRpdGxlOiAn4oCY4oCY4oCZ4oCZ5bCP5LiDPHNtYWxsPiDmppzljZU8L3NtYWxsPicsICAgICAgICAgICAgIGNvbF90eXBlOiAnaWNvbl8zX3JvdW5kX2ZpbGwnLCAgICAgICAgICAgICBwaWM6ICdoaWtlcjovL2ZpbGVzL0ptL2xtL211c2ljLzg1LnN2ZycsICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7ICAgICAgICAgICAgICAgICBsZXQgZ2VkYW4gPSBbeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAwaXNpWXQyYmsyM2QuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA2MiwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi6aOZ5Y2H5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMk5LVXpSMEl0aDZqLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogMjYsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIueDreatjOamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDE0OUR2ZDJkNkRmTC5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDI3LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLmlrDmrYzmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAwVGk3c0wxQUZUS1EuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA0LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLmtYHooYzmjIfmlbDmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAyREpJaU4xbWZpakEuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA1MiwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi6IW+6K6v6Z+z5LmQ5Lq65Y6f5Yib5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMHpnSm1CNDNzN1g4LmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNjcsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuWQrOatjOivhuabsuamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDFLWjlaZjJTbzdlNS5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDUsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuWGheWcsOamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDAzQUNrbTNycXY0Vi5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDU5LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLpppnmuK/lnLDljLrmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAzcWhPYlgzOW5hanAuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA2MSwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi5Y+w5rm+5Zyw5Yy65qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwNExNWnNaMVhBSVpyLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogMywgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi5qyn576O5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMzRBNjdLM0VGeEwzLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogMTYsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIumfqeWbveamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDJZWWZkZTBaQURKRS5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDE3LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLml6XmnKzmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAxaHk1VVMyd21HbG0uanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiAxMjYsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkpPT1jmnKzlnLDng63mkq3mppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAzVmJJQ1UyOUhiWEsuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiAxMzAsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIummmea4r1RWQuWKsuatjOmHkeamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDRFakZJcjBPUk1sUy5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDEyNywgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi5Y+w5rm+S0tCT1jmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAxdklNY2gyWGdaUEwuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA1OCwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi6K+05ZSx5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMkZaTVVPMjFORW5BLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNTcsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIueUtemfs+amnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDRYNzBCdzB3N1g3bi5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDczLCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLmuLjmiI/pn7PkuZDmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAzaGtOMDAwZVpqTmQuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA3MiwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi5Yqo5ryr6Z+z5LmQ5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwME5GbWlPM1dUNDloLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogMjksICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuW9seinhumHkeabsuamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDMxUExXSTFoYklybi5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDY0LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLnu7zoibrmlrDmrYzmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAwWXo1M1AzYWJDZWMuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA2NSwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi5Zu96aOO54Ot5q2M5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMWJJeFQyMElCbW1vLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogMzYsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkvmrYzph5Hmm7LmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAwOWRZTG80NXpUbWIuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA2MCwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi5oqW6Z+z54Ot5q2M5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMEl5dGM2ME94bFVCLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNjMsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIkRK6Iie5puy5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwM3BEWnl3NFRwczg1LmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogMjgsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIue9kee7nOatjOabsuamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDFETm54VTJzT2psRi5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDEwOCwgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi576O5Zu95YWs5ZGK54mM5qacXCIgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICBcImljb25cIjogXCJodHRwOi8veS5ndGltZy5jbi9tdXNpYy9waG90b19uZXcvVDAwM1I1MDB4NTAwTTAwMDAwMjhSUThXMGdsZDhWLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogMTI5LCAgICAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLpn6nlm71NZWxvbuamnFwiICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgXCJpY29uXCI6IFwiaHR0cDovL3kuZ3RpbWcuY24vbXVzaWMvcGhvdG9fbmV3L1QwMDNSNTAweDUwME0wMDAwMDEyVFF3VDExSnpSay5qcGdcIiwgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDEwNywgICAgICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi6Iux5Zu9VUvmppxcIiAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIFwiaWNvblwiOiBcImh0dHA6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAzUjUwMHg1MDBNMDAwMDAwZXhLeW0xV1JpbXYuanBnXCIsICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiAxMDUsICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcIuaXpeacrOWFrOS/oeamnFwiICAgICAgICAgICAgICAgICB9XTsgICAgICAgICAgICAgICAgIHJldHVybiAkKGdlZGFuLCAyLCAn5bCP5LiD5o6S6KGM5qacJykuc2VsZWN0KChnZWRhbikgPT4geyAgICAgICAgICAgICAgICAgICAgIGxldCBhID0gZ2VkYW4uZmluZEluZGV4KHQgPT4gdC50aXRsZSA9PSBpbnB1dCk7ICAgICAgICAgICAgICAgICAgICAgbGV0IGlkID0gZ2VkYW5bYV0uaWQ7ICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjZnlwYWdlI2ltbWVyc2l2ZVRoZW1lIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKChpZCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ+Wwj+S4g+amnOWNlScpOyAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdoaWtlcjovL2ZpbGVzL0ptL2ZpbGUvc2lnbi5qcycpOyAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVxXzFcIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZTogXCJtdXNpY1RvcGxpc3QuVG9wbGlzdEluZm9TZXJ2ZXJcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR2V0RGV0YWlsXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW06IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b3BJZFwiOiBpZCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvZmZzZXRcIjogKE1ZX1BBR0UgLSAxKSAqIDYwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm51bVwiOiA2MCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwZXJpb2RcIjogXCJcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganMgPSBKU09OLnBhcnNlKHBvc3QoYnVpbGRVcmwoJ2h0dHBzOi8vdS55LnFxLmNvbS9jZ2ktYmluL211c2ljcy5mY2cnLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfOiBEYXRlLm5vdygpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbjogc2lnbihib2R5KSAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSAgICAgICAgICAgICAgICAgICAgICAgICB9KSkucmVxXzEuZGF0YTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBqcy5zb25nSW5mb0xpc3QubWFwKGogPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5nZXI6IGouc2luZ2VyWzBdLm5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxidW06IGouYWxidW0ubmFtZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGouYWxidW0ubWlkLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBqLm1pZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnRybyA9IGpzLmRhdGEuaW50cm8ucmVwbGFjZSgvPGJyXFxzKlxcLz8+L2dpLCAnJyk7ICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNWV9QQUdFID09IDEpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGludHJvLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWNfYmx1cicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ/Cfp7hcXHQnICsganMuZGF0YS50aXRsZVNoYXJlICsgJ1xcblxcbvCfjrxcXHQnICsganMuZGF0YS50b3RhbE51bSArICfpppYnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzoganMuZGF0YS5mcm9udFBpY1VybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24ubWFwKGogPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogai5hbGJ1bSA/IGouc2luZ2VyICsgJyAtLSAnICsgai5hbGJ1bSA6IGouc2luZ2VyICsgJyAtLSAnICsgai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWNfdXJsOiBqLnBpYyArICdAUmVmZXJlcj0nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykubGF6eVJ1bGUoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoeyAgICAgcmVxXzA6IHsgICAgICAgICBtb2R1bGU6IFwidmtleS5HZXRWa2V5U2VydmVyXCIsICAgICAgICAgbWV0aG9kOiBcIkNnaUdldFZrZXlcIiwgICAgICAgICBwYXJhbTogeyAgICAgICAgICAgICBndWlkOiBcIjBcIiwgICAgICAgICAgICAgcGxhdGZvcm06IFwiMjBcIiwgICAgICAgICAgICAgZmlsZW5hbWU6IFtcIkYwMDBcIitqLmlkK2ouaWQrXCIuZmxhY1wiXSwgICAgICAgICAgICAgc29uZ21pZDogW2ouaWRdICAgICAgICAgfSAgICAgfSB9KTsgICAgICAgICAgICAgIGxldCBodG1sID0gXCJodHRwczovL3UueS5xcS5jb20vY2dpLWJpbi9tdXNpY3UuZmNnXCI7ICBsZXQgaGVhZGVycyA9IHsgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLCAgICAgQ29va2llOiBcInFtX2tleXN0PVFfSF9MXzYzazNORzI5bnJxdTlBMVFUVlRaTmd0RXgxRkJPOEVNOVpoYWtKZkhlR05aZGFKQWVBcmZfT2FFZkpKZml2WFJEaHQ1YXhzdV8xZVZfYjNpMVpweDZadzsgdWluPTUxMzUzNjY0MVwiIH07ICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVxdWVzdChodG1sLCB7ICAgICBtZXRob2Q6IFwiUE9TVFwiLCAgICAgYm9keTogZGF0YSwgICAgIGhlYWRlcnM6IGhlYWRlcnMgfSkpLnJlcV8wLmRhdGE7ICB2YXIgaW5mbyA9IGpzb24ubWlkdXJsaW5mbzsgaWYgKGluZm8gJiYgaW5mby5sZW5ndGggPiAwKSB7ICAgICB2YXIgdSA9IGluZm9bMF0ucHVybDsgICAgIGlmICh1ICYmIHUgIT09IFwiXCIpIHsgICAgICAgICBsZXQgc2lwID0ganNvbi5zaXA7ICAgICAgICAgaWYgKHNpcCAmJiBzaXAubGVuZ3RoID4gMCkgeyAgICAgICAgICAgICB2YXIganMgPSBzaXBbMF0gKyB1OyAgICAgICAgIH0gICAgIH0gfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtqcyArICcjaXNNdXNpYz10cnVlIyddOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3NpZ24uanMnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29tbVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3ZcIjogNDc0NzQ3NCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjdFwiOiAyNCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmb3JtYXRcIjogXCJqc29uXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5DaGFyc2V0XCI6IFwidXRmLThcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvdXRDaGFyc2V0XCI6IFwidXRmLThcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJub3RpY2VcIjogMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbGF0Zm9ybVwiOiBcInlxcS5qc29uXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmVlZE5ld0NvZGVcIjogMSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1aW5cIjogMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJnX3RrX25ld18yMDIwMDMwM1wiOiA1MzgxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImdfdGtcIjogNTM4MSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZXFfMVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibW9kdWxlXCI6IFwibXVzaWMubXVzaWNoYWxsU29uZy5QbGF5THlyaWNJbmZvXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWV0aG9kXCI6IFwiR2V0UGxheUx5cmljSW5mb1wiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhcmFtXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic29uZ01JRFwiOiBqLmlkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBseXJpYyA9IEpTT04ucGFyc2UocG9zdChidWlsZFVybCgnaHR0cHM6Ly91LnkucXEuY29tL2NnaS1iaW4vbXVzaWNzLmZjZycsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfOiBEYXRlLm5vdygpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ246IHNpZ24oYm9keSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnJlcV8xLmRhdGEubHlyaWM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHJjID0gYmFzZTY0RGVjb2RlKGx5cmljKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8veGlhb2FwaS5jbi9BUEkvbXZfc3EucGhwP249MSZtc2c9JyArIGoudGl0bGUsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtqc29uWzNdIHx8IGpzb25bMl0gfHwganNvblsxXSB8fCBqc29uWzBdXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHlyaWM6IGxyYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRUaXRsZTogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5LiL6L295q2M5puyJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7ICAgICByZXFfMDogeyAgICAgICAgIG1vZHVsZTogXCJ2a2V5LkdldFZrZXlTZXJ2ZXJcIiwgICAgICAgICBtZXRob2Q6IFwiQ2dpR2V0VmtleVwiLCAgICAgICAgIHBhcmFtOiB7ICAgICAgICAgICAgIGd1aWQ6IFwiMFwiLCAgICAgICAgICAgICBwbGF0Zm9ybTogXCIyMFwiLCAgICAgICAgICAgICBmaWxlbmFtZTogW1wiRjAwMFwiK2ouaWQrai5pZCtcIi5mbGFjXCJdLCAgICAgICAgICAgICBzb25nbWlkOiBbai5pZF0gICAgICAgICB9ICAgICB9IH0pOyAgICAgICAgICAgICAgbGV0IGh0bWwgPSBcImh0dHBzOi8vdS55LnFxLmNvbS9jZ2ktYmluL211c2ljdS5mY2dcIjsgIGxldCBoZWFkZXJzID0geyAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsICAgICBDb29raWU6IFwicW1fa2V5c3Q9UV9IX0xfNjNrM05HMjlucnF1OUExUVRWVFpOZ3RFeDFGQk84RU05Wmhha0pmSGVHTlpkYUpBZUFyZl9PYUVmSkpmaXZYUkRodDVheHN1XzFlVl9iM2kxWnB4Nlp3OyB1aW49NTEzNTM2NjQxXCIgfTsgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXF1ZXN0KGh0bWwsIHsgICAgIG1ldGhvZDogXCJQT1NUXCIsICAgICBib2R5OiBkYXRhLCAgICAgaGVhZGVyczogaGVhZGVycyB9KSkucmVxXzAuZGF0YTsgIHZhciBpbmZvID0ganNvbi5taWR1cmxpbmZvOyBpZiAoaW5mbyAmJiBpbmZvLmxlbmd0aCA+IDApIHsgICAgIHZhciB1ID0gaW5mb1swXS5wdXJsOyAgICAgaWYgKHUgJiYgdSAhPT0gXCJcIikgeyAgICAgICAgIGxldCBzaXAgPSBqc29uLnNpcDsgICAgICAgICBpZiAoc2lwICYmIHNpcC5sZW5ndGggPiAwKSB7ICAgICAgICAgICAgIHZhciB1cmwgPSBzaXBbMF0gKyB1OyAgICAgICAgIH0gICAgIH0gfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnZG93bmxvYWQ6Ly8nICsgdXJsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+ingueci01WJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8veGlhb2FwaS5jbi9BUEkvbXZfc3EucGhwP249MSZtc2c9JyArIGoudGl0bGUsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDIwMDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnVybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IFtqc29uWzNdIHx8IGpzb25bMl0gfHwganNvblsxXSB8fCBqc29uWzBdXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBbSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwczovL2FwaS5jZW5ndWlndWkuY24vYXBpL2p1aGUvYXBpLnBocD90eXBlPWtnbXYmbj0xJm1zZz0nICsgai50aXRsZSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMjAwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkuZGF0YS51cmxdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3ZpZGVvOi8vJyArIHVybCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgfSwgaWQpICAgICAgICAgICAgICAgICB9LCBnZWRhbikgICAgICAgICAgICAgfSksICAgICAgICAgfSk7IC8q572R5piT5o6S6KGM5qac5q2M5Y2VX+W8gOWniyovICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgdGl0bGU6ICfigJjigJjigJnigJnlsI/oirg8c21hbGw+IOamnOWNlTwvc21hbGw+JywgICAgICAgICAgICAgY29sX3R5cGU6ICdpY29uXzNfcm91bmRfZmlsbCcsICAgICAgICAgICAgIHBpYzogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbXVzaWMvNTEuc3ZnJywgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHsgICAgICAgICAgICAgICAgIGxldCBnZWRhbiA9IEpTT04ucGFyc2UocmMoJ2h0dHA6Ly9tdXNpYy4xNjMuY29tL2FwaS90b3BsaXN0JywgMjQpKS5saXN0Lm1hcChsID0+IHsgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbC5uYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBsLmNvdmVySW1nVXJsLCAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbC5pZCAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIHJldHVybiAkKGdlZGFuLCAyLCAn5bCP6Iq45o6S6KGM5qacJykuc2VsZWN0KChnZWRhbikgPT4geyAgICAgICAgICAgICAgICAgICAgIGxldCBhID0gZ2VkYW4uZmluZEluZGV4KHQgPT4gdC50aXRsZSA9PSBpbnB1dCk7ICAgICAgICAgICAgICAgICAgICAgbGV0IGlkID0gZ2VkYW5bYV0uaWQ7ICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjaW1tZXJzaXZlVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKGlkKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgn5bCP6Iq45q2M5Y2VJyk7ICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBodG1sID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwOi8vbXVzaWMuMTYzLmNvbS9hcGkvdjYvcGxheWxpc3QvZGV0YWlsP249MTAwMCZpZD0nICsgaWQsIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlVzZXItQWdlbnRcIjogXCJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXT1c2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwMi4wLjAuMCBTYWZhcmkvNTM3LjM2XCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb29raWVcIjogXCJvcz1wYzsgTVVTSUNfVT0wMDE3Mzk5N0U1N0RDMTYxMTJEMkUxNTc5RjU1NTQ0NDgxMkU1MTMzRjE2QzM0MjEzRDlCQjVFM0VDRUM4MTg4NDVERjhBMzM2QTNCOUQ0OTVFRTE4MkYzMDAxQUZFQUY5RTk3MTU5MUNDRURDNDcxMzg0MkYzMjk2QTFFNzlERkI3ODE3QThDN0JCODE1NEZGMTU0ODM2NDhGMTg0RDBFNzJEN0QyNkE1NjVFNDQ1MDczODA4MjQ5MDJDMjE1MkNDMEJCNURCOUEzNzlFODBGNkYwM0QwRDk4QjI3OTNBMjAzMjMwMzRERTRBMEJCQjQ2NzJENDhGOTM2Mjk2MEVGMjEzNjE1M0QwMkU3REYxNEM5Q0U4NEYxRjY0QzE2RUIzMDdBNUJCQjU4Njg2QzYwOTUwODJBQTQ1MDU4M0U2NEVBQ0QzRTZCNUJFMERGQ0FDQTkxMjVGMDM1MDU3RkUxN0I1QkRBNjFEODlERjVBQkQ3NzkwNkY1RTVEODU4Qzc0REIyRTE3OEEzQjBFNjA5NURENzU1MThENDgyREM5RDYxMDgwQTYxRDlCNzY1RDdFOThFQkUyMzBDRjAxN0NEOTAyMDgzOTJEM0UxMERFOTY0QTY4MTIxQjZDNjZEMDhDOTAyQTk4RUQ3MTEzQUFFNTlEMUU1NTU5QjA3MURFODMxMjZCOEMyOTVDNzgwQ0NENEIwQjRERTM2RTM1QzA5QUE2MzQzNTVBRURFMkY4ODA5OTg3MTkyNzdFNUVGOUM3QjlDQUZGQzkwRTI3OUFBQTJCQUZDQTQ0QzBBODM1MzdENjA5RTJEQUE1RDVENzc0ODQ4Qzk4REQyODcxMTg4OTVDMUMzRDY1NzQ0NjZGOTI2MkRFQ0UwNzI5MkFDMTU3QzFEQjcwQ0I3MDM5NThBN0ZFNTUzNDRFMjczNDIyRTY5XCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnBsYXlsaXN0OyAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IGh0bWwudHJhY2tzLm1hcChqID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaW5nZXIgPSBqLmFyLm1hcChuID0+IG4ubmFtZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqLm5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2VyOiBzaW5nZXIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxidW06IGoudG5zLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogai5hbC5waWNVcmwsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGouaWQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkOiBqLm12ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBodG1sLmRlc2NyaXB0aW9uLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX3ZlcnRpY2FsX3BpY19ibHVyJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfwn6e4XFx0JyArIGh0bWwuY3JlYXRvci5uaWNrbmFtZSArICdcXG5cXG7wn468XFx0JyArIGh0bWwudHJhY2tDb3VudCArICfpppYnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBodG1sLmNvdmVySW1nVXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICBqc29uLm1hcChqID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGouYWxidW0gPyBqLnNpbmdlciArICcgLS0gJyArIGouYWxidW0gOiBqLnNpbmdlciArICcgLS0gJyArIGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljX3VybDogai5waWMgKyAnQFJlZmVyZXI9JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLmxhenlSdWxlKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganMgPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8vd3d3LmhobHFpbG9uZ3podS5jbi9hcGkvZGdfd3l5bXVzaWMucGhwP2JyPTcmbj0xJm51bT0mdHlwZT1qc29uJmlkPScgKyBqLmlkKSkubXVzaWNfdXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganMgPSAoJ2h0dHBzOi8vbXVzaWMuMTYzLmNvbS9zb25nL21lZGlhL291dGVyL3VybD9pZD0nICsgai5pZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IFtqcyArICcjaXNNdXNpYz10cnVlIyddOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxyYyA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cDovL211c2ljLjE2My5jb20vYXBpL3NvbmcvbHlyaWM/b3M9cGMmbHY9LTEma3Y9LTEmdHY9LTEmaWQ9JyArIGouaWQpKS5scmMubHlyaWM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2gge30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybHM6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGx5cmljOiBscmMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0VGl0bGU6IGZhbHNlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+S4i+i9veatjOabsicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8vd3d3LmhobHFpbG9uZ3podS5jbi9hcGkvZGdfd3l5bXVzaWMucGhwP2JyPTcmbj0xJm51bT0mdHlwZT1qc29uJmlkPScgKyBqLmlkKSkubXVzaWNfdXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICgnaHR0cHM6Ly9tdXNpYy4xNjMuY29tL3NvbmcvbWVkaWEvb3V0ZXIvdXJsP2lkPScgKyBqLmlkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkb3dubG9hZDovLycgKyB1cmwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6KeC55yLTVYnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoai52aWQgPT0gJzAnKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8vYXBpLmNlbmd1aWd1aS5jbi9hcGkvanVoZS9hcGkucGhwP3R5cGU9a2dtdiZuPTEmbXNnPScgKyBqLnRpdGxlKSkuZGF0YS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICdodHRwczovL2h1Yi5vbm1pY3Jvc29mdC5jbi9wdWJsaWMvdmlkZW8vbmNtP3Jhdz10cnVlJnZpZD0nICsgai52aWQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndmlkZW86Ly8nICsgdXJsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICAgICAgICAgICAgICB9LCBpZCkgICAgICAgICAgICAgICAgIH0sIGdlZGFuKSAgICAgICAgICAgICB9KSwgICAgICAgICB9KTsgLyrnvZHmmJPmjpLooYzmppzmrYzljZVf57uT5p2fKi8gICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICB0aXRsZTogZ2V0SXRlbSgna3dnZCcsICduZXcnKSA9PSAnbmV3JyA/ICfigJjigJjigJnigJnlsI/ojrQ8c21hbGw+IOacgOaWsDwvc21hbGw+JyA6ICfigJjigJjigJnigJnlsI/ojrQ8c21hbGw+IOacgOeDrTwvc21hbGw+JywgICAgICAgICAgICAgY29sX3R5cGU6ICdpY29uXzNfcm91bmRfZmlsbCcsICAgICAgICAgICAgIHBpYzogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbXVzaWMvODIuc3ZnJywgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHsgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2t3Z2QnLCBnZXRJdGVtKCdrd2dkJywgJ25ldycpID09ICduZXcnID8gJ2hvdCcgOiAnbmV3Jyk7ICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICB0b2FzdCgn5bey5YiH5o2iJyArIChnZXRJdGVtKCdrd2dkJywgJ25ldycpID09ICduZXcnID8gJ+acgOaWsOatjOWNlScgOiAn5pyA54Ot5q2M5Y2VJykpOyAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5JyAgICAgICAgICAgICB9KSwgICAgICAgICB9LCB7ICAgICAgICAgICAgIHRpdGxlOiAn5pCc57SiJywgICAgICAgICAgICAgY29sX3R5cGU6ICdpbnB1dCcsICAgICAgICAgICAgIGRlc2M6ICfwn5GJ8J+PuyDmrYzlkI3jgIHmrYzmiYvjgIHmppzljZXlkI3np7AnLCAgICAgICAgICAgICB1cmw6ICQudG9TdHJpbmcoKCkgPT4geyAvKmlmICghaW5wdXQpIHJldHVybiBcInRvYXN0Oi8v6K+36L6T5YWl5YWz6ZSu6K+N5pCc57SiXCI7Ki8gICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiAnaGlrZXI6Ly9sb2NhbE1lZGlhJzsgICAgICAgICAgICAgICAgIHZhciB0eHQgPSBpbnB1dDsgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ3NzcHRfaW5wdXQnLCB0eHQpOyAvKumfs+S5kOaQnOe0ouW8leaTjl/lvIDlp4sqLyAgICAgICAgICAgICAgICAgcmV0dXJuIFwic2VsZWN0Oi8vXCIgKyBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogW1wi5bCP5LiDXCIsIFwi5bCP6Iq4XCIsIFwi5bCP6I60XCJdLCAgICAgICAgICAgICAgICAgICAgIGF0dGFjaFZpZXc6IHRydWUsICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKHR4dCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+Wwj+S4gycpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I2Z5cGFnZSNpbW1lcnNpdmVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgodHh0KSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCflsI/kuIPmkJzntKInKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwczovL3UueS5xcS5jb20vY2dpLWJpbi9tdXNpY3UuZmNnJywgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21tXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImN0XCI6IDE5LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3ZcIjogMTg0NSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0ZVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXRob2RcIjogXCJEb1NlYXJjaEZvclFRTXVzaWNEZXNrdG9wXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtb2R1bGVcIjogXCJtdXNpYy5zZWFyY2guU2VhcmNoQ2dpU2VydmljZVwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1cIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInF1ZXJ5XCI6IHR4dCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJudW1fcGVyX3BhZ2VcIjogMzAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFnZV9udW1cIjogTVlfUEFHRSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5kYXRlLmRhdGEuYm9keS5zb25nLmxpc3QubWFwKGogPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5nZXI6IGouc2luZ2VyWzBdLm5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IFwiaHR0cHM6Ly95Lmd0aW1nLmNuL211c2ljL3Bob3RvX25ldy9UMDAyUjMwMHgzMDBNMDAwXCIgKyBqLmFsYnVtLm1pZCArIFwiLmpwZ1wiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxidW06IGouYWxidW0ubmFtZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBqLm1pZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNWV9QQUdFID09IDEpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+UjlxcdCcgKyB0eHQsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljX2JsdXInLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ/Cfp7hcXHTlkKzngrnpn7PkuZBcXG5cXG7wn46oXFx05rC46L+c55u45L+h576O5aW955qE5LqL5oOF5Y2z5bCG5Y+R55Sf77yBJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzoganNvblswXS5waWMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24uZm9yRWFjaChqID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogai5hbGJ1bSA/IGouc2luZ2VyICsgJyAtLSAnICsgai5hbGJ1bSA6IGouc2luZ2VyICsgJyAtLSAnICsgai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpY191cmw6IGoucGljICsgJ0BSZWZlcmVyPScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLmxhenlSdWxlKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7ICAgICByZXFfMDogeyAgICAgICAgIG1vZHVsZTogXCJ2a2V5LkdldFZrZXlTZXJ2ZXJcIiwgICAgICAgICBtZXRob2Q6IFwiQ2dpR2V0VmtleVwiLCAgICAgICAgIHBhcmFtOiB7ICAgICAgICAgICAgIGd1aWQ6IFwiMFwiLCAgICAgICAgICAgICBwbGF0Zm9ybTogXCIyMFwiLCAgICAgICAgICAgICBmaWxlbmFtZTogW1wiRjAwMFwiK2ouaWQrai5pZCtcIi5mbGFjXCJdLCAgICAgICAgICAgICBzb25nbWlkOiBbai5pZF0gICAgICAgICB9ICAgICB9IH0pOyAgICAgICAgICAgICAgbGV0IGh0bWwgPSBcImh0dHBzOi8vdS55LnFxLmNvbS9jZ2ktYmluL211c2ljdS5mY2dcIjsgIGxldCBoZWFkZXJzID0geyAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsICAgICBDb29raWU6IFwicW1fa2V5c3Q9UV9IX0xfNjNrM05HMjlucnF1OUExUVRWVFpOZ3RFeDFGQk84RU05Wmhha0pmSGVHTlpkYUpBZUFyZl9PYUVmSkpmaXZYUkRodDVheHN1XzFlVl9iM2kxWnB4Nlp3OyB1aW49NTEzNTM2NjQxXCIgfTsgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXF1ZXN0KGh0bWwsIHsgICAgIG1ldGhvZDogXCJQT1NUXCIsICAgICBib2R5OiBkYXRhLCAgICAgaGVhZGVyczogaGVhZGVycyB9KSkucmVxXzAuZGF0YTsgIHZhciBpbmZvID0ganNvbi5taWR1cmxpbmZvOyBpZiAoaW5mbyAmJiBpbmZvLmxlbmd0aCA+IDApIHsgICAgIHZhciB1ID0gaW5mb1swXS5wdXJsOyAgICAgaWYgKHUgJiYgdSAhPT0gXCJcIikgeyAgICAgICAgIGxldCBzaXAgPSBqc29uLnNpcDsgICAgICAgICBpZiAoc2lwICYmIHNpcC5sZW5ndGggPiAwKSB7ICAgICAgICAgICAgIHZhciBqcyA9IHNpcFswXSArIHU7ICAgICAgICAgfSAgICAgfSB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBbanMgKyAnI2lzTXVzaWM9dHJ1ZSMnXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3NpZ24uanMnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbW1cIjogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3ZcIjogNDc0NzQ3NCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImN0XCI6IDI0LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IFwianNvblwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5DaGFyc2V0XCI6IFwidXRmLThcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm91dENoYXJzZXRcIjogXCJ1dGYtOFwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibm90aWNlXCI6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbGF0Zm9ybVwiOiBcInlxcS5qc29uXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuZWVkTmV3Q29kZVwiOiAxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidWluXCI6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJnX3RrX25ld18yMDIwMDMwM1wiOiA1MzgxLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZ190a1wiOiA1MzgxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJyZXFfMVwiOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtb2R1bGVcIjogXCJtdXNpYy5tdXNpY2hhbGxTb25nLlBsYXlMeXJpY0luZm9cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm1ldGhvZFwiOiBcIkdldFBsYXlMeXJpY0luZm9cIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhcmFtXCI6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzb25nTUlEXCI6IGouaWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbHlyaWMgPSBKU09OLnBhcnNlKHBvc3QoYnVpbGRVcmwoJ2h0dHBzOi8vdS55LnFxLmNvbS9jZ2ktYmluL211c2ljcy5mY2cnLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfOiBEYXRlLm5vdygpLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbjogc2lnbihib2R5KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkucmVxXzEuZGF0YS5seXJpYzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxyYyA9IGJhc2U2NERlY29kZShseXJpYyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwczovL3hpYW9hcGkuY24vQVBJL212X3NxLnBocD9uPTEmbXNnPScgKyBqLnRpdGxlLCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBbanNvblszXSB8fCBqc29uWzJdIHx8IGpzb25bMV0gfHwganNvblswXV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybHM6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHlyaWM6IGxyYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdFRpdGxlOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5LiL6L295q2M5puyJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoeyAgICAgcmVxXzA6IHsgICAgICAgICBtb2R1bGU6IFwidmtleS5HZXRWa2V5U2VydmVyXCIsICAgICAgICAgbWV0aG9kOiBcIkNnaUdldFZrZXlcIiwgICAgICAgICBwYXJhbTogeyAgICAgICAgICAgICBndWlkOiBcIjBcIiwgICAgICAgICAgICAgcGxhdGZvcm06IFwiMjBcIiwgICAgICAgICAgICAgZmlsZW5hbWU6IFtcIkYwMDBcIitqLmlkK2ouaWQrXCIuZmxhY1wiXSwgICAgICAgICAgICAgc29uZ21pZDogW2ouaWRdICAgICAgICAgfSAgICAgfSB9KTsgICAgICAgICAgICAgIGxldCBodG1sID0gXCJodHRwczovL3UueS5xcS5jb20vY2dpLWJpbi9tdXNpY3UuZmNnXCI7ICBsZXQgaGVhZGVycyA9IHsgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLCAgICAgQ29va2llOiBcInFtX2tleXN0PVFfSF9MXzYzazNORzI5bnJxdTlBMVFUVlRaTmd0RXgxRkJPOEVNOVpoYWtKZkhlR05aZGFKQWVBcmZfT2FFZkpKZml2WFJEaHQ1YXhzdV8xZVZfYjNpMVpweDZadzsgdWluPTUxMzUzNjY0MVwiIH07ICB2YXIganNvbiA9IEpTT04ucGFyc2UocmVxdWVzdChodG1sLCB7ICAgICBtZXRob2Q6IFwiUE9TVFwiLCAgICAgYm9keTogZGF0YSwgICAgIGhlYWRlcnM6IGhlYWRlcnMgfSkpLnJlcV8wLmRhdGE7ICB2YXIgaW5mbyA9IGpzb24ubWlkdXJsaW5mbzsgaWYgKGluZm8gJiYgaW5mby5sZW5ndGggPiAwKSB7ICAgICB2YXIgdSA9IGluZm9bMF0ucHVybDsgICAgIGlmICh1ICYmIHUgIT09IFwiXCIpIHsgICAgICAgICBsZXQgc2lwID0ganNvbi5zaXA7ICAgICAgICAgaWYgKHNpcCAmJiBzaXAubGVuZ3RoID4gMCkgeyAgICAgICAgICAgICB2YXIgdXJsID0gc2lwWzBdICsgdTsgICAgICAgICB9ICAgICB9IH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkb3dubG9hZDovLycgKyB1cmwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6KeC55yLTVYnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cHM6Ly94aWFvYXBpLmNuL0FQSS9tdl9zcS5waHA/bj0xJm1zZz0nICsgai50aXRsZSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLnVybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gW2pzb25bM10gfHwganNvblsyXSB8fCBqc29uWzFdIHx8IGpzb25bMF1dOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBbSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwczovL2FwaS5jZW5ndWlndWkuY24vYXBpL2p1aGUvYXBpLnBocD90eXBlPWtnbXYmbj0xJm1zZz0nICsgai50aXRsZSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLmRhdGEudXJsXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHh0KSAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09ICflsI/oirgnKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNpbW1lcnNpdmVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgodHh0KSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCflsI/oirjmkJzntKInKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwOi8vbXVzaWMuMTYzLmNvbS9hcGkvc2VhcmNoL2dldC93ZWI/dHlwZT0xJm9mZnNldD0wJmxpbWl0PTkwJnM9JyArIHR4dCkpLnJlc3VsdC5zb25ncy5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaW5nZXIgPSBqLmFydGlzdHMubWFwKHMgPT4gcy5uYW1lKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqLm5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5nZXI6IHNpbmdlclswXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogJ2h0dHBzOi8vd2FuZ2h1bi50b3AvcXFtdXNpYy93eW11c2ljLnBocD90eXBlPXBpYyZpZD0nICsgai5pZCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsYnVtOiBqLmFsYnVtLm5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogai5pZCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZDogai5tdmlkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfwn5SOXFx0JyArIHR4dCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWNfYmx1cicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn8J+nuFxcdOWQrOeCuemfs+S5kFxcblxcbvCfjqhcXHTmsLjov5znm7jkv6Hnvo7lpb3nmoTkuovmg4XljbPlsIblj5HnlJ/vvIEnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBqc29uWzBdLnBpYywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbi5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpY191cmw6IGoucGljICsgJ0BSZWZlcmVyPScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBqLmFsYnVtID8gai5zaW5nZXIgKyAnIC0tICcgKyBqLmFsYnVtIDogai5zaW5nZXIgKyAnIC0tICcgKyBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5sYXp5UnVsZSgoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqcyA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cHM6Ly93d3cuaGhscWlsb25nemh1LmNuL2FwaS9kZ193eXltdXNpYy5waHA/YnI9NyZuPTEmbnVtPSZ0eXBlPWpzb24maWQ9JyArIGouaWQpKS5tdXNpY191cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganMgPSAoJ2h0dHBzOi8vbXVzaWMuMTYzLmNvbS9zb25nL21lZGlhL291dGVyL3VybD9pZD0nICsgai5pZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBbanMgKyAnI2lzTXVzaWM9dHJ1ZSMnXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHJjID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwOi8vbXVzaWMuMTYzLmNvbS9hcGkvc29uZy9seXJpYz9vcz1wYyZsdj0tMSZrdj0tMSZ0dj0tMSZpZD0nICsgai5pZCkpLmxyYy5seXJpYzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHt9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBseXJpYzogbHJjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0VGl0bGU6IGZhbHNlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkuIvovb3mrYzmm7InLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwczovL3d3dy5oaGxxaWxvbmd6aHUuY24vYXBpL2RnX3d5eW11c2ljLnBocD9icj03Jm49MSZudW09JnR5cGU9anNvbiZpZD0nICsgai5pZCkpLm11c2ljX3VybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gKCdodHRwczovL211c2ljLjE2My5jb20vc29uZy9tZWRpYS9vdXRlci91cmw/aWQ9JyArIGouaWQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkb3dubG9hZDovLycgKyB1cmwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6KeC55yLTVYnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGoudmlkID09ICcwJykgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8vYXBpLmNlbmd1aWd1aS5jbi9hcGkvanVoZS9hcGkucGhwP3R5cGU9a2dtdiZuPTEmbXNnPScgKyBqLnRpdGxlKSkuZGF0YS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnaHR0cHM6Ly9odWIub25taWNyb3NvZnQuY24vcHVibGljL3ZpZGVvL25jbT9yYXc9dHJ1ZSZ2aWQ9JyArIGoudmlkOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd2aWRlbzovLycgKyB1cmwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHh0KSAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjZnlwYWdlI2ltbWVyc2l2ZVRoZW1lIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCh0eHQpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ+Wwj+iOtOaQnOe0oicpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8vc2VhcmNoLmt1d28uY24vci5zP2NsaWVudD1rdCZwbj0nICsgKE1ZX1BBR0UgLSAxKSArICcmcm49MzAmdmlwdmVyPTEmZnQ9bXVzaWMmZW5jb2Rpbmc9dXRmOCZyZm9ybWF0PWpzb24mbW9iaT0xJmFsbD0nICsgdHh0KSkuYWJzbGlzdC5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSAoJ2h0dHA6Ly9pbWcxLmt3Y2RuLmt1d28uY24vc3Rhci9hbGJ1bWNvdmVyLzUwMCcgKyBqLndlYl9hbGJ1bXBpY19zaG9ydC5zcGxpdCgnMTIwJylbMV0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGouU09OR05BTUUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5nZXI6IGouQVJUSVNULCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBpbWcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGJ1bTogai5BTEJVTSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZDogai5EQ19UQVJHRVRJRCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZDogai5tdnBheWluZm8udmlkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfwn5SOXFx0JyArIHR4dCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzoganNvblswXS5waWMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljX2JsdXInLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ/Cfp7hcXHTlkKzngrnpn7PkuZBcXG5cXG7wn46oXFx05rC46L+c55u45L+h576O5aW955qE5LqL5oOF5Y2z5bCG5Y+R55Sf77yBJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbi5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogai5waWMgKyAnQFJlZmVyZXI9JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGouYWxidW0gPyBqLnNpbmdlciArICcgLS0gJyArIGouYWxidW0gOiBqLnNpbmdlciArICcgLS0gJyArIGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLmxhenlSdWxlKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpzID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwczovL3d3dy5oaGxxaWxvbmd6aHUuY24vYXBpL2RnX2t1d29tdXNpYy5waHA/bj0xJnR5cGU9anNvbiZtc2c9JyArIGoudGl0bGUpKS5mbGFjX3VybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqcyA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cHM6Ly9vaWFwaS5uZXQvQVBJL0t1d28vP249MSZicj0xJm1zZz0nICsgai50aXRsZSkpLmRhdGEudXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXJsID0gW2pzICsgJyNpc011c2ljPXRydWUjJ107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxyYyA9IEpTT04ucGFyc2UocmVxdWVzdChcImh0dHBzOi8vbS5rdXdvLmNuL25ld2g1L3NpbmdsZXMvc29uZ2luZm9hbmRscmM/bXVzaWNJZD1cIiArIGoucmlkKSkuZGF0YS5scmNsaXN0Lm1hcChkID0+IHvigIvigIsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzID0gKGQudGltZSAlIDYwKS50b0ZpeGVkKDIpLnBhZFN0YXJ0KDUsICcwJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbSA9ICgoZC50aW1lIC0gcykgLyA2MCkudG9GaXhlZCgwKS5wYWRTdGFydCgyLCAnMCcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbJyArIG0gKyAnOicgKyBzICsgJ10nICsgZC5saW5lTHlyaWPigIsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbignXFxuJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCB7fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybHM6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHlyaWM6IGxyYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdFRpdGxlOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5LiL6L295q2M5puyJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGopID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cHM6Ly93d3cuaGhscWlsb25nemh1LmNuL2FwaS9kZ19rdXdvbXVzaWMucGhwP249MSZ0eXBlPWpzb24mbXNnPScgKyBqLnRpdGxlKSkuZmxhY191cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cHM6Ly9vaWFwaS5uZXQvQVBJL0t1d28vP249MSZicj0xJm1zZz0nICsgai50aXRsZSkpLmRhdGEudXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkb3dubG9hZDovLycgKyB1cmwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6KeC55yLTVYnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGoudmlkID09ICcwJykgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8vYXBpLnN1eWFudy5jbi9hcGkva2dfbXYucGhwP249MSZtc2c9JyArIGoudGl0bGUpKS5kYXRhLnVybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KCdodHRwczovL2FueW1hdGNoLmt1d28uY24vbW9iaS5zP2Y9d2ViJnVzZXI9NmYxNzNjZjlhMmE5ZGE0YyZzb3VyY2U9a3dwbGF5ZXJfYXJfMTAuOC4yLjJfMTM4LmFwayZ0eXBlPWdldF91cmxfYnlfdmlkJnF1YWxpdHk9TVA0SFYmcDJwaWQ9MSZ2aWQ9JyArIGoudmlkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IGh0bWwuc3BsaXQoJz0nKVszXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYiA9IGEuc3BsaXQoJz8nKVswXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gYjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndmlkZW86Ly8nICsgdXJsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGopICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHR4dCkgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgIH0sIHR4dCkgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgIH0pLCAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRJdGVtKCdzc3B0X2lucHV0JywgJycpLCAgICAgICAgICAgICAgICAgb25DaGFuZ2U6ICdzZXRJdGVtKFwic3NwdF9pbnB1dFwiLGlucHV0KScgICAgICAgICAgICAgfSAgICAgICAgIH0pOyAvKumfs+S5kOaQnOe0ouW8leaTjl/nu5PmnZ8qLyAgICAgfSAvKuWbuuWumue/u+mhtTHnu5PmnZ8qLyAvKumFt+aIkemfs+S5kOatjOWNlV/lvIDlp4sqLyAgICAgbGV0IGt3Z2QgPSBnZXRJdGVtKCdrd2dkJywgJ25ldycpOyAgICAgbGV0IGh0bWwgPSAoJ2h0dHA6Ly93YXBpLmt1d28uY24vYXBpL3BjL2NsYXNzaWZ5L3BsYXlsaXN0L2dldFJjbVBsYXlMaXN0P2xvZ2luVWlkPTAmbG9naW5TaWQ9MCZhcHBVaWQ9NzYwMzk1NzYmJnBuPScgKyBNWV9QQUdFICsgJyZybj0zNiZvcmRlcj0nICsga3dnZCk7ICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UocmVxdWVzdChodG1sKSkuZGF0YTsgICAgIGpzb24uZGF0YS5tYXAoZGF0YSA9PiB7ICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgdGl0bGU6IGRhdGEubmFtZSwgICAgICAgICAgICAgY29sX3R5cGU6ICdjYXJkX3BpY18zJywgICAgICAgICAgICAgcGljOiBkYXRhLmltZywgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I2Z5cGFnZSNpbW1lcnNpdmVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoZGF0YSkgPT4geyAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCflsI/ojrTmrYzljZUnKTsgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICBsZXQgaHRtbCA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cHM6Ly9tLmt1d28uY24vbmV3aDVhcHAvd2FwaS9hcGkvd3d3L3BsYXlsaXN0L3BsYXlMaXN0SW5mbz9waWQ9JyArIGRhdGEuaWQgKyAnJnJuPTMwJnVhPSZpcD0mcG49JyArIE1ZX1BBR0UpKS5kYXRhOyAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBodG1sLm11c2ljTGlzdC5tYXAoaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGoubmFtZSwgICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2VyOiBqLmFydGlzdCwgICAgICAgICAgICAgICAgICAgICAgICAgYWxidW06IGouYWxidW0sICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogai5waWMsICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBqLnJpZCwgICAgICAgICAgICAgICAgICAgICAgICAgdmlkOiBqLm12cGF5aW5mby52aWQsICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IGouc29uZ1RpbWVNaW51dGVzICAgICAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBodG1sLm5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWNfYmx1cicsICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogaHRtbC5pbWc3MDAgfHwgaHRtbC51UGljLCAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn8J+nuFxcdCcgKyBodG1sLnVzZXJOYW1lICsgJ1xcblxcbvCfjrxcXHQnICsgZGF0YS50b3RhbCArICfpppYnLCAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JywgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgIGpzb24ubWFwKGogPT4geyAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGouYWxidW0gPyBqLnNpbmdlciArICcgLS0gJyArIGouYWxidW0gOiBqLnNpbmdlciArICcgLS0gJyArIGoudGl0bGUsICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogai5waWMgKyAnQFJlZmVyZXI9JywgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5sYXp5UnVsZSgoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIganMgPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8vd3d3LmhobHFpbG9uZ3podS5jbi9hcGkvZGdfa3V3b211c2ljLnBocD9uPTEmdHlwZT1qc29uJm1zZz0nICsgai50aXRsZSkpLmZsYWNfdXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqcyA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cHM6Ly9vaWFwaS5uZXQvQVBJL0t1d28vP249MSZicj0xJm1zZz0nICsgai50aXRsZSkpLmRhdGEudXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IFtqcyArICcjaXNNdXNpYz10cnVlIyddOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbHJjID0gSlNPTi5wYXJzZShyZXF1ZXN0KFwiaHR0cHM6Ly9tLmt1d28uY24vbmV3aDUvc2luZ2xlcy9zb25naW5mb2FuZGxyYz9tdXNpY0lkPVwiICsgai5pZCkpLmRhdGEubHJjbGlzdC5tYXAoZCA9PiB74oCL4oCLICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzID0gKGQudGltZSAlIDYwKS50b0ZpeGVkKDIpLnBhZFN0YXJ0KDUsICcwJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtID0gKChkLnRpbWUgLSBzKSAvIDYwKS50b0ZpeGVkKDApLnBhZFN0YXJ0KDIsICcwJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnWycgKyBtICsgJzonICsgcyArICddJyArIGQubGluZUx5cmlj4oCLICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuam9pbignXFxuJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHt9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybHM6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBseXJpYzogbHJjICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgICAgICAgICB9LCBqKSwgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRUaXRsZTogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkuIvovb3mrYzmm7InLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChqKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwczovL3d3dy5oaGxxaWxvbmd6aHUuY24vYXBpL2RnX2t1d29tdXNpYy5waHA/bj0xJnR5cGU9anNvbiZtc2c9JyArIGoudGl0bGUpKS5mbGFjX3VybDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cHM6Ly9vaWFwaS5uZXQvQVBJL0t1d28vP249MSZicj0xJm1zZz0nICsgai50aXRsZSkpLmRhdGEudXJsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnZG93bmxvYWQ6Ly8nICsgdXJsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+ingueci01WJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaikgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoai52aWQgPT0gJzAnKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwczovL2FwaS5zdXlhbncuY24vYXBpL2tnX212LnBocD9uPTEmbXNnPScgKyBqLnRpdGxlKSkuZGF0YS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoJ2h0dHBzOi8vYW55bWF0Y2gua3V3by5jbi9tb2JpLnM/Zj13ZWImdXNlcj02ZjE3M2NmOWEyYTlkYTRjJnNvdXJjZT1rd3BsYXllcl9hcl8xMC44LjIuMl8xMzguYXBrJnR5cGU9Z2V0X3VybF9ieV92aWQmcXVhbGl0eT1NUDRIViZwMnBpZD0xJnZpZD0nICsgai52aWQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSBodG1sLnNwbGl0KCc9JylbM107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYiA9IGEuc3BsaXQoJz8nKVswXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndmlkZW86Ly8nICsgdXJsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaikgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLCAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICAgICAgfSwgZGF0YSksICAgICAgICAgfSk7ICAgICB9KTsgLyrphbfmiJHpn7PkuZDmrYzljZVf57uT5p2fKi8gICAgIHNldFJlc3VsdChkKTsgfSnigIsiLCJpY29uIjoiaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzE4LnBuZyIsImRlc2MiOiIiLCJ0eXBlIjoiaWNvbl9yb3VuZF9zbWFsbF80In0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLomY7niZnnm7Tmkq0iLCJ0aXRsZSI6IuiZjueJmSIsInVybCI6IkBqczogJCgnaGlrZXI6Ly9lbXB0eSNmeXBhZ2UjZnVsbFRoZW1lIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCgpID0+IHsgICAgIGxldCBkID0gW107ICAgICBsZXQgZ2lkID0gZ2V0SXRlbSgn6JmO54mZJywgJycpOyAgICAgbGV0IGltZyA9ICdoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvOTMucG5nJzsgICAgIGxldCBmZW5sZWkgPSBbeyAgICAgICAgIHRpdGxlOiBcIuaYn+engFwiLCAgICAgICAgIGljb246IFwiaHR0cHM6Ly9odXlhaW1nLm1zc3RhdGljLmNvbS9jZG5pbWFnZS9nYW1lLzE2NjMtTVMuanBnXCIsICAgICAgICAgaWQ6IFwiMTY2M1wiICAgICB9LCB7ICAgICAgICAgdGl0bGU6IFwi6aKc5YC8XCIsICAgICAgICAgaWNvbjogXCJodHRwczovL2h1eWFpbWcubXNzdGF0aWMuY29tL2NkbmltYWdlL2dhbWUvMjE2OC1NUy5qcGdcIiwgICAgICAgICBpZDogXCIyMTY4XCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLljp/liJtcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vaHV5YWltZy5tc3N0YXRpYy5jb20vY2RuaW1hZ2UvZ2FtZS82ODYxLU1TLmpwZ1wiLCAgICAgICAgIGlkOiBcIjY4NjFcIiAgICAgfSwgeyAgICAgICAgIHRpdGxlOiBcIumfs+S5kFwiLCAgICAgICAgIGljb246IFwiaHR0cHM6Ly9odXlhaW1nLm1zc3RhdGljLmNvbS9jZG5pbWFnZS9nYW1lLzM3OTMtTVMuanBnXCIsICAgICAgICAgaWQ6IFwiMzc5M1wiICAgICB9LCB7ICAgICAgICAgdGl0bGU6IFwi5LiA6LW355yLXCIsICAgICAgICAgaWNvbjogXCJodHRwczovL2h1eWFpbWcubXNzdGF0aWMuY29tL2NkbmltYWdlL2dhbWUvMjEzNS1NUy5qcGdcIiwgICAgICAgICBpZDogXCIyMTM1XCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLkuozmrKHlhYNcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vaHV5YWltZy5tc3N0YXRpYy5jb20vY2RuaW1hZ2UvZ2FtZS8yNjMzLU1TLmpwZ1wiLCAgICAgICAgIGlkOiBcIjI2MzNcIiAgICAgfSwgeyAgICAgICAgIHRpdGxlOiBcIuWoseS5kOWkqeWcsFwiLCAgICAgICAgIGljb246IFwiaHR0cHM6Ly9odXlhaW1nLm1zc3RhdGljLmNvbS9jZG5pbWFnZS9nYW1lLzEwMDAyMi1NUy5qcGdcIiwgICAgICAgICBpZDogXCIxMDAwMjJcIiAgICAgfSwgeyAgICAgICAgIHRpdGxlOiBcIuWQg+WWneeOqeS5kFwiLCAgICAgICAgIGljb246IFwiaHR0cHM6Ly9odXlhaW1nLm1zc3RhdGljLmNvbS9jZG5pbWFnZS9nYW1lLzEwMDA0NC1NUy5qcGdcIiwgICAgICAgICBpZDogXCIxMDAwNDRcIiAgICAgfSwgeyAgICAgICAgIHRpdGxlOiBcIuS6pOWPi1wiLCAgICAgICAgIGljb246IFwiaHR0cHM6Ly9odXlhaW1nLm1zc3RhdGljLmNvbS9jZG5pbWFnZS9nYW1lLzQwNzktTVMuanBnXCIsICAgICAgICAgaWQ6IFwiNDA3OVwiICAgICB9LCB7ICAgICAgICAgdGl0bGU6IFwi5oi35aSWXCIsICAgICAgICAgaWNvbjogXCJodHRwczovL2h1eWFpbWcubXNzdGF0aWMuY29tL2NkbmltYWdlL2dhbWUvMjE2NS1NUy5qcGdcIiwgICAgICAgICBpZDogXCIyMTY1XCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLml4XmuLhcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vaHV5YWltZy5tc3N0YXRpYy5jb20vY2RuaW1hZ2UvZ2FtZS82NzkxLU1TLmpwZ1wiLCAgICAgICAgIGlkOiBcIjY3OTFcIiAgICAgfSwgeyAgICAgICAgIHRpdGxlOiBcIuS9k+iCslwiLCAgICAgICAgIGljb246IFwiaHR0cHM6Ly9odXlhaW1nLm1zc3RhdGljLmNvbS9jZG5pbWFnZS9nYW1lLzIzNTYtTVMuanBnXCIsICAgICAgICAgaWQ6IFwiMjM1NlwiICAgICB9LCB7ICAgICAgICAgdGl0bGU6IFwi56eR5oqAXCIsICAgICAgICAgaWNvbjogXCJodHRwczovL2h1eWFpbWcubXNzdGF0aWMuY29tL2NkbmltYWdlL2dhbWUvMjQwOC1NUy5qcGdcIiwgICAgICAgICBpZDogXCIyNDA4XCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLmtL7lr7lcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vaHV5YWltZy5tc3N0YXRpYy5jb20vY2RuaW1hZ2UvZ2FtZS83Nzg1LU1TLmpwZ1wiLCAgICAgICAgIGlkOiBcIjc3ODVcIiAgICAgfSwgeyAgICAgICAgIHRpdGxlOiBcIuiLsembhOiBlOebn1wiLCAgICAgICAgIGljb246IFwiaHR0cHM6Ly9odXlhaW1nLm1zc3RhdGljLmNvbS9jZG5pbWFnZS9nYW1lLzEtTVMuanBnXCIsICAgICAgICAgaWQ6IFwiMVwiICAgICB9LCB7ICAgICAgICAgdGl0bGU6IFwi546L6ICF6I2j6ICAXCIsICAgICAgICAgaWNvbjogXCJodHRwczovL2h1eWFpbWcubXNzdGF0aWMuY29tL2NkbmltYWdlL2dhbWUvMjMzNi1NUy5qcGdcIiwgICAgICAgICBpZDogXCIyMzM2XCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLlkozlubPnsr7oi7FcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vaHV5YWltZy5tc3N0YXRpYy5jb20vY2RuaW1hZ2UvZ2FtZS8zMjAzLU1TLmpwZ1wiLCAgICAgICAgIGlkOiBcIjMyMDNcIiAgICAgfSwgeyAgICAgICAgIHRpdGxlOiBcIkNG5omL5ri4XCIsICAgICAgICAgaWNvbjogXCJodHRwczovL2h1eWFpbWcubXNzdGF0aWMuY29tL2NkbmltYWdlL2dhbWUvMjQxMy1NUy5qcGdcIiwgICAgICAgICBpZDogXCIyNDEzXCIgICAgIH1dOyAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgIHRpdGxlOiAn6JmO54mZ55u05pKtJywgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLCAgICAgICAgICAgICBkZXNjOiAn5YiH5o2iJywgICAgICAgICAgICAgcGljOiBpbWcsICAgICAgICAgICAgIHVybDogJChmZW5sZWksIDMsICfliIfmjaLliIbnsbsnKS5zZWxlY3QoKGZlbmxlaSkgPT4geyAgICAgICAgICAgICAgICAgbGV0IGkgPSBmZW5sZWkuZmluZEluZGV4KHQgPT4gdC50aXRsZSA9PSBpbnB1dCk7ICAgICAgICAgICAgICAgICBsZXQgdXJsID0gZmVubGVpW2ldLmlkOyAgICAgICAgICAgICAgICAgc2V0SXRlbSgn6JmO54mZJywgdXJsKTsgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eScgICAgICAgICAgICAgfSwgZmVubGVpKSwgICAgICAgICB9LCB7ICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZScsICAgICAgICAgfSwgeyAgICAgICAgICAgICB0aXRsZTogJ+aQnOe0oicsICAgICAgICAgICAgIGNvbF90eXBlOiAnaW5wdXQnLCAgICAgICAgICAgICBkZXNjOiAn6L6T5YWl5L2g5oOz5pCc57Si55qEJywgICAgICAgICAgICAgdXJsOiAkLnRvU3RyaW5nKCgpID0+IHsgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiBcInRvYXN0Oi8v6K+36L6T5YWl5YWz6ZSu6K+N5pCc57SiXCI7ICAgICAgICAgICAgICAgICBsZXQgdHh0ID0gaW5wdXQ7ICAgICAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNmeXBhZ2Ujbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgodHh0KSA9PiB7ICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfmkJzntKInICsgJ+KAnCcgKyB0eHQgKyAn4oCdJyk7ICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vc2VhcmNoLmNkbi5odXlhLmNvbS8/bT1TZWFyY2gmZG89Z2V0U2VhcmNoQ29udGVudCZwbHQ9bSZxPScgKyB0eHQgKyAnJnVpZD0wJmFwcD0xMSZ2PTQmdHlwPS01JnN0YXJ0PScgKyBNWV9QQUdFICsgJyZyb3dzPTInKSk7ICAgICAgICAgICAgICAgICAgICAgbGV0IGogPSBqc29uLnJlc3BvbnNlW1wiM1wiXS5kb2NzLmZvckVhY2goaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IGoucm9vbV9pZDsgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGouZ2FtZV9pbnRyb2R1Y3Rpb24sICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogai5nYW1lTmFtZSArICfigKInICsgai5nYW1lX25pY2ssICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGouZ2FtZV9zY3JlZW5zaG90LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8yJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoaWQpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXJsID0gWyd2aWRlbzovL2h0dHBzOi8vY2Zzcy5jYy9jZG4vaHkvJyArIGlkICsgJy5mbHYnLCAndmlkZW86Ly9odHRwczovL20uaHV5YS5jb20vJyArIGlkLCAndmlkZW86Ly9odHRwczovL2VwZy4xMTIxMTQueHl6L2h1eWEvJyArIGlkXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxzOiB1cmwsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGlkKSwgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICAgICAgfSwgdHh0KSAgICAgICAgICAgICB9KSwgICAgICAgICB9KTsgICAgIH0gICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly93d3cuaHV5YS5jb20vY2FjaGUucGhwP209TGl2ZUxpc3QmZG89Z2V0TGl2ZUxpc3RCeVBhZ2UmdGFnQWxsPTAmcGFnZT0nICsgTVlfUEFHRSArICcmZ2FtZUlkPScgKyBnaWQpKS5kYXRhLmRhdGFzOyAgICAganNvbi5tYXAoZGF0YSA9PiB7ICAgICAgICAgbGV0IGlkID0gZGF0YS5wcm9maWxlUm9vbTsgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICB0aXRsZTogZGF0YS5uaWNrLCAgICAgICAgICAgICBkZXNjOiBkYXRhLmludHJvZHVjdGlvbiwgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8yJywgICAgICAgICAgICAgcGljX3VybDogZGF0YS5zY3JlZW5zaG90LCAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGlkKSA9PiB7ICAgICAgICAgICAgICAgICBsZXQgdXJsID0gWyd2aWRlbzovL2h0dHBzOi8vY2Zzcy5jYy9jZG4vaHkvJyArIGlkICsgJy5mbHYnLCAndmlkZW86Ly9odHRwczovL20uaHV5YS5jb20vJyArIGlkLCAndmlkZW86Ly9odHRwczovL2VwZy4xMTIxMTQueHl6L2h1eWEvJyArIGlkXTsgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgfSwgaWQpLCAgICAgICAgIH0pOyAgICAgfSk7ICAgICBzZXRSZXN1bHQoZCk7IH0pIiwiaWNvbiI6Imhpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8yMjEucG5nIiwiZGVzYyI6IiIsInR5cGUiOiJpY29uX3JvdW5kX3NtYWxsXzQifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6IueUteinhueUteWPsCIsInRpdGxlIjoi55S16KeGIiwidXJsIjoiQGpzOiBsZXQgbGl2ZSA9IFt7ICAgICAnbmFtZSc6ICfwn46XIOeUteinhumikemBkycsICAgICAndXJsJzogJ2hpa2VyOi8vZmlsZXMvSm0vbGl2ZS9saXZlc1Byby5qc29uJyB9LCB7ICAgICAnbmFtZSc6ICfwn5CvIOiZjueJmeW9semZoicsICAgICAndXJsJzogJ2hpa2VyOi8vZmlsZXMvSm0vbGl2ZS9oeXl5Lmpzb24nIH0sIHsgICAgICduYW1lJzogJ/Cfp7Ig5pif6amw55S15b2xJywgICAgICd1cmwnOiAnaGlrZXI6Ly9maWxlcy9KbS9saXZlL3p4Y2R5Lmpzb24nIH0sIHsgICAgICduYW1lJzogJ/Cfk7sg55u05pKt5Lit5Zu9JywgICAgICd1cmwnOiAnaGlrZXI6Ly9maWxlcy9KbS9saXZlL3piemcuanNvbicgfSwgeyAgICAgJ25hbWUnOiAn8J+OmSDnuqLmrYzpn7PkuZAnLCAgICAgJ3VybCc6ICdoaWtlcjovL2ZpbGVzL0ptL2xpdmUvaGd5eS5qc29uJyB9LCB7ICAgICAnbmFtZSc6ICfwn5OhIOeUteWPsOW5v+aSrScsICAgICAndXJsJzogJ2hpa2VyOi8vZmlsZXMvSm0vbGl2ZS9kdGdiLmpzb24nIH0sIHsgICAgICduYW1lJzogJ/CfkZgg6Z+p5Zu95aWz5ZuiJywgICAgICd1cmwnOiAnaGlrZXI6Ly9maWxlcy9KbS9saXZlL2hnbnQuanNvbicgfSwgeyAgICAgJ25hbWUnOiAn8J+SgyDlub/lnLroiJ7ouYgnLCAgICAgJ3VybCc6ICdoaWtlcjovL2ZpbGVzL0ptL2xpdmUvZ2N3ZC5qc29uJyB9LCB7ICAgICAnbmFtZSc6ICfwn5OAIOWKqOaEn+iInuabsicsICAgICAndXJsJzogJ2hpa2VyOi8vZmlsZXMvSm0vbGl2ZS9kZ3dxLmpzb24nIH0sIHsgICAgICduYW1lJzogJ/Cfk7og5oCA5pen5b2x54mHJywgICAgICd1cmwnOiAnaGlrZXI6Ly9maWxlcy9KbS9saXZlL2hqeXAuanNvbicgfV07IGxldCB0ID0gbGl2ZS5tYXAobCA9PiBsLm5hbWUpOyAkKHQsIDIsICfor7fpgInmi6knKS5zZWxlY3QoKGxpdmUpID0+IHsgICAgIGxldCB0eHQgPSBpbnB1dDsgICAgIGxldCB0ID0gbGl2ZS5maW5kSW5kZXgobCA9PiBsLm5hbWUgPT0gdHh0KTsgICAgIGxldCB1ID0gbGl2ZVt0XS51cmw7ICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCh1LCB0eHQpID0+IHsgICAgICAgICBzZXRQYWdlVGl0bGUodHh0KTsgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgIHRyeSB7ICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmZXRjaCh1KSkuZGF0YTsgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgIHRpdGxlOiAn5pCc57SiJywgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnaW5wdXQnLCAgICAgICAgICAgICAgICAgZGVzYzogJ+ivt+i+k+WFpeWFs+mUruivjScsICAgICAgICAgICAgICAgICB1cmw6ICQudG9TdHJpbmcoKGpzb24pID0+IHsgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZWFyY2gobmFtZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ganNvbi5maWx0ZXIoaXRlbSA9PiBpdGVtLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhuYW1lLnRvTG93ZXJDYXNlKCkpKTsgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdHMgPSBzZWFyY2goaW5wdXQpOyAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHsgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHknKS5ydWxlKChyZXN1bHRzKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGltZyA9ICgnaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzE5NS5wbmcnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMuZm9yRWFjaChyID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogci5uYW1lLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2ljb25fMl9yb3VuZCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogaW1nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKHIpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczogci51cmwsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRUaXRsZTogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlc3VsdHMpICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ayoeacieaJvuWIsCcgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICB9LCBqc29uKSAgICAgICAgICAgICB9KTsgICAgICAgICAgICAganNvbi5mb3JFYWNoKGEgPT4geyAgICAgICAgICAgICAgICAgbGV0IHVybCA9ICgnaGlrZXI6Ly9maWxlcy9KbS9saXZlL2R0Z2IuanNvbicpOyAgICAgICAgICAgICAgICAgbGV0IGltZyA9ICgnaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzIyMS5wbmcnKTsgICAgICAgICAgICAgICAgIGxldCBpbWdzID0gKCdoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMjU4LnBuZycpOyAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICB0aXRsZTogYS5uYW1lLCAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnaWNvbl8yX3JvdW5kJywgICAgICAgICAgICAgICAgICAgICBwaWM6IHUgPT0gdXJsID8gaW1ncyA6IGltZywgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGEpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhLnVybCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+S9oOWSi+S4jeaUvumTvuaOpeWYnu+8gSc7ICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gYS51cmw7ICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybHM6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICB9LCBhKSwgICAgICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0VGl0bGU6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgIH0pOyAgICAgICAgIH0gY2F0Y2gge30gICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICB9LCB1LCB0eHQpIH0sIGxpdmUpOyIsImljb24iOiJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMjA1LnBuZyIsImRlc2MiOiIiLCJ0eXBlIjoiaWNvbl9yb3VuZF9zbWFsbF80In0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjIsIm5hbWUiOiLlronljZPlo4HnurhUIiwiY29kZSI6ImxldCB0cnIgPSBbe1xuICAgICd0aXRsZSc6ICfmnIDmlrAnLFxuICAgICdpZCc6ICcnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+e+juWlsycsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZTRkNjEwY2RmNzE0ZDI5NjYwMDAwMDAnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+WKqOa8qycsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZTRkNjEwY2RmNzE0ZDI5NjYwMDAwMDMnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+mjjuaZrycsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZTRkNjEwY2RmNzE0ZDI5NjYwMDAwMDInXG59LCB7XG4gICAgJ3RpdGxlJzogJ+a4uOaIjycsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZTRkNjEwY2RmNzE0ZDI5NjYwMDAwMDcnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+aWh+WtlycsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS81MTA5ZTA0ZTQ4ZDViOTM2NGFlOWFjNDUnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+inhuiniScsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZmI0NzlmNzViYTFjNjU1NjEwMDAwMjcnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+aDheaEnycsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZWYwYTM1YzA1Njk3OTU3NTYwMDAwMDAnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+iuvuiuoScsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZmI0N2ExOTViYTFjNjBjYTUwMDAyMjInXG59LCB7XG4gICAgJ3RpdGxlJzogJ+aYjuaYnycsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS81MTA5ZTA1MjQ4ZDViOTM2OGJiNTU5ZGMnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+eJqeivrScsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZmI0N2E0NjViYTFjNjU1NjEwMDAwMjgnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+eUt+S6uicsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZTRkNjEwY2RmNzE0ZDI5NjYwMDAwMDYnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+acuuaisCcsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZTRkNjEwY2RmNzE0ZDI5NjYwMDAwMDUnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+WfjuW4gicsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZmI0N2EzMDViYTFjNjBjYTUwMDAyMjMnXG59LCB7XG4gICAgJ3RpdGxlJzogJ+WKqOeJqScsXG4gICAgJ2lkJzogJy9jYXRlZ29yeS80ZTRkNjEwY2RmNzE0ZDI5NjYwMDAwMDEnXG59XTtcbmxldCB0aWkgPSBnZXRJdGVtKCd0aWQnLCAnJyk7XG5sZXQgdGlkID0gdHJyLm1hcChpID0+IGkuaWQpO1xubGV0IG5vID0gJyNnYW1lVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5Iyc7XG5sZXQgdXJsID0gJ2h0dHA6Ly9zZXJ2aWNlLnBpY2Fzc28uYWRlc2suY29tL3YxL3ZlcnRpY2FsJyArIHRpaSArICcvdmVydGljYWw/bGltaXQ9MzAmc2tpcD1meXBhZ2VALTFAKjMwQCNhdXRvUGFnZSMnICsgbm87XG5be1xuICAgIHRpdGxlOiAn5aOB57q4JyxcbiAgICBjb2xfdHlwZTogJ2ljb25fcm91bmRfc21hbGxfNCcsXG4gICAgaW1nOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzE2Ny5wbmcnLFxuICAgIHVybDogJCh1cmwpLnJ1bGUoKCkgPT4ge1xuICAgICAgICBsZXQgZCA9IEpTT04ucGFyc2UoZ2V0UmVzQ29kZSgpKS5yZXMudmVydGljYWwubWFwKGh0bWwgPT4gKHtcbiAgICAgICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgICAgIHVybDogaHRtbC5wcmV2aWV3ICsgJyMuanBnJyxcbiAgICAgICAgICAgIGltZzogaHRtbC5wcmV2aWV3LFxuICAgICAgICAgICAgY29sX3R5cGU6ICdwaWNfMV9mdWxsJ1xuICAgICAgICB9KSk7XG4gICAgICAgIHNldFJlc3VsdChkKTtcbiAgICB9KSxcbiAgICBleHRyYToge1xuICAgICAgICBsb25nQ2xpY2s6IFt7XG4gICAgICAgICAgICB0aXRsZTogJ/CflITliIfmjaLliIbnsbsnLFxuICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKHRyciwgdGlkKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG5hbWUgPSB0cnIubWFwKHQgPT4gdC50aXRsZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQobmFtZSwgMywgJ+ivt+mAieaLqScpLnNlbGVjdCgodHJyLCB0aWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpdGxlID0gdHJyLmZpbmRJbmRleCh0ID0+IHQudGl0bGUgPT0gaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdXJsID0gdHJyW3RpdGxlXS5pZDtcbiAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgndGlkJywgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5YiH5o2iJ1xuICAgICAgICAgICAgICAgIH0sIHRyciwgdGlkKVxuICAgICAgICAgICAgfSwgdHJyLCB0aWQpXG4gICAgICAgIH1dXG4gICAgfVxufV07In0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLogZrlkIjnn63op4bpopHop6PmnpAiLCJ0aXRsZSI6Iuino+aekCIsInVybCI6IkBqczogJChbeyAgICAgdGl0bGU6ICfop4bpopHop6PmnpAnLCAgICAgaWNvbjogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vcS8zNS5wbmcnIH0sIHsgICAgIHRpdGxlOiAn5Zu+6ZuG6Kej5p6QJywgICAgIGljb246ICdoaWtlcjovL2ZpbGVzL0ptL2xtL3EvNS5wbmcnIH0sIHsgICAgIHRpdGxlOiAn6Z+z6aKR6Kej5p6QJywgICAgIGljb246ICdoaWtlcjovL2ZpbGVzL0ptL2xtL3EvMTI1LnBuZycgfSwgeyAgICAgdGl0bGU6ICflhajmsJFL5q2MJywgICAgIGljb246ICdoaWtlcjovL2ZpbGVzL0ptL2xtL3EvMjAucG5nJyB9XSwgMiwgJ+ivt+mAieaLqScpLnNlbGVjdCgoKSA9PiB7ICAgICBpZiAoaW5wdXQgPT0gJ+inhumikeino+aekCcpIHsgICAgICAgICByZXR1cm4gJCgne3tjbGlwYm9hcmR9fScsICfmipbpn7Mv5b+r5omL562J6KeG6aKR5YiG5Lqr6ZO+5o6lJykuaW5wdXQoKCkgPT4geyAgICAgICAgICAgICBpZiAoIWlucHV0KSByZXR1cm4gXCJ0b2FzdDovL+ivt+i+k+WFpeWIhuS6q+mTvuaOpVwiOyAgICAgICAgICAgICBsZXQgdXJsID0gaW5wdXQubWF0Y2goLyhodHRwOlxcL1xcL3xodHRwczpcXC9cXC8pKFtcXHc9P1xcLlxcLyZdKykvZyk7ICAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I2dhbWVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgodXJsKSA9PiB7ICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJycpOyAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly92ZGRzLm1heWlzb3NvLmNvbS9hcGkvdjIvMkVERTU3MTI5ODE1NTQ2OUU5NDVBREM5QkU4QkQ4MEMxMDBEMTkvNTMvP3VybD0nICsgdXJsKSkuZGF0YTsgICAgICAgICAgICAgICAgICBsZXQgc3AgPSB7ICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGpzb24udGl0bGUgfHwgXCJcIiwgICAgICAgICAgICAgICAgICAgICB1cmw6IGpzb24udmlkZW8gfHwganNvbi51cmwgfHwganNvbi5kb3duIHx8IFwiXCIsICAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgbGV0IHRpdGxlID0gc3AudGl0bGUucmVwbGFjZSgvWyBdfCN8JnwvZywgJycpOyAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3g1X3dlYnZpZXdfc2luZ2xlJywgICAgICAgICAgICAgICAgICAgICBkZXNjOiAnZmxvYXQmJjY0MCcsICAgICAgICAgICAgICAgICAgICAgdXJsOiBzcC51cmwsICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b1BsYXk6IHRydWUgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLCAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0JywgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+S4i+i9veinhumikScsICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJywgICAgICAgICAgICAgICAgICAgICB1cmw6ICdkb3dubG9hZDovLycgKyBzcC51cmwsICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVRpdGxlOiB0aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgIH0sIHVybCkgICAgICAgICB9KSAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5Zu+6ZuG6Kej5p6QJykgeyAgICAgICAgIHJldHVybiAkKCd7e2NsaXBib2FyZH19JywgJ+aKlumfsy/lv6vmiYvlm77pm4bliIbkuqvpk77mjqUnKS5pbnB1dCgoKSA9PiB7ICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiBcInRvYXN0Oi8v6K+36L6T5YWl5YiG5Lqr6ZO+5o6lXCI7ICAgICAgICAgICAgIGxldCB1cmwgPSBpbnB1dC5tYXRjaCgvKGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcLykoW1xcdz0/XFwuXFwvJl0rKS9nKTsgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjZ2FtZVRoZW1lIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCh1cmwpID0+IHsgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgnJyk7ICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICAgICAgaWYgKC9kb3V5aW4vLnRlc3QodXJsKSkgeyAgICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly92aXAuYXBpaHouY24vYXBpL2Z1bi9kb3V5aW4ucGhwP2lkPTEwMDAxNzI3JmtleT1jM2RkN2NmM2E2ZmMwMzA2YmE2ZDhhODcwZWU1MDBiNCZ1cmw9JyArIHVybCkpOyAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vdmRkcy5tYXlpc29zby5jb20vYXBpL3YyLzJFREU1NzEyOTgxNTU0NjlFOTQ1QURDOUJFOEJEODBDMTAwRDE5LzUzLz91cmw9JyArIHVybCkpLmRhdGE7ICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICBsZXQgdGogPSB7ICAgICAgICAgICAgICAgICAgICAgbXVzaWM6IGpzb24ueXZpZGVvIHx8IGpzb24udXJsIHx8IFwiXCIsICAgICAgICAgICAgICAgICAgICAgcGljOiBqc29uLmltYWdlcyB8fCBcIlwiLCAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd4NV93ZWJ2aWV3X3NpbmdsZScsICAgICAgICAgICAgICAgICAgICAgZGVzYzogJzAnLCAgICAgICAgICAgICAgICAgICAgIHVybDogdGoubXVzaWMsICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b1BsYXk6IHRydWUgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIHRqLnBpYy5tYXAoaW1nID0+IGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdwaWNfMV9mdWxsJywgICAgICAgICAgICAgICAgICAgICBwaWM6IGltZyArICcjLmpwZycsICAgICAgICAgICAgICAgICAgICAgdXJsOiBpbWcgKyAnIy5qcGcnLCAgICAgICAgICAgICAgICAgfSkpOyAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICB9LCB1cmwpICAgICAgICAgfSkgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+mfs+mikeino+aekCcpIHsgICAgICAgICByZXR1cm4gJCgne3tjbGlwYm9hcmR9fScsICfmipbpn7Mv5b+r5omL562J6Z+z6KeG6aKR5YiG5Lqr6ZO+5o6lJykuaW5wdXQoKCkgPT4geyAgICAgICAgICAgICBpZiAoIWlucHV0KSByZXR1cm4gXCJ0b2FzdDovL+ivt+i+k+WFpeWIhuS6q+mTvuaOpVwiOyAgICAgICAgICAgICBsZXQgdXJsID0gaW5wdXQubWF0Y2goLyhodHRwOlxcL1xcL3xodHRwczpcXC9cXC8pKFtcXHc9P1xcLlxcLyZdKykvZyk7ICAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I2dhbWVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgodXJsKSA9PiB7ICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJycpOyAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgIGlmICgva3VhaXNob3UvLnRlc3QodXJsKSkgeyAgICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShmZXRjaChcImh0dHBzOi8vYXBpLnptLmlvLnZuL3YxL3NvY2lhbC9hdXRvbGluaz9hcGlrZXk9dGVsZV90cSZ1cmw9XCIgKyB1cmwpKTsgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKGZldGNoKFwiaHR0cHM6Ly9hcGkudGFuZ2RvdXouY29tL2R5LnBocD9yZXR1cm49anNvbiZsaj1cIiArIHVybCkpOyAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgbGV0IHlwID0geyAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBqc29uLnRpdGxlIHx8IFwiXCIsICAgICAgICAgICAgICAgICAgICAgbXVzaWM6IGpzb24udXJsIHx8IGpzb24ubWVkaWFzLnVybFsxXSB8fCBcIlwiLCAgICAgICAgICAgICAgICAgICAgIHBpYzoganNvbi5jb3ZlciB8fCBqc29uLnRodW1ibmFpbCB8fCBcIlwiLCAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgIGxldCB0aXRsZSA9IHlwLnRpdGxlLnJlcGxhY2UoL1sgXXwjfCZ8L2csICcnKTsgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLCAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncGljXzFfZnVsbCcsICAgICAgICAgICAgICAgICAgICAgcGljOiB5cC5waWMgKyAnQFJlZmVyZXI9JywgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5sYXp5UnVsZSgoeXApID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFg1V2ViVmlldygnJyk7ICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5cC5tdXNpYyArICcjaXNNdXNpYz10cnVlIycgICAgICAgICAgICAgICAgICAgICB9LCB5cCksICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd4NV93ZWJ2aWV3X3NpbmdsZScsICAgICAgICAgICAgICAgICAgICAgZGVzYzogJzAnLCAgICAgICAgICAgICAgICAgICAgIHVybDogeXAubXVzaWMsICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b1BsYXk6IHRydWUgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkuIvovb3pn7PpopEnLCAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsICAgICAgICAgICAgICAgICAgICAgdXJsOiAnZG93bmxvYWQ6Ly8nICsgeXAubXVzaWMsICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVRpdGxlOiB0aXRsZSwgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICAgICAgfSwgdXJsKSAgICAgICAgIH0pICAgICB9IGVsc2UgeyAgICAgICAgIHJldHVybiAkKCd7e2NsaXBib2FyZH19JywgJ+ivt+i+k+WFpeWFqOawkUvmrYzliIbkuqvpk77mjqUnKS5pbnB1dCgoKSA9PiB7ICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiBcInRvYXN0Oi8v6K+36L6T5YWl5YiG5Lqr6ZO+5o6lXCI7ICAgICAgICAgICAgIGxldCB1cmwgPSBpbnB1dDsgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjZ2FtZVRoZW1lIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCh1cmwpID0+IHsgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgnJyk7ICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICAgICAgbGV0IGh0bWwgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS51b21nLmNvbS9hcGkvZ2V0LmtnP3Nvbmd1cmw9JyArIHVybCkpOyAgICAgICAgICAgICAgICAgaWYgKGh0bWwuY29kZSA9PSAnMScpIHsgICAgICAgICAgICAgICAgICAgICB2YXIganNvbiA9IGh0bWwuZGF0YTsgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgbGV0IGFwaSA9IEpTT04ucGFyc2UocG9zdChcImh0dHBzOi8veGhsOTcuY24vdG9vbHMvcW1rZy9rZ19jaGFuZ2JhLnBocFwiLCB7ICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUmVmZXJlclwiOiBcImh0dHBzOi8veGhsOTcuY24vdG9vbHMvcW1rZy9cIiAgICAgICAgICAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVybFwiOiB1cmwgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgIH0pKTsgICAgICAgICAgICAgICAgICAgICBpZiAoYXBpLmNvZGUgPT0gJzEnKSB7ICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0gYXBpOyAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhhcGkpOyAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgbGV0IGtnID0geyAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGpzb24uc29uZ19uYW1lIHx8IGpzb24udGl0bGUsICAgICAgICAgICAgICAgICAgICAgYXV0aG9yOiBqc29uLmtnX25pY2sgfHwgXCJcIiwgICAgICAgICAgICAgICAgICAgICBwaWM6IGpzb24ucGljIHx8IFwiXCIsICAgICAgICAgICAgICAgICAgICAgdXJsOiBqc29uLnBsYXl1cmwgfHwganNvbi51cmwsICAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICB0aXRsZToga2cubmFtZSArICfigKInICsga2cuYXV0aG9yLCAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncGljXzFfZnVsbCcsICAgICAgICAgICAgICAgICAgICAgcGljOiBrZy5waWMgKyAnQFJlZmVyZXI9JywgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5sYXp5UnVsZSgoa2cpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IFtrZy51cmwgKyAnI2lzTXVzaWM9dHJ1ZSMnXTvigIsgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFg1V2ViVmlldygnJyk7ICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmxzOiB1cmwsICAgICAgICAgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgICAgICAgfSwga2cpLCAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAneDVfd2Vidmlld19zaW5nbGUnLCAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICcwJywgICAgICAgICAgICAgICAgICAgICB1cmw6IGtnLnVybCwgICAgICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvUGxheTogdHJ1ZSAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+S4i+i9vemfs+mikScsICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJywgICAgICAgICAgICAgICAgICAgICB1cmw6ICdkb3dubG9hZDovLycgKyBrZy51cmwsICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVRpdGxlOiBrZy5uYW1lICsgJ+KAoicgKyBrZy5hdXRob3IsICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgIH0sIHVybCkgICAgICAgICB9KSAgICAgfSB9KSIsImljb24iOiJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMjUzLnBuZyIsImRlc2MiOiIiLCJ0eXBlIjoiaWNvbl9yb3VuZF9zbWFsbF80In0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLmipbpsbznm7Tmkq0iLCJ0aXRsZSI6IuaKlumxvCIsInVybCI6IkBqczogJCgnaGlrZXI6Ly9lbXB0eSNmeXBhZ2UjZnVsbFRoZW1lIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCgpID0+IHsgICAgIGxldCBkID0gW107ICAgICBsZXQgZmxfaWQgPSBnZXRJdGVtKCfmlpfpsbwnLCAnJyk7ICAgICBsZXQgaW1nID0gJ2h0dHBzOi8vYXBpLnhpbmFjLm5ldC9pY29uLz91cmw9aHR0cHM6Ly9tLmRvdXl1LmNvbSc7ICAgICBsZXQgZmVubGVpID0gW3sgICAgICAgICB0aXRsZTogXCLljp/liJtJUFwiLCAgICAgICAgIGljb246IFwiaHR0cHM6Ly9jcy1vcC5kb3V5dWNkbi5jbi9keWNhdHIvMWM0ZjliM2UwZGIyNDYxMDg3OWZhZjFlMDQxZDUzZDUuanBnXCIsICAgICAgICAgaWQ6IFwiaXBcIiAgICAgfSwgeyAgICAgICAgIHRpdGxlOiBcIuS4gOi1t+eci1wiLCAgICAgICAgIGljb246IFwiaHR0cHM6Ly9zdGEtb3AuZG91eXVjZG4uY24vZHljYXRyL2FmNjllZWIxOTQzYTk0NDRkMjM2MmE3ZjA2YzIyZGM2LnBuZ1wiLCAgICAgICAgIGlkOiBcInlxa1wiICAgICB9LCB7ICAgICAgICAgdGl0bGU6IFwi5LqM5qyh5YWDXCIsICAgICAgICAgaWNvbjogXCJodHRwczovL3N0YS1vcC5kb3V5dWNkbi5jbi9keWNhdHIvMzQ2ZjQ4ZjQzNzk0NmNkMmVmMmEwMGJiMDMxNGU2ZjMuanBnXCIsICAgICAgICAgaWQ6IFwiZWN5XCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLpn7PkuZBcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vY3Mtb3AuZG91eXVjZG4uY24vZHljYXRyL2dhbWVfY2F0ZS9mZTIxMTkzYzcyNTM3YmFkM2NkOTkxN2Q2N2U0YjAyYy5wbmdcIiwgICAgICAgICBpZDogXCJtdXNpY1wiICAgICB9LCB7ICAgICAgICAgdGl0bGU6IFwi5oi35aSWXCIsICAgICAgICAgaWNvbjogXCJodHRwczovL2NzLW9wLmRvdXl1Y2RuLmNuL2R5Y2F0ci9nYW1lX2NhdGUvYjI0YjcxNmIyYTEzYmMwYjc1ODYzMmU1YjIwZTA4MzUucG5nXCIsICAgICAgICAgaWQ6IFwiSFdcIiAgICAgfSwgeyAgICAgICAgIHRpdGxlOiBcIue+jumjn1wiLCAgICAgICAgIGljb246IFwiaHR0cHM6Ly9zdGEtb3AuZG91eXVjZG4uY24vZHljYXRyLzY5NTk0OWE1MWQyMjU0OGEyNjg4MDIzNWNiNmY5YzEzLnBuZ1wiLCAgICAgICAgIGlkOiBcIm1zXCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLlv4PliqjmtL7lr7lcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vc3RhLW9wLmRvdXl1Y2RuLmNuL2R5Y2F0ci8xOWRhMWYyNGJjNTRjM2ZjNWI1ZGNhOWFmMzk5M2E4NS5wbmdcIiwgICAgICAgICBpZDogXCJ4ZHBkXCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLpn7PpgYfmgYvkurpcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vc3RhLW9wLmRvdXl1Y2RuLmNuL2R5Y2F0ci9mYTU2YTI3MTMwNWJmZDg2NDIxZGVlODg1MWUwYTA3Ny5wbmdcIiwgICAgICAgICBpZDogXCJ5aW55dVwiICAgICB9LCB7ICAgICAgICAgdGl0bGU6IFwi5pif56eAXCIsICAgICAgICAgaWNvbjogXCJodHRwczovL3N0YS1vcC5kb3V5dWNkbi5jbi9keWNhdHIvMTMwNTRiZDUwNjhiMDhkNzcxNmEyMDdlZmU2ZTRiMDEucG5nXCIsICAgICAgICAgaWQ6IFwieGluZ3hpdVwiICAgICB9LCB7ICAgICAgICAgdGl0bGU6IFwi5b+D5YqoRk1cIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vc3RhLW9wLmRvdXl1Y2RuLmNuL2R5Y2F0ci9kOGNkNGE5YmZkMDQyNWNiYTE3MzlhNjM5MmM0NjIxNS5wbmdcIiwgICAgICAgICBpZDogXCJkdHhzXCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLlqLHkuZDmjqjojZBcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vc3RhLW9wLmRvdXl1Y2RuLmNuL2R5Y2F0ci82ZGVmNzIzNWRjNWUwMTA1NzVlYzMyNTQ0MjVjYzJiZi5wbmdcIiwgICAgICAgICBpZDogXCJ5bHRqXCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLpopzlgLxcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vY3Mtb3AuZG91eXVjZG4uY24vZHljYXRyL2dhbWVfY2F0ZS9kMTU0NmNmZDNmN2Y5ODU3MTlmODk0NDk2ZjJhN2IyZS5wbmdcIiwgICAgICAgICBpZDogXCJ5elwiICAgICB9LCB7ICAgICAgICAgdGl0bGU6IFwi5o6o6I2QXCIsICAgICAgICAgaWNvbjogXCJodHRwczovL2NzLW9wLmRvdXl1Y2RuLmNuL2R5Y2F0ci9nYW1lX2NhdGUvMDZkOGQ0ZDc5ZWQyZjQ0NGRkNmQ4OGUzNzRjN2NkNDIucG5nXCIsICAgICAgICAgaWQ6IFwiXCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLnjovogIXojaPogIBcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vc3RhLW9wLmRvdXl1Y2RuLmNuL2R5Y2F0ci8wZDk2ZDYzZWU5NTUwNzI4YWNkODk5ZDY2ZWVlMzYyNS5wbmdcIiwgICAgICAgICBpZDogXCJ3enJ5XCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLlkozlubPnsr7oi7FcIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vc3RhLW9wLmRvdXl1Y2RuLmNuL2R5Y2F0ci84NTYwZWI0Y2JhOWU3MzRhMGQ3NDA4ZjZhOWI5ZWZiOC5wbmdcIiwgICAgICAgICBpZDogXCJocGp5XCIgICAgIH0sIHsgICAgICAgICB0aXRsZTogXCLoi7Hpm4TogZTnm59cIiwgICAgICAgICBpY29uOiBcImh0dHBzOi8vc3RhLW9wLmRvdXl1Y2RuLmNuL2R5Y2F0ci8xZGUxZWE1MjE1YjUxM2NmNGY1YjNjMzI2ZjVmOTY1Ny5wbmdcIiwgICAgICAgICBpZDogXCJMT0xcIiAgICAgfSwgeyAgICAgICAgIHRpdGxlOiBcIueDremXqOa4uOaIj1wiLCAgICAgICAgIGljb246IFwiaHR0cHM6Ly9zdGEtb3AuZG91eXVjZG4uY24vZHljYXRyL2U4ZDJmMmRlY2EyMDI1ZWMxMjg3NGQ2ZDY3OTI0ODlhLnBuZ1wiLCAgICAgICAgIGlkOiBcInJteXhcIiAgICAgfSwgeyAgICAgICAgIHRpdGxlOiBcIkNG5omL5ri4XCIsICAgICAgICAgaWNvbjogXCJodHRwczovL3N0YS1vcC5kb3V5dWNkbi5jbi9keWNhdHIvZmIyNmNjNzViNWQ4Nzc3ZjI4N2IyY2EwOTQ3ZjVkZjYucG5nXCIsICAgICAgICAgaWQ6IFwiQ0ZTWVwiICAgICB9XTsgICAgIGlmIChNWV9QQUdFID09IDEpIHsgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICB0aXRsZTogJ+aWl+mxvOebtOaSrScsICAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJywgICAgICAgICAgICAgZGVzYzogJ+WIh+aNoicsICAgICAgICAgICAgIHBpYzogaW1nLCAgICAgICAgICAgICB1cmw6ICQoZmVubGVpLCAzLCAn6K+36YCJ5oupJykuc2VsZWN0KChmZW5sZWkpID0+IHsgICAgICAgICAgICAgICAgIGxldCBpID0gZmVubGVpLmZpbmRJbmRleCh0ID0+IHQudGl0bGUgPT0gaW5wdXQpOyAgICAgICAgICAgICAgICAgbGV0IHVybCA9IGZlbmxlaVtpXS5pZDsgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ+aWl+mxvCcsIHVybCk7ICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknICAgICAgICAgICAgIH0sIGZlbmxlaSksICAgICAgICAgfSwgeyAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnLCAgICAgICAgIH0sIHsgICAgICAgICAgICAgdGl0bGU6ICfmkJzntKInLCAgICAgICAgICAgICBjb2xfdHlwZTogJ2lucHV0JywgICAgICAgICAgICAgZGVzYzogJ+i+k+WFpeS9oOaDs+aQnOe0oueahCcsICAgICAgICAgICAgIHVybDogJC50b1N0cmluZygoKSA9PiB7ICAgICAgICAgICAgICAgICBpZiAoIWlucHV0KSByZXR1cm4gJ3RvYXN0Oi8v6K+36L6T5YWl5YWz6ZSu6K+N5pCc57SiJzsgICAgICAgICAgICAgICAgIGxldCB0eHQgPSBpbnB1dDsgICAgICAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I2Z5cGFnZSNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCh0eHQpID0+IHsgICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ+aQnOe0oicgKyAn4oCcJyArIHR4dCArICfigJ0nKTsgICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly93d3cuZG91eXUuY29tL2phcGkvc2VhcmNoL2FwaS9zZWFyY2hTaG93P2t3PScgKyB0eHQgKyAnJnBhZ2U9JyArIE1ZX1BBR0UgKyAnJnBhZ2VTaXplPTIwJykpLmRhdGE7ICAgICAgICAgICAgICAgICAgICAgbGV0IGpzID0ganNvbi5yZWxhdGVTaG93LmZvckVhY2goaiA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpZCA9IGoucmlkOyAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogai5uaWNrTmFtZSArICfwn5S5JyArIGouaG90LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGouY2F0ZU5hbWUgKyAn4oCiJyArIGoucm9vbU5hbWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGoucm9vbVNyYywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGlkKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGEgPSAnaHR0cDovL3p6eTc4OS54eXovZG91eXUxLnBocD9pZD0nICsgaWQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGIgPSAnaHR0cDovL21hb21hby5rYW5kaWFudHYuY24vZG91eXUxLnBocD9pZD0nICsgaWQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IFsndmlkZW86Ly8nICsgYSwgJ3ZpZGVvOi8vJyArIGJdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybHM6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaWQpLCAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICB9LCB0eHQpICAgICAgICAgICAgIH0pLCAgICAgICAgIH0pOyAgICAgfSAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL20uZG91eXUuY29tL2FwaS9yb29tL2xpc3Q/bGltaXQ9MjAmcGFnZT0nICsgTVlfUEFHRSArICcmdHlwZT0nICsgZmxfaWQpKS5kYXRhOyAgICAganNvbi5saXN0Lm1hcChkYXRhID0+IHsgICAgICAgICBsZXQgaWQgPSBkYXRhLnJpZDsgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICB0aXRsZTogZGF0YS5yb29tTmFtZSwgICAgICAgICAgICAgZGVzYzogZGF0YS5uaWNrbmFtZSArICfwn5S5JyArIGRhdGEuaG4sICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMicsICAgICAgICAgICAgIHBpY191cmw6IGRhdGEucm9vbVNyYywgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChpZCkgPT4geyAgICAgICAgICAgICAgICAgbGV0IGEgPSAnaHR0cDovL3p6eTc4OS54eXovZG91eXUxLnBocD9pZD0nICsgaWQ7ICAgICAgICAgICAgICAgICBsZXQgYiA9ICdodHRwOi8vbWFvbWFvLmthbmRpYW50di5jbi9kb3V5dTEucGhwP2lkPScgKyBpZDsgICAgICAgICAgICAgICAgIGxldCB1cmwgPSBbJ3ZpZGVvOi8vJyArIGEsICd2aWRlbzovLycgKyBiXTsgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgfSwgaWQpLCAgICAgICAgIH0pOyAgICAgfSk7ICAgICBzZXRSZXN1bHQoZCk7IH0pIiwiaWNvbiI6Imhpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8yNjMucG5nIiwiZGVzYyI6IiIsInR5cGUiOiJpY29uX3JvdW5kX3NtYWxsXzQifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6IuS4gOS4quWbvuaWhyIsInRpdGxlIjoi5Zu+5paHIiwidXJsIjoiQGpzOiAkKFt7ICAgICB0aXRsZTogJ+S7iuaXpeeDreamnCcsICAgICBpY29uOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzEwLnBuZycgfSwgeyAgICAgdGl0bGU6ICfnjKvnnLznlLXlvbEnLCAgICAgaWNvbjogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8xNzEucG5nJyB9LCB7ICAgICB0aXRsZTogJ+enkuaHguaWsOmXuycsICAgICBpY29uOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzEucG5nJyB9LCB7ICAgICB0aXRsZTogJ+aXpeW4uOiBiuWkqScsICAgICBpY29uOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzI1LnBuZycgfSwgeyAgICAgdGl0bGU6ICfkuIDkuKrlm77mlocnLCAgICAgaWNvbjogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS80OC5wbmcnIH0sIHsgICAgIHRpdGxlOiAn5byA55y86KeG6aKRJywgICAgIGljb246ICdoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMTYxLnBuZycgfSwgeyAgICAgdGl0bGU6ICfljoblj7Lku4rlpKknLCAgICAgaWNvbjogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8zMDMucG5nJyB9LCB7ICAgICB0aXRsZTogJ+e7hOS7tuWxleekuicsICAgICBpY29uOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzIxMy5wbmcnIH1dLCAyLCAn6K+36YCJ5oupJykuc2VsZWN0KCgpID0+IHsgICAgIGlmIChpbnB1dCA9PSAn5LuK5pel54Ot5qacJykgeyAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I2Z1bGxUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7ICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgIGxldCB1cmwgPSBcImh0dHBzOi8vcmViYW5nLnRvZGF5L1wiOyAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFwieDVfd2Vidmlld19zaW5nbGVcIiwgICAgICAgICAgICAgICAgIHVybDogdXJsLCAgICAgICAgICAgICAgICAgZGVzYzogXCJmbG9hdCYmMTAwJVwiLCAgICAgICAgICAgICAgICAgdGl0bGU6IFwiXCIsICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgIGNhbkJhY2s6IHRydWUsICAgICAgICAgICAgICAgICAgICAgc2hvd1Byb2dyZXNzOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICB1cmxJbnRlcmNlcHRvcjogJC50b1N0cmluZygobXkpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LnN0YXJ0c1dpdGgobXkpKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQudG9TdHJpbmcoKHVybCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnlfYnJpZGdlX2FwcC5vcGVuKEpTT04uc3RyaW5naWZ5KHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLor6bmg4VcIiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaGlrZXI6Ly9lbXB0eVwiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmRSdWxlOiBcImpzOlwiICsgJCQkLnRvU3RyaW5nKCh1KSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqcyA9ICQudG9TdHJpbmcoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQudGl0bGUgJiYgZG9jdW1lbnQudGl0bGUubGVuZ3RoKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByID0gJCQkKCkubGF6eVJ1bGUoKHQpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSh0KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZG9jdW1lbnQudGl0bGUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmeV9icmlkZ2VfYXBwLnBhcnNlTGF6eVJ1bGUocik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ5X2JyaWRnZV9hcHAubG9nKGUudG9TdHJpbmcoKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoW3sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcIng1X3dlYnZpZXdfc2luZ2xlXCIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbkJhY2s6IHRydWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1Byb2dyZXNzOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczoganMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBcIjEwMCUmJmZsb2F0XCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHVybCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpbnB1dCkgICAgICAgICAgICAgICAgICAgICB9LCB1cmwpICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgfSkgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+eMq+ecvOeUteW9sScpIHsgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNmeXBhZ2Ujbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjI2Z1bGxUaGVtZSMnKS5ydWxlKCgpID0+IHsgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfnjKvnnLznlLXlvbEnKTsgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgbGV0IG15X2xpc3QgPSBnZXRJdGVtKCdtYW95YW4nLCAnbW92aWVPbkluZm9MaXN0Jyk7ICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShmYygnaHR0cHM6Ly9tLm1hb3lhbi5jb20vYWpheC8nICsgbXlfbGlzdCArICc/Y2k9JnRva2VuPSZsaW1pdD0wJywgMTIpKS5tb3ZpZUlkczsgICAgICAgICAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+eMq+ecvOeUteW9sScsICAgICAgICAgICAgICAgICAgICAgZGVzYzogZ2V0SXRlbSgnbWFveWFuJywgJ21vdmllT25JbmZvTGlzdCcpID09ICdtb3ZpZU9uSW5mb0xpc3QnID8gJ+ato+WcqOeDreaYoCcgOiAn5Y2z5bCG5LiK5pigJywgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2F2YXRhcicsICAgICAgICAgICAgICAgICAgICAgcGljOiAnaHR0cHM6Ly9mYXZpY29uLnFxc3V1LmNuL2h0dHBzOi8vbS5tYW95YW4uY29tLycsICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgnbWFveWFuJywgZ2V0SXRlbSgnbWFveWFuJywgJ21vdmllT25JbmZvTGlzdCcpID09ICdtb3ZpZU9uSW5mb0xpc3QnID8gJ2NvbWluZ0xpc3QnIDogJ21vdmllT25JbmZvTGlzdCcpOyAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0KCflt7LliIfmjaInICsgKGdldEl0ZW0oJ21hb3lhbicsICdtb3ZpZU9uSW5mb0xpc3QnKSA9PSAnbW92aWVPbkluZm9MaXN0JyA/ICfmraPlnKjng63mmKAnIDogJ+WNs+WwhuS4iuaYoCcpKTsgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5JyAgICAgICAgICAgICAgICAgICAgIH0pLCAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZScsICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgfSAgICAgICAgICAgICBsZXQgbiA9IE1ZX1BBR0U7ICAgICAgICAgICAgIGlmIChNWV9QQUdFID09IDEpIHsgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ganNvbi5zbGljZSgwLCA2KTsgICAgICAgICAgICAgfSBlbHNlIGlmIChNWV9QQUdFID0+IDIpIHsgICAgICAgICAgICAgICAgIHZhciBkYXRhID0ganNvbi5zbGljZShuICogNiAtIDYsIG4gKiA2KTsgICAgICAgICAgICAgfSAgICAgICAgICAgICBkYXRhLm1hcChqID0+IHsgICAgICAgICAgICAgICAgIGxldCBqcyA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vbS5tYW95YW4uY29tL2FqYXgvZGV0YWlsbW92aWU/bW92aWVJZD0nICsgaikpOyAgICAgICAgICAgICAgICAgbGV0IHhxID0ganMuZGV0YWlsTW92aWU7ICAgICAgICAgICAgICAgICBsZXQgZGVzYyA9ICh4cS5jYXQgKyAnXFxuJyArIHhxLnN0YXIgKyAnXFxuJyArIHhxLnB1YkRlc2MpLnJlcGxhY2UoL3VuZGVmaW5lZC9nLCAnJyk7ICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB4cS5ubSArICdcXG5cXG7wn5S5JyArIHhxLmRpciwgICAgICAgICAgICAgICAgICAgICBkZXNjOiBkZXNjLCAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWMnLCAgICAgICAgICAgICAgICAgICAgIHBpY191cmw6IHhxLmltZyA/IHhxLmltZyA6IHhxLnZpZGVvSW1nLCAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMjZnVsbFRoZW1lIycpLnJ1bGUoKHhxKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSh4cS5ubSk7ICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogeHEubm0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5Zu+54mHJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogeHEuaW1nID8geHEuaW1nIDogeHEudmlkZW9JbWcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjI2dhbWVUaGVtZSMnKS5ydWxlKCh4cSkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4cS5waG90b3MgPT0gbnVsbCkgcmV0dXJuICd0b2FzdDovL+acqOacieWbvueJh+WTpuOAgic7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4cS5waG90b3MubWFwKGltZyA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3BpY18xX2Z1bGwnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBpbWcgKyAnIy5qcGcnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpbWcgKyAnIy5qcGcnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB4cSksICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYmlnX2JsYW5rX2Jsb2NrJywgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3g1X3dlYnZpZXdfc2luZ2xlJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICdsaXN0JiYyMDAnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB4cS52aWRlb3VybCA/IHhxLnZkIDogJycsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9QbGF5OiB0cnVlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dQcm9ncmVzczogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdiaWdfYmxhbmtfYmxvY2snLCAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2JpZ19ibGFua19ibG9jaycsICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHN0b3JhZ2UwLmdldEl0ZW0oJ21hb3lhbl9zZWFyY2gnLCAnW1wi6Z2S6LGGXCIsIFwi6IGa5b2xXCIsIFwi6aOO5b2xXCIsIFwi5LqR55uY5ZCbLueugFwiXScpOyAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LmZvckVhY2goZnVuY3Rpb24obCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfNCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9zZWFyY2g/cnVsZT0nICsgbCArICcmcz0nICsgeHEubm0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ0NsaWNrOiBbeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfmm7TmlLnmkJzntKInLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGxpc3QpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChsaXN0LCAn5oOz6KaB5pu05pS555qE5pCc57Si5bCP56iL5bqP5ZCN56ewJykuaW5wdXQoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlMC5zZXRJdGVtKCdtYW95YW5fc2VhcmNoJywgaW5wdXQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBsaXN0KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgbGlzdCksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5oGi5aSN6buY6K6kJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oJ21hb3lhbl9zZWFyY2gnLCBpbnB1dCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYmlnX2JsYW5rX2Jsb2NrJywgICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lX2JsYW5rJywgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogeHEudmlkZW9OYW1lID8geHEudmlkZW9OYW1lICsgJ1xcblxcbicgKyB4cS5kcmEgOiB4cS5kcmEsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xvbmdfdGV4dCcsICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgfSwgeHEpLCAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgfSkgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+enkuaHguaWsOmXuycpIHsgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCgpID0+IHsgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfnp5Lmh4LmlrDpl7snKTsgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoZmMoJ2h0dHA6Ly9leGNlcnB0LnJ1YmFvby5jb20vdG9vbG1hbi9nZXRNaW5pTmV3cycsIDgpKS5kYXRhOyAgICAgICAgICAgICAgICAgbGV0IHl5ID0gJ2h0dHBzOi8veXVhbnhpYXBpLmNuL2FwaS92b2ljZS8/cGVyPTAmcGl0PS01JnNwZD01LjUmdGV4dD3njrDlnKjkuLrmgqjmkq3miqXmlrDpl7snICsganNvbi5uZXdzOyAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3g1X3dlYnZpZXdfc2luZ2xlJywgICAgICAgICAgICAgICAgICAgICBkZXNjOiAnMCYmZmxvYXQnLCAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncGljXzFfY2FyZCcsICAgICAgICAgICAgICAgICAgICAgaW1nOiBqc29uLmhlYWRfaW1hZ2UsICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfml6XmnJ/vvJonICsganNvbi5kYXRlLCAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoeXkpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFg1V2ViVmlldyh5eSk7ICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eScgICAgICAgICAgICAgICAgICAgICB9LCB5eSkgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICB0aXRsZToganNvbi53ZWl5dSwgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsICAgICAgICAgICAgICAgICAgICAgdXJsOiAnY29weTovLycgKyBqc29uLndlaXl1LCAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICBqc29uLm5ld3MubWFwKGl0ZW0gPT4geyAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbG9uZ190ZXh0JywgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0sICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0U2l6ZTogJzE3JyAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJyAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgIH0gY2F0Y2gge30gICAgICAgICB9KSAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5pel5bi46IGK5aSpJykgeyAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I2dhbWVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7ICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgn5pel5bi46IGK5aSp5a6kJyk7ICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3g1X3dlYnZpZXdfc2luZ2xlJywgICAgICAgICAgICAgICAgIGRlc2M6ICdmbG9hdCYmMTAwJScsICAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL25pY2hpam91LmNuLycsICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgIGNhbkJhY2s6IHRydWUsICAgICAgICAgICAgICAgICAgICAgYXV0b1BsYXk6IHRydWUsICAgICAgICAgICAgICAgICAgICAgc2hvd1Byb2dyZXNzOiBmYWxzZSwgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgfSk7ICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICB9KSAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5LiA5Liq5Zu+5paHJykgeyAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I2Z1bGxUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7ICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3g1X3dlYnZpZXdfc2luZ2xlJywgICAgICAgICAgICAgICAgIGRlc2M6ICdmbG9hdCYmMTAwJScsICAgICAgICAgICAgICAgICB1cmw6ICdodHRwOi8vbS53dWZhemh1Y2UuY29tL29uZScsICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgIGNhbkJhY2s6IHRydWUsICAgICAgICAgICAgICAgICAgICAgc2hvd1Byb2dyZXNzOiBmYWxzZSwgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgfSk7ICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICB9KSAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5byA55y86KeG6aKRJykgeyAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I2Z5cGFnZSNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCgpID0+IHsgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCflvIDnnLzop4bpopEnKTsgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgIGZ1bmN0aW9uIGpzb24odXJsKSB7ICAgICAgICAgICAgICAgICB0cnkgeyAgICAgICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShmZXRjaCh1cmwpKTsgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGpzb24uaXRlbUxpc3Q7ICAgICAgICAgICAgICAgICB9IGNhdGNoIHt9ICAgICAgICAgICAgICAgICBpdGVtLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7ICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PSBcInZpZGVvXCIpIHsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGltZyA9IGl0ZW0uZGF0YS5jb3Zlci5mZWVkLnJlcGxhY2UoJ2FsaS1hbGktJywgJ2FsaS0nKS5zcGxpdCgnPycpWzBdOyAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0uZGF0YS50aXRsZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWNfdXJsOiBpbWcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICd2aWRlbzovLycgKyBpdGVtLmRhdGEucGxheVVybCwgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgcHV0VmFyKCduJywganNvbi5uZXh0UGFnZVVybCk7ICAgICAgICAgICAgIH07ICAgICAgICAgICAgIGlmIChNWV9QQUdFID09IDEpIHsgICAgICAgICAgICAgICAgIGpzb24oJ2h0dHA6Ly9iYW9iYWIua2FpeWFuYXBwLmNvbS9hcGkvdjQvdGFicy9zZWxlY3RlZCcpOyAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgbmV4dHAgPSBnZXRWYXIoJ24nKTsgICAgICAgICAgICAgICAgIGpzb24obmV4dHApOyAgICAgICAgICAgICB9ICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICB9KSAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5Y6G5Y+y5LuK5aSpJykgeyAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I2ltbWVyc2l2ZVRoZW1lIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCgpID0+IHsgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfljoblj7LkuIrnmoTku4rlpKknKTsgICAgICAgICAgICAgdHJ5IHsgICAgICAgICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShmYygnaHR0cHM6Ly9xcWx5a20uY24vYXBpL2hpc3RvcnkvZ2V0P2tleT03OVI4VzAyNGZ3RWhQYXFia2NjcHhMYUxpbScsIDgpKTsgICAgICAgICAgICAgfSBjYXRjaCB7fSAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICBsZXQgaW1nID0gJ2h0dHBzOi8vcXFseWttLmNuL2FwaS9iaW5nL2dldD9rZXk9NzlSOFcwMjRmd0VoUGFxYmtjY3B4TGFMaW0mdHlwZT1yYW5kJyArICcjJyArIERhdGUubm93KCkgKyAnIy5qcGcnOyAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgdGl0bGU6ICflv4XpobvorqTnnJ/lr7nlvoXljoblj7Lkuovlrp4s5Lul5q2j6KeG5ZCs5q2j6Z2i5ZCR5pyq5p2l44CCJywgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWNfYmx1cicsICAgICAgICAgICAgICAgICBkZXNjOiAn5Y6G5Y+y5piv5LiA6Z2i5rC45LiN6KSq6Imy55qE6ZWc5a2Q77yM5a6D5bGV546w552A5Lq657G75paH5piO55qE6L+b56iL77yM5Lmf6K6w5b2V552A5Lq657G755qE572q5oG25LiO5oKy5Ymn44CCJyArIGpzb24uZGF0ZSwgICAgICAgICAgICAgICAgIHBpYzogaW1nLCAgICAgICAgICAgICAgICAgdXJsOiBpbWcsICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICBqc29uLmRhdGEubWFwKHUgPT4gZC5wdXNoKHsgICAgICAgICAgICAgICAgIHRpdGxlOiB1LnllYXIgKyAn5bm0OiAnICsgdS50aXRsZSwgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJywgICAgICAgICAgICAgICAgIGRlc2M6ICfngrnlh7vmn6XnnIvkurrnianor6bmg4UnLCAgICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I2Z1bGxUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnknKS5ydWxlKCh1KSA9PiB7ICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3g1X3dlYnZpZXdfc2luZ2xlJywgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ2Zsb2F0JiYxMDAlJywgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1LnVybCwgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbkJhY2s6IHRydWUsICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93UHJvZ3Jlc3M6IGZhbHNlLCAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICAgICAgfSwgdSksICAgICAgICAgICAgIH0pKTsgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgIH0pICAgICB9IGVsc2UgeyAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKCkgPT4geyAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ+e7hOS7tuWxleekuicpOyAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICBsZXQgaW1nID0gJ2hpa2VyOi8vaW1hZ2VzL2hvbWVfYmcnOyAgICAgICAgICAgICBsZXQgYmFzZUVsZW1lbnRzID0gWyd0ZXh0XzEnLCAndGV4dF9jZW50ZXJfMScsICd0ZXh0XzInLCAndGV4dF8zJywgJ3RleHRfNCcsICd0ZXh0XzUnLCAnZmxleF9idXR0b24nLCAnc2Nyb2xsX2J1dHRvbiddOyAgICAgICAgICAgICBsZXQgcGljRWxlbWVudHMgPSBbJ3BpY18xX2Z1bGwnLCAncGljXzMnLCAncGljXzNfc3F1YXJlJ107ICAgICAgICAgICAgIGxldCBpY29uRWxlbWVudHMgPSBbJ3RleHRfaWNvbicsICdhdmF0YXInLCAnaWNvbl8xX3NlYXJjaCcsICdtb3ZpZV8xJywgJ21vdmllXzFfbGVmdF9waWMnLCAnbW92aWVfMV92ZXJ0aWNhbF9waWMnLCAnbW92aWVfMV92ZXJ0aWNhbF9waWNfYmx1cicsICdtb3ZpZV8yJywgJ21vdmllXzMnLCAnbW92aWVfM19tYXJxdWVlJywgJ3BpY18xJywgJ3BpY18xX2NhcmQnLCAncGljXzInLCAncGljXzJfY2FyZCcsICdpY29uXzInLCAnaWNvbl8yX3JvdW5kJywgJ2ljb25fc21hbGxfMycsICdpY29uXzNfcm91bmRfZmlsbCcsICdpY29uXzQnLCAnaWNvbl80X2NhcmQnLCAnaWNvbl9zbWFsbF80JywgJ2ljb25fcm91bmRfNCcsICdpY29uX3JvdW5kX3NtYWxsXzQnLCAnaWNvbl81JywgJ2NhcmRfcGljXzJfMicsICdjYXJkX3BpY18yXzJfbGVmdCcsICdjYXJkX3BpY18zJywgJ2NhcmRfcGljXzNfY2VudGVyJ107ICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICB0aXRsZTogJ2lucHV0JywgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnaW5wdXQnLCAgICAgICAgICAgICAgICAgZGVzYzogJ+ivtOaYju+8mueCueWHu+WNs+WkjeWItuagt+W8jyEnLCAgICAgICAgICAgICAgICAgdXJsOiAkLnRvU3RyaW5nKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2NvcHk6Ly9pbnB1dCcgICAgICAgICAgICAgICAgIH0pLCAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgYmFzZUVsZW1lbnRzLmZvckVhY2godyA9PiBkLnB1c2goeyAgICAgICAgICAgICAgICAgdGl0bGU6IHcsICAgICAgICAgICAgICAgICBjb2xfdHlwZTogdywgICAgICAgICAgICAgICAgIHVybDogJ2NvcHk6Ly8nICsgdywgICAgICAgICAgICAgfSkpOyAgICAgICAgICAgICBwaWNFbGVtZW50cy5mb3JFYWNoKHAgPT4geyAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICB0aXRsZTogcCwgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsICAgICAgICAgICAgICAgICAgICAgdXJsOiAnY29weTovLycgKyBwLCAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBwLCAgICAgICAgICAgICAgICAgICAgIHBpYzogaW1nLCAgICAgICAgICAgICAgICAgICAgIHVybDogJ2NvcHk6Ly8nICsgcCwgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgaWNvbkVsZW1lbnRzLmZvckVhY2goaSA9PiB7ICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpLCAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBpLCAgICAgICAgICAgICAgICAgICAgIHBpYzogaW1nLCAgICAgICAgICAgICAgICAgICAgIHVybDogJ2NvcHk6Ly8nICsgaSwgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgIHRpdGxlOiAnY2FyZF9waWNfMScsICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzEnLCAgICAgICAgICAgICAgICAgZGVzYzogJzAnLCAgICAgICAgICAgICAgICAgcGljOiBpbWcsICAgICAgICAgICAgICAgICB1cmw6ICdjb3B5Oi8vY2FyZF9waWNfMScsICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgIHRpdGxlOiAnY2FyZF9waWNfMicsICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzInLCAgICAgICAgICAgICAgICAgZGVzYzogJzAnLCAgICAgICAgICAgICAgICAgcGljOiBpbWcsICAgICAgICAgICAgICAgICB1cmw6ICdjb3B5Oi8vY2FyZF9waWNfMicsICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgIHRpdGxlOiAneDVfd2Vidmlld19zaW5nbGUnLCAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLCAgICAgICAgICAgICAgICAgdXJsOiAnY29weTovL3g1X3dlYnZpZXdfc2luZ2xlJywgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgdGl0bGU6ICdsb25nX3RleHQnLCAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzInLCAgICAgICAgICAgICAgICAgdXJsOiAnY29weTovL2xvbmdfdGV4dCcsICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgIHRpdGxlOiAncmljaF90ZXh0JywgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8yJywgICAgICAgICAgICAgICAgIHVybDogJ2NvcHk6Ly9yaWNoX3RleHQnLCAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICB0aXRsZTogJ2xpbmUnLCAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsICAgICAgICAgICAgICAgICB1cmw6ICdjb3B5Oi8vbGluZScsICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZScsICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgIHRpdGxlOiAnbGluZV9ibGFuaycsICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJywgICAgICAgICAgICAgICAgIHVybDogJ2NvcHk6Ly9saW5lX2JsYW5rJywgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lX2JsYW5rJywgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgdGl0bGU6ICdibGFua19ibG9jaycsICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJywgICAgICAgICAgICAgICAgIHVybDogJ2NvcHk6Ly9ibGFua19ibG9jaycsICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snLCAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICB0aXRsZTogJ2JpZ19ibGFua19ibG9jaycsICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJywgICAgICAgICAgICAgICAgIHVybDogJ2NvcHk6Ly9iaWdfYmxhbmtfYmxvY2snLCAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2JpZ19ibGFua19ibG9jaycsICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgIHRpdGxlOiAnYmlnX2JpZ19ibGFua19ibG9jaycsICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJywgICAgICAgICAgICAgICAgIHVybDogJ2NvcHk6Ly9iaWdfYmlnX2JsYW5rX2Jsb2NrJywgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdiaWdfYmlnX2JsYW5rX2Jsb2NrJywgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICB9KSAgICAgfSB9KSIsImljb24iOiJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMjEzLnBuZyIsImRlc2MiOiIiLCJ0eXBlIjoiaWNvbl9yb3VuZF9zbWFsbF80In1dLCJmb2xkX3N0YXR1cyI6dHJ1ZSwicGF0dGVybiI6M30seyJuYW1lIjoi5aix5LmQ5Lmm562+57uEIiwibWFyayI6IuW8gOWFsyIsImxpc3QiOlt7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6IuWTlOWTqeiInui5iOinhumikSIsInRpdGxlIjoi5ZOU5ZOpIiwidXJsIjoiQGpzOiAkKCdoaWtlcjovL2VtcHR5I2Z5cGFnZSNmdWxsVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKCkgPT4geyAgICAgc2V0UGFnZVRpdGxlKCdC56uZ6Iie6LmIJyk7ICAgICBsZXQgZCA9IFtdOyAgICAgbGV0IHJpZCA9IGdldEl0ZW0oJ3JpZCcsICcxOTknKTsgICAgIGlmIChNWV9QQUdFID09IDEpIHsgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICB0aXRsZTogJ+WTlOWTqeiInui5iCcsICAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJywgICAgICAgICAgICAgZGVzYzogJ+WIh+aNoicsICAgICAgICAgICAgIHBpYzogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8zMzYucG5nJywgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHsgICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gW3sgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAn5pel5bi4JywgICAgICAgICAgICAgICAgICAgICAncmlkJzogJzIxJyAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICfpn7PkuZAnLCAgICAgICAgICAgICAgICAgICAgICdyaWQnOiAnMjgnICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogJ+eOsOWcuicsICAgICAgICAgICAgICAgICAgICAgJ3JpZCc6ICcyOScgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiAn5a6F6IieJywgICAgICAgICAgICAgICAgICAgICAncmlkJzogJzIwJyAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICfooZfoiJ4nLCAgICAgICAgICAgICAgICAgICAgICdyaWQnOiAnMTk4JyAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICfmmI7mmJ8nLCAgICAgICAgICAgICAgICAgICAgICdyaWQnOiAnMTk5JyAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICflm73po44nLCAgICAgICAgICAgICAgICAgICAgICdyaWQnOiAnMjAwJyAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICfnvZHnuqInLCAgICAgICAgICAgICAgICAgICAgICdyaWQnOiAnMjU1JyAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6ICfnu7zlkIgnLCAgICAgICAgICAgICAgICAgICAgICdyaWQnOiAnMTU0JyAgICAgICAgICAgICAgICAgfV07ICAgICAgICAgICAgICAgICBsZXQgdGl0bGUgPSBsaXN0Lm1hcChpID0+IGkudGl0bGUpOyAgICAgICAgICAgICAgICAgcmV0dXJuICQodGl0bGUsIDMsICfor7fpgInmi6nkuIDkuKrliIbnsbsnKS5zZWxlY3QoKGxpc3QpID0+IHsgICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IGxpc3QuZmluZEluZGV4KGkgPT4gaS50aXRsZSA9PSBpbnB1dCk7ICAgICAgICAgICAgICAgICAgICAgbGV0IGlkID0gbGlzdFt1XS5yaWQ7ICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgncmlkJywgaWQpOyAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5YiH5o2iJyAgICAgICAgICAgICAgICAgfSwgbGlzdCkgICAgICAgICAgICAgfSksICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7ICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfovpPlhaVDb29raWVfc2Vzc2RhdGEnLCAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJpbGkgPSBnZXRJdGVtKCdiaWxpX2lucHV0JywgJycpOyAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChiaWxpLCAnQ29va2ll5Lit55qEc2Vzc2RhdGFcXG7ovpPlhaXlkI7miY3lj6/op4LnnIvpq5jmuIXop4bpopEnKS5pbnB1dCgoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0KSByZXR1cm4gXCJ0b2FzdDovL+S4jeiDveS4uuepulwiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR4dCA9IGlucHV0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgnQ29va2llX3Nlc3NkYXRhJywgdHh0KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2JpbGlfaW5wdXQnLCB0eHQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+WPr+S7peingueci+mrmOa4heinhumikeWVpicgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICAgfV0sICAgICAgICAgICAgIH0gICAgICAgICB9LCB7ICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZScsICAgICAgICAgfSk7ICAgICB9ICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vYXBpLmJpbGliaWxJLmNvbS94L3dlYi1pbnRlcmZhY2UvbmV3bGlzdD90eXBlPTAmcG49JyArIE1ZX1BBR0UgKyAnJnBzPTEwMCZqc29ucD1qc29ucCZyaWQ9JyArIHJpZCkpLmRhdGE7ICAgICBqc29uLmFyY2hpdmVzLm1hcChodG1sID0+IHsgICAgICAgICBsZXQgYnZpZCA9IGh0bWwuYnZpZDsgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICB0aXRsZTogaHRtbC50aXRsZSwgICAgICAgICAgICAgZGVzYzogaHRtbC50bmFtZSwgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8zX21hcnF1ZWUnLCAgICAgICAgICAgICBwaWNfdXJsOiBodG1sLnBpYyArICdAUmVmZXJlcj0nLCAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykubGF6eVJ1bGUoKGJ2aWQpID0+IHsgICAgICAgICAgICAgICAgIGxldCB1cmwgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5wZWFya3RydWUuY24vYXBpL2JpbGliaWxpL3BhcnNlLnBocD9idmlkPScgKyBidmlkICsgJyZzZXNzZGF0YT0nICsgZ2V0SXRlbSgnQ29va2llX3Nlc3NkYXRhJykpKS5kYXRhLnZpZGVvcy5tYXAoZGF0YSA9PiBkYXRhLnZpZGVvdXJsKTsgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7ICAgICAgICAgICAgICAgICAgICAgdXJsczogdXJsLCAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgfSwgYnZpZCksICAgICAgICAgfSk7ICAgICB9KTsgICAgIHNldFJlc3VsdChkKTsgfSkiLCJpY29uIjoiaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzMzNi5wbmciLCJkZXNjIjoiIiwidHlwZSI6Imljb25fcm91bmRfc21hbGxfNCJ9LHsic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi5LyR6Zey5ri45oiPIiwidGl0bGUiOiLmuLjmiI8iLCJ1cmwiOiJAanM6ICQoW3sgICAgIHRpdGxlOiAn5ri45L6g5ri45oiPJywgICAgIGljb246ICdoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvNTkucG5nJyB9LCB7ICAgICB0aXRsZTogJ+eyvumAiea4uOaIjycsICAgICBpY29uOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzMwMC5wbmcnIH0sIHsgICAgIHRpdGxlOiAn6KGX5py65ri45oiPJywgICAgIGljb246ICdoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMTU3LnBuZycgfV0sIDIsICfor7fpgInmi6knKS5zZWxlY3QoKCkgPT4ge+KAiyAgICAgaWYgKGlucHV0ID09ICfmuLjkvqDmuLjmiI8nKSB74oCLICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjZnlwYWdlI2Z1bGxUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7ICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgnJyk7ICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgIGxldCBpZCA9IGdldEl0ZW0oJ+a4uOS+oCcsICc0Jyk7ICAgICAgICAgICAgIHZhciBodG1sID0gKCdodHRwczovL3UuYWxpMjEzLm5ldCcpOyAgICAgICAgICAgICBsZXQgcGFnZSA9IE1ZX1BBR0U7ICAgICAgICAgICAgIGxldCB1cmwgPSByZXF1ZXN0KGh0bWwgKyAnL2xpc3QvJyArIHBhZ2UgKyAnXycgKyBpZCArICcuaHRtbCcpOzsgICAgICAgICAgICAgbGV0IGxpc3QgPSBwZGZhKHVybCwgJ2JvZHkmJi5jb2wtbGctMy5jb2wtbWQtNC5jb2wtc20tNi5jb2wteHMtMTInKTsgICAgICAgICAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+a4uOS+oOWwj+a4uOaIjycsICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLCAgICAgICAgICAgICAgICAgICAgIHBpYzogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8zMDAucG5nJywgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5YiH5o2iJywgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IFt7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICflpbPlrankuJPpopgnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogJzEnICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJ+S9k+iCsuernuaKgCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWQnOiAnMicgICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAn5qih5ouf5ri45oiPJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZCc6ICczJyAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICfkvJHpl7Lnm4rmmbonLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogJzQnICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJ+inkuiJsuaJrua8lCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWQnOiAnNScgICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAn6aOe6KGM5bCE5Ye7JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZCc6ICc2JyAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICfmo4vniYzlqLHkuZAnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogJzcnICAgICAgICAgICAgICAgICAgICAgICAgIH1dOyAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IGxpc3QubWFwKGxpc3QgPT4gbGlzdC5uYW1lKTsgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQobmFtZSwgMywgJ+ivt+mAieaLqeWIhuexuycpLnNlbGVjdCgobGlzdCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSBsaXN0LmZpbmRJbmRleChsaXN0ID0+IGxpc3QubmFtZSA9PSBpbnB1dCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXJsID0gbGlzdFtpXS5pZDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ+a4uOS+oCcsIHVybCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5YiH5o2iJyAgICAgICAgICAgICAgICAgICAgICAgICB9LCBsaXN0KSAgICAgICAgICAgICAgICAgICAgIH0pLCAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5pCc57SiJywgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn6L6T5YWl5L2g5oOz5pCc57Si55qEJywgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2lucHV0JywgICAgICAgICAgICAgICAgICAgICB1cmw6ICQudG9TdHJpbmcoKGh0bWwpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIFwidG9hc3Q6Ly/or7fovpPlhaXlhbPplK7or43mkJzntKJcIjsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR4dCA9IGlucHV0OyAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnaHR0cHM6Ly91LmFsaTIxMy5uZXQvc2VhcmNoLnBocD9rZXl3b3JkPScgKyB0eHQgKyAnI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKGh0bWwpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHBkZmEoZ2V0UmVzQ29kZSgpLCAnLmNvbnRhaW5lci1mbHVpZCwxJiYuY29sLWxnLTMnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gbGlzdCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlID0gcGRmaChsaXN0W2ldLCAnLnRyYW5zZm9ybWJhcmxpbmsmJlRleHQnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjID0gcGRmaChsaXN0W2ldLCAnLnRyYW5zZm9ybWJhcmhpdHMmJlRleHQnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWMgPSBwZGZoKGxpc3RbaV0sICdpbWcmJnNyYycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHBkZmgobGlzdFtpXSwgJy50cmFuc2Zvcm1iYXJsaW5rJiZhJiZocmVmJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBkZXNjLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IGh0bWwgKyBwaWMsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMicsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJChodG1sICsgdXJsICsgJyNnYW1lVGhlbWUjJykucnVsZSgoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IHBkKGdldFJlc0NvZGUoKSwgJ2JvZHkmJi5kdHBsYXkmJmEmJmhyZWYnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd4NV93ZWJ2aWV3X3NpbmdsZScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ2Zsb2F0JiYxMDAlJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaHRtbCkgICAgICAgICAgICAgICAgICAgICB9LCBodG1sKSwgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICB9ICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gbGlzdCkgeyAgICAgICAgICAgICAgICAgdGl0bGUgPSBwZGZoKGxpc3RbaV0sICcudHJhbnNmb3JtYmFybGluayYmVGV4dCcpOyAgICAgICAgICAgICAgICAgZGVzYyA9IHBkZmgobGlzdFtpXSwgJy50cmFuc2Zvcm1iYXJoaXRzJiZUZXh0Jyk7ICAgICAgICAgICAgICAgICBwaWMgPSBwZGZoKGxpc3RbaV0sICdpbWcmJnNyYycpOyAgICAgICAgICAgICAgICAgdXJsID0gcGRmaChsaXN0W2ldLCAnLnRyYW5zZm9ybWJhcmxpbmsmJmEmJmhyZWYnKTsgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLCAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGRlc2MsICAgICAgICAgICAgICAgICAgICAgcGljOiBodG1sICsgcGljLCAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMicsICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKGh0bWwgKyB1cmwgKyAnI2dhbWVUaGVtZSMnKS5ydWxlKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IHBkKGdldFJlc0NvZGUoKSwgJ2JvZHkmJi5kdHBsYXkmJmEmJmhyZWYnKTsgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAneDVfd2Vidmlld19zaW5nbGUnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ2Zsb2F0JiYxMDAlJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsLCAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgICAgICAgICAgICAgIH0pLCAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgIH0gICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgIH0pICAgICB9IGVsc2UgaWYgKGlucHV0ID09ICfnsr7pgInmuLjmiI8nKSB7ICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnknKS5ydWxlKCgpID0+IHsgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfnsr7pgInmuLjmiI8nKTsgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgbGV0IGxpc3QgPSBbJ0ZD5ri45oiP5py6QGh0dHBzOi8veGlhb2JhcGkudG9wL2Z1bmN0aW9uL2ZjLycsICfkuIDkuKrpg73kuI3og73mrbtAaHR0cHM6Ly90b29sLnN1eWFudy5jbi90b29sL3hpdXhpYW4veXhtYi8yL2luZGV4Lmh0bWwnLCAn5aSp5aSp5raI5raI5LmQQGh0dHBzOi8vdG9vbC5zdXlhbncuY24vdG9vbC94aXV4aWFuL3l4bWIvMTcvaW5kZXguaHRtbCcsICfmmJ/nkIPpmLLlvqFAaHR0cHM6Ly90b29sLnN1eWFudy5jbi90b29sL3hpdXhpYW4veXhtYi8yMS9pbmRleC5odG1sJywgJ+W8gOW/g+a2iOa2iOS5kEBodHRwczovL3Rvb2wuc3V5YW53LmNuL3Rvb2wveGl1eGlhbi95eG1iLzIzL2luZGV4Lmh0bWwnLCAnM0Tnhorlh7rmsqFAaHR0cHM6Ly90b29sLnN1eWFudy5jbi90b29sL3hpdXhpYW4veXhtYi81Ni9pbmRleC5odG1sJywgJzNE5ou85Zu+QGh0dHBzOi8vdG9vbC5zdXlhbncuY24vdG9vbC94aXV4aWFuL3l4bWIvNTcvaW5kZXguaHRtbCcsICfnroDnuqbmiZPlnLDpvKBAaHR0cHM6Ly90b29sLnN1eWFudy5jbi90b29sL3hpdXhpYW4veXhtYi82Ny9pbmRleC5odG1sJywgJ+S4gOeslOi/nuePoEBodHRwczovL3Rvb2wuc3V5YW53LmNuL3Rvb2wveGl1eGlhbi95eG1iLzc0L2luZGV4Lmh0bWwnLCAn55av54uC5omT5LyB6bmFQGh0dHBzOi8vdG9vbC5zdXlhbncuY24vdG9vbC94aXV4aWFuL3l4bWIvNTAvaW5kZXguaHRtbCcsICfnjJzmiJDor61AaHR0cHM6Ly90b29sLnN1eWFudy5jbi90b29sL3hpdXhpYW4veXhtYi83MS9pbmRleC5odG1sJywgJ+WBpeW6t+a2iOa2iOS5kEBodHRwczovL3Rvb2wuc3V5YW53LmNuL3Rvb2wveGl1eGlhbi95eG1iLzgwL2luZGV4Lmh0bWwnLCAn5p625a2Q6byTQGh0dHA6Ly9ndW96aGl2aXAuY29tL2p6ZycsICfllrXllrXmiYvpvJNAaHR0cHM6Ly9saW56aW11LmNvbS9NdXNpY0NhdCcsICfkuK3lm73osaHmo4tAaHR0cHM6Ly91LmFsaTIxMy5uZXQvZ2FtZXMvY2hpbmFjaGVzcy9pbmRleC5odG1sP2dhbWVfY29kZT0zMTMnLCAn5Lit5Zu96LGh5qOLMUBodHRwczovL3Rvb2wuc3V5YW53LmNuL3Rvb2wveGl1eGlhbi95eG1iLzY1L2luZGV4Lmh0bWwnLCAn5L+E572X5pav5pa55Z2XQGh0dHBzOi8vZ2FtZS51cjEuZnVuL3RldHJpcy8nLCAn5Z2R54i55ri45oiPQGh0dHBzOi8vdS5hbGkyMTMubmV0L2dhbWVzL2tlbmdkaWU4L2luZGV4Lmh0bWw/Z2FtZV9jb2RlPTk2NScsICflsLHmmK/ot5FAaHR0cHM6Ly91LmFsaTIxMy5uZXQvZ2FtZXMveGlhb2h1b3ppL2luZGV4Lmh0bWw/Z2FtZV9jb2RlPTk5NycsICfkuozmiJjpo47kupFAaHR0cHM6Ly91LmFsaTIxMy5uZXQvZ2FtZXMvZXJ6aGFuL2luZGV4Lmh0bWw/Z2FtZV9jb2RlPTg3NycsICfnu7TkuqzmiJjkuolAaHR0cHM6Ly94aWFvYmFwaS50b3AvZnVuY3Rpb24vZ2FtZS95eG1iLzEvaW5kZXguaHRtbCcsICfpnZLom5nlkIPoi43onYdAaHR0cHM6Ly94aWFvYmFwaS50b3AvZnVuY3Rpb24vZ2FtZS95eG1iLzYvaW5kZXguaHRtbCcsICflj4zkurrkupTlrZDmo4tAaHR0cHM6Ly94aWFvYmFwaS50b3AvZnVuY3Rpb24vZ2FtZS95eG1iLzI5L2luZGV4Lmh0bWwnLCAn6aOe5py65aSn5oiYQGh0dHBzOi8veGlhb2JhcGkudG9wL2Z1bmN0aW9uL2dhbWUveXhtYi8zMS9pbmRleC5odG1sJywgJ+acgOW8uuecvOWKm0BodHRwczovL3hpYW9iYXBpLnRvcC9mdW5jdGlvbi9nYW1lL3l4bWIvMzYvaW5kZXguaHRtbCcsICfngYznr67mipXnkINAaHR0cHM6Ly94aWFvYmFwaS50b3AvZnVuY3Rpb24vZ2FtZS95eG1iLzQ5L2luZGV4Lmh0bWwnLCAn5Yid6Z+z6Kej5Y6LQGh0dHBzOi8vdG9vbHdhLmNvbS9taWt1dGFwLycsICfonJjom5vnurjniYxAaHR0cHM6Ly9nYW1lLnVyMS5mdW4vcG9rZXIvJywgJ+mjnuacuuWkp+aImDIuMEBodHRwczovL2dhbWUudXIxLmZ1bi9wbGFuZS13YXJzLycsICfnp6/mnKjliIfliIfkuZBAaHR0cHM6Ly9nYW1lLnVyMS5mdW4vbWVuamEvJywgJ+WFlOWtkOW/q+i3kUBodHRwczovL2dhbWUudXIxLmZ1bi9ob3AvJywgJzNE6a2U5pa5QGh0dHBzOi8vZ2FtZS51cjEuZnVuL2N1YmUvJ107ICAgICAgICAgICAgIGxldCBpbWcgPSAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzMwMC5wbmcnOyAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHsgICAgICAgICAgICAgICAgIGxldCBrID0gbGlzdFtpXS5zcGxpdCgvQC8pOyAgICAgICAgICAgICAgICAgaWYgKGsubGVuZ3RoIDwgMikgY29udGludWU7ICAgICAgICAgICAgICAgICB2YXIgdXJsID0ga1sxXTsgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGtbMF0sICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdpY29uXzJfcm91bmQnLCAgICAgICAgICAgICAgICAgICAgIHBpY191cmw6IGltZywgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjI2dhbWVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgodXJsKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3g1X3dlYnZpZXdfc2luZ2xlJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICdmbG9hdCYmMTAwJScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWE6IE1PQklMRV9VQSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5CYWNrOiB0cnVlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dQcm9ncmVzczogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgfSwgdXJsKSwgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICB9ICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICB9KSAgICAgfSBlbHNlIHsgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eSNmeXBhZ2UjZnVsbFRoZW1lIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCgpID0+IHsgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfooZfmnLrmuLjmiI8nKTsgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgbGV0IHQgPSBnZXRJdGVtKCfooZfmnLrmuLjmiI8nLCAnRkMnKTsgICAgICAgICAgICAgbGV0IGpzID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9zZXJ2aWNlLW05eWVnY245LTEzMTEyNDgwMjIuc2guYXBpZ3cudGVuY2VudGNzLmNvbS9yZWxlYXNlL2dhbWVzP3Q9JyArIHQgKyAnJnA9JyArIE1ZX1BBR0UpKTsgICAgICAgICAgICAgaWYgKE1ZX1BBR0UgPT0gMSkgeyAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+ihl+acuua4uOaIjycsICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLCAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfliIfmjaInLCAgICAgICAgICAgICAgICAgICAgIHBpYzogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8zMDAucG5nJywgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoWyfooZfmnLonLCAnRkMnLCAnU0ZDJywgJ0dCQScsICdNRCcsICdINSddLCAzLCAn6K+36YCJ5oup5pON5L2cJykuc2VsZWN0KCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn6KGX5py65ri45oiPJywgaW5wdXQpOyAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eScgICAgICAgICAgICAgICAgICAgICB9KSwgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICB9ICAgICAgICAgICAgIGpzLm1hcCh5ID0+IHsgICAgICAgICAgICAgICAgIGxldCB1cmwgPSB5LnVybDsgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHkubmFtZSwgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzInLCAgICAgICAgICAgICAgICAgICAgIGRlc2M6IHkudHlwZSwgICAgICAgICAgICAgICAgICAgICBwaWM6IHkuaW1nLCAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNnYW1lVGhlbWUjJykucnVsZSgodXJsKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3g1X3dlYnZpZXdfc2luZ2xlJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICdmbG9hdCYmMTAwJScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1Byb2dyZXNzOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICAgICAgICAgICAgICB9LCB1cmwpLCAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgfSk7ICAgICB9IH0pIiwiaWNvbiI6Imhpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8zMDAucG5nIiwiZGVzYyI6IiIsInR5cGUiOiJpY29uX3JvdW5kX3NtYWxsXzQifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6IueMq+eci+eZveWZqumfsyIsInRpdGxlIjoi6IGG5ZCsIiwidXJsIjoiQGpzOiAkKCdoaWtlcjovL2VtcHR5I2dhbWVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7ICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgn54yr55yL55m95Zmq6Z+zJyk7ICAgICAgICAgICAgIGxldCBkID0gW107ICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3g1X3dlYnZpZXdfc2luZ2xlJywgICAgICAgICAgICAgICAgIGRlc2M6ICdmbG9hdCYmMTAwJScsICAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL3d3dy5tYW9rYW4uY2MvJywgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAgY2FuQmFjazogdHJ1ZSwgICAgICAgICAgICAgICAgICAgICBhdXRvUGxheTogdHJ1ZSwgICAgICAgICAgICAgICAgICAgICBzaG93UHJvZ3Jlc3M6IGZhbHNlLCAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgc2V0UmVzdWx0KGQpOyAgICAgICAgIH0pIiwiaWNvbiI6Imhpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8yNTEucG5nIiwiZGVzYyI6IiIsInR5cGUiOiJpY29uX3JvdW5kX3NtYWxsXzQifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MiwibmFtZSI6IuaegeiHtOmdk+S4vSIsImNvZGUiOiJbe1xuICAgIHRpdGxlOiAn6Z2T5Li9JyxcbiAgICBjb2xfdHlwZTogJ2ljb25fcm91bmRfc21hbGxfNCcsXG4gICAgcGljOiAnaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzIwMi5wbmcnLFxuICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7XG4gICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I2dhbWVUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xuICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfmnoHoh7TpnZPkuL0nKTtcbiAgICAgICAgICAgIGxldCB4ampfbGlzdCA9IFsnaHR0cHM6Ly9wLnR4cXEucHJvLyMvJywnaHR0cDovL3hqajEuNzE2ODg4Lnh5ei8nLCdodHRwOi8veGpqMi43MTY4ODgueHl6LycsJ2h0dHA6Ly91MS5jeC9naXJsLycsJ2h0dHBzOi8vamllamllLnVrL3hqai9mdWxpLycsJ2h0dHBzOi8vamllamllLnVrL3hqai8nLCdodHRwczovL3ZpZGVvLm1pY3Jva3UuY24vJ107XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB4ampfbGlzdC5sZW5ndGgpO1xuICAgICAgICAgICAgbGV0IHhqaiA9IHhqal9saXN0W2luZGV4XTtcbiAgICAgICAgICAgIGxldCBodG1sID0gZ2V0SXRlbSgn5p6B5a6iJywgJycpO1xuICAgICAgICAgICAgaWYgKCFodG1sKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IHhqajtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IGh0bWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgICAgICAgICBkZXNjOiAnZmxvYXQmJjEwMCUnLFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAneDVfd2Vidmlld19zaW5nbGUnLFxuICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICAgICAgICAgIGNhbkJhY2s6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9QbGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBibG9ja1J1bGVzOiBbJ2JhaWR1LioucG5nJywgJy5qcGcnXSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNldFJlc3VsdChkKTtcbiAgICAgICAgfSlcbiAgICB9KSxcbiAgICBleHRyYToge1xuICAgICAgICBsb25nQ2xpY2s6IFt7XG4gICAgICAgICAgICB0aXRsZTogJ+mUgeWumumdk+S4vScsXG4gICAgICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0SXRlbSgn5p6B5a6iJywgJ2h0dHBzOi8vcC50eHFxLnByby8jLycpO1xuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5YiH5o2iJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgdGl0bGU6ICfovpPlhaXmm7TmjaInLFxuICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBqayA9IGdldEl0ZW0oJ2prX2lucHV0JywgJycpO1xuICAgICAgICAgICAgICAgIHJldHVybiAkKGprLCAn5oOz6KaB5pu05o2i55qE55+t6KeG6aKR5Zyw5Z2AJykuaW5wdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHh0ID0gaW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ+aegeWuoicsIHR4dCk7XG4gICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2prX2lucHV0JywgdHh0KTtcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5pu05o2iJ1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICB0aXRsZTogJ+aBouWkjemaj+acuicsXG4gICAgICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2xlYXJJdGVtKCfmnoHlrqInKTtcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suaBouWkjemaj+acuidcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1dLFxuICAgIH1cbn1dIn0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLnlLvmnb8iLCJ0aXRsZSI6IueUu+advyIsInVybCI6IkBqczogJCgnaGlrZXI6Ly9lbXB0eSNnYW1lVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKCkgPT4geyAgICAgc2V0UGFnZVRpdGxlKCcnKTsgICAgIGxldCBkID0gW107ICAgICBkLnB1c2goeyAgICAgICAgIGNvbF90eXBlOiAneDVfd2Vidmlld19zaW5nbGUnLCAgICAgICAgIGRlc2M6ICdmbG9hdCYmMTAwJScsICAgICAgICAgdXJsOiAnaHR0cDovL3Rvb2wubWtibG9nLmNuL3doaXRlYm9hcmQvJywgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICBjYW5CYWNrOiB0cnVlLCAgICAgICAgICAgICBzaG93UHJvZ3Jlc3M6IGZhbHNlLCAgICAgICAgIH0gICAgIH0pOyAgICAgc2V0UmVzdWx0KGQpOyB9KSIsImljb24iOiJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMjMyLnBuZyIsImRlc2MiOiIiLCJ0eXBlIjoiaWNvbl9yb3VuZF9zbWFsbF80In0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLmmJ/luqfov5Dlir8iLCJ0aXRsZSI6IuaYn+W6pyIsInVybCI6IkBqczogJCgnaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCgpID0+IHsgICAgIHNldFBhZ2VUaXRsZSgn5pif5bqn6L+Q5Yq/Jyk7ICAgICBsZXQgZCA9IFtdOyAgICAgdHJ5IHsgICAgICAgICBsZXQgbmFtZSA9IHN0b3JhZ2UwLmdldEl0ZW0oJ+aYn+W6pycsICdnZW1pbmknKTsgICAgICAgICBsZXQgaW1nID0gKCdodHRwczovL2FwaS52dmhhbi5jb20vYXBpL2Jpbmc/cmFuZD1zaicgKyAnIycgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSk7ICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGZjKCdodHRwczovL2FwaS52dmhhbi5jb20vYXBpL2hvcm9zY29wZT90aW1lPXRvZGF5JnR5cGU9JyArIG5hbWUsIDgpKS5kYXRhOyAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgIHRpdGxlOiBqc29uLnRpdGxlLCAgICAgICAgICAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzEnLCAgICAgICAgICAgICBkZXNjOiAnMCcsICAgICAgICAgICAgIHBpYzogaW1nLCAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4geyAgICAgICAgICAgICAgICAgbGV0IGxpc3QgPSBbeyAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJ+eZvee+iuW6pycsICAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ2FyaWVzJyAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJ+mHkeeJm+W6pycsICAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3RhdXJ1cycgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICflj4zlrZDluqcnLCAgICAgICAgICAgICAgICAgICAgICdpZCc6ICdnZW1pbmknICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAn5beo6J+55bqnJywgICAgICAgICAgICAgICAgICAgICAnaWQnOiAnY2FuY2VyJyAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJ+eLruWtkOW6pycsICAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ2xlbycgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICflpITlpbPluqcnLCAgICAgICAgICAgICAgICAgICAgICdpZCc6ICd2aXJnbycgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICflpKnnp6TluqcnLCAgICAgICAgICAgICAgICAgICAgICdpZCc6ICdsaWJyYScgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICflpKnonY7luqcnLCAgICAgICAgICAgICAgICAgICAgICdpZCc6ICdzY29ycGlvJyAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJ+WwhOaJi+W6pycsICAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NhZ2l0dGFyaXVzJyAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJ+mtlOidjuW6pycsICAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ2NhcHJpY29ybicgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICfmsLTnk7bluqcnLCAgICAgICAgICAgICAgICAgICAgICdpZCc6ICdhcXVhcml1cycgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICflj4zpsbzluqcnLCAgICAgICAgICAgICAgICAgICAgICdpZCc6ICdwaXNjZXMnICAgICAgICAgICAgICAgICB9XTsgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gbGlzdC5tYXAobGlzdCA9PiBsaXN0Lm5hbWUpOyAgICAgICAgICAgICAgICAgcmV0dXJuICQobmFtZSwgMywgJ+ivt+mAieaLqScpLnNlbGVjdCgobGlzdCkgPT4geyAgICAgICAgICAgICAgICAgICAgIGxldCBpID0gbGlzdC5maW5kSW5kZXgobGlzdCA9PiBsaXN0Lm5hbWUgPT0gaW5wdXQpOyAgICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSBsaXN0W2ldLmlkOyAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UwLnNldEl0ZW0oJ+aYn+W6pycsIHVybCk7ICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7LliIfmjaLmmJ/luqcnICAgICAgICAgICAgICAgICB9LCBsaXN0KSAgICAgICAgICAgICB9KSwgICAgICAgICB9LCB7ICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZScsICAgICAgICAgfSwgeyAgICAgICAgICAgICB0aXRsZTogJ+aXtumXtO+8micgKyBqc29uLnRpbWUgKyAnXFxu5a6c77yaJyArIGpzb24udG9kby55aSArICdcXG7lv4zvvJonICsganNvbi50b2RvLmppICsgJ1xcbuW5uOi/kOaVsOWtl++8micgKyBqc29uLmx1Y2t5bnVtYmVyICsgJ1xcbuW5uOi/kOminOiJsu+8micgKyBqc29uLmx1Y2t5Y29sb3IgKyAnXFxu6YCf6YWN5pif5bqn77yaJyArIGpzb24ubHVja3ljb25zdGVsbGF0aW9uICsgJ1xcbuefreivhO+8micgKyBqc29uLnNob3J0Y29tbWVudCwgICAgICAgICAgICAgY29sX3R5cGU6ICdsb25nX3RleHQnLCAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JywgICAgICAgICB9LCB7ICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZScsICAgICAgICAgfSwgeyAgICAgICAgICAgICB0aXRsZTogJ+e7vOWQiOi/kOWKv++8micgKyBqc29uLmZvcnR1bmUuYWxsICsgJyDimaUnICsgJ1xcbueIseaDhei/kOWKv++8micgKyBqc29uLmZvcnR1bmUubG92ZSArICcg4pmlJyArICdcXG7lrabkuJrlt6XkvZzvvJonICsganNvbi5mb3J0dW5lLndvcmsgKyAnIOKZpScgKyAnXFxu6LSi5a+M6L+Q5Yq/77yaJyArIGpzb24uZm9ydHVuZS5tb25leSArICcg4pmlJyArICdcXG7lgaXlurfov5Dlir/vvJonICsganNvbi5mb3J0dW5lLmhlYWx0aCArICcg4pmlJywgICAgICAgICAgICAgY29sX3R5cGU6ICdsb25nX3RleHQnLCAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JywgICAgICAgICB9LCB7ICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZScsICAgICAgICAgfSwgeyAgICAgICAgICAgICB0aXRsZTogJ+e7vOWQiOaMh+aVsO+8micgKyBqc29uLmluZGV4LmFsbCArICdcXG7niLHmg4XmjIfmlbDvvJonICsganNvbi5pbmRleC5sb3ZlICsgJ1xcbuWtpuS4muW3peS9nO+8micgKyBqc29uLmluZGV4LndvcmsgKyAnXFxu6LSi5a+M5oyH5pWw77yaJyArIGpzb24uaW5kZXgubW9uZXkgKyAnXFxu5YGl5bq35oyH5pWw77yaJyArIGpzb24uaW5kZXguaGVhbHRoLCAgICAgICAgICAgICBjb2xfdHlwZTogJ2xvbmdfdGV4dCcsICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLCAgICAgICAgIH0sIHsgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJywgICAgICAgICB9LCB7ICAgICAgICAgICAgIHRpdGxlOiAn57u85ZCI6L+Q5Yq/77yaJyArIGpzb24uZm9ydHVuZXRleHQuYWxsICsgJ1xcblxcbueIseaDhei/kOWKv++8micgKyBqc29uLmZvcnR1bmV0ZXh0LmxvdmUgKyAnXFxuXFxu5a2m5Lia5bel5L2c77yaJyArIGpzb24uZm9ydHVuZXRleHQud29yayArICdcXG5cXG7otKLlr4zov5Dlir/vvJonICsganNvbi5mb3J0dW5ldGV4dC5tb25leSArICdcXG5cXG7lgaXlurfov5Dlir/vvJonICsganNvbi5mb3J0dW5ldGV4dC5oZWFsdGgsICAgICAgICAgICAgIGNvbF90eXBlOiAnbG9uZ190ZXh0JywgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsICAgICAgICAgfSk7ICAgICB9IGNhdGNoIHt9ICAgICBzZXRSZXN1bHQoZCk7IH0pIiwiaWNvbiI6Imhpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS82Ny5wbmciLCJkZXNjIjoiIiwidHlwZSI6Imljb25fcm91bmRfc21hbGxfNCJ9LHsic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi546L6ICF6K+t6Z+z5YyFIiwidGl0bGUiOiLor63pn7MiLCJ1cmwiOiJAanM6ICQoJ2hpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7ICAgICBzZXRQYWdlVGl0bGUoJ+eOi+iAheivremfsycpOyAgICAgbGV0IGQgPSBbXTsgICAgIGxldCB5eCA9IGdldEl0ZW0oJ+eOi+iAheivremfsycsICfpsoHnj60nKTsgICAgIHRyeSB7ICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5haGZpLmNuL2FwaS93enJ5eXk/bXNnPScgKyB5eCkpOyAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgIHRpdGxlOiBqc29uLmhlcm8sICAgICAgICAgICAgIGRlc2M6ICcwJywgICAgICAgICAgICAgY29sX3R5cGU6ICdjYXJkX3BpY18xJywgICAgICAgICAgICAgcGljOiBqc29uLmltZywgICAgICAgICAgICAgdXJsOiBqc29uLmltZywgICAgICAgICB9LCB7ICAgICAgICAgICAgIHRpdGxlOiAn5pCc57SiJywgICAgICAgICAgICAgY29sX3R5cGU6ICdpbnB1dCcsICAgICAgICAgICAgIGRlc2M6ICfor7fovpPlhaXnjovogIXoi7Hpm4TlkI0nLCAgICAgICAgICAgICB1cmw6ICQudG9TdHJpbmcoKCkgPT4geyAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIFwidG9hc3Q6Ly/or7fovpPlhaXlhbPplK7or41cIjsgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ+eOi+iAheivremfsycsIGlucHV0KTsgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSc7ICAgICAgICAgICAgIH0pLCAgICAgICAgIH0pOyAgICAgICAgIGpzb24uZGF0YS5tYXAoeSA9PiB7ICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICB0aXRsZTogeS5pZCA/IHkuaWQgKyAnLiAnICsgeS5saW5lcyA6IHkubGluZXMsICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsICAgICAgICAgICAgICAgICBwaWM6IGpzb24uaW1nLCAgICAgICAgICAgICAgICAgdXJsOiB5LnZvaWNlLCAgICAgICAgICAgICB9KTsgICAgICAgICB9KTsgICAgIH0gY2F0Y2ggeyAgICAgICAgIHRvYXN0KCfmsqHmnInmib7liLDor6Xoi7Hpm4QnKTsgICAgICAgICBjbGVhckl0ZW0oJ+eOi+iAheivremfsycpOyAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknICAgICB9ICAgICBzZXRSZXN1bHQoZCk7IH0pIiwiaWNvbiI6Imhpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS83My5wbmciLCJkZXNjIjoiIiwidHlwZSI6Imljb25fcm91bmRfc21hbGxfNCJ9LHsic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi5LqR55+lIiwidGl0bGUiOiLkupHnn6UiLCJ1cmwiOiJAanM6IGxldCBtaW1hPWdldFZhcignbWltYV8xJywnJyk7bGV0IGV4cD1uZXcgRGF0ZSgpOyAgICAgICAgXHRcdGxldCBoPWV4cC5nZXRIb3VycygpO2xldCBtPWV4cC5nZXRNaW51dGVzKCk7bGV0IHM9ZXhwLmdldFNlY29uZHMoKTtsZXQgbWk9aCttO2lmKG1pbWE9PW1pKXtmYXN0R3JhbW1hcihcIjxUYWI+QFsn5LqR55+l5Lmm562+57uEJywn5L+d6Zmp566xJ11AWyfkv53pmannrrHlt7LooqvmiZPlvIAnLCg2MC1uZXcgRGF0ZSgpLmdldFNlY29uZHMoKSkrJ+enkuWQjuiHquWKqOS4iumUgSddXCIsb3JkZXIpfWVsc2V7JCgnJywgXCLkupHnn6Xlr4bnoIFcIikuY2xpY2tJbnB1dChtaSA9PiB7ICBwdXRWYXIoJ21pbWFfMScsaW5wdXQpOyAgaWYgKGlucHV0IT1taSkgeyAgICAgICAgcmV0dXJuIFwidG9hc3Q6Ly/im5Qg5a+G56CB6ZSZ6K+vXCI7ICAgIH0gZWxzZSB7ICAgICByZXR1cm4gKChydWxlLCB0b2FzdCkgPT4geyAgICAgICAgICAgIGNvbnN0IExvY2FsZmlsZSA9IEhpa2VySG9tZS5nZXRMb2NhbGZpbGUoKTsgICAgICAgICAgICBjb25zdCBib29rTWFyayA9IEhpa2VySG9tZS5nZXRCb29rbWFya3NMaXN0KExvY2FsZmlsZS5nZXRJdGVtKFwiQm9va21hcmtzTGlzdFwiKSk7ICAgICAgICAgICAgZXZhbChcImxldCBbaCx0YWJdPVwiICsgcnVsZSArIFwiO3ZhciBbdF8xLHRfMl09XCIgKyAodG9hc3QgfHwgXCJbJycsJyddXCIpKTsgICAgICAgICAgICBsZXQgaW5kZXggPSBib29rTWFyay5nZXRJbmRleChoKTsgICAgICAgICAgICBsZXQganNvbiA9IGJvb2tNYXJrLmdldChpbmRleCk7ICAgICAgICAgICAgaWYgKGpzb24gPT09IHVuZGVmaW5lZCB8fCBqc29uLnBhdHRlcm4gIT09IDMpIHsgICAgICAgICAgICAgICAgcmV0dXJuIFwidG9hc3Q6Ly9cXHU2NzJhXFx1NWI5YVxcdTRlNDlcXHU4YmU1XFx1NGU2NlxcdTdiN2VcXHU3ZWM0XCI7ICAgICAgICAgICAgfSAgICAgICAgICAgIGlmIChqc29uLmZvbGRfc3RhdHVzKSB7ICAgICAgICAgICAgICAgIHZhciB0b2FzdCA9IHRfMiB8fCBcIlxcdTVkZjJcXHU2Mjk4XFx1NTNlMFwiOyAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgIHZhciB0b2FzdCA9IHRfMSB8fCBcIlxcdTVkZjJcXHU1YzU1XFx1NWYwMFwiOyAgICAgICAgICAgIH0gICAgICAgICAgICBqc29uLmZvbGRfc3RhdHVzID0gIWpzb24uZm9sZF9zdGF0dXM7ICAgICAgICAgICAgYm9va01hcmsubW9kaWZ5KGluZGV4LCBqc29uKTsgICAgICAgICAgICBsZXQgbGlzdCA9IGJvb2tNYXJrLmdldExpc3QoKTsgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHsgICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBsaXN0W2ldOyAgICAgICAgICAgICAgICBpZiAoaXRlbS5wYXR0ZXJuID09PSAzICYmIGl0ZW0ubmFtZSAhPT0gaCAmJiBpdGVtLm1hcmsgIT09IFwiXCIgJiYgaXRlbS5tYXJrID09PSB0YWIpIHsgICAgICAgICAgICAgICAgICAgIGl0ZW0uZm9sZF9zdGF0dXMgPSBqc29uLmZvbGRfc3RhdHVzID8gZmFsc2UgOiBmYWxzZTsgICAgICAgICAgICAgICAgICAgIGJvb2tNYXJrLm1vZGlmeShpLCBpdGVtKTsgICAgICAgICAgICAgICAgfSAgICAgICAgICAgIH0gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgaWYgKHRvYXN0ID09PSBcImhpa2VyOi8vZW1wdHlcIikgeyAgICAgICAgICAgICAgICByZXR1cm4gdG9hc3Q7ICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgcmV0dXJuIFwidG9hc3Q6Ly9cIiArIHRvYXN0OyAgICAgICAgICAgIH0gICAgICAgIH0pKFwiWyfkupHnn6Xkuabnrb7nu4QnLCfkv53pmannrrEnXVwiLCBcIlsn5bey5omT5byA5L+d6Zmp566xJywn5YWz6Zet5L+d6Zmp566xJ11cIik7ICB9fSxtaSl9IiwiaWNvbiI6Imhpa2VyOi8vZmlsZXMvSm0vbG0vbW9yZS8xMDEucG5nIiwiZGVzYyI6IiIsInR5cGUiOiJpY29uX3JvdW5kX3NtYWxsXzQifV0sImZvbGRfc3RhdHVzIjpmYWxzZSwicGF0dGVybiI6M30seyJtYXJrIjoi5L+d6Zmp566xIiwibGlzdCI6W3sidGl0bGUiOiIiLCJ1cmwiOiIiLCJpY29uIjoiIiwiZGVzYyI6IiIsInR5cGUiOiJsaW5lIiwibmFtZSI6Iue6vyIsInN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MH0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLkupHnn6Xkv53pmannrrEiLCJ0aXRsZSI6IuS6keefpSIsInVybCI6IkBqczpmYXN0R3JhbW1hcihcIjxUYWI+QFsn5LqR55+l5Lmm562+57uEJywn5L+d6Zmp566xJ11cIixvcmRlcikiLCJpY29uIjoiaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzY1LnBuZyIsImRlc2MiOiI8c21hbGw+5byA5YWzPC9zbWFsbD4iLCJ0eXBlIjoiYXZhdGFyIn0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLnvo7lm74iLCJ0aXRsZSI6IuKAmOKAmOKAmeKAmTxzbWFsbD7nvo7lm748L3NtYWxsPiIsInVybCI6IkBqczogJCgnaGlrZXI6Ly9lbXB0eSNmeXBhZ2UjZ2FtZVRoZW1lIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCgpID0+IHsgICAgIHNldFBhZ2VUaXRsZSgn576O5Zu+Jyk7ICAgICBsZXQgZCA9IFtdOyAgICAgbGV0IHVybCA9IChcImh0dHA6Ly9zZS5jc25tYi5jb20vQVBJL3FsLnBocFwiICsgJyMnICsgbmV3IERhdGUoKS5nZXRUaW1lKCnigIspOyAgICAgICAgICAgICAgbGV0IGltZyA9IHVybCArICcjLmpwZyc7ICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgY29sX3R5cGU6ICdwaWNfMV9mdWxsJywgICAgICAgICAgICAgcGljOiBpbWcsICAgICAgICAgICAgIHVybDogaW1nLCAgICAgICAgIH0pOyAgICAgICAgICBzZXRSZXN1bHQoZCk7IH0pOyIsImljb24iOiIiLCJkZXNjIjoiIiwidHlwZSI6InRleHRfNCJ9LHsic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi6YGH6KeBIiwidGl0bGUiOiLigJjigJjigJnigJk8c21hbGw+6YGH6KeBPC9zbWFsbD4iLCJ1cmwiOiJAanM6ICQoJ2hpa2VyOi8vZW1wdHkjbm9SZWNvcmRIaXN0b3J5IyNnYW1lVGhlbWUjJykucnVsZSgoKSA9PiB7ICAgICBsZXQgZCA9IFtdOyAgICAgbGV0IHhqaiA9IGdldFBhdGgoJ2hpa2VyOi8vZmlsZXMvSm0vZmlsZS94amouaHRtbCcpOyAgICAgaWYgKCFmaWxlRXhpc3QoeGpqKSkgeyAgICAgICAgIGNvbmZpcm0oeyAgICAgICAgICAgICB0aXRsZTogJ+WvvOWFpScsICAgICAgICAgICAgIGNvbnRlbnQ6ICfmo4DmtYvliLDkvaDmsqHmnInmnKzlnLDmlofku7bvvIzmmK/lkKblr7zlhaUnLCAgICAgICAgICAgICBjb25maXJtOiAkLnRvU3RyaW5nKCh4amopID0+IHsgICAgICAgICAgICAgICAgIHdyaXRlRmlsZSh4amosIGZldGNoKCdodHRwczovL2doLmRkbGMudG9wL2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9qbWVuZzEyMy9maWxlcy9tYWluL3hqai5odG1sJykpOyAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICB9LCB4amopLCAgICAgICAgICAgICBjYW5jZWw6ICQudG9TdHJpbmcoKCkgPT4ge30pICAgICAgICAgfSk7ICAgICB9OyAgICAgZC5wdXNoKHsgICAgICAgICBjb2xfdHlwZTogJ3g1X3dlYnZpZXdfc2luZ2xlJywgICAgICAgICB1cmw6IHhqaiwgICAgICAgICBkZXNjOiAnZmxvYXQmJjEwMCUnLCAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgIGF1dG9QbGF5OiB0cnVlLCAgICAgICAgICAgICBzaG93UHJvZ3Jlc3M6IGZhbHNlLCAgICAgICAgICAgICB1YTogTU9CSUxFX1VBICAgICAgICAgfSAgICAgfSk7ICAgICBzZXRSZXN1bHQoZCk7IH0pOyIsImljb24iOiJoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMjAyLnBuZyIsImRlc2MiOiIiLCJ0eXBlIjoidGV4dF80In0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiJTd2FnZ2Vy5Zu+54mHIiwidGl0bGUiOiLigJjigJjigJnigJk8c21hbGw+5Zu+54mHPC9zbWFsbD4iLCJ1cmwiOiJAanM6ICQoJ2hpa2VyOi8vZW1wdHkjZnlwYWdlI2Z1bGxUaGVtZSMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgoKSA9PiB7ICAgICBzZXRQYWdlVGl0bGUoJ1N3YWdnZXLlm77niYcnKTsgICAgIGxldCBkID0gW107ICAgICB2YXIgcCA9IChNWV9QQUdFIC0gMSk7ICAgICB2YXIgcyA9IGdldEl0ZW0oJ3NpemUnLCAnMTAnKTsgICAgIHZhciB0ID0gZ2V0SXRlbSgndHlwZScsICdjYXInKTsgICAgIHZhciBodG1sID0gKCdodHRwczovL2FwaS5hcGlvcGVuLnRvcC9hcGkvZ2V0SW1hZ2VzP3Rva2VuPWV5SjFhV1FpT2pFeU9EVXNJbWxrSWpveE1qZzFMQ0pqY21WaGRHVmtRWFFpT2lJeU1ESTBMVEEyTFRFeklERXdPalUwT2pFNUlpd2lkWEJrWVhSbFpFRjBJam9pTWpBeU5DMHdOaTB4TXlBeE1EbzFORG94T1NJc0ltUmxiR1YwWldSQmRDSTZiblZzYkN3aVlXTmpiM1Z1ZENJNklqRTQmcGFnZT0nICsgcCArICcmc2l6ZT0nICsgcyArICcmdHlwZT0nICsgdCk7ICAgICB0cnkgeyAgICAgICAgIGlmIChNWV9QQUdFID09IDEpIHsgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgIHRpdGxlOiAnU3dhZ2dlcuWbvueJhycsICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2F2YXRhcicsICAgICAgICAgICAgICAgICBkZXNjOiAn5YiH5o2iJywgICAgICAgICAgICAgICAgIHBpYzogJ2h0dHBzOi8vaGlrZXJmYW5zLmNvbS90dWJpYW8vbW92aWUvMTkuc3ZnJywgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBbeyAgICAgICAgICAgICAgICAgICAgICAgICAnbic6ICfliqjniaknLCAgICAgICAgICAgICAgICAgICAgICAgICAndSc6ICdhbmltYWwnICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAnbic6ICfnvo7lpbMnLCAgICAgICAgICAgICAgICAgICAgICAgICAndSc6ICdiZWF1dHknICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAnbic6ICfmsb3ovaYnLCAgICAgICAgICAgICAgICAgICAgICAgICAndSc6ICdjYXInICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAnbic6ICfmvKvnlLsnLCAgICAgICAgICAgICAgICAgICAgICAgICAndSc6ICdjb21pYycgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICduJzogJ+mjn+eJqScsICAgICAgICAgICAgICAgICAgICAgICAgICd1JzogJ2Zvb2QnICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAnbic6ICfmuLjmiI8nLCAgICAgICAgICAgICAgICAgICAgICAgICAndSc6ICdnYW1lJyAgICAgICAgICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgICAgICAgICAgJ24nOiAn55S15b2xJywgICAgICAgICAgICAgICAgICAgICAgICAgJ3UnOiAnbW92aWUnICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAnbic6ICfkurrniaknLCAgICAgICAgICAgICAgICAgICAgICAgICAndSc6ICdwZXJzb24nICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICAnbic6ICfmiYvmnLonLCAgICAgICAgICAgICAgICAgICAgICAgICAndSc6ICdwaG9uZScgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgICduJzogJ+mjjuaZrycsICAgICAgICAgICAgICAgICAgICAgICAgICd1JzogJ3NjZW5lcnknICAgICAgICAgICAgICAgICAgICAgfV07ICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0eXBlLm1hcChhID0+IGEubik7ICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQodCwgMywgJ+ivt+mAieaLqScpLnNlbGVjdCgodHlwZSkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHR5cGUuZmluZEluZGV4KGIgPT4gYi5uID09IGlucHV0KTsgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gdHlwZVthXS51OyAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCd0eXBlJywgaWQpOyAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eScgICAgICAgICAgICAgICAgICAgICB9LCB0eXBlKSAgICAgICAgICAgICAgICAgfSksICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3sgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICforr7nva7mr4/pobXmmL7npLrmlbDph48nLCAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnJywgJ+avj+mhteaYvuekuuaVsOmHj++8jOm7mOiupDEwJykuaW5wdXQoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ3NpemUnLCBpbnB1dCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suiuvue9ruS4uicgKyBpbnB1dCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICB9XSwgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgfSk7ICAgICAgICAgfSAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShyZXF1ZXN0KGh0bWwpKS5yZXN1bHQ7ICAgICAgICAganNvbi5saXN0Lm1hcChsID0+IHsgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgIHRpdGxlOiBsLnRpdGxlLCAgICAgICAgICAgICAgICAgdXJsOiBsLnVybCArICcjLmpwZycsICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3BpY18xX2NhcmQnLCAgICAgICAgICAgICAgICAgcGljOiBsLnVybCArICcjLmpwZycsICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3sgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfmt7vliqDliLDliqjmvKsnLCAgICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygobCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9ICgnaGlrZXI6Ly9maWxlcy9KbS9wbmcvZG9uZ21hbi5qc29uJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGVFeGlzdChmaWxlKSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKGZpbGUsICdbXScpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltZyA9ICgnaGlrZXI6Ly9maWxlcy9KbS9wbmcvZG9uZ21hbi8nICsgdGltZSArICcucG5nJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlSW1hZ2UobC51cmwsIGltZyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25nbWFuID0gSlNPTi5wYXJzZShyZXF1ZXN0KGZpbGUpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmdtYW4gPSBkb25nbWFuLmNvbmNhdChpbWcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoZmlsZSwgSlNPTi5zdHJpbmdpZnkoZG9uZ21hbikpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+a3u+WKoOaIkOWKnycgICAgICAgICAgICAgICAgICAgICAgICAgfSwgbCkgICAgICAgICAgICAgICAgICAgICB9LCB7ICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5re75Yqg5Yiw576O5aWzJywgICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGwpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSAoJ2hpa2VyOi8vZmlsZXMvSm0vcG5nL21laW52Lmpzb24nKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlsZUV4aXN0KGZpbGUpKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoZmlsZSwgJ1tdJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1nID0gKCdoaWtlcjovL2ZpbGVzL0ptL3BuZy9tZWludi8nICsgdGltZSArICcucG5nJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlSW1hZ2UobC51cmwsIGltZyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWludiA9IEpTT04ucGFyc2UocmVxdWVzdChmaWxlKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWludiA9IG1laW52LmNvbmNhdChpbWcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoZmlsZSwgSlNPTi5zdHJpbmdpZnkobWVpbnYpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/mt7vliqDmiJDlip8nICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGwpICAgICAgICAgICAgICAgICAgICAgfSwgeyAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+a3u+WKoOWIsOmjjuaZrycsICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChsKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gKCdoaWtlcjovL2ZpbGVzL0ptL3BuZy9mZW5namluZy5qc29uJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGVFeGlzdChmaWxlKSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKGZpbGUsICdbXScpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGltZyA9ICgnaGlrZXI6Ly9maWxlcy9KbS9wbmcvZmVuZ2ppbmcvJyArIHRpbWUgKyAnLnBuZycpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUltYWdlKGwudXJsLCBpbWcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVuZ2ppbmcgPSBKU09OLnBhcnNlKHJlcXVlc3QoZmlsZSkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVuZ2ppbmcgPSBmZW5namluZy5jb25jYXQoaW1nKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKGZpbGUsIEpTT04uc3RyaW5naWZ5KGZlbmdqaW5nKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5re75Yqg5oiQ5YqfJyAgICAgICAgICAgICAgICAgICAgICAgICB9LCBsKSAgICAgICAgICAgICAgICAgICAgIH1dLCAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICB9KTsgICAgICAgICB9KTsgICAgIH0gY2F0Y2ggKGUpIHt9ICAgICBzZXRSZXN1bHQoZCk7IH0pIiwiaWNvbiI6IiIsImRlc2MiOiIiLCJ0eXBlIjoidGV4dF80In0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiJIdWFuZ+ebmCIsInRpdGxlIjoi4oCY4oCY4oCZ4oCZPHNtYWxsPue9keebmDwvc21hbGw+IiwidXJsIjoiQGpzOiAkKCdoaWtlcjovL2VtcHR5I2Z5cGFnZSNmdWxsVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKCkgPT4geyAgICAgc2V0UGFnZVRpdGxlKCdodWFuZ+e9keebmCcpOyAgICAgbGV0IGQgPSBbXTsgICAgIGQucHVzaCh7ICAgICAgICAgdGl0bGU6ICdIdWFuZ+e9keebmCcsICAgICAgICAgZGVzYzogJ+eZu+W9lScsICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLCAgICAgICAgIHBpYzogJ2h0dHBzOi8vYS5oMXN0YXRpYy5jbi9wYW4vTG9nb2h1YW5nMTExMS5pY28nLCAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eScpLnJ1bGUoKCkgPT4geyAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vcGFuLmh1YW5nMTExMS5jbi9sb2dpblwiLCAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFwieDVfd2Vidmlld19zaW5nbGVcIiwgICAgICAgICAgICAgICAgIGRlc2M6IFwiMTAwJSYmZmxvYXRcIiwgICAgICAgICAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gbG9jYXRpb24uaHJlZjsgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVybC5pbmNsdWRlcyhcImh0dHBzOi8vcGFuLmh1YW5nMTExMS5jbi9ob21lP3BhdGg9JTJGXCIpKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYmEud3JpdGVGaWxlKFwiaGlrZXI6Ly9maWxlcy9KbS9odWFuZy50eHRcIiwgZmJhLmdldENvb2tpZShcIlwiKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIuW3suiOt+WPluWIsGNvb2tpZe+8jOi/lOWbnuWNs+WPr1wiKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZiYS5iYWNrKCk7ICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICB9KSwgICAgICAgICAgICAgICAgICAgICB1YTogTU9CSUxFX1VBLCAgICAgICAgICAgICAgICAgICAgIGNhbkJhY2s6IHRydWUgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgfSk7ICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICB9KSwgICAgIH0pOyAgICAgdHJ5IHsgICAgICAgICB2YXIgaHRtbCA9ICgnaHR0cHM6Ly9wYW4uaHVhbmcxMTExLmNuL2FwaS92My9kaXJlY3RvcnklMkZNVicpOyAgICAgICAgIHZhciBjayA9IGZldGNoKCdoaWtlcjovL2ZpbGVzL0ptL2h1YW5nLnR4dCcpOyAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShmZXRjaChodG1sLCB7ICAgICAgICAgICAgIGhlYWRlcnM6IHsgICAgICAgICAgICAgICAgIFwiQ29va2llXCI6IGNrLCAgICAgICAgICAgICAgICAgXCJBY2NlcHRcIjogXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLThcIiwgICAgICAgICAgICAgICAgIFwiUmVmZXJlclwiOiBcImh0dHBzOi8vcGFuLmh1YW5nMTExMS5jblwiLCAgICAgICAgICAgICAgICAgXCJVc2VyLUFnZW50XCI6IE1PQklMRV9VQSAgICAgICAgICAgICB9LCAgICAgICAgIH0pKS5kYXRhLm9iamVjdHM7ICAgICAgICAgZXZhbCgnZGF0YT0nICsgSlNPTi5zdHJpbmdpZnkoanNvbikpOyAgICAgICAgIGRhdGEubWFwKGxpc3QgPT4geyAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QubmFtZSwgICAgICAgICAgICAgICAgIC8qaW1nOiAoJ2h0dHBzOi8vcGFuLmh1YW5nMTExMS5jbi9hcGkvdjMvZmlsZS90aHVtYi8nICsgbGlzdC5pZCArICdAaGVhZGVycz17XCJSZWZlcmVyXCI6XCJodHRwczovL3Bhbi5odWFuZzExMTEuY25cIixcIlVzZXItQWdlbnRcIjpNT0JJTEVfVUEsXCJDb29raWVcIjonKyBjaysnfScpLCovICAgICAgICAgICAgICAgICB1cmw6ICd2aWRlbzovL2h0dHBzOi8vcGFuLmh1YW5nMTExMS5jbi9hcGkvdjMvZmlsZS9wcmV2aWV3LycgKyBsaXN0LmlkLCAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzInLCAgICAgICAgICAgICB9KTsgICAgICAgICB9KTsgICAgIH0gY2F0Y2ggeyAgICAgICAgIHRvYXN0KCfojrflj5blpLHotKUnKTsgICAgIH0gICAgIHNldFJlc3VsdChkKTsgfSkiLCJpY29uIjoiIiwiZGVzYyI6IiIsInR5cGUiOiJ0ZXh0XzQifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6IuaYn+ays+ebtOaSrSIsInRpdGxlIjoi4oCY4oCY4oCZ4oCZPHNtYWxsPuebtOaSrTwvc21hbGw+IiwidXJsIjoiQGpzOiAkKCdoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IyNmdWxsVGhlbWUjJykucnVsZSgoKSA9PiB7ICAgICBzZXRQYWdlVGl0bGUoJ+aYn+ays+ebtOaSrScpOyAgICAgbGV0IGQgPSBbXTsgICAgIGxldCBpZCA9IGdldEl0ZW0oJ+aYn+ays+ebtOaSrScsICdsb3ZlUHJvJyk7ICAgICBkLnB1c2goeyAgICAgICAgIHRpdGxlOiAn5pif5rKz55u05pKtJywgICAgICAgICBkZXNjOiBnZXRJdGVtKCfmmJ/msrPnm7Tmkq0nLCAnbG92ZVBybycpID09ICdsb3ZlUHJvJyA/ICfikaAnIDogJ+KRoScsICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLCAgICAgICAgIHBpYzogJ2h0dHBzOi8vZmF2aWNvbi5xcXN1dS5jbi9odHRwczovL20ubWFveWFuLmNvbS8nLCAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7ICAgICAgICAgICAgIHNldEl0ZW0oJ+aYn+ays+ebtOaSrScsIGdldEl0ZW0oJ+aYn+ays+ebtOaSrScsICdsb3ZlUHJvJykgPT0gJ2xvdmVQcm8nID8gJ2xvdmUnIDogJ2xvdmVQcm8nKTsgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICB0b2FzdCgn5bey5YiH5o2iJyArIChnZXRJdGVtKCfmmJ/msrPnm7Tmkq0nLCAnbG92ZVBybycpID09ICdsb3ZlUHJvJyA/ICfikaAnIDogJ+KRoScpKTsgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5JyAgICAgICAgIH0pLCAgICAgfSk7ICAgICB0cnkgeyAgICAgICAgIGV2YWwoJ2E9JyArIGZldGNoKCdoaWtlcjovL2ZpbGVzL0ptL2xpdmUvJyArIGlkICsgJy5qc29uJykpOyAgICAgICAgIGEuZm9yRWFjaChmdW5jdGlvbihiKSB7ICAgICAgICAgICAgIHZhciBjID0gYi5zcGxpdCgnQCcpOyAgICAgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICAgICAgdGl0bGU6IGNbMF0sICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2F2YXRhcicsICAgICAgICAgICAgICAgICBwaWM6ICdoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMjIxLnBuZycsICAgICAgICAgICAgICAgICB1cmw6ICd2aWRlbzovLycgKyBjWzFdLCAgICAgICAgICAgICB9KTsgICAgICAgICB9KTsgICAgIH0gY2F0Y2gge30gICAgIHNldFJlc3VsdChkKTsgfSk7IiwiaWNvbiI6IiIsImRlc2MiOiIiLCJ0eXBlIjoidGV4dF80In0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLlrabkuaDotYTmlpkiLCJ0aXRsZSI6IuKAmOKAmOKAmeKAmTxzbWFsbD7lrabkuaA8L3NtYWxsPiIsInVybCI6IkBqczogJCgnaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCgpID0+IHsgICAgIHNldFBhZ2VUaXRsZSgn5a2m5Lmg6LWE5paZJyk7ICAgICBsZXQgdGl0bGVzID0gWydUSFhGRzAzJywn6LaF5p6B5ZOB6Lqr5p2Q6Iie6LmI5a2m6Zmi5a2m5aeQ5aWz56WeJywn576O5bCR5aWzJywgJ+eUn+eJqeWls+aVmeW4iOWSjOWtpueUn+eahOengeaIv+aOiOivvicsJ+eBq+eIhue9kee6oum5v+WwkeWls+WJp+aDhea8lOe7jicsICfmv4Dmg4UnLCfprZTprLzouqvmnZDnvZHnuqLpub/lsJHlpbPml6DnoIHpnLLohLjliLbmnI0nLCfpu5HkuJ3nvo7ohb/lpbPnpZ4nLCflpJrkurrngavmi7wnLCfmjqjojZAt5qOS5qOS5ZOSJywn5bCP5aeQ5aeQJywn56eA6Imy5Y+v6aSQJywn5p2o5bmCJywn5qyj6LWP5bCP5aeQ5aeQJywn5aWz56We5bCP5bCP55qE5oCn6L6F5a+8J107ICAgICBsZXQgZCA9IFtdOyAgICAgbGV0IGltZyA9ICdoaWtlcjovL2ZpbGVzL0ptL2xtL21vdmllLzIyLnN2Zyc7ICAgICB0aXRsZXMuZm9yRWFjaChmdW5jdGlvbih0KSB7ICAgICAgICAgbGV0IHVybCA9IGdldFBhdGgoJ2hpa2VyOi8vZmlsZXMvSm0vdmlkZW8vJyArIHQgKyAnLm1wNCcpOyAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgIHRpdGxlOiB0LCAgICAgICAgICAgICBwaWM6IGltZywgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLCAgICAgICAgICAgICB1cmw6ICd2aWRlbzovLycrdXJsLCAgICAgICAgIH0pOyAgICAgfSk7ICAgICBzZXRSZXN1bHQoZCk7IH0pIiwiaWNvbiI6IiIsImRlc2MiOiIiLCJ0eXBlIjoidGV4dF80In1dLCJmb2xkX3N0YXR1cyI6ZmFsc2UsInBhdHRlcm4iOjMsIm5hbWUiOiLkupHnn6Xkuabnrb7nu4QifSx7Im5hbWUiOiLmtbfmiqXkuabnrb7nu4QiLCJtYXJrIjoi5rW35oql5byA5YWzIiwibGlzdCI6W3sic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoiVGFi6Zi05b2xIiwidGl0bGUiOiIiLCJ1cmwiOiIiLCJpY29uIjoiIiwiZGVzYyI6IiIsInR5cGUiOiJsaW5lIn0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiLmtbfmiqUiLCJ0aXRsZSI6Iua1t+aKpSIsInVybCI6IkBqczpmYXN0R3JhbW1hcihcIjxUYWI+QFsn5rW35oql5Lmm562+57uEJywn5rW35oql5byA5YWzJ11cIixvcmRlcikiLCJpY29uIjoiaGlrZXI6Ly9maWxlcy9KbS9sbS9tb3JlLzM4LnBuZyIsImRlc2MiOiI8c21hbGw+5byA5YWzPC9zbWFsbD4iLCJ0eXBlIjoiYXZhdGFyIn0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiJUYWJf6aG65pCc5YWD57SgIiwidGl0bGUiOiJAanM6ZmFzdEdyYW1tYXJGb3JUZXh0KFwiPFRhYj5AWyfigJjigJjigJnigJk8c21hbGw+PGZvbnQgY29sb3I9IzFBQjE2Qj7pobrmkJw8L2ZvbnQ+PC9zbWFsbD4nLCfigJjigJjigJnigJk8c21hbGw+6aG65pCcPC9zbWFsbD4nXVwiLFwiPFRhYj5AWyfpobrmkJwnXVwiLG9yZGVyKSIsInVybCI6IkBqczpmYXN0R3JhbW1hcihcIjxUYWI+QFsn6aG65pCcJywn5rW35oqlJ11cIixvcmRlcikiLCJpY29uIjoiIiwiZGVzYyI6IiIsInR5cGUiOiJ0ZXh0XzUifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6IlRhYl/lpKnmsJTmtbfmiqUiLCJ0aXRsZSI6IkBqczpmYXN0R3JhbW1hckZvclRleHQoXCI8VGFiPkBbJ+KAmOKAmOKAmeKAmTxzbWFsbD48Zm9udCBjb2xvcj0jMUFCMTZCPuWkqeawlDwvZm9udD48L3NtYWxsPicsJ+KAmOKAmOKAmeKAmTxzbWFsbD7lpKnmsJQ8L3NtYWxsPiddXCIsXCI8VGFiPkBbJ+WkqeawlCddXCIsb3JkZXIpIiwidXJsIjoiQGpzOmZhc3RHcmFtbWFyKFwiPFRhYj5AWyflpKnmsJQnLCfmtbfmiqUnXVwiLG9yZGVyKSIsImljb24iOiIiLCJkZXNjIjoiIiwidHlwZSI6InRleHRfNSJ9LHsic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoiVGFiX+ixhueTo+a1t+aKpSIsInRpdGxlIjoiQGpzOmZhc3RHcmFtbWFyRm9yVGV4dChcIjxUYWI+QFsn4oCY4oCY4oCZ4oCZPHNtYWxsPjxmb250IGNvbG9yPSMxQUIxNkI+6LGG55OjPC9mb250Pjwvc21hbGw+Jywn4oCY4oCY4oCZ4oCZPHNtYWxsPuixhueTozwvc21hbGw+J11cIixcIjxUYWI+QFsn6LGG55OjJ11cIixvcmRlcikiLCJ1cmwiOiJAanM6ZmFzdEdyYW1tYXIoXCI8VGFiPkBbJ+ixhueToycsJ+a1t+aKpSddXCIsb3JkZXIpIiwiaWNvbiI6IiIsImRlc2MiOiIiLCJ0eXBlIjoidGV4dF81In0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiJUYWJf6L2u5pKt5rW35oqlIiwidGl0bGUiOiJAanM6ZmFzdEdyYW1tYXJGb3JUZXh0KFwiPFRhYj5AWyfigJjigJjigJnigJk8c21hbGw+PGZvbnQgY29sb3I9IzFBQjE2Qj7ova7mkq08L2ZvbnQ+PC9zbWFsbD4nLCfigJjigJjigJnigJk8c21hbGw+6L2u5pKtPC9zbWFsbD4nXVwiLFwiPFRhYj5AWyfova7mkq0nXVwiLG9yZGVyKSIsInVybCI6IkBqczpmYXN0R3JhbW1hcihcIjxUYWI+QFsn6L2u5pKtJywn5rW35oqlJ11cIixvcmRlcikiLCJpY29uIjoiIiwiZGVzYyI6IiIsInR5cGUiOiJ0ZXh0XzUifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6IlRhYl/op4bpopHmtbfmiqUiLCJ0aXRsZSI6IkBqczpmYXN0R3JhbW1hckZvclRleHQoXCI8VGFiPkBbJ+KAmOKAmOKAmeKAmTxzbWFsbD48Zm9udCBjb2xvcj0jMUFCMTZCPuinhumikTwvZm9udD48L3NtYWxsPicsJ+KAmOKAmOKAmeKAmTxzbWFsbD7op4bpopE8L3NtYWxsPiddXCIsXCI8VGFiPkBbJ+inhumikSddXCIsb3JkZXIpIiwidXJsIjoiQGpzOmZhc3RHcmFtbWFyKFwiPFRhYj5AWyfop4bpopEnLCfmtbfmiqUnXVwiLG9yZGVyKSIsImljb24iOiIiLCJkZXNjIjoiIiwidHlwZSI6InRleHRfNSJ9XSwiZm9sZF9zdGF0dXMiOmZhbHNlLCJwYXR0ZXJuIjozfSx7Im5hbWUiOiLkuLvpopjlvIDlhbMiLCJtYXJrIjoiIiwibGlzdCI6W3sic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi5byA5YWz6Zi05b2xIiwidGl0bGUiOiIiLCJ1cmwiOiIiLCJpY29uIjoiIiwiZGVzYyI6IiIsInR5cGUiOiJsaW5lIn0seyJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjAsIm5hbWUiOiIxIiwidGl0bGUiOiIiLCJ1cmwiOiIiLCJpY29uIjoiIiwiZGVzYyI6IiIsInR5cGUiOiJiaWdfYmxhbmtfYmxvY2sifSx7InRpdGxlIjoiIiwidXJsIjoiIiwiaWNvbiI6IiIsImRlc2MiOiIiLCJ0eXBlIjoiYmlnX2JsYW5rX2Jsb2NrIiwibmFtZSI6IjIiLCJzdGF0dXMiOnRydWUsInBhdHRlcm4iOjB9LHsic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi5rW35oqlX+W8gOWFsyIsInRpdGxlIjoiQGpzOmZhc3RHcmFtbWFyRm9yVGV4dChcIjxUYWI+QFsn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9IzFBQjE2Qj7mtbfmiqU8L2ZvbnQ+Jywn5rW35oqlJ11cIixcIjxUYWI+QFsn5rW35oql5Lmm562+57uEJ11cIixvcmRlcikiLCJ1cmwiOiJAanM6ZmFzdEdyYW1tYXIoXCI8VGFiPkBbJ+a1t+aKpeS5puetvue7hCcsJ+a1t+aKpeW8gOWFsyddXCIsb3JkZXIpIiwiaWNvbiI6IiIsImRlc2MiOiIiLCJ0eXBlIjoic2Nyb2xsX2J1dHRvbiJ9LHsic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi5LiA6KiAX+aXpeWOhuW8gOWFsyIsInRpdGxlIjoiQGpzOmZhc3RHcmFtbWFyRm9yVGV4dChcIjxUYWI+QFsn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9IzFBQjE2Qj7kuIDoqIA8L2ZvbnQ+Jywn5LiA6KiAJ11cIixcIjxUYWI+QFsn5LiA6KiAJ11cIixvcmRlcikiLCJ1cmwiOiJAanM6ZmFzdEdyYW1tYXIoXCI8VGFiPkBbJ+S4gOiogCcsJ+S4gOiogCddXCIsb3JkZXIpIiwiaWNvbiI6IiIsImRlc2MiOiIiLCJ0eXBlIjoic2Nyb2xsX2J1dHRvbiJ9LHsic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjowLCJuYW1lIjoi5pS26JePX+eoi+W6j+W8gOWFsyIsInRpdGxlIjoiQGpzOmZhc3RHcmFtbWFyRm9yVGV4dChcIjxUYWI+QFsn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9IzFBQjE2Qj7mlLbol488L2ZvbnQ+Jywn5pS26JePJ11cIixcIjxUYWI+QFsn5pS26JePJ11cIixvcmRlcikiLCJ1cmwiOiJAanM6ZmFzdEdyYW1tYXIoXCI8VGFiPkBbJ+aUtuiXjycsJ+Wwj+a1t+aKpSddXCIsb3JkZXIpIiwiaWNvbiI6IiIsImRlc2MiOiIiLCJ0eXBlIjoic2Nyb2xsX2J1dHRvbiJ9LHsic3RhdHVzIjp0cnVlLCJwYXR0ZXJuIjoyLCJuYW1lIjoi5pu05pawUSIsImNvZGUiOiJsZXQg5Z+f5ZCNID0gJ2h0dHBzOi8vaGFpa3VvLmxhbnpvdWkuY29tLydcblxubGV0IGdldE5ld2VzdCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICBsZXQgaHRtbCA9IGZldGNoKHVybCk7XG4gICAgZXZhbChodG1sLm1hdGNoKC92YXIgcGdzOyhbXFxzXFxTXSo/KWRvY3VtZW50LylbMV0pO1xuICAgIGV2YWwoJ3ZhciBib2R5ID0nICsgaHRtbC5tYXRjaCgvZGF0YSA6KFtcXHNcXFNdKj9cXH0pLylbMV0pO1xuICAgIGxldCBhcnIgPSBKU09OLnBhcnNlKHBvc3QodXJsLm1hdGNoKC9odHRwcyo6XFwvXFwvW15cXC9dK1xcLy8pWzBdICsgJ2ZpbGVtb3JlYWpheC5waHAnLCB7XG4gICAgICAgICAgICAgICAgYm9keTogYm9keVxuICAgICAgICAgICAgfSkpLnRleHQ7XG4gICAgbGV0IG5ld0FyciA9IGFyci5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgICAgICAgcmV0dXJuIHAubmFtZV9hbGwuc3RhcnRzV2l0aChcIua1t+mYlOinhueVjF9cIikgJiYgcC5uYW1lX2FsbC5zcGxpdCgnXycpWzJdLm1hdGNoKC9bMC05XSsvKVswXSA+IGdldEFwcFZlcnNpb24oKTtcbiAgICB9KTtcbiAgICBpZiAobmV3QXJyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IGRpY3QgPSB7fTtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSBpbiBuZXdBcnIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHVzaChuZXdBcnJbaV0ubmFtZV9hbGwucmVwbGFjZSgv5rW36ZiU6KeG55WMXy8sICcnKSk7XG4gICAgICAgICAgICBkaWN0W25ld0FycltpXS5uYW1lX2FsbF0gPSBuZXdBcnJbaV0uaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQob3B0aW9ucywgMSkuc2VsZWN0KChkLCB1cmwpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZGljdCA9IEpTT04ucGFyc2UoZCk7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbGF6eShmaWxlVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkKGZpbGVVcmwpLmxhenlSdWxlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9kZXZlbG9wZXIubGFuem91Zy5jb20vZmlsZS8nICsgcmVxdWVzdChpbnB1dCkubWF0Y2goLycoXFw/Lio/KScvKVsxXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogJ01vemlsbGEvNS4wJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhIZWFkZXJzOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5oZWFkZXJzLmxvY2F0aW9uWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbGF6eSh1cmwubWF0Y2goL2h0dHBzKjpcXC9cXC9bXlxcL10rXFwvLylbMF0gKyAndHAvJyArIGRpY3RbJ+a1t+mYlOinhueVjF8nICsgaW5wdXRdKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShkaWN0KSwgdXJsKTtcbiAgICB9IGVsc2VcbiAgICAgICAgcmV0dXJuICd0b2FzdDovL+ayoeacieabtOaWsOeahOeJiOacrCdcbn1cbmxldCBnID0gW107XG5nLnB1c2goe1xuICAgIHRpdGxlOiAn5pu05pawJyxcbiAgICB1cmw6ICQo5Z+f5ZCNICsgXCJ1L0dvbGRSaXZlclwiKS5sYXp5UnVsZSgoZ2V0TmV3ZXN0KSA9PiB7XG5cdFx0cmV0dXJuIGdldE5ld2VzdChpbnB1dClcblx0fSxnZXROZXdlc3QpLFxuICAgIC8qaW1nOiAnaHR0cHM6Ly9oaWtlcmZhbnMuY29tL3R1Ymlhby9tb3ZpZS83Ny5zdmcnLCovXG4gICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xufSk7XG5nXG4ifSx7InN0YXR1cyI6dHJ1ZSwicGF0dGVybiI6MCwibmFtZSI6Iua3u+WKoOS5puetviIsInRpdGxlIjoi5re75YqgIiwidXJsIjoiQGpzOiQoKS54NWNLZXkoJ2FiYkJvb2tAJyArIChUaGlzX0dyb3VwID8gVGhpcy5uYW1lIDogJyPnqbrnmb3nu4QjJykgKyAnQCcgKyAob3JkZXJfR3JvdXAgPT09IHVuZGVmaW5lZCA/IG9yZGVyIDogb3JkZXJfR3JvdXApKTsiLCJpY29uIjoiaGlrZXI6Ly9pbWFnZXMv5re75YqgIiwiZGVzYyI6IiIsInR5cGUiOiJzY3JvbGxfYnV0dG9uIn1dLCJmb2xkX3N0YXR1cyI6dHJ1ZSwicGF0dGVybiI6M30seyJuYW1lIjoi5rWL6K+VIiwidGl0bGUiOiLmtYvor5UiLCJ0eXBlIjoidGV4dF8yIn0seyJuYW1lIjoi5rWL6K+VMSIsInRpdGxlIjoi5rWL6K+VMSIsInVybCI6IkBqczogJCgnaGlrZXI6Ly9lbXB0eSNmdWxsVGhlbWUjI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5IycpLnJ1bGUoKCkgPT4geyAgICAgc2V0UGFnZVRpdGxlKCcnKTsgICAgIGxldCBkID0gW107ICAgICBsZXQgeG1seV9maWxlID0gJ2hpa2VyOi8vZmlsZXMvSm0vZmlsZS94bWx5LmpzJzsgICAgIGxldCB4bWx5X3hxID0gYGxldCBkID0gW107ICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHA6Ly9tb2JpbGUueGltYWxheWEuY29tL21vYmlsZS9vdGhlcnMvY2EvYWxidW0vdHJhY2svJyArIGlkICsgJy8nICsgYXNjICsgJy8nICsgcGFnZSArICcvNjA/YWxidW1JZD0nICsgaWQgKyAnJnBhZ2VTaXplPTYwJmlzQXNjPScgKyBhc2MgKyAnJnBvc2l0aW9uPTEmZGV2aWNlPWFuZHJvaWQnKSk7ICAgICAgICAgbGV0IHBhZ2UgPSBnZXRWYXIoJ3htbHlfcGFnZScsICcxJyk7ICAgICAgICAgbGV0IGFzYyA9IGdldFZhcign5o6S5bqPJywgJ3RydWUnKTsgICAgICAgICBpZiAoTVlfUEFHRSA9PSAxKSB7ICAgICAgICAgICAgIGxldCB0b3RhbCA9IE1hdGguY2VpbChqc29uLmFsYnVtLnRyYWNrcyAvIDYwKTsgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncGljXzFfZnVsbCcsICAgICAgICAgICAgICAgICBwaWM6IGpzb24uYWxidW0uY292ZXJMYXJnZS5zcGxpdCgnIScpWzBdLCAgICAgICAgICAgICAgICAgdXJsOiAkKCcnLCAn6ZyA6KaB57+76aG155qE5pWw5a2X77yM5q+P6aG1NjDjgIJcXG5cXG7lhbHvvJogJyArIGpzb24uYWxidW0udHJhY2tzICsgJ+adoeiKguebru+8jCAnICsgcGFnZSArICcgLyAnICsgdG90YWwgKyAn6aG144CCJykuaW5wdXQoKHRvdGFsKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgeyAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0OiAvL+ivt+i+k+WFpemhteeggSc7ICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA+IHRvdGFsKSB7ICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fovpPlhaXmraPluLjpobXnoIEnOyAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICBwdXRWYXIoJ3htbHlfcGFnZScsIGlucHV0KTsgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5JyAgICAgICAgICAgICAgICAgfSwgdG90YWwpLCAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgIHRpdGxlOiAn5Li75pKtOiAnICsganNvbi5hbGJ1bS5uaWNrbmFtZSArICdcdFx06IqC55uuKCcgKyBqc29uLmFsYnVtLnRyYWNrcyArICcpJywgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJywgICAgICAgICAgICAgICAgIHBpYzogYXNjID09ICd0cnVlJyA/ICdoaWtlcjovL2ZpbGVzL0ptL2xtL21lc3N5LzEyMy5zdmcnIDogJ2hpa2VyOi8vZmlsZXMvSm0vbG0vbWVzc3kvMTI0LnN2ZycsICAgICAgICAgICAgICAgICBkZXNjOiBhc2MgPT0gJ3RydWUnID8gJzxmb250IGNvbG9yPSNGQTcyOTg+5pyA5pawPC9mb250PicgOiAnPGZvbnQgY29sb3I9I0ZBNzI5OD7pobrluo88L2ZvbnQ+JywgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgaWYgKGdldFZhcign5o6S5bqPJywgJ3RydWUnKSA9PSAnZmFsc2UnKSB7ICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVmFyKCfmjpLluo8nKTsgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICBwdXRWYXIoJ+aOkuW6jycsICdmYWxzZScpOyAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5JyAgICAgICAgICAgICAgICAgfSksICAgICAgICAgICAgIH0sIHsgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZScsICAgICAgICAgICAgIH0pOyAgICAgICAgIH0gICAgICAgICBqc29uLnRyYWNrcy5saXN0LmZvckVhY2goKGopID0+IHsgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgIHRpdGxlOiBqLnRpdGxlLCAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLCAgICAgICAgICAgICAgICAgdXJsOiBqLnBsYXlVcmw2NCArICcjaXNNdXNpYz10cnVlIycsICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRUaXRsZTogZmFsc2UgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgfSk7ICAgICAgICAgfSk7ICAgICAgICAgc2V0UmVzdWx0KGQpO2A7ICAgICBpZiAoIWZpbGVFeGlzdCh4bWx5X2ZpbGUpKSB7ICAgICAgICAgc2F2ZUZpbGUoeG1seV9maWxlLCB4bWx5X3hxKTsgICAgIH0gICAgIGQucHVzaCh7ICAgICAgICAgdGl0bGU6ICfllpzpqazmi4npm4UnLCAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJywgICAgICAgICBwaWM6ICdoaWtlcjovL2ZpbGVzL0ptL2xtL21vcmUvMjU4LnBuZycsICAgICAgICAgZGVzYzogJ+euoeeQhicsICAgICAgICAgdXJsOiBcInNlbGVjdDovL1wiICsgSlNPTi5zdHJpbmdpZnkoeyAgICAgICAgICAgICBvcHRpb25zOiBbXCLnrqHnkIZcIiwgXCLpu5jorqRcIl0sICAgICAgICAgICAgIGF0dGFjaFZpZXc6IHRydWUsICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHsgICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PSAn566h55CGJykgeyAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5I25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKCgpID0+IHsgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfmlbDmja7nrqHnkIYnKTsgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTsgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5re75YqgJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnaW5wdXQnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+WQjeensEBpZEDlm77niYfpk77mjqVA5Li75pKt5ZCN56ewJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJC50b1N0cmluZygoKSA9PiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIFwidG9hc3Q6Ly/or7fmoLnmja7mj5DnpLrovpPlhaXlhoXlrrlcIjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgeG1seSA9IEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3htbHkuanNvbicpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWx5ID0geG1seS5jb25jYXQoaW5wdXQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL2ZpbGUveG1seS5qc29uJywgSlNPTi5zdHJpbmdpZnkoeG1seSkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5re75Yqg5oiQ5YqfJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeG1seSA9IEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3htbHkuanNvbicpKTsgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB4bWx5Lmxlbmd0aDsgaSsrKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHhtbHlbaV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IGl0ZW0uc3BsaXQoJ0AnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGluZGV4ICsgJy4nICsgbGlzdFswXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzMnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogbGlzdFsyXSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoWyfnvJbovpEnLCAn56e75L2NJywgJ+WIoOmZpCddLCAzLCAn6K+36YCJ5oup5pON5L2cJykuc2VsZWN0KChpbmRleCwgaXRlbSkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+e8lui+kScpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKGl0ZW0sICfmg7PopoHmm7TmjaLnmoTlhoXlrrlcXG7lkI3np7AtaWQt5Zu+54mH6ZO+5o6lLeS4u+aSreWQjeensCcpLmlucHV0KChpbmRleCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4bWx5ID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL2ZpbGVzL0ptL2ZpbGUveG1seS5qc29uJykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbHlbaW5kZXhdID0gaW5wdXQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0vZmlsZS94bWx5Lmpzb24nLCBKU09OLnN0cmluZ2lmeSh4bWx5KSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/mm7TmlLnmiJDlip9+JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaW5kZXgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+enu+S9jScpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCcnLCAn6KaB56e75Yqo5Yiw5ZOq5Liq5bqP5Y+35YmN6Z2iL+WQjumdoicpLmlucHV0KChpbmRleCkgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4bWx5ID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL2ZpbGVzL0ptL2ZpbGUveG1seS5qc29uJykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0geG1seVtpbmRleF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1seS5zcGxpY2UoaW5wdXQsIDAsIHRlbXApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCA8IGluZGV4KSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbHkuc3BsaWNlKGluZGV4ICsgMSwgMSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1seS5zcGxpY2UoaW5kZXgsIDEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3htbHkuanNvbicsIEpTT04uc3RyaW5naWZ5KHhtbHkpKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+enu+S9jeaIkOWKn34nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpbmRleCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4bWx5ID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL2ZpbGVzL0ptL2ZpbGUveG1seS5qc29uJykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1seS5zcGxpY2UoaW5kZXgsIDEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvSm0vZmlsZS94bWx5Lmpzb24nLCBKU09OLnN0cmluZ2lmeSh4bWx5KSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5Yig6Zmk5oiQ5YqfficgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGluZGV4LCBpdGVtKSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKzsgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7ICAgICAgICAgICAgICAgICAgICAgfSkgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgZGVsZXRlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3htbHkuanNvbicpOyAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5oGi5aSN6buY6K6kJyAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICB9KSAgICAgICAgIH0pLCAgICAgfSk7ICAgICBkLnB1c2goeyAgICAgICAgIHRpdGxlOiAn5pCc57SiJywgICAgICAgICBkZXNjOiAn6L6T5YWl5L2g5oOz5pCc57Si55qEJywgICAgICAgICBjb2xfdHlwZTogJ2lucHV0JywgICAgICAgICB1cmw6ICQudG9TdHJpbmcoKCkgPT4geyAgICAgICAgICAgICBpZiAoIWlucHV0KSByZXR1cm4gXCJ0b2FzdDovL+ivt+i+k+WFpeWFs+mUruivjVwiOyAgICAgICAgICAgICBsZXQgdHh0ID0gaW5wdXQ7ICAgICAgICAgICAgIHNldEl0ZW0oJ+mbheWQrCcsIHR4dCk7ICAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5IyNmeXBhZ2UjZnVsbFRoZW1lIyNub1JlY29yZEhpc3RvcnkjJykucnVsZSgodHh0KSA9PiB7ICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHA6Ly9zZWFyY2gueGltYWxheWEuY29tL2Zyb250L3YxP2RldmljZT1hbmRyb2lkJmNvbmRpdGlvbj1yZWxhdGlvbiZjb3JlPWFsYnVtJnNwZWxsY2hlY2tlcj10cnVlJmt3PScgKyB0eHQgKyAnJnBhZ2U9JyArIE1ZX1BBR0UgKyAnJnJvd3M9NjAnKSkucmVzcG9uc2UuZG9jczsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24ubWFwKGwgPT4geyAgICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSBsLmNvdmVyX3BhdGguc3BsaXQoJyEnKVswXTsgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBsLmlkOyAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljJywgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+KAmOKAmOKAmeKAmTxmb250IGNvbG9yPSNGQTcyOTg+JyArIGwuaW50cm8gKyAnPC9mb250PicsICAgICAgICAgICAgICAgICAgICAgICAgIHBpYzogaW1nLCAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjI2ltbWVyc2l2ZVRoZW1lIycpLnJ1bGUoKGwsIGlkKSA9PiB7bGV0IHJlcXVpcmUoJ2hpa2VyOi8vZmlsZXMvSm0vZmlsZS94bWx5LmpzJyk7fSwgbCwgaWQpLCAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYTogeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdFRpdGxlOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+a3u+WKoOWIsOmmlumhtScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGwsIGltZykgPT4geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGluayA9IChsLnRpdGxlICsgJ0AnICsgbC5pZCArICdAJyArIGltZyArICdAJyArIGwubmlja25hbWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWx5ID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL2ZpbGVzL0ptL2ZpbGUveG1seS5qc29uJykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWx5ID0geG1seS5jb25jYXQobGluayk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL0ptL2ZpbGUveG1seS5qc29uJywgSlNPTi5zdHJpbmdpZnkoeG1seSkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrKHRydWUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5re75Yqg5oiQ5YqfJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGwsIGltZykgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLCAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTsgICAgICAgICAgICAgfSwgdHh0KSAgICAgICAgIH0pLCAgICAgICAgIGV4dHJhOiB7ICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0SXRlbSgn6ZuF5ZCsJywgJycpLCAgICAgICAgICAgICBvbkNoYW5nZTogJ3NldEl0ZW0oXCLpm4XlkKxcIixpbnB1dCknLCAgICAgICAgIH0gICAgIH0pOyAgICAgbGV0IHhtbHlfdGl0bGUgPSBbJ+acieWjsOS5picsICfpn7PkuZAnLCAn55u45aOw6K+E5LmmJywgJ+W5v+aSreWJpycsICflqLHkuZAnLCAn5b2x6KeGJywgJ+WEv+erpScsICfljoblj7InLCAn5ZWG5Lia6LSi57uPJywgJ+S6uuaWhycsICfmlZnogrLln7norq0nLCAnSVTnp5HmioAnLCAn5aSW6K+tJywgJ+WktOadoScsICfkuozmrKHlhYMnLCAn5oiP5puyJywgJ+aXhea4uCcsICflgaXlurflhbvnlJ8nLCAn5pe25bCa55Sf5rS7J107ICAgICB2YXIgeG1seV9pZCA9IFsneW91c2hlbmdzaHUnLCAneWlueXVlJywgJ3hpYW5nc2hlbmcnLCAnZ3Vhbmdib2p2JywgJ3l1bGUnLCAneWluZ3NoaScsICdlcnRvbmcnLCAnbGlzaGknLCAnc2hhbmd5ZScsICdyZW53ZW4nLCAnamlhb3l1JywgJ2tlamknLCAnd2FpeXUnLCAndG91dGlhbycsICdlcmNpeXVhbicsICd4aXF1JywgJ2x2eW91JywgJ2ppYW5rYW5nJywgJ3NoaXNoYW5nJ107ICAgICBsZXQgeG1seV9mbCA9IHhtbHlfdGl0bGUubWFwKChpdGVtLCBpbmRleCkgPT4geyAgICAgICAgIHJldHVybiB7ICAgICAgICAgICAgIG5hbWU6IGl0ZW0sICAgICAgICAgICAgIGlkOiB4bWx5X2lkW2luZGV4XSAgICAgICAgIH07ICAgICB9KTsgICAgIHhtbHlfZmwubWFwKGogPT4geyAgICAgICAgIGQucHVzaCh7ICAgICAgICAgICAgIHRpdGxlOiBqLm5hbWUsICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNmdWxsVGhlbWUjI25vUmVjb3JkSGlzdG9yeSMnKS5ydWxlKChqKSA9PiB7ICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdOyAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8vbS54aW1hbGF5YS5jb20vbS1yZXZpc2lvbi9wYWdlL3JhbmsvcXVlcnlSYW5rP2NsdXN0ZXJDb2RlPXJpc2UmcGFnZT0xJmNhdGVnb3J5Q29kZT0nICsgai5pZCkpLmRhdGE7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24ucmFua01vZHVsZUluZm9MaXN0Lm1hcChsID0+IHsgICAgICAgICAgICAgICAgICAgICBsZXQgaW1nID0gJ2h0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vJyArIGwuYWxidW1JbmZvLmNvdmVyOyAgICAgICAgICAgICAgICAgICAgIGxldCBpZCA9IGwuaWQ7ICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHsgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGwuYWxidW1JbmZvLnRpdGxlLCAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljJywgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogbC5hbGJ1bUluZm8uc2hvcnRJbnRybyA/ICfigJjigJjigJnigJk8Zm9udCBjb2xvcj0jRkE3Mjk4PicgKyBsLmFsYnVtSW5mby5zaG9ydEludHJvICsgJzwvZm9udD4nIDogJ+KAmOKAmOKAmeKAmTxmb250IGNvbG9yPSNGQTcyOTg+JyArIGwuYWxidW1JbmZvLnNhbGVQb2ludCArICc8L2ZvbnQ+JywgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBpbWcsICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjJykucnVsZSgobCwgaWQpID0+IHtsZXQgcmVxdWlyZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3htbHkuanMnKTt9LCBsLCBpZCksICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgfSwgaiksICAgICAgICAgfSk7ICAgICB9KTsgICAgIGlmICghZmlsZUV4aXN0KCdoaWtlcjovL2ZpbGVzL0ptL2ZpbGUveG1seS5qc29uJykpIHsgICAgICAgICBzYXZlRmlsZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3htbHkuanNvbicsICdbXCIxMOWIhumSn+aWsOmXu+aXqemkkEA2ODU4OTM1N0BodHRwczovL2ltYWdldjIueG1jZG4uY29tL3N0b3JhZ2VzLzBmMzQtYXVkaW9mcmVlaGlnaHFwcy85RC82Ny9HS3dSSVJ3R2VIU2JBQUY1bEFGb1RDWGkuanBlZ0DllpzpqazlpLTmnaFcIiwgXCLnu5nkvaDmrYzkuIDmm7JAMzY0MTc4QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vc3RvcmFnZXMvNTkyYy1hdWRpb2ZyZWVoaWdocXBzLzNGLzM5L0dLd1JJRG9JNHhjcEFBN1dfQUplMzNVUy5qcGVnQOW8oOe+ilwiLCBcIumfs+S5kOS8mOWTgUAyNjUwMDA5QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA0MC9NMEIvNDIvOUEvd0tnSlZGcWp1ZkR3Si0yN0FBRXRZenkyU3dzMDE3LmpwZ0DkuLvmkq3lj7blrZBcIiwgXCLnlJ/mtLvmnYLlv5dAMzY2MzA2MDZAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDc1L00wNi84My8wRS93S2dPMDE2UlE0ZXdpeC1NQUNhcDFfYl9KS2MyMDcuanBnQE1ha2VWb2ljZVwiLCBcIumdnuW4uOa6nOS9s+acn3zniIbnrJHlkJDmp73mrKLkuZDop6PljotAMjQ5MDIwQGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXAzMC9NMEIvQkUvMTEvd0tnSlhsblNabHpob3Y2ckFBR3lSdEhQSkJnMjU0LmpwZ0DkvbPmnJ9cIiwgXCLmrrXlrZDmnaXkuoZAMjAzMzU1QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA1L00wMy9BNi9EOC93S2dEdGxSMU1EX1QxRFFIQUFOcVpEeWs0OHM3MjAuanBnQOmHh+mHh1wiLCBcIuS4gOWNg+mbtuS4gOeske+9nOedoeedgOmDveiDveeskemGkueahOauteWtkEAyMzc0MjI2OUBodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwNjAvTTA2LzQwLzgzL3dLZ0xiMXprSEllZ2xyNlZBQi14MDZLaFdKTTkxNy5qcGdA6aW85bmyR0FOXCIsIFwi5Lic5YyX6K6y56yR6K+dQDM1NTU4NzBAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDQ0L00wMC9BRi9CQy93S2dLakZzd0xydkJpVENDQUFoUEVEMHppM1E3ODYuanBnQOmYv+WTiOS4nOWMl1wiLCBcIuWmmeWuh+i/nuacseKUgui2o+mXu+WQkOanvSDniIbnrJHmnInmlpnvvIFAMjcwNTM1QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA3Ni9NMDkvMDYvQjQvd0tnTzNsNUdSdmVCeTlQZkFBUkVPLWp0V0YwMDQ3LmpwZ0DmnLHlrodcIiwgXCLku4rmmZrohLHlj6Pnp4BANDczNTQyMkBodHRwczovL2ltYWdldjIueG1jZG4uY29tL3N0b3JhZ2VzL2FhNjMtYXVkaW9mcmVlaGlnaHFwcy85QS85NC9DTUNvT1NRRHk0X1hBQUNQaGdCNF9CaU4uanBnQOS7iuaZmuiEseWPo+engFwiLCBcIuaAu+aciei/meagt+eahOatjOWPquaDs+S4gOS4quS6uuWQrEAzNTk1ODQxQGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA1NC9NMDMvQkUvODkvd0tnTGNsdzF5MlBqRU5EOEFBR04yU0tQUE5NMzkxLmpwZ0DngbDlp5HlqJjpn7PkuZBcIiwgXCLmgLvmnInkuIDpppbmrYzkuKjkvJrorqnkvaDljZXmm7Llvqrnjq/liLDmg7Plk61ANDU1MjUxOTJAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9zdG9yYWdlcy8xNzNkLWF1ZGlvZnJlZWhpZ2hxcHMvMUQvQUMvR0t3UklKRUdEZ19JQUFPUFlRRXRQN3ZpLmpwZWdA54Of6Iqx6L+35Lq655y8XCIsIFwi6Z+z5LmQ6K6w5LqL5pysfOS4gOmmluatjOS4gOS4quaVheS6i0A0NzIxMDAzMEBodHRwczovL2ltYWdldjIueG1jZG4uY29tL3N0b3JhZ2VzLzkyM2EtYXVkaW9mcmVlaGlnaHFwcy85RS84Ri9HS3dSSVVFSGpEekdBQUdHREFIbzA5TU0uanBnQOafoOaqrOmmmemmmUZNXCIsIFwi6YKj5Lqb5aW95ZCs55qE5aWz55Sf57+75ZSxQDMxNzUxNTIyQGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA2OS9NMDUvQ0YvRDkvd0tnTWIxMzNLTUNDUW1pU0FBRHFKVUtHZk5FMzc1LmpwZ0DoirHlsI/lsI/ojLVcIiwgXCLmva7mtYHpn7PkuZBAMTk1MjEzNjVAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDQ5L00wNy8wNy9BRC93S2dLbDF2MzlrYVFSaU9IQUFGcFhPR2s3Sms1MDEucG5nQOWwj+advuaOqOiNkFwiLCBcIumCo+S6m+S4gOWQrOWwseaEn+WKqOeahOe7j+WFuOeUteW9seWQjeabskAzOTE2MzcyNUBodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwODMvTTAyL0VGLzhEL3dLZzVIVjhOVWY3QTh5ejNBQVRodzhMaHVaWTYyMS5qcGdA5Y+25LqR5bed55qE55Ge6bij6Z+z5LmQ5Y+wXCIsIFwi5pma5a6J5aaI5aaI552h5YmN5pWF5LqLQDI2MDc0NEBodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwNTgvTTA2LzA4LzlCL3dLZ0xnbHpUeVRqaU95MG9BQWNPVHYxNm9oZzgxNS5qcGdA5pma5a6J5aaI5aaIXCIsIFwi5rCR6Ze06K+h5pWF5LqLQDI5NTM1NzUwQGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA2OS9NMDgvQjIvRTUvd0tnTWVWM2dsU1RRUE5NZEFDeXQxX2tfbERJODEzLmpwZ0DpmL/mtanor7TkuovlhL9cIiwgXCLlj6TnrZ3lkI3mm7LmrKPotY/lj6TnrZ3nu4/lhbjlkI3mm7JAMTY3OTI4NTRAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDQ2L00wNC9BQS9COC93S2dLbGx0cWlpTEF6anlKQUFETFpNeTZ2WkkxMzYuanBnQOWWnOmprOadpeWVplwiLCBcIue7j+WFuOWPpOS5kC3lj6TnkLTljYHlpKflkI3mm7JANjMxNzI2NUBodHRwczovL2ltZzIuYmFpZHUuY29tL2l0L3U9MTMzMzgwNzkwMCwyOTQ4NjMwMzMxJmZtPTI1MyZmbXQ9YXV0byZhcHA9MTM4JmY9SlBFR0B4aWV4aWV4aWV4aWVcIiwgXCLjgJDkuJbnlYzkuIrmnIDnvo7nmoTpkqLnkLTmm7LjgJHlgqznnKDpn7PkuZBANDA1MDYzOUBodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwMTMvTTAwLzQwL0Y2L3dLZ0RYVmNLQ2dfQzZtSWxBQVVEcnYxZk9OazE0NS5wbmdA6Iul5Ly85pm05aSp57uN6ZKnXCIsIFwi44CK5aSc6Imy6ZKi55C05puy44CLQDI5MTcxOEBodHRwczovL2ltYWdldjIueG1jZG4uY29tL3N0b3JhZ2VzL2IzZDItYXVkaW9mcmVlaGlnaHFwcy85MS84RS9HTUNvT1NBRnF1RzJBQVU0endFS05vaFoucG5nQOWknOiJsumSoueQtOabsui1tea1t+a0i1wiLCBcIjjliIbpkp/vvIwzROeOr+Wig+WHj+WOi+WGpeaDs3zpn7PkuZDnlpfmhIhAMjgyNDY1NzJAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDY1L00wMi82RC8zRS93S2dNYWwxbF9DckRkNjJqQUFJVnNqeWxKVHM1MDYuanBnQOiAs+eVjF9FYXJtZXJzaW9uXCIsIFwi6L+35Lq655G+Lei9pui9veWKsueIhkRK55S16Z+z6Iie5puyQDU4OTk1MDdAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDg2L00wNS9DMy8xNi93S2c1Smw4SVpodXpfYTlrQUFHZnNveFM3Qjg4NzYuanBnQERK6L+35Lq655G+XCIsIFwi5rCR6LCj57K+6YCJIHwg5ZSx5bC95Lq66Ze055m+5oCBQDMxMzgwOTYyQGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA2OC9NMDIvQjMvQTkvd0tnTWJsM2dydFN6TUVHV0FBQTRiSC1ablNvOTEzLmpwZ0DoirHlsI/lsI/ojLVcIiwgXCLnu4/lhbjnlZnlo7DmnLpAMjkwOTk2QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vZ3JvdXA1MC9NMDgvRkEvRDIvd0tnS25WdnI5dkh6bWMyWEFBVXUtV21fUlNnMzU5LmpwZ0DkuLvmkq3lsI9EXCIsIFwi6K6p5L2g5b6q546v55m+6YGN5Lul5LiK55qE57uP5YW46Iux5paH5q2MQDQ4NjYzNjFAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDc3L00wNy81NS82Qy93S2dPMVY2TnhFU2hseFZIQUFBSlcyWmhzTTg1MTYuanBnQOS4gOeCueaKkuaDhemfs+S5kOmikemBk1wiLCBcIjEwMDDpppblkKzkuI3ohbvnmoTlpb3mrYzkuKjkvJjotKjmrYzljZVAMzI1MTk4MjRAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9zdG9yYWdlcy83ODI0LWF1ZGlvZnJlZWhpZ2hxcHMvOEUvMTAvR0t3UklNQUZseUQ4QUFITkpnRUZCb1phLmpwZWdA6ZmI6Ie76Ie7XCIsIFwi5bCP5LiD55qE56eB5oi/5q2MQDIzNzc3MUBodHRwczovL2ltYWdldjIueG1jZG4uY29tL3N0b3JhZ2VzL2E3NDAtYXVkaW9mcmVlaGlnaHFwcy81OC8yMC9HTUNvT1I4SGdybHpBQU85dFFIbDdiVnMuanBlZ0DlsI/kuINcIiwgXCLkuJbnlYzkuIrmnIDlpb3lkKznmoTnuq/pn7PkuZBAMTE2NTk4NzNAaHR0cHM6Ly9pbWFnZXYyLnhtY2RuLmNvbS9ncm91cDM1L00wMy84Qi81Qy93S2dKbkZvVDRBcURael9FQUFDX0FhUnBqdkE0OTcuanBnQOWtpF/pm7ZcIiwgXCLnu4/lhbjosavliaflkI3lrrblkI3mrrUxMDAw6aaWQDUzNDAzODc2QGh0dHBzOi8vaW1hZ2V2Mi54bWNkbi5jb20vc3RvcmFnZXMvODNjNy1hdWRpb2ZyZWVoaWdocXBzLzY4L0Y1L0NLd1JJVzRGSndnNkFBRXRFUURuRXdoYS5qcGdA5oiP5puy5Lyg5om/5Lq6XCIsIFwi6buE5qKF5oiP57uP5YW45ZCN5a625ZCN5q61MTAwMOmmlkA1MzgzMTY0NEBodHRwczovL2ltYWdldjIueG1jZG4uY29tL3N0b3JhZ2VzL2ZlNDYtYXVkaW9mcmVlaGlnaHFwcy9CRi83RS9HS3dSSURvRnUtVldBQUlHTkFFT1FVYWQuanBlZ0DmiI/mm7LkvKDmib/kurpcIiwgXCLlm73nsrnkuqzliadAMjgyMjQ3OUBodHRwczovL2ltYWdldjIueG1jZG4uY29tL2dyb3VwNTYvTTA3LzAyL0RDL3dLZ0xnRnlPQ1NPQmdLYXFBQUtWR0JMMFNxazg5NC5qcGdA5byY54S2XCJdJyk7ICAgICB9ICAgICBsZXQgeG1seSA9IEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3htbHkuanNvbicpKTsgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4bWx5Lmxlbmd0aDsgaSsrKSB7ICAgICAgICAgbGV0IGwgPSB4bWx5W2ldLnNwbGl0KCdAJyk7ICAgICAgICAgbGV0IGlkID0gbFsxXTsgICAgICAgICBkLnB1c2goeyAgICAgICAgICAgICB0aXRsZTogbFswXSwgICAgICAgICAgICAgY29sX3R5cGU6ICdjYXJkX3BpY18zJywgICAgICAgICAgICAgcGljOiBsWzJdLCAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjI2ltbWVyc2l2ZVRoZW1lIycpLnJ1bGUoKGwsIGlkKSA9PiB7cmVxdWlyZSgnaGlrZXI6Ly9maWxlcy9KbS9maWxlL3htbHkuanMnKTt9LCBsLCBpZCksICAgICAgICAgfSk7ICAgICB9ICAgICBzZXRSZXN1bHQoZCk7IH0pIiwidHlwZSI6InRleHRfMiJ9XSwiU2V0dGluZ0NvbmZpZyI6eyJteVlpWWFuIjoi5Lq655Sf5b6X5oSP6aG75bC95qyi77yM6I6r5L2/6YeR5qi956m65a+55pyI44CCfHzojqvmhIHliY3ot6/ml6Dnn6Xlt7HvvIzlpKnkuIvosIHkurrkuI3or4blkJvjgIIiLCJ0b3BQaWMiOiJoaWtlcjovL2ltYWdlcy9sb2dvIiwiYXZhdGFyUGljIjoiIiwiaGl0b2tvdG9Td2l0Y2giOnRydWUsImxvZ29UeXBlIjoicGljXzFfY2FyZCIsIm1heEhvbWVDb3VudCI6MTIsIm15VmFyaWFibGVzIjoiIn19